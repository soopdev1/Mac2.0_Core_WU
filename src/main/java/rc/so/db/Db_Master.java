package rc.so.db;

import static com.google.common.base.Splitter.on;
import static com.google.common.base.Splitter.onPattern;
import static com.google.common.collect.Lists.newLinkedList;
import com.google.common.util.concurrent.AtomicDouble;
import rc.so.entity.Agency;
import rc.so.entity.Aggiornamenti_mod;
import rc.so.entity.BCE;
import rc.so.entity.BlacklistM;
import rc.so.entity.Booking;
import rc.so.entity.Branch;
import rc.so.entity.Branchbudget;
import rc.so.entity.Brand;
import rc.so.entity.Ch_transaction;
import static rc.so.entity.Ch_transaction.formatBB;
import static rc.so.entity.Ch_transaction.formatTilltr;
import static rc.so.entity.Ch_transaction.formatType;
import static rc.so.entity.Ch_transaction.formatType_new;
import rc.so.entity.Ch_transaction_doc;
import rc.so.entity.Ch_transaction_file;
import rc.so.entity.Ch_transaction_refund;
import rc.so.entity.Ch_transaction_value;
import rc.so.entity.City;
import rc.so.entity.Client;
import rc.so.entity.Client_CZ;
import rc.so.entity.Codici_sblocco;
import rc.so.entity.Codici_sblocco_file;
import rc.so.entity.Company;
import rc.so.entity.Company_attach;
import rc.so.entity.Currency;
import rc.so.entity.CustomerKind;
import rc.so.entity.Document;
import rc.so.entity.ET_change;
import static rc.so.entity.ET_change.format_tofrom_brba_new;
import rc.so.entity.Figures;
import rc.so.entity.IT_change;
import rc.so.entity.Kyc_parameter;
import static rc.so.entity.Kyc_parameter.format_Type_KYC;
import rc.so.entity.Marketing;
import rc.so.entity.NC_category;
import rc.so.entity.NC_causal;
import rc.so.entity.NC_transaction;
import rc.so.entity.NC_vatcode;
import rc.so.entity.Newsletters;
import rc.so.entity.Office;
import rc.so.entity.Office_sp;
import rc.so.entity.Openclose;
import static rc.so.entity.Openclose.formatType_r;
import rc.so.entity.Paymat_conf;
import rc.so.entity.Rate_history;
import rc.so.entity.Real_oc_change;
import rc.so.entity.Real_oc_nochange;
import rc.so.entity.Real_oc_pos;
import rc.so.entity.Sizecuts;
import rc.so.entity.Stock;
import rc.so.entity.Stock_report;
import rc.so.entity.Taglio;
import rc.so.entity.Till;
import static rc.so.entity.Till.formatDescTill;
import static rc.so.entity.Till.isSafeTill;
import rc.so.entity.Users;
import rc.so.entity.VATcode;
import rc.so.excel.DailyChange_CG;
import rc.so.report.BranchStockInquiry_value;
import rc.so.report.CustomerTransactionList_value;
import rc.so.report.DailyBank;
import static rc.so.report.DailyBank.get_obj;
import rc.so.report.DailyCOP;
import static rc.so.report.DailyCOP.get_obj;
import rc.so.report.DailyKind;
import rc.so.report.Daily_value;
import rc.so.report.FromBranchingSheet_value;
import rc.so.report.HeavyTransactionList_value;
import rc.so.report.InsuranceTransactionList_value;
import rc.so.report.InternalTransferList_value;
import rc.so.report.NoChangeBonus_value;
import rc.so.report.NoChangeCategoryTransactionList_value;
import rc.so.report.NoChangeFromBranchingSheet_value;
import rc.so.report.NoChangeInternalTransferList_value;
import rc.so.report.NoChangeToBranchingSheet_value;
import rc.so.report.NoChangeTransactionListForUser_value;
import rc.so.report.NoChangeTransactionList_value;
import rc.so.report.OfficeStockPriceBranch_value;
import rc.so.report.OfficeStockPrice_value;
import rc.so.report.Openclose_Anal_value;
import rc.so.report.Openclose_Anal_value_stock;
import rc.so.report.Openclose_Error_value;
import rc.so.report.Openclose_Synt_value;
import rc.so.report.RegisterBuyMonthly_value;
import rc.so.report.RegisterMonthly_value;
import rc.so.report.RegisterSellMonthly_value;
import rc.so.report.StockInquiry_value;
import rc.so.report.StockPrice_value;
import rc.so.report.StockReport_value;
import rc.so.report.TaxFree_value;
import rc.so.report.TillTransactionListBB_value;
import rc.so.report.TillTransactionListCurrency_value;
import rc.so.report.TillTransactionList_value;
import rc.so.report.ToBankingSheet_value;
import rc.so.report.ToBranchingSheet_value;
import rc.so.report.TotalStockReport_Res_fase1;
import rc.so.report.TotalStockReport_Res_fase2;
import rc.so.report.TotalStockReport_value;
import rc.so.report.TransactionforHeavyTransactionList;
import rc.so.report.WesternUnionService_value;
import rc.so.reportcentrale.C_Agency_value;
import rc.so.reportcentrale.C_AnalysisCurrency_value;
import rc.so.reportcentrale.C_AnalysisDetailsTransactionCertificationExtraCEEforBranchAndPeriod_value;
import rc.so.reportcentrale.C_AnalysisReprintNoChange_value;
import rc.so.reportcentrale.C_AnalysisReprint_value;
import rc.so.reportcentrale.C_CashierDetails_value;
import rc.so.reportcentrale.C_CashierPerformance_value;
import rc.so.reportcentrale.C_ChangeInternetBookingForBranches_value;
import rc.so.reportcentrale.C_ChangeMovimentDetailForBranches_value;
import rc.so.reportcentrale.C_ChangeMovimentForAgency_value;
import rc.so.reportcentrale.C_ChangeMovimentForBranches_value;
import rc.so.reportcentrale.C_ChangeVolumeAffairCashAdvance_value;
import rc.so.reportcentrale.C_ChangeVolumeAffair_value;
import rc.so.reportcentrale.C_CloseBranch_value;
import rc.so.reportcentrale.C_CustomerCareRefund_value;
import rc.so.reportcentrale.C_FreeTax_AmountBranch_value;
import rc.so.reportcentrale.C_FreeTax_AmountNation_value;
import rc.so.reportcentrale.C_FreeTax_Analisys_value;
import rc.so.reportcentrale.C_FreeTax_BranchCausal_value;
import rc.so.reportcentrale.C_FreeTax_BranchCurrency_value;
import rc.so.reportcentrale.C_FreeTax_Branch_value;
import rc.so.reportcentrale.C_FreeTax_CausalBranch_value;
import rc.so.reportcentrale.C_FreeTax_NationAmount_value;
import rc.so.reportcentrale.C_InterbranchDetails_value;
import rc.so.reportcentrale.C_Interbranch_value;
import rc.so.reportcentrale.C_NoChangeMovimentForBranches_value;
import rc.so.reportcentrale.C_SizeAndQuantity_value;
import rc.so.reportcentrale.C_TransactionRegisterDetail_value;
import rc.so.reportcentrale.C_TransactionRegisterSummary_value;
import rc.so.reportcentrale.C_TrimestraleCZK_value;
import rc.so.reportcentrale.C_WesternUnion_value;
import rc.so.reportcentrale.C_freeTaxPivotTotale_value;
import rc.so.rest.Paymat_new;
import static rc.so.util.Constant.codnaz;
import static rc.so.util.Constant.comma;
import static rc.so.util.Constant.df_ita;
import static rc.so.util.Constant.is_CZ;
import static rc.so.util.Constant.is_IT;
import static rc.so.util.Constant.is_UK;
import static rc.so.util.Constant.nation;
import static rc.so.util.Constant.newpread;
import static rc.so.util.Constant.patternhours_d;
import static rc.so.util.Constant.patternnormdate;
import static rc.so.util.Constant.patternnormdate_filter;
import static rc.so.util.Constant.patternsql;
import static rc.so.util.Constant.patternsql_f;
import static rc.so.util.Constant.patternsqldate;
import static rc.so.util.Constant.patterntsdate;
import rc.so.util.Engine;
import static rc.so.util.Engine.formatALCurrency;
import static rc.so.util.Engine.formatALNC_category;
import static rc.so.util.Engine.formatALNC_causal;
import static rc.so.util.Engine.formatAL_Till;
import static rc.so.util.Engine.formatBankBranch;
import static rc.so.util.Engine.formatBankBranchReport;
import static rc.so.util.Engine.formatStatusCodiceSblocco;
import static rc.so.util.Engine.formatTypeTransaction_stockprice;
import static rc.so.util.Engine.getALCurrency;
import static rc.so.util.Engine.getFil;
import static rc.so.util.Engine.getNC_category;
import static rc.so.util.Engine.getNC_causal;
import static rc.so.util.Engine.get_Branch;
import static rc.so.util.Engine.get_Value_history_BB;
import static rc.so.util.Utility.convMd5;
import static rc.so.util.Utility.correggiValueJS;
import static rc.so.util.Utility.fDate_get_last_modify_rate;
import static rc.so.util.Utility.fd;
import static rc.so.util.Utility.formatAL;
import static rc.so.util.Utility.formatALN;
import static rc.so.util.Utility.formatAL_city;
import static rc.so.util.Utility.formatDoubleforMysql;
import static rc.so.util.Utility.formatMysqltoDisplay;
import static rc.so.util.Utility.formatStringtoStringDate;
import static rc.so.util.Utility.formatperOAM;
import static rc.so.util.Utility.generaId;
import static rc.so.util.Utility.getControvalore;
import static rc.so.util.Utility.getControvaloreOFFSET;
import static rc.so.util.Utility.getDT;
import static rc.so.util.Utility.getHostCentrale;
import static rc.so.util.Utility.getValueDiff;
import static rc.so.util.Utility.getValueDiff_R;
import static rc.so.util.Utility.parseDoubleR;
import static rc.so.util.Utility.parseDoubleR_CZ;
import static rc.so.util.Utility.parseIntR;
import static rc.so.util.Utility.parseString;
import static rc.so.util.Utility.parseStringDate;
import static rc.so.util.Utility.removeDuplicatesAL;
import static rc.so.util.Utility.removeDuplicatesALAr;
import static rc.so.util.Utility.removeDuplicatesAL_localcurr;
import static rc.so.util.Utility.replace_SU;
import static rc.so.util.Utility.roundDouble;
import static rc.so.util.Utility.roundDoubleandFormat;
import static rc.so.util.Utility.sleeping;
import static rc.so.util.Utility.subDays;
import static rc.so.util.Utility.visualizzaStringaMySQL;
import java.io.IOException;
import static java.lang.Class.forName;
import static java.lang.Integer.parseInt;
import static java.lang.String.format;
import static java.lang.String.valueOf;
import static java.lang.System.out;
import static java.lang.Thread.currentThread;
import java.sql.Connection;
import static java.sql.DriverManager.getConnection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import static java.sql.ResultSet.CONCUR_UPDATABLE;
import static java.sql.ResultSet.TYPE_SCROLL_INSENSITIVE;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
import static java.sql.Statement.RETURN_GENERATED_KEYS;
import java.util.ArrayList;
import static java.util.Collections.sort;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import static java.util.Locale.ITALY;
import java.util.Properties;
import static java.util.stream.Collectors.toList;
import javax.servlet.ServletException;
import static org.apache.commons.lang3.RandomStringUtils.randomAlphabetic;
import static org.apache.commons.lang3.RandomStringUtils.randomAlphanumeric;
import static org.apache.commons.lang3.RandomStringUtils.randomNumeric;
import org.apache.commons.lang3.StringUtils;
import static org.apache.commons.lang3.StringUtils.leftPad;
import static org.apache.commons.lang3.StringUtils.replace;
import static org.apache.commons.lang3.StringUtils.substring;
import static org.apache.commons.lang3.StringUtils.substringAfterLast;
import static org.apache.commons.lang3.exception.ExceptionUtils.getStackTrace;
import org.joda.time.DateTime;
import static org.joda.time.format.DateTimeFormat.forPattern;
import org.joda.time.format.DateTimeFormatter;
import static rc.so.util.Constant.rb;

/**
 *
 * @author rcosco
 */
public class Db_Master {

    /**
     *
     */
    public Connection c = null;
    private static final String filiale = getFil()[0];

    /**
     * Constructor
     */
    public Db_Master() {
        this(false);
    }

    /**
     *
     * @return
     */
    public Connection getC() {
        return c;
    }

    /**
     *
     * @param c
     */
    public void setC(Connection c) {
        this.c = c;
    }

    /**
     *
     * @param central
     */
    public Db_Master(boolean central) {
        if (central) {
            try {
                
                String drivername = rb.getString("db.driver");
                String typedb = rb.getString("db.tipo");
                String user = "maccorp";
                String pwd = "M4cc0Rp";
                
                String host = getHostCentrale();
                forName(drivername).newInstance();
                Properties p = new Properties();
                p.put("user", user);
                p.put("password", pwd);
                p.put("useUnicode", "true");
                p.put("characterEncoding", "UTF-8");
                p.put("useSSL", "false");
                p.put("connectTimeout", "1000");
                p.put("useUnicode", "true");
                p.put("useJDBCCompliantTimezoneShift", "true");
                p.put("useLegacyDatetimeCode", "false");
                p.put("serverTimezone", "Europe/Rome");
                this.c = getConnection("jdbc:" + typedb + ":" + host, p);
            } catch (Exception ex0) {
                if (this.c != null) {
                    try {
                        this.c.close();
                    } catch (Exception ex1) {
                    }
                }
                this.c = null;
            }
        } else {
            
            String drivername = rb.getString("db.driver");
            String typedb = rb.getString("db.tipo");
//////////////////DATI CONNESSIONE//////////////////////////////////////
//////////////////FILIALE///////////////////////////////////////////////
//            String user = "root";
//            String pwd = "root";
//            String host = "//localhost:3306/maccorp";
////            String host = "//192.168.1.36:3306/maccorp"; //  MAC TEST
//            String host = "//192.168.9.40:3306/maccorp"; //  MAC CZ TEST
//            String host = "//192.168.65.2:3306/maccorp"; //  
//////////////////CENTRALE///////////////////////////////////////////////
            String user = "maccorp";
            String pwd = "M4cc0Rp";
            String host = getHostCentrale();
////////////
            try {
                forName(drivername).newInstance();
                Properties p = new Properties();
                p.put("user", user);
                p.put("password", pwd);
                p.put("useUnicode", "true");
                p.put("characterEncoding", "UTF-8");
                p.put("useSSL", "false");
                p.put("connectTimeout", "1000");
                p.put("useUnicode", "true");
                p.put("useJDBCCompliantTimezoneShift", "true");
                p.put("useLegacyDatetimeCode", "false");
                p.put("serverTimezone", "Europe/Rome");
                this.c = getConnection("jdbc:" + typedb + ":" + host, p);
                if (pwd.equalsIgnoreCase("root")) {
                    this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).execute("SET innodb_lock_wait_timeout = 6000;");
                }
            } catch (Exception ex) {
                out.println("HOST ERROR: " + host);
                ex.printStackTrace();
                if (this.c != null) {
                    try {
                        this.c.close();
                    } catch (Exception ex1) {
                    }
                }
                this.c = null;
            }
        }
    }

    /**
     * Constructor
     */
    public void closeDB() {
        try {
            if (this.c != null) {
                this.c.close();
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    /**
     *
     * @return
     */
    public String curdate() {
        try {
            String sql = "SELECT curdate()";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ResultSet rs = ps.executeQuery();
            if (rs.next()) {
                return rs.getString(1);
            }
        } catch (Exception ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return "";
    }

    /**
     *
     * @return
     */
    public ArrayList<String> country_ROGUE() {
        ArrayList<String> out = new ArrayList<>();
        try {
            String sql = "SELECT nazione,de_nazione,alpha_code,fg_area_geografica FROM nazioni order by de_nazione";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                if (rs.getString(1).equals("002") || rs.getString(1).equals("274")
                        || rs.getString(1).equals("074") || rs.getString(1).equals("159")
                        || rs.getString(1).equals("039") || rs.getString(1).equals("038")
                        || rs.getString(1).equals("136") || rs.getString(1).equals("065")
                        || rs.getString(1).equals("132") || rs.getString(1).equals("121")
                        || rs.getString(1).equals("042")) {
                    out.add(rs.getString(1));
                }
            }
        } catch (Exception ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @return
     */
    public ArrayList<String[]> country() {
        ArrayList<String[]> out = new ArrayList<>();
        try {
            String sql = "SELECT nazione,de_nazione,alpha_code,fg_area_geografica FROM nazioni order by de_nazione";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                String[] o1 = {rs.getString(1), visualizzaStringaMySQL(rs.getString(2)), rs.getString(3), rs.getString(4)};
                out.add(o1);
            }
        } catch (Exception ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @param cod
     * @return
     */
    public String[] get_country(String cod) {
        try {
            String sql = "SELECT nazione,de_nazione,alpha_code,fg_area_geografica FROM nazioni WHERE nazione = ? order by de_nazione";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, cod);
            ResultSet rs = ps.executeQuery();
            if (rs.next()) {
                String[] o1 = {rs.getString(1), visualizzaStringaMySQL(rs.getString(2)), rs.getString(3), rs.getString(4)};
                return o1;
            }
        } catch (Exception ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return null;
    }

    /**
     *
     * @return
     */
    public ArrayList<String[]> country_cf() {
        ArrayList<String[]> out = new ArrayList<>();
        try {
            String sql = "SELECT n.nazione,n.de_nazione,cf.codice_fiscale,cf.dd_costituzione,cf.dd_soppressione,cf.variazione_codice_fiscale FROM codici_fiscali_esteri cf, nazioni n where cf.denominazione=n.de_nazione GROUP BY cf.codice_fiscale ORDER BY n.de_nazione";
            
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                String[] o1 = {rs.getString(1), visualizzaStringaMySQL(rs.getString(2)), rs.getString(3), rs.getString(4), rs.getString(5), rs.getString(6)};
                out.add(o1);
            }
        } catch (Exception ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @return
     */
    public ArrayList<String[]> district() {
        ArrayList<String[]> out = new ArrayList<>();
        try {
            String sql = "SELECT provincia,de_provincia,id_provincia FROM province group by provincia order by de_provincia";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                String[] o1 = {rs.getString(1), visualizzaStringaMySQL(rs.getString(2)), rs.getString(3)};
                out.add(o1);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @param cod
     * @return
     */
    public String[] get_district(String cod) {
        try {
            String sql = "SELECT provincia,de_provincia,id_provincia FROM province WHERE provincia = ? group by provincia order by de_provincia";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            
            ps.setString(1, cod);
            ResultSet rs = ps.executeQuery();
            if (rs.next()) {
                String[] o1 = {rs.getString(1), visualizzaStringaMySQL(rs.getString(2)), rs.getString(3)};
                return o1;
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return null;
    }

    /**
     *
     * @return
     */
    public ArrayList<String[]> identificationCard() {
        ArrayList<String[]> out = new ArrayList<>();
        try {
            String sql = "SELECT tipo_documento_identita,de_tipo_documento_identita,OAM_code,reader_robot FROM tipologiadocumento order by de_tipo_documento_identita";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                String[] o1 = {rs.getString(1), visualizzaStringaMySQL(rs.getString(2)), rs.getString(3), rs.getString(4)};
                out.add(o1);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @return
     */
    public ArrayList<String[]> city_Italy() {
        ArrayList<String[]> out = new ArrayList<>();
        try {
            String sql = "SELECT codice_fiscale,variazione_cf,comune,provincia,variazione_provincia,id,cap "
                    + "FROM codici_fiscali_italia ORDER BY comune,data_costituzione";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                String[] o1 = {rs.getString(1), rs.getString(2), visualizzaStringaMySQL(rs.getString(3)), rs.getString(4), rs.getString(5), rs.getString(6), rs.getString(7)};
                out.add(o1);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @param likenew
     * @return
     */
    public ArrayList<String[]> city_Italy_like(String likenew) {
        ArrayList<String[]> out = new ArrayList<>();
        try {
            String sql = "SELECT codice_fiscale,variazione_cf,comune,provincia,variazione_provincia,id,cap "
                    + "FROM codici_fiscali_italia Where comune like ? ORDER BY comune,data_costituzione";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, "%" + likenew);
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                String[] o1 = {rs.getString(1), rs.getString(2), visualizzaStringaMySQL(rs.getString(3)), rs.getString(4), rs.getString(5), rs.getString(6), rs.getString(7)};
                out.add(o1);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @param codfis
     * @return
     */
    public String city_Italy(String codfis) {
        try {
            String sql = "SELECT provincia FROM codici_fiscali_italia WHERE codice_fiscale = ?";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, codfis);
            ResultSet rs = ps.executeQuery();
            if (rs.next()) {
                return rs.getString(1);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return null;
    }

    /**
     *
     * @param com
     * @return
     */
    public ArrayList<City> query_city_Italy(String com) {
        ArrayList<City> out = new ArrayList<>();
        try {
            String sql = "SELECT codice_avv_bancario,denominazione FROM comuni_apm WHERE denominazione like ? ORDER BY denominazione";
            PreparedStatement ps1 = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps1.setString(1, "%" + com + "%");
            ResultSet rs1 = ps1.executeQuery();
            while (rs1.next()) {
                City c1 = new City(rs1.getString(1), rs1.getString(2));
                if (rs1.getString(2).trim().equalsIgnoreCase(com.trim())) {
                    out.add(0, c1);
                } else {
                    out.add(c1);
                }
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @return
     */
    public ArrayList<String[]> city_Italy_APM() {
        ArrayList<String[]> out = new ArrayList<>();
        try {
            String sql = "SELECT * FROM comuni_apm ORDER BY denominazione";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                String[] o1 = {rs.getString(1), visualizzaStringaMySQL(rs.getString(2))};
                out.add(o1);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @param likenew
     * @return
     */
    public ArrayList<String[]> city_Italy_APM_like(String likenew) {
        ArrayList<String[]> out = new ArrayList<>();
        try {
            String sql = "SELECT * FROM comuni_apm WHERE denominazione like ? ORDER BY denominazione";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, likenew + "%");
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                String[] o1 = {rs.getString(1), visualizzaStringaMySQL(rs.getString(2))};
                out.add(o1);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @param cod
     * @return
     */
    public String[] getCity_apm(String cod) {
        try {
            String sql = "SELECT * FROM comuni_apm WHERE codice_avv_bancario = ?";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, cod);
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                String[] o1 = {rs.getString(1), visualizzaStringaMySQL(rs.getString(2)), rs.getString(3)};
                return o1;
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return null;
    }

    /**
     *
     * @return
     */
    public ArrayList<String[]> agency() {
        ArrayList<String[]> out = new ArrayList<>();
        try {
            String sql = "SELECT agenzia,de_agenzia FROM agenzie order by de_agenzia;";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                String[] o1 = {rs.getString(1), visualizzaStringaMySQL(rs.getString(2))};
                out.add(o1);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @return
     */
    public ArrayList<String[]> kind() {
        ArrayList<String[]> out = new ArrayList<>();
        try {
            String sql = "SELECT supporto,de_supporto,fg_tipo_incasso,buy_comm_soglia_causale,sell_comm_soglia_causale,commissione_acquisto,commissione_vendita FROM supporti WHERE buy = ? ORDER BY fg_sys_trans";
            
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, "1");
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                String[] o1 = {rs.getString(1), visualizzaStringaMySQL(rs.getString(2)), rs.getString(3), rs.getString(4), rs.getString(5), rs.getString(6), rs.getString(7)};
                out.add(o1);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @return
     */
    public ArrayList<String[]> figures() {
        ArrayList<String[]> out = new ArrayList<>();
        try {
            String sql = "SELECT valuta,de_valuta,cambio_acquisto,cambio_vendita FROM valute ORDER BY valuta";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                String[] o1 = {rs.getString(1), visualizzaStringaMySQL(rs.getString(2)), rs.getString(3), rs.getString(4)};
                out.add(o1);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @return
     */
    public ArrayList<String[]> undermincommjustify() {
        ArrayList<String[]> out = new ArrayList<>();
        try {
            String sql = "SELECT id_under_min_comm_justify,de_under_min_comm_justify,fg_blocco FROM under_min_comm_justify ORDER BY de_under_min_comm_justify";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                String[] o1 = {rs.getString(1), visualizzaStringaMySQL(rs.getString(2)), rs.getString(3)};
                out.add(o1);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }
    
    public ArrayList<String[]> unlockratejustify() {
        ArrayList<String[]> out = new ArrayList<>();
        try {
            String sql = "SELECT id_unlockrate_justify,de_unlockrate_justify,fg_blocco FROM unlockrate_justify ORDER BY de_unlockrate_justify";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                String[] o1 = {rs.getString(1), visualizzaStringaMySQL(rs.getString(2)), rs.getString(3)};
                out.add(o1);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @return
     */
    public ArrayList<String[]> kindcommissionefissa() {
        ArrayList<String[]> out = new ArrayList<>();
        try {
            String sql = "SELECT id_kind_commissione_fissa,de_kind_commissione_fissa,ip_kind_commissione_fissa,fg_blocco FROM kind_commissione_fissa WHERE filiale = ? ORDER BY de_kind_commissione_fissa";
            
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, getCodLocal(true)[0]);
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                String[] o1 = {StringUtils.leftPad(rs.getString(1), 3, "0"),
                    visualizzaStringaMySQL(rs.getString(2)), rs.getString(3), rs.getString(4)};
                out.add(o1);
            }
        } catch (Exception ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @return
     */
    public ArrayList<String[]> kindcommissionefissaenabled() {
        ArrayList<String[]> out = new ArrayList<>();
        try {
            String sql = "SELECT id_kind_commissione_fissa,de_kind_commissione_fissa,ip_kind_commissione_fissa,fg_blocco "
                    + "FROM kind_commissione_fissa WHERE filiale = ? AND fg_blocco = ? ORDER BY de_kind_commissione_fissa";
            
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, getCodLocal(true)[0]);
            ps.setString(2, "0");
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                String[] o1 = {leftPad(rs.getString(1), 3, "0"), visualizzaStringaMySQL(rs.getString(2)), rs.getString(3), rs.getString(4)};
                out.add(o1);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @param filiale
     * @return
     */
    public ArrayList<String[]> kindcommissionefissa(String filiale) {
        ArrayList<String[]> out = new ArrayList<>();
        try {
            String sql = "SELECT id_kind_commissione_fissa,de_kind_commissione_fissa,ip_kind_commissione_fissa,fg_blocco FROM kind_commissione_fissa WHERE filiale = ? ORDER BY de_kind_commissione_fissa";
            
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, filiale);
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                String[] o1 = {leftPad(rs.getString(1), 3, "0"), visualizzaStringaMySQL(rs.getString(2)), rs.getString(3), rs.getString(4)};
                out.add(o1);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @return
     */
    public ArrayList<String[]> commissione_fissa() {
        ArrayList<String[]> out = new ArrayList<>();
        try {
            String sql = "SELECT id_kind_commissione_fissa,de_kind_commissione_fissa,ip_kind_commissione_fissa FROM kind_commissione_fissa WHERE filiale = ? ORDER BY de_kind_commissione_fissa";
            
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, getCodLocal(true)[0]);
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                String[] o1 = {leftPad(rs.getString(1), 3, "0"), visualizzaStringaMySQL(rs.getString(2)), rs.getString(3)};
                out.add(o1);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @param filiale
     * @return
     */
    public ArrayList<String[]> credit_card(String filiale) {
        ArrayList<String[]> out = new ArrayList<>();
        try {
            String sql = "SELECT carta_credito,de_carta_credito,fg_annullato FROM carte_credito WHERE filiale = ? order by carta_credito";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, filiale);
            ResultSet rs = ps.executeQuery();
            
            while (rs.next()) {
                String[] o1 = {leftPad(rs.getString(1), 3, "0"), visualizzaStringaMySQL(rs.getString(2)), rs.getString(3)};
                out.add(o1);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @return
     */
    public ArrayList<String[]> credit_card_enabled() {
        ArrayList<String[]> out = new ArrayList<>();
        try {
            String sql = "SELECT carta_credito,de_carta_credito,fg_annullato FROM carte_credito WHERE fg_annullato = ? AND filiale = ? order by carta_credito";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, "0");
            ps.setString(2, getCodLocal(true)[0]);
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                String[] o1 = {leftPad(rs.getString(1), 3, "0"), visualizzaStringaMySQL(rs.getString(2)), rs.getString(3)};
                out.add(o1);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @return
     */
    public ArrayList<String[]> credit_card_enabled_SELL() {
        ArrayList<String[]> out = new ArrayList<>();
        try {
            String sql = "SELECT carta_credito,de_carta_credito,fg_annullato FROM carte_credito WHERE fg_annullato = ? "
                    + "AND filiale = ? AND carta_credito <>'999' order by carta_credito";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, "0");
            ps.setString(2, getCodLocal(true)[0]);
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                String[] o1 = {leftPad(rs.getString(1), 3, "0"), visualizzaStringaMySQL(rs.getString(2)), rs.getString(3)};
                out.add(o1);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @return
     */
    public ArrayList<String[]> fixed_commission_range() {
        ArrayList<String[]> out = new ArrayList<>();
        try {
            String sql = "SELECT supporto,minimo,massimo,commissione_buy,commissione_sell,fg_blocco FROM commissione_fissa WHERE filiale = ? order by supporto,cast(minimo AS decimal (10,0))";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, getCodLocal(true)[0]);
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                String[] o1 = {rs.getString(1), rs.getString(2), rs.getString(3), rs.getString(4), rs.getString(5), rs.getString(6)};
                out.add(o1);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @param filiale
     * @return
     */
    public ArrayList<String[]> fixed_commission_range(String filiale) {
        ArrayList<String[]> out = new ArrayList<>();
        try {
            String sql = "SELECT supporto,minimo,massimo,commissione_buy,commissione_sell,fg_blocco FROM commissione_fissa WHERE filiale = ? order by supporto,cast(minimo AS decimal (10,0))";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, filiale);
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                String[] o1 = {rs.getString(1), rs.getString(2), rs.getString(3), rs.getString(4), rs.getString(5), rs.getString(6)};
                out.add(o1);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @return
     */
    public ArrayList<String[]> fixed_commission_range_enabled() {
        ArrayList<String[]> out = new ArrayList<>();
        try {
            String sql = "SELECT supporto,minimo,massimo,commissione_buy,commissione_sell,fg_blocco FROM commissione_fissa WHERE fg_blocco = ? AND filiale = ? order by supporto,cast(minimo AS decimal (10,0))";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, "0");
            ps.setString(2, getCodLocal(true)[0]);
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                String[] o1 = {rs.getString(1), rs.getString(2), rs.getString(3), rs.getString(4), rs.getString(5), rs.getString(6)};
                out.add(o1);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @return
     */
    public String logicoperator() {
        try {
            String sql = "SELECT operator FROM logical WHERE cod_nazione = ?";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, nation);
            ResultSet rs = ps.executeQuery();
            if (rs.next()) {
                return rs.getString(1);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return "*";
    }

    /**
     *
     * @return
     */
    public ArrayList<String[]> kind_figures_openclose() {
        ArrayList<String[]> out = new ArrayList<>();
        try {
            String fil = getCodLocal(true)[0];
            String sql = "SELECT v.valuta,v.de_valuta,s.supporto,su.de_supporto FROM supporti_valuta s,valute v,supporti su WHERE s.valuta = v.valuta"
                    + " AND s.supporto=su.supporto AND v.filiale = ? "
                    + "AND v.filiale=s.filiale AND su.filiale = ? GROUP BY v.valuta,s.supporto ORDER BY v.valuta,s.supporto";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, fil);
            ps.setString(2, fil);
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                String[] o1 = {rs.getString(1), visualizzaStringaMySQL(rs.getString(2)),
                    rs.getString(3), visualizzaStringaMySQL(rs.getString(4))};
                out.add(o1);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @return
     */
    public List<Sizecuts> figures_sizecuts_enabled() {
        List<Sizecuts> out = new ArrayList<>();
        try {
            String sql = "SELECT * FROM valute_tagli WHERE filiale = ? AND fg_stato = ? order by valuta ASC,CAST(ip_taglio AS DECIMAL(12,2)) DESC";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, getCodLocal(true)[0]);
            ps.setString(2, "1");
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                out.add(new Sizecuts(rs.getString(1).trim(), rs.getString(2).trim(), rs.getString(3).trim(), rs.getString(4).trim()));
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @return
     */
    public List<Sizecuts> figures_sizecuts_all() {
        List<Sizecuts> out = new ArrayList<>();
        try {
            String sql = "SELECT * FROM valute_tagli WHERE filiale = ? order by valuta ASC,CAST(ip_taglio AS DECIMAL(12,2)) DESC";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, getCodLocal(true)[0]);
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                out.add(new Sizecuts(rs.getString(1).trim(), rs.getString(2).trim(), rs.getString(3).trim(), rs.getString(4).trim()));
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

//    public ArrayList<String[]> figures_sizecuts() {
//        ArrayList<String[]> out = new ArrayList<>();
//        try {
//            String sql = "SELECT valuta,ip_taglio FROM valute_tagli WHERE filiale = ? order by valuta ASC,CAST(ip_taglio AS DECIMAL(12,2)) DESC";
//            PreparedStatement ps = this.c.prepareStatement(sql, ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE);
//            ps.setString(1, getCodLocal(true)[0]);
//            ResultSet rs = ps.executeQuery();
//            while (rs.next()) {
//                String[] o1 = {rs.getString(1).trim(), rs.getString(2).trim()};
//                out.add(o1);
//            }
//        } catch (SQLException ex) {
//            insertTR("E", "System", Thread.currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
//        }
//        return out;
//    }
    /**
     *
     * @return
     */
    public ArrayList<String[]> list_nochange() {
        ArrayList<String[]> out = new ArrayList<>();
        try {
            String sql = "SELECT gruppo_nc,de_gruppo_nc,fg_tipo_transazione_nc,ip_prezzo_nc,fg_assicurazione FROM nc_tipologia WHERE annullato = ? AND fg_tipo_transazione_nc = ? ORDER BY gruppo_nc";
            
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, "0");
            ps.setString(2, "2");
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                String[] o1 = {rs.getString(1), visualizzaStringaMySQL(rs.getString(2)), rs.getString(3), rs.getString(4), rs.getString(5)};
                out.add(o1);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @return
     */
    public ArrayList<String[]> list_nochange_all() {
        ArrayList<String[]> out = new ArrayList<>();
        try {
            String sql = "SELECT gruppo_nc,de_gruppo_nc,fg_tipo_transazione_nc,ip_prezzo_nc,fg_assicurazione FROM nc_tipologia WHERE annullato = ? ORDER BY gruppo_nc";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, "0");
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                String[] o1 = {rs.getString(1), visualizzaStringaMySQL(rs.getString(2)), rs.getString(3), rs.getString(4), rs.getString(5)};
                out.add(o1);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @return
     */
    public ArrayList<String[]> nc_department() {
        ArrayList<String[]> out = new ArrayList<>();
        try {
            String sql = "SELECT * FROM department order by descrizione;";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                String[] o1 = {rs.getString(1), visualizzaStringaMySQL(rs.getString(2))};
                out.add(o1);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @return
     */
    public ArrayList<String[]> nc_kind() {
        ArrayList<String[]> out = new ArrayList<>();
        try {
            String sql = "SELECT codice,descrizione,et1,et2 FROM nc_kind WHERE attivo = ? order by descrizione;";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, "1");
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                String[] o1 = {rs.getString(1), visualizzaStringaMySQL(rs.getString(2)), rs.getString(3), rs.getString(4)};
                out.add(o1);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @return
     */
    public ArrayList<String[]> nc_kind_order() {
        ArrayList<String[]> out = new ArrayList<>();
        try {
            String sql = "SELECT codice,descrizione,et1,et2 FROM nc_kind WHERE attivo = ? order by codice";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, "1");
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                String[] o1 = {rs.getString(1), visualizzaStringaMySQL(rs.getString(2)), rs.getString(3), rs.getString(4)};
                out.add(o1);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @return
     */
    public ArrayList<String[]> nc_kind_orderALL() {
        ArrayList<String[]> out = new ArrayList<>();
        try {
            String sql = "SELECT codice,descrizione,et1,et2 FROM nc_kind order by codice";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                String[] o1 = {rs.getString(1), visualizzaStringaMySQL(rs.getString(2)), rs.getString(3), rs.getString(4)};
                out.add(o1);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @param codice
     * @return
     */
    public String localfigures(String codice) {
        String localfigures = "Local";
        try {
            String sql = "SELECT de_valuta FROM valute where valuta = ?";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, codice);
            ResultSet rs = ps.executeQuery();
            if (rs.next()) {
                return visualizzaStringaMySQL(rs.getString(1));
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return localfigures;
    }

    /**
     *
     * @return
     */
    public ArrayList<String[]> listCompany() {
        ArrayList<String[]> out = new ArrayList<>();
        try {
            ArrayList<String[]> l1 = new ArrayList<>();
            String sql1 = "SELECT ndg,ragione_sociale,ndg_rappresentante FROM anagrafica_ru where tipo_anagrafica = ? order by ragione_sociale";
            PreparedStatement ps1 = this.c.prepareStatement(sql1, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps1.setString(1, "G");
            ResultSet rs1 = ps1.executeQuery();
            while (rs1.next()) {
                String[] o1 = {rs1.getString(1), visualizzaStringaMySQL(rs1.getString(2)), rs1.getString(3)};
                l1.add(o1);
            }
            ArrayList<String[]> l2 = new ArrayList<>();
            String sql2 = "SELECT ndg,cognome,nome FROM anagrafica_ru where tipo_anagrafica = ? order by ragione_sociale";
            PreparedStatement ps2 = this.c.prepareStatement(sql2, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps2.setString(1, "F");
            ResultSet rs2 = ps2.executeQuery();
            while (rs2.next()) {
                String[] o2 = {rs2.getString(1), visualizzaStringaMySQL(rs2.getString(2)), visualizzaStringaMySQL(rs2.getString(3))};
                l2.add(o2);
            }
            for (int i = 0; i < l1.size(); i++) {
                for (int j = 0; j < l2.size(); j++) {
                    if (((String[]) l2.get(j))[0].equals(((String[]) l1.get(i))[2])) {
                        String[] o3 = {((String[]) l1.get(i))[0], ((String[]) l1.get(i))[1], ((String[]) l1.get(i))[2], ((String[]) l2.get(j))[0], ((String[]) l2.get(j))[1], ((String[]) l2.get(j))[2]};
                        out.add(o3);
                    }
                }
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @param gruppo_nc
     * @return
     */
    public ArrayList<NC_category> query_nc_category_all(String gruppo_nc) {
        ArrayList<NC_category> out = new ArrayList<>();
        try {
            
            String sql = "SELECT * FROM nc_tipologia WHERE gruppo_nc = '" + gruppo_nc + "' ORDER BY filiale,gruppo_nc";
            if (gruppo_nc == null) {
                sql = "SELECT * FROM nc_tipologia ORDER BY filiale,gruppo_nc";
            }
            
            ResultSet rs = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql);
            
            while (rs.next()) {
                NC_category nc1 = new NC_category();
                nc1.setFiliale(rs.getString("filiale"));
                nc1.setGruppo_nc(rs.getString("gruppo_nc"));
                nc1.setDe_gruppo_nc(visualizzaStringaMySQL(rs.getString("de_gruppo_nc")));
                nc1.setFg_tipo_transazione_nc(rs.getString("fg_tipo_transazione_nc"));
                nc1.setIp_prezzo_nc(rs.getString("ip_prezzo_nc"));
                nc1.setAnnullato(rs.getString("annullato"));
                nc1.setConto_coge_01(rs.getString("conto_coge_01"));
                nc1.setConto_coge_02(rs.getString("conto_coge_02"));
                nc1.setDe_scontrino(visualizzaStringaMySQL(rs.getString("de_scontrino")));
                nc1.setDe_riga(visualizzaStringaMySQL(rs.getString("de_riga")));
                nc1.setPc_iva_corrispettivo(rs.getString("pc_iva_corrispettivo"));
                nc1.setTicket_fee(rs.getString("ticket_fee"));
                nc1.setMax_ticket(rs.getString("max_ticket"));
                nc1.setTicket_fee_type(rs.getString("ticket_fee_type"));
                nc1.setTicket_enabled(rs.getString("ticket_enabled"));
                nc1.setTimestamp(rs.getString("data"));
                nc1.setInt_code(rs.getString("int_code"));
                nc1.setInt_corrisp(rs.getString("int_corrisp"));
                nc1.setInt_iva(rs.getString("int_iva"));
                nc1.setFg_registratore(rs.getString("fg_registratore"));
                out.add(nc1);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @param filiale
     * @param status
     * @return
     */
    public ArrayList<NC_category> query_nc_category_filial(String filiale, String status) {
        ArrayList<NC_category> out = new ArrayList<>();
        try {
            String sql = "SELECT * FROM nc_tipologia WHERE filiale = '" + filiale + "' ";
            if (status == null || status.equals("...")) {
            } else {
                sql += " AND annullato = '" + status + "' ";
            }
            sql += "ORDER BY gruppo_nc";
            ResultSet rs = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql);
            while (rs.next()) {
                NC_category nc1 = new NC_category();
                nc1.setFiliale(rs.getString("filiale"));
                nc1.setGruppo_nc(rs.getString("gruppo_nc"));
                nc1.setDe_gruppo_nc(visualizzaStringaMySQL(rs.getString("de_gruppo_nc")));
                nc1.setFg_tipo_transazione_nc(rs.getString("fg_tipo_transazione_nc"));
                nc1.setIp_prezzo_nc(rs.getString("ip_prezzo_nc"));
                nc1.setAnnullato(rs.getString("annullato"));
                nc1.setConto_coge_01(rs.getString("conto_coge_01"));
                nc1.setConto_coge_02(rs.getString("conto_coge_02"));
                nc1.setDe_scontrino(visualizzaStringaMySQL(rs.getString("de_scontrino")));
                nc1.setDe_riga(visualizzaStringaMySQL(rs.getString("de_riga")));
                nc1.setPc_iva_corrispettivo(rs.getString("pc_iva_corrispettivo"));
                nc1.setTicket_fee(rs.getString("ticket_fee"));
                nc1.setMax_ticket(rs.getString("max_ticket"));
                nc1.setTicket_fee_type(rs.getString("ticket_fee_type"));
                nc1.setTicket_enabled(rs.getString("ticket_enabled"));
                nc1.setTimestamp(rs.getString("data"));
                nc1.setFg_registratore(rs.getString("fg_registratore"), this);
                nc1.setInt_code(rs.getString("int_code"));
                nc1.setInt_corrisp(rs.getString("int_corrisp"));
                nc1.setInt_iva(rs.getString("int_iva"));
                
                out.add(nc1);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @param filiale
     * @param status
     * @return
     */
    public ArrayList<NC_causal> query_nc_causal_filial(String filiale, String status) {
        ArrayList<NC_causal> out = new ArrayList<>();
        try {
            
            String sql = "SELECT * FROM nc_causali WHERE filiale = '" + filiale + "' ";
            
            if (status == null || status.equals("...")) {
                
            } else {
                sql += " AND annullato = '" + status + "' ";
            }
            sql += "ORDER BY gruppo_nc";
            
            ResultSet rs = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql);
            
            while (rs.next()) {
                NC_causal nc1 = new NC_causal();
                
                nc1.setFiliale(rs.getString("filiale"));
                nc1.setGruppo_nc(rs.getString("gruppo_nc"));
                nc1.setCausale_nc(rs.getString("causale_nc"));
                nc1.setDe_causale_nc(visualizzaStringaMySQL(rs.getString("de_causale_nc")));
                nc1.setFg_in_out(rs.getString("fg_in_out"));
                nc1.setIp_prezzo_nc(rs.getString("ip_prezzo_nc"));
                nc1.setFg_tipo_transazione_nc(rs.getString("fg_tipo_transazione_nc"));
                nc1.setAnnullato(rs.getString("annullato"));
                nc1.setNc_de(rs.getString("nc_de"));
                nc1.setFg_batch(rs.getString("fg_batch"));
                nc1.setFg_gruppo_stampa(rs.getString("fg_gruppo_stampa"));
                nc1.setFg_scontrino(rs.getString("fg_scontrino"));
                nc1.setTicket_fee_type(rs.getString("ticket_fee_type"));
                nc1.setTicket_fee(rs.getString("ticket_fee"));
                nc1.setMax_ticket(rs.getString("max_ticket"));
                nc1.setData(rs.getString("data"));
                nc1.setBonus(rs.getString("bonus"));
                nc1.setCodice_integr(rs.getString("codice_integr"));
                nc1.setPaymat(rs.getString("paymat"));
                nc1.setDocric(rs.getString("docric"));
                
                out.add(nc1);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @param gruppo_nc
     * @return
     */
    public ArrayList<NC_causal> query_nc_causal_all(String gruppo_nc) {
        ArrayList<NC_causal> out = new ArrayList<>();
        try {
            
            String sql = "SELECT * FROM nc_causali WHERE gruppo_nc = '" + gruppo_nc + "' ORDER BY filiale,gruppo_nc";
            if (gruppo_nc == null) {
                sql = "SELECT * FROM nc_causali ORDER BY filiale,gruppo_nc";
            }
            
            ResultSet rs = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql);
            
            while (rs.next()) {
                NC_causal nc1 = new NC_causal();
                
                nc1.setFiliale(rs.getString("filiale"));
                nc1.setGruppo_nc(rs.getString("gruppo_nc"));
                nc1.setCausale_nc(rs.getString("causale_nc"));
                nc1.setDe_causale_nc(visualizzaStringaMySQL(rs.getString("de_causale_nc")));
                nc1.setFg_in_out(rs.getString("fg_in_out"));
                nc1.setIp_prezzo_nc(rs.getString("ip_prezzo_nc"));
                nc1.setFg_tipo_transazione_nc(rs.getString("fg_tipo_transazione_nc"));
                nc1.setAnnullato(rs.getString("annullato"));
                nc1.setNc_de(rs.getString("nc_de"));
                nc1.setFg_batch(rs.getString("fg_batch"));
                nc1.setFg_gruppo_stampa(rs.getString("fg_gruppo_stampa"));
                nc1.setFg_scontrino(rs.getString("fg_scontrino"));
                nc1.setTicket_fee_type(rs.getString("ticket_fee_type"));
                nc1.setTicket_fee(rs.getString("ticket_fee"));
                nc1.setMax_ticket(rs.getString("max_ticket"));
                nc1.setData(rs.getString("data"));
                nc1.setBonus(rs.getString("bonus"));
                nc1.setCodice_integr(rs.getString("codice_integr"));
                nc1.setPaymat(rs.getString("paymat"));
                nc1.setDocric(rs.getString("docric"));
                
                out.add(nc1);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @param nc_kind
     * @return
     */
    public ArrayList<NC_category> query_nc_category(String nc_kind) {
        ArrayList<NC_category> out = new ArrayList<>();
        try {
            PreparedStatement ps;
            String sql;
            if ((nc_kind.equals("")) || (nc_kind.equals("..."))) {
                sql = "SELECT * FROM nc_tipologia WHERE filiale = ? order by gruppo_nc";
                ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
                ps.setString(1, getCodLocal(true)[0]);
            } else {
                sql = "SELECT * FROM nc_tipologia WHERE fg_tipo_transazione_nc = ? AND filiale = ? order by gruppo_nc";
                ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
                ps.setString(1, nc_kind);
                ps.setString(2, getCodLocal(true)[0]);
            }
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                NC_category nc1 = new NC_category();
                nc1.setFiliale(rs.getString("filiale"));
                nc1.setGruppo_nc(rs.getString("gruppo_nc"));
                nc1.setDe_gruppo_nc(visualizzaStringaMySQL(rs.getString("de_gruppo_nc")));
                nc1.setFg_tipo_transazione_nc(rs.getString("fg_tipo_transazione_nc"));
                nc1.setIp_prezzo_nc(rs.getString("ip_prezzo_nc"));
                nc1.setAnnullato(rs.getString("annullato"));
                nc1.setConto_coge_01(rs.getString("conto_coge_01"));
                nc1.setConto_coge_02(rs.getString("conto_coge_02"));
                nc1.setDe_scontrino(visualizzaStringaMySQL(rs.getString("de_scontrino")));
                nc1.setDe_riga(visualizzaStringaMySQL(rs.getString("de_riga")));
                nc1.setPc_iva_corrispettivo(rs.getString("pc_iva_corrispettivo"));
                nc1.setTicket_fee(rs.getString("ticket_fee"));
                nc1.setMax_ticket(rs.getString("max_ticket"));
                nc1.setTicket_fee_type(rs.getString("ticket_fee_type"));
                nc1.setTicket_enabled(rs.getString("ticket_enabled"));
                nc1.setTimestamp(rs.getString("data"));
                nc1.setFg_registratore(rs.getString("fg_registratore"));
                nc1.setInt_code(rs.getString("int_code"));
                nc1.setInt_corrisp(rs.getString("int_corrisp"));
                nc1.setInt_iva(rs.getString("int_iva"));
                
                out.add(nc1);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @return
     */
    public ArrayList<NC_category> query_nc_category_bonus() {
        ArrayList<NC_category> out = new ArrayList<>();
        try {
            String fil = getCodLocal(true)[0];
            String sql = "SELECT * FROM nc_tipologia where filiale = ? AND gruppo_nc in "
                    + "(SELECT gruppo_nc FROM nc_causali WHERE bonus = ? and annullato = ? AND filiale = ?)";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, fil);
            ps.setString(2, "1");
            ps.setString(3, "0");
            ps.setString(4, fil);
            
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                NC_category nc1 = new NC_category();
                nc1.setFiliale(rs.getString("filiale"));
                nc1.setGruppo_nc(rs.getString("gruppo_nc"));
                nc1.setDe_gruppo_nc(visualizzaStringaMySQL(rs.getString("de_gruppo_nc")));
                nc1.setFg_tipo_transazione_nc(rs.getString("fg_tipo_transazione_nc"));
                nc1.setIp_prezzo_nc(rs.getString("ip_prezzo_nc"));
                nc1.setAnnullato(rs.getString("annullato"));
                nc1.setConto_coge_01(rs.getString("conto_coge_01"));
                nc1.setConto_coge_02(rs.getString("conto_coge_02"));
                nc1.setDe_scontrino(visualizzaStringaMySQL(rs.getString("de_scontrino")));
                nc1.setDe_riga(visualizzaStringaMySQL(rs.getString("de_riga")));
                nc1.setPc_iva_corrispettivo(rs.getString("pc_iva_corrispettivo"));
                nc1.setTicket_fee(rs.getString("ticket_fee"));
                nc1.setMax_ticket(rs.getString("max_ticket"));
                nc1.setTicket_fee_type(rs.getString("ticket_fee_type"));
                nc1.setTicket_enabled(rs.getString("ticket_enabled"));
                nc1.setTimestamp(rs.getString("data"));
                nc1.setFg_registratore(rs.getString("fg_registratore"));
                nc1.setInt_code(rs.getString("int_code"));
                nc1.setInt_corrisp(rs.getString("int_corrisp"));
                nc1.setInt_iva(rs.getString("int_iva"));
                
                out.add(nc1);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @param nc_kind
     * @return
     */
    public ArrayList<NC_category> query_nc_category_enabled(String nc_kind) {
        ArrayList<NC_category> out = new ArrayList<>();
        try {
            PreparedStatement ps;
            String sql;
            if ((nc_kind.equals("")) || (nc_kind.equals("..."))) {
                sql = "SELECT * FROM nc_tipologia WHERE filiale = ? AND annullato = ? order by gruppo_nc";
                ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
                ps.setString(1, getCodLocal(true)[0]);
                ps.setString(2, "0");
            } else {
                sql = "SELECT * FROM nc_tipologia WHERE fg_tipo_transazione_nc = ? AND filiale = ? AND annullato = ? order by gruppo_nc";
                ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
                ps.setString(1, nc_kind);
                ps.setString(2, getCodLocal(true)[0]);
                ps.setString(3, "0");
            }
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                NC_category nc1 = new NC_category();
                nc1.setFiliale(rs.getString("filiale"));
                nc1.setGruppo_nc(rs.getString("gruppo_nc"));
                nc1.setDe_gruppo_nc(visualizzaStringaMySQL(rs.getString("de_gruppo_nc")));
                nc1.setFg_tipo_transazione_nc(rs.getString("fg_tipo_transazione_nc"));
                nc1.setIp_prezzo_nc(rs.getString("ip_prezzo_nc"));
                nc1.setAnnullato(rs.getString("annullato"));
                nc1.setConto_coge_01(rs.getString("conto_coge_01"));
                nc1.setConto_coge_02(rs.getString("conto_coge_02"));
                nc1.setDe_scontrino(visualizzaStringaMySQL(rs.getString("de_scontrino")));
                nc1.setDe_riga(visualizzaStringaMySQL(rs.getString("de_riga")));
                nc1.setPc_iva_corrispettivo(rs.getString("pc_iva_corrispettivo"));
                nc1.setTicket_fee(rs.getString("ticket_fee"));
                nc1.setMax_ticket(rs.getString("max_ticket"));
                nc1.setTicket_fee_type(rs.getString("ticket_fee_type"));
                nc1.setTicket_enabled(rs.getString("ticket_enabled"));
                nc1.setTimestamp(rs.getString("data"));
                nc1.setFg_registratore(rs.getString("fg_registratore"));
                nc1.setInt_code(rs.getString("int_code"));
                nc1.setInt_corrisp(rs.getString("int_corrisp"));
                nc1.setInt_iva(rs.getString("int_iva"));
                
                out.add(nc1);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @param nc_cat
     * @return
     */
    public ArrayList<NC_causal> query_nc_causal(String nc_cat) {
        ArrayList<NC_causal> out = new ArrayList<>();
        try {
            
            PreparedStatement ps;
            String sql;
            if ((nc_cat.equals("")) || (nc_cat.equals("..."))) {
                sql = "SELECT * FROM nc_causali WHERE filiale = ? order by causale_nc";
                ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
                ps.setString(1, getCodLocal(true)[0]);
            } else {
                sql = "SELECT * FROM nc_causali WHERE filiale = ? AND gruppo_nc = ? order by causale_nc";
                ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
                ps.setString(1, getCodLocal(true)[0]);
                ps.setString(2, nc_cat);
            }
            
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                NC_causal nc1 = new NC_causal();
                
                nc1.setFiliale(rs.getString("filiale"));
                nc1.setGruppo_nc(rs.getString("gruppo_nc"));
                nc1.setCausale_nc(visualizzaStringaMySQL(rs.getString("causale_nc")));
                nc1.setDe_causale_nc(rs.getString("de_causale_nc"));
                nc1.setFg_in_out(rs.getString("fg_in_out"));
                nc1.setIp_prezzo_nc(rs.getString("ip_prezzo_nc"));
                nc1.setFg_tipo_transazione_nc(rs.getString("fg_tipo_transazione_nc"));
                nc1.setAnnullato(rs.getString("annullato"));
                nc1.setNc_de(rs.getString("nc_de"));
                nc1.setFg_batch(rs.getString("fg_batch"));
                nc1.setFg_gruppo_stampa(rs.getString("fg_gruppo_stampa"));
                nc1.setFg_scontrino(rs.getString("fg_scontrino"));
                nc1.setTicket_fee_type(rs.getString("ticket_fee_type"));
                nc1.setTicket_fee(rs.getString("ticket_fee"));
                nc1.setMax_ticket(rs.getString("max_ticket"));
                nc1.setData(rs.getString("data"));
                nc1.setBonus(rs.getString("bonus"));
                nc1.setCodice_integr(rs.getString("codice_integr"));
                nc1.setPaymat(rs.getString("paymat"));
                out.add(nc1);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @param nc_code
     * @return
     */
    public NC_category get_nc_category(String nc_code) {
        try {
            String sql = "SELECT * FROM nc_tipologia WHERE gruppo_nc = ?";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, nc_code);
            ResultSet rs = ps.executeQuery();
            if (rs.next()) {
                NC_category nc1 = new NC_category();
                
                nc1.setFiliale(rs.getString("filiale"));
                nc1.setGruppo_nc(rs.getString("gruppo_nc"));
                nc1.setDe_gruppo_nc(visualizzaStringaMySQL(rs.getString("de_gruppo_nc")));
                nc1.setFg_tipo_transazione_nc(rs.getString("fg_tipo_transazione_nc"));
                nc1.setIp_prezzo_nc(rs.getString("ip_prezzo_nc"));
                nc1.setAnnullato(rs.getString("annullato"));
                nc1.setConto_coge_01(rs.getString("conto_coge_01"));
                nc1.setConto_coge_02(rs.getString("conto_coge_02"));
                nc1.setDe_scontrino(visualizzaStringaMySQL(rs.getString("de_scontrino")));
                nc1.setDe_riga(visualizzaStringaMySQL(rs.getString("de_riga")));
                nc1.setPc_iva_corrispettivo(rs.getString("pc_iva_corrispettivo"));
                nc1.setTicket_fee(rs.getString("ticket_fee"));
                nc1.setMax_ticket(rs.getString("max_ticket"));
                nc1.setTicket_fee_type(rs.getString("ticket_fee_type"));
                nc1.setTicket_enabled(rs.getString("ticket_enabled"));
                nc1.setTimestamp(rs.getString("data"));
                nc1.setInt_code(rs.getString("int_code"));
                nc1.setInt_corrisp(rs.getString("int_corrisp"));
                nc1.setInt_iva(rs.getString("int_iva"));
                nc1.setFg_registratore(rs.getString("fg_registratore"));
                
                return nc1;
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return null;
    }

    /**
     *
     * @param nc_code
     * @return
     */
    public NC_causal get_nc_causal(String nc_code) {
        try {
            String sql = "SELECT * FROM nc_causali WHERE causale_nc = ?";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, nc_code);
            ResultSet rs = ps.executeQuery();
            if (rs.next()) {
                NC_causal nc1 = new NC_causal();
                nc1.setFiliale(rs.getString("filiale"));
                nc1.setGruppo_nc(rs.getString("gruppo_nc"));
                nc1.setCausale_nc(rs.getString("causale_nc"));
                nc1.setDe_causale_nc(visualizzaStringaMySQL(rs.getString("de_causale_nc")));
                nc1.setFg_in_out(rs.getString("fg_in_out"));
                nc1.setIp_prezzo_nc(rs.getString("ip_prezzo_nc"));
                nc1.setFg_tipo_transazione_nc(rs.getString("fg_tipo_transazione_nc"));
                nc1.setAnnullato(rs.getString("annullato"));
                nc1.setNc_de(rs.getString("nc_de"));
                nc1.setFg_batch(rs.getString("fg_batch"));
                nc1.setFg_gruppo_stampa(rs.getString("fg_gruppo_stampa"));
                nc1.setFg_scontrino(rs.getString("fg_scontrino"));
                nc1.setTicket_fee_type(rs.getString("ticket_fee_type"));
                nc1.setTicket_fee(rs.getString("ticket_fee"));
                nc1.setMax_ticket(rs.getString("max_ticket"));
                nc1.setData(rs.getString("data"));
                nc1.setBonus(rs.getString("bonus"));
                nc1.setCodice_integr(rs.getString("codice_integr"));
                nc1.setPaymat(rs.getString("paymat"));
                nc1.setDocric(rs.getString("docric"));
                return nc1;
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return null;
    }

    /**
     *
     * @param nckind
     * @return
     */
    public ArrayList<String[]> list_nc_descr(String nckind) {
        ArrayList<String[]> out = new ArrayList<>();
        try {
            String sql = "SELECT cod,descr FROM selectncde WHERE kind = ?";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, nckind);
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                String[] o1 = {rs.getString(1), visualizzaStringaMySQL(rs.getString(2))};
                out.add(o1);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @return
     */
    public ArrayList<String[]> list_nc_inout() {
        ArrayList<String[]> out = new ArrayList<>();
        try {
            String sql = "SELECT codice,descrizione FROM selectinout WHERE stato = ?";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, "1");
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                String[] o1 = {rs.getString(1), visualizzaStringaMySQL(rs.getString(2))};
                out.add(o1);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @return
     */
    public ArrayList<String[]> kind_payment_WEB() {
        ArrayList<String[]> out = new ArrayList<>();
        try {
            String sql = "SELECT LPAD(supporto, 2, '0'),de_supporto FROM supporti WHERE fg_tipo_incasso = ? AND fg_annullato = ? AND filiale = ? AND supporto <> ? ORDER BY fg_sys_trans";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, "1");
            ps.setString(2, "0");
            ps.setString(3, getCodLocal(true)[0]);
            ps.setString(4, "08");
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                String[] o1 = {rs.getString(1), visualizzaStringaMySQL(rs.getString(2))};
                out.add(o1);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @return
     */
    public ArrayList<String[]> kind_payment() {
        ArrayList<String[]> out = new ArrayList<>();
        try {
            String sql = "SELECT LPAD(supporto, 2, '0'),de_supporto FROM supporti WHERE fg_tipo_incasso = ? AND fg_annullato = ? AND filiale = ? ORDER BY fg_sys_trans";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, "1");
            ps.setString(2, "0");
            ps.setString(3, getCodLocal(true)[0]);
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                String[] o1 = {rs.getString(1), visualizzaStringaMySQL(rs.getString(2))};
                out.add(o1);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @return
     */
    public ArrayList<NC_category> list_nc_category_enabled() {
        ArrayList<NC_category> out = new ArrayList<>();
        try {
            String sql = "SELECT * FROM nc_tipologia WHERE annullato = ? AND filiale = ? order by gruppo_nc";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, "0");
            ps.setString(2, getCodLocal(true)[0]);
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                NC_category nc1 = new NC_category();
                nc1.setFiliale(rs.getString("filiale"));
                nc1.setGruppo_nc(rs.getString("gruppo_nc"));
                nc1.setDe_gruppo_nc(visualizzaStringaMySQL(rs.getString("de_gruppo_nc")));
                nc1.setFg_tipo_transazione_nc(rs.getString("fg_tipo_transazione_nc"));
                nc1.setIp_prezzo_nc(rs.getString("ip_prezzo_nc"));
                nc1.setAnnullato(rs.getString("annullato"));
                nc1.setConto_coge_01(rs.getString("conto_coge_01"));
                nc1.setConto_coge_02(rs.getString("conto_coge_02"));
                nc1.setDe_scontrino(visualizzaStringaMySQL(rs.getString("de_scontrino")));
                nc1.setDe_riga(visualizzaStringaMySQL(rs.getString("de_riga")));
                nc1.setPc_iva_corrispettivo(rs.getString("pc_iva_corrispettivo"));
                nc1.setTicket_fee(rs.getString("ticket_fee"));
                nc1.setMax_ticket(rs.getString("max_ticket"));
                nc1.setTicket_fee_type(rs.getString("ticket_fee_type"));
                nc1.setTicket_enabled(rs.getString("ticket_enabled"));
                nc1.setTimestamp(rs.getString("data"));
                nc1.setInt_code(rs.getString("int_code"));
                nc1.setInt_corrisp(rs.getString("int_corrisp"));
                nc1.setInt_iva(rs.getString("int_iva"));
                nc1.setFg_registratore(rs.getString("fg_registratore"));
                out.add(nc1);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @param filiale
     * @return
     */
    public ArrayList<NC_category> list_ALL_nc_category(String filiale) {
        ArrayList<NC_category> out = new ArrayList<>();
        try {
            String sql = "SELECT * FROM nc_tipologia WHERE filiale = ? order by gruppo_nc";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, filiale);
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                NC_category nc1 = new NC_category();
                nc1.setFiliale(rs.getString("filiale"));
                nc1.setGruppo_nc(rs.getString("gruppo_nc"));
                nc1.setDe_gruppo_nc(visualizzaStringaMySQL(rs.getString("de_gruppo_nc")));
                nc1.setFg_tipo_transazione_nc(rs.getString("fg_tipo_transazione_nc"));
                nc1.setIp_prezzo_nc(rs.getString("ip_prezzo_nc"));
                nc1.setAnnullato(rs.getString("annullato"));
                nc1.setConto_coge_01(rs.getString("conto_coge_01"));
                nc1.setConto_coge_02(rs.getString("conto_coge_02"));
                nc1.setDe_scontrino(visualizzaStringaMySQL(rs.getString("de_scontrino")));
                nc1.setDe_riga(visualizzaStringaMySQL(rs.getString("de_riga")));
                nc1.setPc_iva_corrispettivo(rs.getString("pc_iva_corrispettivo"));
                nc1.setTicket_fee(rs.getString("ticket_fee"));
                nc1.setMax_ticket(rs.getString("max_ticket"));
                nc1.setTicket_fee_type(rs.getString("ticket_fee_type"));
                nc1.setTicket_enabled(rs.getString("ticket_enabled"));
                nc1.setTimestamp(rs.getString("data"));
                nc1.setInt_code(rs.getString("int_code"));
                nc1.setInt_corrisp(rs.getString("int_corrisp"));
                nc1.setInt_iva(rs.getString("int_iva"));
                nc1.setFg_registratore(rs.getString("fg_registratore"));
                out.add(nc1);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @return
     */
    public ArrayList<NC_category> list_ALL_nc_category() {
        ArrayList<NC_category> out = new ArrayList<>();
        try {
            String sql = "SELECT * FROM nc_tipologia WHERE filiale = ? order by gruppo_nc";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, getCodLocal(true)[0]);
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                NC_category nc1 = new NC_category();
                nc1.setFiliale(rs.getString("filiale"));
                nc1.setGruppo_nc(rs.getString("gruppo_nc"));
                nc1.setDe_gruppo_nc(visualizzaStringaMySQL(rs.getString("de_gruppo_nc")));
                nc1.setFg_tipo_transazione_nc(rs.getString("fg_tipo_transazione_nc"));
                nc1.setIp_prezzo_nc(rs.getString("ip_prezzo_nc"));
                nc1.setAnnullato(rs.getString("annullato"));
                nc1.setConto_coge_01(rs.getString("conto_coge_01"));
                nc1.setConto_coge_02(rs.getString("conto_coge_02"));
                nc1.setDe_scontrino(visualizzaStringaMySQL(rs.getString("de_scontrino")));
                nc1.setDe_riga(visualizzaStringaMySQL(rs.getString("de_riga")));
                nc1.setPc_iva_corrispettivo(rs.getString("pc_iva_corrispettivo"));
                nc1.setTicket_fee(rs.getString("ticket_fee"));
                nc1.setMax_ticket(rs.getString("max_ticket"));
                nc1.setTicket_fee_type(rs.getString("ticket_fee_type"));
                nc1.setTicket_enabled(rs.getString("ticket_enabled"));
                nc1.setTimestamp(rs.getString("data"));
                nc1.setInt_code(rs.getString("int_code"));
                nc1.setInt_corrisp(rs.getString("int_corrisp"));
                nc1.setInt_iva(rs.getString("int_iva"));
                nc1.setFg_registratore(rs.getString("fg_registratore"));
                out.add(nc1);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @return
     */
    public ArrayList<NC_causal> list_nc_causal_all() {
        ArrayList<NC_causal> out = new ArrayList<>();
        try {
            String sql = "SELECT * FROM nc_causali WHERE filiale = ? order by causale_nc";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, getCodLocal(true)[0]);
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                NC_causal nc1 = new NC_causal();
                nc1.setFiliale(rs.getString("filiale"));
                nc1.setGruppo_nc(rs.getString("gruppo_nc"));
                nc1.setCausale_nc(rs.getString("causale_nc"));
                nc1.setDe_causale_nc(visualizzaStringaMySQL(rs.getString("de_causale_nc")));
                nc1.setFg_in_out(rs.getString("fg_in_out"));
                nc1.setIp_prezzo_nc(rs.getString("ip_prezzo_nc"));
                nc1.setFg_tipo_transazione_nc(rs.getString("fg_tipo_transazione_nc"));
                nc1.setAnnullato(rs.getString("annullato"));
                nc1.setNc_de(rs.getString("nc_de"));
                nc1.setFg_batch(rs.getString("fg_batch"));
                nc1.setFg_gruppo_stampa(rs.getString("fg_gruppo_stampa"));
                nc1.setFg_scontrino(rs.getString("fg_scontrino"));
                nc1.setTicket_fee_type(rs.getString("ticket_fee_type"));
                nc1.setTicket_fee(rs.getString("ticket_fee"));
                nc1.setMax_ticket(rs.getString("max_ticket"));
                nc1.setData(rs.getString("data"));
                nc1.setBonus(rs.getString("bonus"));
                nc1.setCodice_integr(rs.getString("codice_integr"));
                nc1.setPaymat(rs.getString("paymat"));
                nc1.setDocric(rs.getString("docric"));
                out.add(nc1);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @param filiale
     * @return
     */
    public ArrayList<NC_causal> list_nc_causal_all(String filiale) {
        ArrayList<NC_causal> out = new ArrayList<>();
        try {
            String sql = "SELECT * FROM nc_causali WHERE filiale = ? order by causale_nc";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, filiale);
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                NC_causal nc1 = new NC_causal();
                nc1.setFiliale(rs.getString("filiale"));
                nc1.setGruppo_nc(rs.getString("gruppo_nc"));
                nc1.setCausale_nc(rs.getString("causale_nc"));
                nc1.setDe_causale_nc(visualizzaStringaMySQL(rs.getString("de_causale_nc")));
                nc1.setFg_in_out(rs.getString("fg_in_out"));
                nc1.setIp_prezzo_nc(rs.getString("ip_prezzo_nc"));
                nc1.setFg_tipo_transazione_nc(rs.getString("fg_tipo_transazione_nc"));
                nc1.setAnnullato(rs.getString("annullato"));
                nc1.setNc_de(rs.getString("nc_de"));
                nc1.setFg_batch(rs.getString("fg_batch"));
                nc1.setFg_gruppo_stampa(rs.getString("fg_gruppo_stampa"));
                nc1.setFg_scontrino(rs.getString("fg_scontrino"));
                nc1.setTicket_fee_type(rs.getString("ticket_fee_type"));
                nc1.setTicket_fee(rs.getString("ticket_fee"));
                nc1.setMax_ticket(rs.getString("max_ticket"));
                nc1.setData(rs.getString("data"));
                nc1.setBonus(rs.getString("bonus"));
                nc1.setCodice_integr(rs.getString("codice_integr"));
                nc1.setPaymat(rs.getString("paymat"));
                nc1.setDocric(rs.getString("docric"));
                out.add(nc1);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @return
     */
    public ArrayList<NC_causal> list_nc_causal_enabled() {
        ArrayList<NC_causal> out = new ArrayList<>();
        try {
            String sql = "SELECT * FROM nc_causali WHERE annullato = ? AND filiale = ? order by causale_nc";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, "0");
            ps.setString(2, getCodLocal(true)[0]);
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                NC_causal nc1 = new NC_causal();
                nc1.setFiliale(rs.getString("filiale"));
                nc1.setGruppo_nc(rs.getString("gruppo_nc"));
                nc1.setCausale_nc(rs.getString("causale_nc"));
                nc1.setDe_causale_nc(visualizzaStringaMySQL(rs.getString("de_causale_nc")));
                nc1.setFg_in_out(rs.getString("fg_in_out"));
                nc1.setIp_prezzo_nc(rs.getString("ip_prezzo_nc"));
                nc1.setFg_tipo_transazione_nc(rs.getString("fg_tipo_transazione_nc"));
                nc1.setAnnullato(rs.getString("annullato"));
                nc1.setNc_de(rs.getString("nc_de"));
                nc1.setFg_batch(rs.getString("fg_batch"));
                nc1.setFg_gruppo_stampa(rs.getString("fg_gruppo_stampa"));
                nc1.setFg_scontrino(rs.getString("fg_scontrino"));
                nc1.setTicket_fee_type(rs.getString("ticket_fee_type"));
                nc1.setTicket_fee(rs.getString("ticket_fee"));
                nc1.setMax_ticket(rs.getString("max_ticket"));
                nc1.setData(rs.getString("data"));
                nc1.setBonus(rs.getString("bonus"));
                nc1.setCodice_integr(rs.getString("codice_integr"));
                nc1.setPaymat(rs.getString("paymat"));
                nc1.setDocric(rs.getString("docric"));
                out.add(nc1);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @return
     */
    public ArrayList<String[]> category_nations() {
        ArrayList<String[]> out = new ArrayList<>();
        try {
            String sql = "SELECT cod,descrizione FROM selectareanaz WHERE stato = ? ORDER BY cod";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, "1");
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                String[] o1 = {rs.getString(1), visualizzaStringaMySQL(rs.getString(2))};
                out.add(o1);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @return
     */
    public ArrayList<String[]> listcity() {
        ArrayList<String[]> out = new ArrayList<>();
        try {
            String sql = "SELECT codice_avv_bancario,denominazione,targa FROM comuni_apm ORDER BY denominazione";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                String[] o1 = {rs.getString(1), visualizzaStringaMySQL(rs.getString(2)), rs.getString(3)};
                out.add(o1);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @param cod
     * @return
     */
    public String[] getcity_1(String cod) {
        try {
            String sql = "SELECT denominazione,targa FROM comuni_apm WHERE codice_avv_bancario = ? ORDER BY denominazione";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, cod);
            ResultSet rs = ps.executeQuery();
            if (rs.next()) {
                return new String[]{visualizzaStringaMySQL(rs.getString(1)), rs.getString(2)};
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return null;
    }

    /**
     *
     * @return
     */
    public ArrayList<Currency> list_figures() {
        ArrayList<Currency> out = new ArrayList<>();
        try {
            String sql = "SELECT * FROM valute WHERE filiale = ? ORDER BY valuta";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, getCodLocal(true)[0]);
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                Currency cu = new Currency();
                cu.setCode(rs.getString("valuta"));
                cu.setDescrizione(visualizzaStringaMySQL(rs.getString("de_valuta")));
                cu.setEnable_sellback(rs.getString("cambio_acquisto"));
                cu.setChange_sell(rs.getString("cambio_vendita"));
                
                cu.setUic(rs.getString("codice_uic_divisa"));
                cu.setMessage(rs.getString("de_messaggio"));
                cu.setInternal_cur(rs.getString("fg_valuta_corrente"));
                cu.setId(rs.getString("id"));
                cu.setFilial(rs.getString("filiale"));
                
                cu.setBuy_std(rs.getString("buy_std"));
                cu.setBuy_l1(rs.getString("buy_l1"));
                cu.setBuy_l2(rs.getString("buy_l2"));
                cu.setBuy_l3(rs.getString("buy_l3"));
                cu.setBuy_best(rs.getString("buy_best"));
                
                cu.setSell_std(rs.getString("sell_std"));
                cu.setSell_l1(rs.getString("sell_l1"));
                cu.setSell_l2(rs.getString("sell_l2"));
                cu.setSell_l3(rs.getString("sell_l3"));
                cu.setSell_best(rs.getString("sell_best"));
                
                cu.setEnable_buy(rs.getString("enable_buy"));
                cu.setEnable_sell(rs.getString("enable_sell"));
                
                cu.setCambio_bce(rs.getString("cambio_bce"));
                cu.setBuy_std_type(rs.getString("buy_std_type"));
                cu.setBuy_std_value(rs.getString("buy_std_value"));
                cu.setSell_std_type(rs.getString("sell_std_type"));
                cu.setSell_std_value(rs.getString("sell_std_value"));
                
                out.add(cu);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @param localfirst
     * @return
     */
    public ArrayList<Currency> list_figures(boolean localfirst) {
        ArrayList<Currency> out = new ArrayList<>();
        
        String valuta = "";
        if (localfirst) {
            valuta = get_local_currency()[0];
        }
        try {
            String sql = "SELECT * FROM valute WHERE filiale = ? ORDER BY valuta";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, getCodLocal(true)[0]);
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                Currency cu = new Currency();
                cu.setCode(rs.getString("valuta"));
                cu.setDescrizione(visualizzaStringaMySQL(rs.getString("de_valuta")));
                cu.setEnable_sellback(rs.getString("cambio_acquisto"));
                cu.setChange_sell(rs.getString("cambio_vendita"));
                
                cu.setUic(rs.getString("codice_uic_divisa"));
                cu.setMessage(visualizzaStringaMySQL(rs.getString("de_messaggio")));
                cu.setInternal_cur(rs.getString("fg_valuta_corrente"));
                cu.setId(rs.getString("id"));
                cu.setFilial(rs.getString("filiale"));
                
                cu.setBuy_std(rs.getString("buy_std"));
                cu.setBuy_l1(rs.getString("buy_l1"));
                cu.setBuy_l2(rs.getString("buy_l2"));
                cu.setBuy_l3(rs.getString("buy_l3"));
                cu.setBuy_best(rs.getString("buy_best"));
                
                cu.setSell_std(rs.getString("sell_std"));
                cu.setSell_l1(rs.getString("sell_l1"));
                cu.setSell_l2(rs.getString("sell_l2"));
                cu.setSell_l3(rs.getString("sell_l3"));
                cu.setSell_best(rs.getString("sell_best"));
                
                cu.setEnable_buy(rs.getString("enable_buy"));
                cu.setEnable_sell(rs.getString("enable_sell"));
                
                cu.setCambio_bce(rs.getString("cambio_bce"));
                cu.setBuy_std_type(rs.getString("buy_std_type"));
                cu.setBuy_std_value(rs.getString("buy_std_value"));
                cu.setSell_std_type(rs.getString("sell_std_type"));
                cu.setSell_std_value(rs.getString("sell_std_value"));
                
                if (cu.getCode().equals(valuta)) {
                    out.add(0, cu);
                } else {
                    out.add(cu);
                }
                
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @param cod
     * @return
     */
    public Currency getCurrency(String cod) {
        try {
            String sql = "SELECT * FROM valute WHERE valuta = ? ORDER BY valuta";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, cod);
            ResultSet rs = ps.executeQuery();
            if (rs.next()) {
                Currency cu = new Currency();
                cu.setCode(rs.getString("valuta"));
                cu.setDescrizione(visualizzaStringaMySQL(rs.getString("de_valuta")));
                cu.setEnable_sellback(rs.getString("cambio_acquisto"));
                cu.setChange_sell(rs.getString("cambio_vendita"));
                cu.setUic(rs.getString("codice_uic_divisa"));
                cu.setMessage(visualizzaStringaMySQL(rs.getString("de_messaggio")));
                cu.setInternal_cur(rs.getString("fg_valuta_corrente"));
                cu.setId(rs.getString("id"));
                cu.setFilial(rs.getString("filiale"));
                
                cu.setBuy_std(rs.getString("buy_std"));
                cu.setBuy_l1(rs.getString("buy_l1"));
                cu.setBuy_l2(rs.getString("buy_l2"));
                cu.setBuy_l3(rs.getString("buy_l3"));
                cu.setBuy_best(rs.getString("buy_best"));
                
                cu.setSell_std(rs.getString("sell_std"));
                cu.setSell_l1(rs.getString("sell_l1"));
                cu.setSell_l2(rs.getString("sell_l2"));
                cu.setSell_l3(rs.getString("sell_l3"));
                cu.setSell_best(rs.getString("sell_best"));
                
                cu.setEnable_buy(rs.getString("enable_buy"));
                cu.setEnable_sell(rs.getString("enable_sell"));
                
                cu.setCambio_bce(rs.getString("cambio_bce"));
                cu.setBuy_std_type(rs.getString("buy_std_type"));
                cu.setBuy_std_value(rs.getString("buy_std_value"));
                cu.setSell_std_type(rs.getString("sell_std_type"));
                cu.setSell_std_value(rs.getString("sell_std_value"));
                
                return cu;
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return null;
    }

    /**
     *
     * @param cod
     * @param filiale
     * @return
     */
    public Currency getCurrency(String cod, String filiale) {
        try {
            String sql = "SELECT * FROM valute WHERE valuta = ? AND filiale = ? ORDER BY valuta";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, cod);
            ps.setString(2, filiale);
            ResultSet rs = ps.executeQuery();
            if (rs.next()) {
                Currency cu = new Currency();
                cu.setCode(rs.getString("valuta"));
                cu.setDescrizione(visualizzaStringaMySQL(rs.getString("de_valuta")));
                cu.setEnable_sellback(rs.getString("cambio_acquisto"));
                cu.setChange_sell(rs.getString("cambio_vendita"));
                cu.setUic(rs.getString("codice_uic_divisa"));
                cu.setMessage(visualizzaStringaMySQL(rs.getString("de_messaggio")));
                cu.setInternal_cur(rs.getString("fg_valuta_corrente"));
                cu.setId(rs.getString("id"));
                cu.setFilial(rs.getString("filiale"));
                
                cu.setBuy_std(rs.getString("buy_std"));
                cu.setBuy_l1(rs.getString("buy_l1"));
                cu.setBuy_l2(rs.getString("buy_l2"));
                cu.setBuy_l3(rs.getString("buy_l3"));
                cu.setBuy_best(rs.getString("buy_best"));
                
                cu.setSell_std(rs.getString("sell_std"));
                cu.setSell_l1(rs.getString("sell_l1"));
                cu.setSell_l2(rs.getString("sell_l2"));
                cu.setSell_l3(rs.getString("sell_l3"));
                cu.setSell_best(rs.getString("sell_best"));
                
                cu.setEnable_buy(rs.getString("enable_buy"));
                cu.setEnable_sell(rs.getString("enable_sell"));
                
                cu.setCambio_bce(rs.getString("cambio_bce"));
                cu.setBuy_std_type(rs.getString("buy_std_type"));
                cu.setBuy_std_value(rs.getString("buy_std_value"));
                cu.setSell_std_type(rs.getString("sell_std_type"));
                cu.setSell_std_value(rs.getString("sell_std_value"));
                
                return cu;
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return null;
    }

    /**
     *
     * @param cod
     * @param filiale
     * @return
     */
    public ArrayList<String[]> list_kind_currency(String cod, String filiale) {
        ArrayList<String[]> out = new ArrayList<>();
        try {
            String sql = "SELECT supporto,annullato FROM supporti_valuta where valuta = ? AND filiale = ? ORDER BY supporto";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, cod);
            ps.setString(2, filiale);
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                String[] o1 = {rs.getString(1), rs.getString(2)};
                out.add(o1);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @param filiale
     * @return
     */
    public ArrayList<String[]> list_all_kind(String filiale) {
        ArrayList<String[]> out = new ArrayList<>();
        try {
            String sql = "SELECT supporto,de_supporto,fg_sys_trans FROM supporti WHERE filiale = ? ORDER BY fg_sys_trans";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, filiale);
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                String[] o1 = {leftPad(rs.getString(1), 2, "0"), visualizzaStringaMySQL(rs.getString(2)), rs.getString(3)};
                out.add(o1);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @param codbo
     * @return
     */
    public String[] get_internetbooking_tr(String codbo) {
        try {
            String sql = "SELECT * FROM internetbooking_ch WHERE codiceprenotazione = ?";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, codbo);
            ResultSet rs = ps.executeQuery();
            if (rs.next()) {
                String[] out = {rs.getString(1), rs.getString(2)};
                return out;
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return null;
    }

    /**
     *
     * @return
     */
    public ArrayList<String[]> list_internetbooking_SELL() {
        if (!is_IT) {
            return list_internetbooking();
        }
        ArrayList<String[]> out = new ArrayList<>();
        try {
            String sql = "SELECT internet_booking,de_internet_booking FROM internetbooking WHERE internet_booking<>'01' AND internet_booking<>'05' ORDER BY internet_booking";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                String[] o1 = {leftPad(rs.getString(1), 2, "0"), visualizzaStringaMySQL(rs.getString(2))};
                out.add(o1);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @return
     */
    public ArrayList<String[]> list_internetbooking() {
        ArrayList<String[]> out = new ArrayList<>();
        try {
            String sql = "SELECT internet_booking,de_internet_booking FROM internetbooking order by internet_booking";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                String[] o1 = {leftPad(rs.getString(1), 2, "0"), visualizzaStringaMySQL(rs.getString(2))};
                out.add(o1);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @param cod
     * @param fil
     * @return
     */
    public ArrayList<Sizecuts> getfigures_sizecuts_all(String cod, String fil) {
        ArrayList<Sizecuts> out = new ArrayList<>();
        try {
            String sql = "SELECT * FROM valute_tagli WHERE valuta = ? AND filiale = ? order by CAST(ip_taglio AS DECIMAL(12,2)) DESC";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, cod);
            ps.setString(2, fil);
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                out.add(new Sizecuts(rs.getString(1).trim(), rs.getString(2).trim(), rs.getString(3).trim(), rs.getString(4).trim()));
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @param cod
     * @param fil
     * @return
     */
    public ArrayList<Sizecuts> getfigures_sizecuts_enabled(String cod, String fil) {
        ArrayList<Sizecuts> out = new ArrayList<>();
        try {
            String sql = "SELECT * FROM valute_tagli WHERE valuta = ? AND filiale = ? AND fg_stato = ? order by CAST(ip_taglio AS DECIMAL(12,2)) DESC";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, cod);
            ps.setString(2, fil);
            ps.setString(3, "1");
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                out.add(new Sizecuts(rs.getString(1).trim(), rs.getString(2).trim(), rs.getString(3).trim(), rs.getString(4).trim()));
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

//    public ArrayList<String> getfigures_sizecuts(String cod, String fil) {
//        ArrayList<String> out = new ArrayList<>();
//        try {
//            String sql = "SELECT ip_taglio FROM valute_tagli WHERE valuta = ? AND filiale = ? order by CAST(ip_taglio AS DECIMAL(12,2)) DESC";
//            PreparedStatement ps = this.c.prepareStatement(sql, ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE);
//            ps.setString(1, cod);
//            ps.setString(2, fil);
//            ResultSet rs = ps.executeQuery();
//            while (rs.next()) {
//                out.add(rs.getString(1).trim());
//            }
//        } catch (SQLException ex) {
//            insertTR("E", "System", Thread.currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
//        }
//        return out;
//    }
    /**
     *
     * @param kind
     * @param min
     * @param max
     * @return
     */
    public String[] get_fixed_commission_range(String kind, String min, String max) {
        try {
            String sql = "SELECT commissione_buy,commissione_sell,fg_blocco FROM commissione_fissa WHERE supporto = ? AND minimo = ? AND massimo = ? AND filiale = ? order by supporto,cast(minimo AS decimal (10,0))";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, kind);
            ps.setString(2, min);
            ps.setString(3, max);
            ps.setString(4, getCodLocal(true)[0]);
            ResultSet rs = ps.executeQuery();
            if (rs.next()) {
                return new String[]{rs.getString(1), rs.getString(2), rs.getString(3)};
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return null;
    }

    /**
     *
     * @param kind
     * @param min
     * @param max
     * @param filiale
     * @return
     */
    public String[] get_fixed_commission_range(String kind, String min, String max, String filiale) {
        try {
            String sql = "SELECT commissione_buy,commissione_sell,fg_blocco FROM commissione_fissa WHERE supporto = ? AND minimo = ? AND massimo = ? AND filiale = ? order by supporto,cast(minimo AS decimal (10,0))";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, kind);
            ps.setString(2, min);
            ps.setString(3, max);
            ps.setString(4, filiale);
            ResultSet rs = ps.executeQuery();
            if (rs.next()) {
                return new String[]{rs.getString(1), rs.getString(2), rs.getString(3)};
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return null;
    }

    /**
     *
     * @return
     */
    public ArrayList<CustomerKind> list_customerKind() {
        ArrayList<CustomerKind> out = new ArrayList<>();
        try {
            String sql = "SELECT * FROM tipologiaclienti ORDER BY de_tipologia_clienti DESC";
            
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                CustomerKind ck = new CustomerKind();
                ck.setDe_tipologia_clienti(visualizzaStringaMySQL(rs.getString("de_tipologia_clienti")));
                ck.setTipologia_clienti(leftPad(rs.getString("tipologia_clienti"), 3, "0"));
                ck.setFg_nazionalita(rs.getString("fg_nazionalita"));
                ck.setFg_tipo_cliente(rs.getString("fg_tipo_cliente"));
                ck.setIp_max_singola_transazione(rs.getString("ip_max_singola_transazione"));
                ck.setIp_max_settimanale(rs.getString("ip_max_settimanale"));
                ck.setFg_area_geografica(rs.getString("fg_area_geografica"));
                ck.setStampa_autocertificazione(rs.getString("stampa_autocertificazione"));
                ck.setIp_soglia_antiriciclaggio(rs.getString("ip_soglia_antiriciclaggio"));
                ck.setIp_soglia_extraCEE_certification(rs.getString("ip_soglia_extraCEE_certification"));
                ck.setFg_annullato(rs.getString("fg_annullato"));
                ck.setFg_uploadobbl(rs.getString("fg_uploadobbl"));
                ck.setTipofat(rs.getString("tipofat"));
                ck.setVatcode(rs.getString("vatcode"));
                ck.setIp_soglia_bollo(rs.getString("ip_soglia_bollo"));
                ck.setIp_value_bollo(rs.getString("ip_value_bollo"));
                ck.setDescr_bollo(visualizzaStringaMySQL(rs.getString("descr_bollo")));
                ck.setResident(rs.getString("resid"));
                ck.setTaxfree(rs.getString("taxfree"));
                out.add(ck);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @return
     */
    public ArrayList<CustomerKind> list_customerKind_enabled() {
        ArrayList<CustomerKind> out = new ArrayList<>();
        try {
            String sql = "SELECT * FROM tipologiaclienti WHERE fg_annullato = ? ORDER BY de_tipologia_clienti DESC";
            
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, "0");
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                CustomerKind ck = new CustomerKind();
                ck.setDe_tipologia_clienti(visualizzaStringaMySQL(rs.getString("de_tipologia_clienti")));
                ck.setTipologia_clienti(leftPad(rs.getString("tipologia_clienti"), 3, "0"));
                ck.setFg_nazionalita(rs.getString("fg_nazionalita"));
                ck.setFg_tipo_cliente(rs.getString("fg_tipo_cliente"));
                ck.setIp_max_singola_transazione(rs.getString("ip_max_singola_transazione"));
                ck.setIp_max_settimanale(rs.getString("ip_max_settimanale"));
                ck.setFg_area_geografica(rs.getString("fg_area_geografica"));
                ck.setStampa_autocertificazione(rs.getString("stampa_autocertificazione"));
                ck.setIp_soglia_antiriciclaggio(rs.getString("ip_soglia_antiriciclaggio"));
                ck.setIp_soglia_extraCEE_certification(rs.getString("ip_soglia_extraCEE_certification"));
                ck.setFg_annullato(rs.getString("fg_annullato"));
                ck.setFg_uploadobbl(rs.getString("fg_uploadobbl"));
                ck.setTipofat(rs.getString("tipofat"));
                ck.setVatcode(rs.getString("vatcode"));
                ck.setIp_soglia_bollo(rs.getString("ip_soglia_bollo"));
                ck.setIp_value_bollo(rs.getString("ip_value_bollo"));
                ck.setDescr_bollo(rs.getString("descr_bollo"));
                ck.setResident(rs.getString("resid"));
                ck.setTaxfree(rs.getString("taxfree"));
                out.add(ck);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @param cod
     * @return
     */
    public CustomerKind get_customerKind(String cod) {
        try {
            String sql = "SELECT * FROM tipologiaclienti WHERE tipologia_clienti = ? ORDER BY de_tipologia_clienti DESC";
            
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, cod);
            ResultSet rs = ps.executeQuery();
            if (rs.next()) {
                CustomerKind ck = new CustomerKind();
                ck.setDe_tipologia_clienti(visualizzaStringaMySQL(rs.getString("de_tipologia_clienti")));
                ck.setTipologia_clienti(leftPad(rs.getString("tipologia_clienti"), 3, "0"));
                ck.setFg_nazionalita(rs.getString("fg_nazionalita"));
                ck.setFg_tipo_cliente(rs.getString("fg_tipo_cliente"));
                ck.setIp_max_singola_transazione(rs.getString("ip_max_singola_transazione"));
                ck.setIp_max_settimanale(rs.getString("ip_max_settimanale"));
                ck.setFg_area_geografica(rs.getString("fg_area_geografica"));
                ck.setStampa_autocertificazione(rs.getString("stampa_autocertificazione"));
                ck.setIp_soglia_antiriciclaggio(rs.getString("ip_soglia_antiriciclaggio"));
                ck.setIp_soglia_extraCEE_certification(rs.getString("ip_soglia_extraCEE_certification"));
                ck.setFg_annullato(rs.getString("fg_annullato"));
                ck.setFg_uploadobbl(rs.getString("fg_uploadobbl"));
                ck.setTaxfree(rs.getString("taxfree"));
                
                ck.setTipofat(rs.getString("tipofat"));
                ck.setVatcode(rs.getString("vatcode"));
                ck.setIp_soglia_bollo(rs.getString("ip_soglia_bollo"));
                ck.setIp_value_bollo(rs.getString("ip_value_bollo"));
                ck.setDescr_bollo(rs.getString("descr_bollo"));
                ck.setResident(rs.getString("resid"));
                ck.setTaxfree(rs.getString("taxfree"));
                
                return ck;
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return null;
    }

    /**
     *
     * @return
     */
    public ArrayList<String[]> list_type_customer() {
        ArrayList<String[]> out = new ArrayList<>();
        try {
            String sql = "SELECT * FROM selecttipocliente";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                String[] o1 = {rs.getString(1), rs.getString(2)};
                out.add(o1);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @return
     */
    public ArrayList<String[]> list_type_kind() {
        ArrayList<String[]> out = new ArrayList<>();
        try {
            String sql = "SELECT * FROM selectresident";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                String[] o1 = {rs.getString(1), rs.getString(2)};
                out.add(o1);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @return
     */
    public ArrayList<String[]> list_selectkind() {
        ArrayList<String[]> out = new ArrayList<>();
        try {
            String sql = "SELECT * FROM selectkind";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                String[] o1 = {rs.getString(1), rs.getString(2), rs.getString(3)};
                out.add(o1);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @return
     */
    public ArrayList<String[]> list_till() {
        ArrayList<String[]> out = new ArrayList<>();
        try {
            String sql = "SELECT cod,de_till,fg_tipo,fg_annullato FROM till WHERE filiale = ? ORDER BY fg_tipo,de_till";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, getCodLocal(true)[0]);
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                String[] o1 = {rs.getString(1), visualizzaStringaMySQL(rs.getString(2)), rs.getString(3), rs.getString(4)};
                out.add(o1);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @param filiale
     * @return
     */
    public ArrayList<String[]> list_till(String filiale) {
        ArrayList<String[]> out = new ArrayList<>();
        try {
            String sql = "SELECT cod,de_till,fg_tipo,fg_annullato FROM till WHERE filiale = ? ORDER BY fg_tipo,de_till";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, filiale);
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                String[] o1 = {rs.getString(1), visualizzaStringaMySQL(rs.getString(2)), rs.getString(3), rs.getString(4)};
                out.add(o1);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @return
     */
    public ArrayList<String[]> list_bank() {
        ArrayList<String[]> out = new ArrayList<>();
        try {
            String sql = "SELECT cod,de_bank,conto,da_annull,fg_annullato,bank_account FROM bank ORDER BY de_bank";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                String[] o1 = {rs.getString(1), visualizzaStringaMySQL(rs.getString(2)), rs.getString(3),
                    rs.getString(4) //                    formatStringtoStringDate(rs.getString(4), "yyyy-MM-dd", "dd/MM/yyyy")
                    ,
                     rs.getString(5), rs.getString(6)};
                out.add(o1);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @return
     */
    public ArrayList<Agency> list_agency() {
        ArrayList<Agency> out = new ArrayList<>();
        try {
            String sql = "SELECT agenzia,de_agenzia,indirizzo,cap,citta,telefono,fax,email,fg_annullato FROM agenzie ORDER BY de_agenzia";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                Agency ag = new Agency();
                
                ag.setAgenzia(rs.getString("agenzia"));
                ag.setDe_agenzia(visualizzaStringaMySQL(rs.getString("de_agenzia")));
                ag.setIndirizzo(visualizzaStringaMySQL(rs.getString("indirizzo")));
                ag.setCap(rs.getString("cap"));
                ag.setCitta(rs.getString("citta"));
                ag.setTelefono(rs.getString("telefono"));
                ag.setFax(rs.getString("fax"));
                ag.setEmail(rs.getString("email"));
                ag.setFg_annullato(rs.getString("fg_annullato"));
                
                out.add(ag);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @param cod
     * @return
     */
    public Agency get_agency(String cod) {
        try {
            String sql = "SELECT agenzia,de_agenzia,indirizzo,cap,citta,telefono,fax,email,fg_annullato FROM agenzie WHERE agenzia = ?";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, cod);
            ResultSet rs = ps.executeQuery();
            if (rs.next()) {
                Agency ag = new Agency();
                
                ag.setAgenzia(rs.getString("agenzia"));
                ag.setDe_agenzia(visualizzaStringaMySQL(rs.getString("de_agenzia")));
                ag.setIndirizzo(visualizzaStringaMySQL(rs.getString("indirizzo")));
                ag.setCap(rs.getString("cap"));
                ag.setCitta(rs.getString("citta"));
                ag.setTelefono(rs.getString("telefono"));
                ag.setFax(rs.getString("fax"));
                ag.setEmail(rs.getString("email"));
                ag.setFg_annullato(rs.getString("fg_annullato"));
                
                return ag;
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return null;
    }

    /**
     *
     * @return
     */
    public ArrayList<Figures> list_all_figures() {
        ArrayList<Figures> out = new ArrayList<>();
        try {
            String sql = "SELECT * FROM supporti where filiale = ? ORDER BY fg_sys_trans,supporto";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, getCodLocal(true)[0]);
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                Figures fi = new Figures();
                fi.setBuy(rs.getString("buy"));
                fi.setBuy_back_commission(rs.getString("buy_back_commission"));
                fi.setBuy_comm_soglia_causale(rs.getString("buy_comm_soglia_causale"));
                fi.setCommissione_acquisto(rs.getString("commissione_acquisto"));
                fi.setCommissione_vendita(rs.getString("commissione_vendita"));
                fi.setCommissione_fissa(rs.getString("commissione_fissa"));
                fi.setDe_supporto(visualizzaStringaMySQL(rs.getString("de_supporto")));
                fi.setFg_annullato(rs.getString("fg_annullato"));
                fi.setFg_sys_trans(rs.getString("fg_sys_trans"));
                fi.setFg_tipo_incasso(rs.getString("fg_tipo_incasso"));
                fi.setFiliale(rs.getString("filiale"));
                fi.setFix_buy_commission(rs.getString("fix_buy_commission"));
                fi.setFix_sell_commission(rs.getString("fix_sell_commission"));
                fi.setSell_back_commission(rs.getString("sell_back_commission"));
                fi.setBuy_back_commission(rs.getString("buy_back_commission"));
                fi.setSell_comm_soglia_causale(rs.getString("sell_comm_soglia_causale"));
                fi.setSupporto(leftPad(rs.getString("supporto"), 2, "0"));
                fi.setResidenti(rs.getString("residenti"));
                fi.setFg_uploadobbl(rs.getString("fg_uploadobbl"));
                fi.setUpload_thr(rs.getString("upl_thr"));
                out.add(fi);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @param filiale
     * @return
     */
    public ArrayList<Figures> list_figures(String filiale) {
        ArrayList<Figures> out = new ArrayList<>();
        try {
            String sql = "SELECT * FROM supporti where filiale = ? ORDER BY fg_sys_trans";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, filiale);
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                Figures fi = new Figures();
                fi.setBuy(rs.getString("buy"));
                fi.setBuy_back_commission(rs.getString("buy_back_commission"));
                fi.setBuy_comm_soglia_causale(rs.getString("buy_comm_soglia_causale"));
                fi.setCommissione_acquisto(rs.getString("commissione_acquisto"));
                fi.setCommissione_vendita(rs.getString("commissione_vendita"));
                fi.setCommissione_fissa(rs.getString("commissione_fissa"));
                fi.setDe_supporto(visualizzaStringaMySQL(rs.getString("de_supporto")));
                fi.setFg_annullato(rs.getString("fg_annullato"));
                fi.setFg_sys_trans(rs.getString("fg_sys_trans"));
                fi.setFg_tipo_incasso(rs.getString("fg_tipo_incasso"));
                fi.setFiliale(rs.getString("filiale"));
                fi.setFix_buy_commission(rs.getString("fix_buy_commission"));
                fi.setFix_sell_commission(rs.getString("fix_sell_commission"));
                fi.setSell_back_commission(rs.getString("sell_back_commission"));
                fi.setBuy_back_commission(rs.getString("buy_back_commission"));
                fi.setSell_comm_soglia_causale(rs.getString("sell_comm_soglia_causale"));
                fi.setSupporto(leftPad(rs.getString("supporto"), 2, "0"));
                fi.setResidenti(rs.getString("residenti"));
                fi.setFg_uploadobbl(rs.getString("fg_uploadobbl"));
                fi.setUpload_thr(rs.getString("upl_thr"));
                out.add(fi);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @return
     */
    public ArrayList<Figures> list_figures_buy() {
        ArrayList<Figures> out = new ArrayList<>();
        try {
            String sql = "SELECT * FROM supporti WHERE buy = ? AND filiale = ? ORDER BY fg_sys_trans";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, "1");
            ps.setString(2, getCodLocal(true)[0]);
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                Figures fi = new Figures();
                fi.setBuy(rs.getString("buy"));
                fi.setBuy_back_commission(rs.getString("buy_back_commission"));
                fi.setBuy_comm_soglia_causale(rs.getString("buy_comm_soglia_causale"));
                fi.setCommissione_acquisto(rs.getString("commissione_acquisto"));
                fi.setCommissione_vendita(rs.getString("commissione_vendita"));
                fi.setDe_supporto(visualizzaStringaMySQL(rs.getString("de_supporto")));
                fi.setFg_annullato(rs.getString("fg_annullato"));
                fi.setFg_sys_trans(rs.getString("fg_sys_trans"));
                fi.setFg_tipo_incasso(rs.getString("fg_tipo_incasso"));
                fi.setFiliale(rs.getString("filiale"));
                fi.setFix_buy_commission(rs.getString("fix_buy_commission"));
                fi.setFix_sell_commission(rs.getString("fix_sell_commission"));
                fi.setSell_back_commission(rs.getString("sell_back_commission"));
                fi.setBuy_back_commission(rs.getString("buy_back_commission"));
                fi.setSell_comm_soglia_causale(rs.getString("sell_comm_soglia_causale"));
                fi.setSupporto(leftPad(rs.getString("supporto"), 2, "0"));
                fi.setResidenti(rs.getString("residenti"));
                fi.setFg_uploadobbl(rs.getString("fg_uploadobbl"));
                fi.setUpload_thr(rs.getString("upl_thr"));
                out.add(fi);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @param cod
     * @param filiale
     * @return
     */
    public Figures get_figures(String cod, String filiale) {
        try {
            String sql = "SELECT * FROM supporti WHERE supporto = ? AND filiale = ? ORDER BY fg_sys_trans";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, cod);
            ps.setString(2, filiale);
            
            ResultSet rs = ps.executeQuery();
            if (rs.next()) {
                Figures fi = new Figures();
                fi.setBuy(rs.getString("buy"));
                fi.setBuy_back_commission(rs.getString("buy_back_commission"));
                fi.setBuy_comm_soglia_causale(rs.getString("buy_comm_soglia_causale"));
                fi.setCommissione_acquisto(rs.getString("commissione_acquisto"));
                fi.setCommissione_vendita(rs.getString("commissione_vendita"));
                fi.setDe_supporto(visualizzaStringaMySQL(rs.getString("de_supporto")));
                fi.setFg_annullato(rs.getString("fg_annullato"));
                fi.setFg_sys_trans(rs.getString("fg_sys_trans"));
                fi.setFg_tipo_incasso(rs.getString("fg_tipo_incasso"));
                fi.setFiliale(rs.getString("filiale"));
                fi.setFix_buy_commission(rs.getString("fix_buy_commission"));
                fi.setFix_sell_commission(rs.getString("fix_sell_commission"));
                fi.setSell_back_commission(rs.getString("sell_back_commission"));
                fi.setBuy_back_commission(rs.getString("buy_back_commission"));
                fi.setSell_comm_soglia_causale(rs.getString("sell_comm_soglia_causale"));
                fi.setSupporto(leftPad(rs.getString("supporto"), 2, "0"));
                fi.setResidenti(rs.getString("residenti"));
                fi.setFg_uploadobbl(rs.getString("fg_uploadobbl"));
                fi.setUpload_thr(rs.getString("upl_thr"));
                return fi;
            } else {
                return get_figures(cod, "000");
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return null;
    }

    /**
     *
     * @return
     */
    public ArrayList<Branch> list_branch() {
        ArrayList<Branch> out = new ArrayList<>();
        try {
            String sql = "SELECT * FROM branch ORDER BY fg_annullato,de_branch";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                Branch ba = new Branch();
                ba.setFiliale(rs.getString("filiale"));
                ba.setCod(rs.getString("cod"));
                ba.setDe_branch(visualizzaStringaMySQL(rs.getString("de_branch")));
                ba.setAdd_city(visualizzaStringaMySQL(rs.getString("add_city")));
                ba.setAdd_cap(rs.getString("add_cap"));
                ba.setAdd_via(visualizzaStringaMySQL(rs.getString("add_via")));
                ba.setFg_persgiur(rs.getString("fg_persgiur"));
                ba.setProv_raccval(rs.getString("prov_raccval"));
                ba.setDa_annull(formatStringtoStringDate(rs.getString("da_annull"), "yyyy-MM-dd", "dd/MM/yyyy"));
                ba.setFg_annullato(rs.getString("fg_annullato"));
                ba.setOpening(rs.getString("pay_terminale"));
                ba.setG01(rs.getString("g01"));
                ba.setG02(rs.getString("g02"));
                ba.setG03(rs.getString("g03"));
                ba.setFg_modrate(rs.getString("fg_modrate"));
                ba.setFg_crm(rs.getString("fg_crm"));
                ba.setFg_pad(rs.getString("fg_pad"));
                ba.setDt_start(rs.getString("dt_start"));
                ba.setMax_ass(rs.getString("max_ass"));
                ba.setTarget(rs.getString("target"));
                
                ba.setBrgr_01(rs.getString("brgr_01"));
                ba.setBrgr_02(rs.getString("brgr_02"));
                ba.setBrgr_03(rs.getString("brgr_03"));
                ba.setBrgr_04(rs.getString("brgr_04"));
                ba.setBrgr_05(rs.getString("brgr_05"));
                ba.setBrgr_06(rs.getString("brgr_06"));
                ba.setBrgr_07(rs.getString("brgr_07"));
                ba.setBrgr_08(rs.getString("brgr_08"));
                ba.setBrgr_09(rs.getString("brgr_09"));
                ba.setBrgr_10(rs.getString("brgr_10"));
                ba.setListagruppi();
                
                out.add(ba);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @param cod
     * @return
     */
    public Branch get_branch(String cod) {
        
        try {
            String sql = "SELECT * FROM branch WHERE cod = ?";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, cod);
            ResultSet rs = ps.executeQuery();
            if (rs.next()) {
                Branch ba = new Branch();
                ba.setFiliale(rs.getString("filiale"));
                ba.setCod(rs.getString("cod"));
                ba.setDe_branch(visualizzaStringaMySQL(rs.getString("de_branch")));
                ba.setAdd_city(visualizzaStringaMySQL(rs.getString("add_city")));
                ba.setAdd_cap(rs.getString("add_cap"));
                ba.setAdd_via(visualizzaStringaMySQL(rs.getString("add_via")));
                ba.setFg_persgiur(rs.getString("fg_persgiur"));
                ba.setProv_raccval(rs.getString("prov_raccval"));
                ba.setDa_annull(formatStringtoStringDate(rs.getString("da_annull"), "yyyy-MM-dd", "dd/MM/yyyy"));
                ba.setFg_annullato(rs.getString("fg_annullato"));
                ba.setOpening(rs.getString("pay_terminale"));
                ba.setG01(rs.getString("g01"));
                ba.setG02(rs.getString("g02"));
                ba.setG03(rs.getString("g03"));
                ba.setFg_modrate(rs.getString("fg_modrate"));
                ba.setFg_crm(rs.getString("fg_crm"));
                ba.setOlta_user(rs.getString("olta_user"));
                ba.setOlta_pass(rs.getString("olta_psw"));
                ba.setFg_pad(rs.getString("fg_pad"));
                ba.setPay_nomeazienda(rs.getString("pay_nomeazienda"));
                ba.setPay_idazienda(rs.getString("pay_idazienda"));
                ba.setPay_skin(rs.getString("pay_skin"));
                ba.setPay_user(rs.getString("pay_user"));
                ba.setPay_password(rs.getString("pay_password"));
                ba.setPay_token(rs.getString("pay_token"));
                ba.setPay_terminale(rs.getString("pay_terminale"));
                ba.setFg_agency(rs.getString("fg_agency"));
                ba.setDt_start(rs.getString("dt_start"));
                ba.setMax_ass(rs.getString("max_ass"));
                ba.setTarget(rs.getString("target"));
                ba.setBrgr_01(rs.getString("brgr_01"));
                ba.setBrgr_02(rs.getString("brgr_02"));
                ba.setBrgr_03(rs.getString("brgr_03"));
                ba.setBrgr_04(rs.getString("brgr_04"));
                ba.setBrgr_05(rs.getString("brgr_05"));
                ba.setBrgr_06(rs.getString("brgr_06"));
                ba.setBrgr_07(rs.getString("brgr_07"));
                ba.setBrgr_08(rs.getString("brgr_08"));
                ba.setBrgr_09(rs.getString("brgr_09"));
                ba.setBrgr_10(rs.getString("brgr_10"));
                ba.setListagruppi();
                return ba;
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return null;
    }

    /**
     *
     * @return
     */
    public Office get_national_office() {
        try {
            String sql = "SELECT * FROM office ";
            
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ResultSet rs = ps.executeQuery();
            if (rs.next()) {
                Office of = new Office();
                of.setCod(rs.getString("cod"));
                of.setDe_office(rs.getString("de_office"));
                of.setAdd_city(rs.getString("add_city"));
                of.setAdd_cap(rs.getString("add_cap"));
                of.setAdd_via(rs.getString("add_via"));
                of.setVat(rs.getString("vat"));
                of.setReg_impr(rs.getString("reg_impr"));
                of.setRea(rs.getString("rea"));
                of.setChangetype(rs.getString("changetype"));
                of.setDecimalround(rs.getString("decimalround"));
                of.setUrl_bl(rs.getString("url_bl"));
                of.setTxt_ricev_1(rs.getString("txt_ricev_1"));
                of.setTxt_ricev_2(rs.getString("txt_ricev_2"));
                of.setTxt_alert_threshold_1(rs.getString("txt_alert_threshold_1"));
                of.setTxt_alert_threshold_2(rs.getString("txt_alert_threshold_2"));
                of.setTxt_ricev_bb(rs.getString("txt_ricev_bb"));
                of.setScadenza_bb(rs.getString("scadenza_bb"));
                of.setShowagency(rs.getString("showagency"));
                of.setMinutes(rs.getString("minutes"));
                of.setKyc_mesi(rs.getString("kyc_mesi"));
                of.setKyc_soglia(rs.getString("kyc_soglia"));
                of.setRisk_days(rs.getString("risk_days"));
                of.setRisk_ntr(rs.getString("risk_ntr"));
                of.setRisk_soglia(rs.getString("risk_soglia"));
                of.setTxt_nopep(rs.getString("txt_nopep"));
                return of;
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return null;
    }

    /**
     *
     * @return
     */
    public ArrayList<Company> list_only_company() {
        ArrayList<Company> out = new ArrayList<>();
        try {
            String sql = "SELECT filiale,ndg,ragione_sociale,paese_estero_residenza,cab_comune,citta,provincia,cap,codice_fiscale,fg_annullato,indirizzo "
                    + "FROM anagrafica_ru WHERE tipo_anagrafica = ? ORDER BY ragione_sociale";
            
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, "G");
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                Company co = new Company();
                co.setFiliale(rs.getString("filiale"));
                co.setNdg(rs.getString("ndg"));
                co.setRagione_sociale(visualizzaStringaMySQL(rs.getString("ragione_sociale")));
                co.setPaese_estero_residenza(rs.getString("paese_estero_residenza"));
                co.setCab_comune(rs.getString("cab_comune"));
                co.setCitta(rs.getString("citta"));
                co.setProvincia(rs.getString("provincia"));
                co.setCap(rs.getString("cap"));
                co.setIndirizzo(visualizzaStringaMySQL(rs.getString("indirizzo")));
                co.setCodice_fiscale(rs.getString("codice_fiscale"));
                co.setFg_annullato(rs.getString("fg_annullato"));
                out.add(co);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @param cod
     * @return
     */
    public Company get_Company(String cod) {
        try {
            String sql = "SELECT indirizzo,filiale,ndg,ragione_sociale,paese_estero_residenza,cab_comune,citta,provincia,cap,codice_fiscale,fg_annullato FROM anagrafica_ru WHERE tipo_anagrafica = ? AND ndg = ? ORDER BY ragione_sociale";
            
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, "G");
            ps.setString(2, cod);
            ResultSet rs = ps.executeQuery();
            if (rs.next()) {
                Company co = new Company();
                co.setFiliale(rs.getString("filiale"));
                co.setNdg(rs.getString("ndg"));
                co.setRagione_sociale(visualizzaStringaMySQL(rs.getString("ragione_sociale")));
                co.setPaese_estero_residenza(rs.getString("paese_estero_residenza"));
                co.setCab_comune(rs.getString("cab_comune"));
                co.setCitta(rs.getString("citta"));
                co.setProvincia(rs.getString("provincia"));
                co.setCap(rs.getString("cap"));
                co.setCodice_fiscale(rs.getString("codice_fiscale"));
                co.setIndirizzo(visualizzaStringaMySQL(rs.getString("indirizzo")));
                co.setFg_annullato(rs.getString("fg_annullato"));
                return co;
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return null;
    }

    /**
     *
     * @param co_cod
     * @return
     */
    public ArrayList<Company> get_Agent_company(String co_cod) {
        ArrayList<Company> out = new ArrayList<>();
        try {
            String sql = "SELECT numero_documento,filiale,ndg,cognome,nome,paese_estero_residenza,cab_comune,citta,provincia,indirizzo,cap,codice_fiscale,dt_nascita,comune_nascita,tipo_documento,dt_rilascio,autorita_rilascio,sesso,dt_scadenza,cod_provincia_nascita,luogo_rilascio_documento,filepath,dt_car,fg_annullato FROM anagrafica_ru WHERE tipo_anagrafica = ? AND ndg_rappresentante = ? AND fg_annullato = ? ORDER BY cognome,nome";
            
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, "F");
            ps.setString(2, co_cod);
            ps.setString(3, "0");
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                Company co = new Company();
                co.setFiliale(rs.getString("filiale"));
                co.setNdg(rs.getString("ndg"));
                co.setNdg_rappresentante(co_cod);
                
                co.setCognome(visualizzaStringaMySQL(rs.getString("cognome")));
                co.setNome(visualizzaStringaMySQL(rs.getString("nome")));
                co.setPaese_estero_residenza(rs.getString("paese_estero_residenza"));
                
                co.setCab_comune(rs.getString("cab_comune"));
                co.setCitta(visualizzaStringaMySQL(rs.getString("citta")));
                co.setProvincia(rs.getString("provincia"));
                co.setIndirizzo(visualizzaStringaMySQL(rs.getString("indirizzo")));
                co.setCap(rs.getString("cap"));
                co.setCodice_fiscale(rs.getString("codice_fiscale"));
                
                co.setDt_nascita(rs.getString("dt_nascita"));
                co.setComune_nascita(visualizzaStringaMySQL(rs.getString("comune_nascita")));
                co.setTipo_documento(rs.getString("tipo_documento"));
                co.setDt_rilascio(rs.getString("dt_rilascio"));
                co.setAutorita_rilascio(visualizzaStringaMySQL(rs.getString("autorita_rilascio")));
                co.setSesso(rs.getString("sesso"));
                
                co.setNumero_documento(rs.getString("numero_documento"));
                co.setDt_scadenza(rs.getString("dt_scadenza"));
                co.setCod_provincia_nascita(rs.getString("cod_provincia_nascita"));
                co.setLuogo_rilascio_documento(rs.getString("luogo_rilascio_documento"));
                co.setFilepath(rs.getString("filepath"));
                co.setDt_car(rs.getString("dt_car"));
                co.setFg_annullato(rs.getString("fg_annullato"));
                out.add(co);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @return
     */
    public ArrayList<Company> get_list_Agent() {
        ArrayList<Company> out = new ArrayList<>();
        try {
            String sql = "SELECT ndg_rappresentante,numero_documento,filiale,ndg,cognome,nome,paese_estero_residenza,cab_comune,citta,provincia,indirizzo,"
                    + "cap,codice_fiscale,dt_nascita,comune_nascita,tipo_documento,dt_rilascio,autorita_rilascio,sesso,dt_scadenza,cod_provincia_nascita,"
                    + "luogo_rilascio_documento,filepath,dt_car,fg_annullato FROM anagrafica_ru WHERE tipo_anagrafica = ? AND fg_annullato = ? ORDER BY cognome,nome";
            
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, "F");
            ps.setString(2, "0");
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                Company co = new Company();
                co.setFiliale(rs.getString("filiale"));
                co.setNdg(rs.getString("ndg"));
                co.setNdg_rappresentante(rs.getString("ndg_rappresentante"));
                co.setCognome(visualizzaStringaMySQL(rs.getString("cognome")));
                co.setNome(visualizzaStringaMySQL(rs.getString("nome")));
                co.setPaese_estero_residenza(rs.getString("paese_estero_residenza"));
                co.setCab_comune(rs.getString("cab_comune"));
                co.setCitta(visualizzaStringaMySQL(rs.getString("citta")));
                co.setProvincia(rs.getString("provincia"));
                co.setIndirizzo(visualizzaStringaMySQL(rs.getString("indirizzo")));
                co.setCap(rs.getString("cap"));
                co.setCodice_fiscale(rs.getString("codice_fiscale"));
                co.setDt_nascita(rs.getString("dt_nascita"));
                co.setComune_nascita(rs.getString("comune_nascita"));
                co.setTipo_documento(rs.getString("tipo_documento"));
                co.setDt_rilascio(rs.getString("dt_rilascio"));
                co.setAutorita_rilascio(rs.getString("autorita_rilascio"));
                co.setSesso(rs.getString("sesso"));
                co.setNumero_documento(rs.getString("numero_documento"));
                co.setDt_scadenza(rs.getString("dt_scadenza"));
                co.setCod_provincia_nascita(rs.getString("cod_provincia_nascita"));
                co.setLuogo_rilascio_documento(rs.getString("luogo_rilascio_documento"));
                co.setFilepath(rs.getString("filepath"));
                co.setDt_car(rs.getString("dt_car"));
                co.setFg_annullato(rs.getString("fg_annullato"));
                out.add(co);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @param co_cod
     * @return
     */
    public Company get_Agent(String co_cod) {
        try {
            String sql = "SELECT ndg_rappresentante,numero_documento,filiale,ndg_rappresentante,cognome,nome,paese_estero_residenza,cab_comune,citta,provincia,indirizzo,cap,codice_fiscale,dt_nascita,comune_nascita,tipo_documento,dt_rilascio,autorita_rilascio,sesso,dt_scadenza,cod_provincia_nascita,luogo_rilascio_documento,filepath,dt_car,fg_annullato FROM anagrafica_ru WHERE tipo_anagrafica = ? AND ndg = ? ORDER BY cognome,nome";
            
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, "F");
            ps.setString(2, co_cod);
            ResultSet rs = ps.executeQuery();
            if (rs.next()) {
                Company co = new Company();
                co.setFiliale(rs.getString("filiale"));
                co.setNdg(co_cod);
                co.setNdg_rappresentante(rs.getString("ndg_rappresentante"));
                
                co.setCognome(visualizzaStringaMySQL(rs.getString("cognome")));
                co.setNome(visualizzaStringaMySQL(rs.getString("nome")));
                co.setPaese_estero_residenza(rs.getString("paese_estero_residenza"));
                
                co.setCab_comune(rs.getString("cab_comune"));
                co.setCitta(rs.getString("citta"));
                co.setProvincia(rs.getString("provincia"));
                co.setIndirizzo(visualizzaStringaMySQL(rs.getString("indirizzo")));
                co.setCap(rs.getString("cap"));
                co.setCodice_fiscale(rs.getString("codice_fiscale"));
                
                co.setDt_nascita(rs.getString("dt_nascita"));
                co.setComune_nascita(rs.getString("comune_nascita"));
                co.setTipo_documento(rs.getString("tipo_documento"));
                co.setDt_rilascio(rs.getString("dt_rilascio"));
                co.setAutorita_rilascio(rs.getString("autorita_rilascio"));
                co.setSesso(rs.getString("sesso"));
                
                co.setNumero_documento(rs.getString("numero_documento"));
                co.setDt_scadenza(rs.getString("dt_scadenza"));
                co.setCod_provincia_nascita(rs.getString("cod_provincia_nascita"));
                co.setLuogo_rilascio_documento(rs.getString("luogo_rilascio_documento"));
                co.setFilepath(rs.getString("filepath"));
                co.setDt_car(rs.getString("dt_car"));
                co.setFg_annullato(rs.getString("fg_annullato"));
                
                return co;
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return null;
    }

    /**
     *
     * @param cod
     * @return
     */
    public String get_TextBlMacc(String cod) {
        try {
            ResultSet rs = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery("SELECT text FROM blacklist WHERE code = '" + cod + "'");
            if (rs.next()) {
                return rs.getString(1);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return null;
    }

    /**
     *
     * @param onlyactive
     * @return
     */
    public ArrayList<BlacklistM> list_BlMacc(boolean onlyactive) {
        ArrayList<BlacklistM> out = new ArrayList<>();
        try {
            ResultSet rs = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery("SELECT * FROM blacklist ORDER BY cognome,nome");
            while (rs.next()) {
                BlacklistM bl = new BlacklistM();
                bl.setCode(rs.getString("code"));
                bl.setCognome(visualizzaStringaMySQL(rs.getString("cognome")));
                bl.setNome(visualizzaStringaMySQL(rs.getString("nome")));
                bl.setSesso(rs.getString("sesso"));
                bl.setCodfisc(rs.getString("codfisc"));
                bl.setNazione(rs.getString("nazione"));
                bl.setCitta(visualizzaStringaMySQL(rs.getString("citta")));
                bl.setIndirizzo(visualizzaStringaMySQL(rs.getString("indirizzo")));
                bl.setCap(rs.getString("cap"));
                bl.setProvincia(rs.getString("provincia"));
                bl.setCitta_nascita(rs.getString("citta_nascita"));
                bl.setProvincia_nascita(rs.getString("provincia_nascita"));
                bl.setNazione_nascita(rs.getString("nazione_nascita"));
                bl.setDt_nascita(rs.getString("dt_nascita"));
                bl.setTipo_documento(rs.getString("tipo_documento"));
                bl.setNumero_documento(rs.getString("numero_documento"));
                bl.setDt_rilascio_documento(rs.getString("dt_rilascio_documento"));
                bl.setDt_scadenza_documento(rs.getString("dt_scadenza_documento"));
                bl.setRilasciato_da_documento(rs.getString("rilasciato_da_documento"));
                bl.setLuogo_rilascio_documento(rs.getString("luogo_rilascio_documento"));
                bl.setEmail(rs.getString("email"));
                bl.setTelefono(rs.getString("telefono"));
                bl.setDt_blocco(rs.getString("dt_blocco"));
                bl.setFg_annullato(rs.getString("fg_annullato"));
                bl.setTimestamp(rs.getString("timestamp"));
                bl.setText(rs.getString("text"));
                if (onlyactive) {
                    if (rs.getString("fg_annullato").equals("0")) {
                        out.add(bl);
                    }
                } else {
                    out.add(bl);
                }
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @param cod
     * @return
     */
    public BlacklistM get_list_BlMacc(String cod) {
        try {
            String sql = "SELECT * FROM blacklist WHERE code = ? ORDER BY cognome,nome";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, cod);
            ResultSet rs = ps.executeQuery();
            if (rs.next()) {
                BlacklistM bl = new BlacklistM();
                bl.setCode(rs.getString("code"));
                bl.setCognome(visualizzaStringaMySQL(rs.getString("cognome")));
                bl.setNome(visualizzaStringaMySQL(rs.getString("nome")));
                bl.setSesso(rs.getString("sesso"));
                bl.setCodfisc(rs.getString("codfisc"));
                bl.setNazione(rs.getString("nazione"));
                bl.setCitta(visualizzaStringaMySQL(rs.getString("citta")));
                bl.setIndirizzo(visualizzaStringaMySQL(rs.getString("indirizzo")));
                bl.setCap(rs.getString("cap"));
                bl.setProvincia(rs.getString("provincia"));
                bl.setCitta_nascita(rs.getString("citta_nascita"));
                bl.setProvincia_nascita(rs.getString("provincia_nascita"));
                bl.setNazione_nascita(rs.getString("nazione_nascita"));
                bl.setDt_nascita(rs.getString("dt_nascita"));
                bl.setTipo_documento(rs.getString("tipo_documento"));
                bl.setNumero_documento(rs.getString("numero_documento"));
                bl.setDt_rilascio_documento(rs.getString("dt_rilascio_documento"));
                bl.setDt_scadenza_documento(rs.getString("dt_scadenza_documento"));
                bl.setRilasciato_da_documento(rs.getString("rilasciato_da_documento"));
                bl.setLuogo_rilascio_documento(rs.getString("luogo_rilascio_documento"));
                bl.setEmail(rs.getString("email"));
                bl.setTelefono(rs.getString("telefono"));
                bl.setDt_blocco(rs.getString("dt_blocco"));
                bl.setFg_annullato(rs.getString("fg_annullato"));
                bl.setTimestamp(rs.getString("timestamp"));
                bl.setText(rs.getString("text"));
                return bl;
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return null;
    }

    /**
     *
     * @param filiale
     * @return
     */
    public ArrayList<Currency> list_currency(String filiale) {
        ArrayList<Currency> out = new ArrayList<>();
        try {
            String sql = "SELECT * FROM valute WHERE filiale = ? ORDER BY valuta";
            
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, filiale);
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                Currency cu = new Currency();
                cu.setCode(rs.getString("valuta"));
                cu.setDescrizione(visualizzaStringaMySQL(rs.getString("de_valuta")));
                cu.setEnable_sellback(rs.getString("cambio_acquisto"));
                cu.setChange_sell(rs.getString("cambio_vendita"));
                
                cu.setUic(rs.getString("codice_uic_divisa"));
                cu.setMessage(rs.getString("de_messaggio"));
                cu.setInternal_cur(rs.getString("fg_valuta_corrente"));
                cu.setId(rs.getString("id"));
                cu.setFilial(rs.getString("filiale"));
                
                cu.setBuy_std(rs.getString("buy_std"));
                cu.setBuy_l1(rs.getString("buy_l1"));
                cu.setBuy_l2(rs.getString("buy_l2"));
                cu.setBuy_l3(rs.getString("buy_l3"));
                cu.setBuy_best(rs.getString("buy_best"));
                
                cu.setSell_std(rs.getString("sell_std"));
                cu.setSell_l1(rs.getString("sell_l1"));
                cu.setSell_l2(rs.getString("sell_l2"));
                cu.setSell_l3(rs.getString("sell_l3"));
                cu.setSell_best(rs.getString("sell_best"));
                
                cu.setEnable_buy(rs.getString("enable_buy"));
                cu.setEnable_sell(rs.getString("enable_sell"));
                
                cu.setCambio_bce(rs.getString("cambio_bce"));
                cu.setBuy_std_type(rs.getString("buy_std_type"));
                cu.setBuy_std_value(rs.getString("buy_std_value"));
                cu.setSell_std_type(rs.getString("sell_std_type"));
                cu.setSell_std_value(rs.getString("sell_std_value"));
                
                out.add(cu);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @param buy
     * @param sell
     * @param filiale
     * @return
     */
    public ArrayList<Currency> list_currency_buy_sell(String buy, String sell, String filiale) {
        ArrayList<Currency> out = new ArrayList<>();
        try {
            String field;
            if (buy.equals("1")) {
                field = "enable_buy";
            } else if (sell.equals("1")) {
                field = "enable_sell";
            } else {
                return out;
            }
            String sql = "SELECT * FROM valute WHERE " + field + " = ? AND filiale = ? ORDER BY valuta";
            
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, "1");
            ps.setString(2, filiale);
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                Currency cu = new Currency();
                cu.setCode(rs.getString("valuta"));
                cu.setDescrizione(visualizzaStringaMySQL(rs.getString("de_valuta")));
                cu.setEnable_sellback(rs.getString("cambio_acquisto"));
                cu.setChange_sell(rs.getString("cambio_vendita"));
                cu.setUic(rs.getString("codice_uic_divisa"));
                cu.setMessage(rs.getString("de_messaggio"));
                cu.setInternal_cur(rs.getString("fg_valuta_corrente"));
                cu.setId(rs.getString("id"));
                cu.setFilial(rs.getString("filiale"));
                
                cu.setBuy_std(rs.getString("buy_std"));
                cu.setBuy_l1(rs.getString("buy_l1"));
                cu.setBuy_l2(rs.getString("buy_l2"));
                cu.setBuy_l3(rs.getString("buy_l3"));
                cu.setBuy_best(rs.getString("buy_best"));
                
                cu.setSell_std(rs.getString("sell_std"));
                cu.setSell_l1(rs.getString("sell_l1"));
                cu.setSell_l2(rs.getString("sell_l2"));
                cu.setSell_l3(rs.getString("sell_l3"));
                cu.setSell_best(rs.getString("sell_best"));
                
                cu.setEnable_buy(rs.getString("enable_buy"));
                cu.setEnable_sell(rs.getString("enable_sell"));
                
                cu.setCambio_bce(rs.getString("cambio_bce"));
                cu.setBuy_std_type(rs.getString("buy_std_type"));
                cu.setBuy_std_value(rs.getString("buy_std_value"));
                cu.setSell_std_type(rs.getString("sell_std_type"));
                cu.setSell_std_value(rs.getString("sell_std_value"));
//                if(rs.getString("fg_valuta_corrente").equals("0")){
                out.add(cu);
//                }

            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @param list
     * @param buy
     * @param sell
     * @return
     */
    public ArrayList<String[]> rate_currency(ArrayList<Currency> list, boolean buy, boolean sell) {
        ArrayList<String[]> out = new ArrayList<>();
        for (int i = 0; i < list.size(); i++) {
            Currency cu = list.get(i);
            String cur = cu.getCode();
            String uic = cu.getUic();
            double d_rifbce = fd(cu.getCambio_bce());
            double d_standard;
            double d_liv1;
            double d_liv2;
            double d_liv3;
            double d_best;
            double tot_st;
            if (buy) {
                d_standard = fd(cu.getBuy_std());
                d_liv1 = fd(cu.getBuy_l1());
                d_liv2 = fd(cu.getBuy_l2());
                d_liv3 = fd(cu.getBuy_l3());
                d_best = fd(cu.getBuy_best());
                String typebuy = cu.getBuy_std_type();
                if (typebuy.equals("0")) {
                    tot_st = d_rifbce * (100.0D + d_standard) / 100.0D;
                } else {
                    tot_st = fd(cu.getBuy_std_value());
                }
            } else if (sell) {
                d_standard = fd(cu.getSell_std());
                d_liv1 = fd(cu.getSell_l1());
                d_liv2 = fd(cu.getSell_l2());
                d_liv3 = fd(cu.getSell_l3());
                d_best = fd(cu.getSell_best());
                
                String typesell = cu.getSell_std_type();
                if (typesell.equals("0")) {
                    tot_st = d_rifbce * (100.0D + d_standard) / 100.0D;
                    
                } else {
                    tot_st = fd(cu.getSell_std_value());
                }
                
            } else {
                return new ArrayList<>();
            }
            double tot_liv1 = d_rifbce * (100.0D + d_liv1) / 100.0D;
            double tot_liv2 = d_rifbce * (100.0D + d_liv2) / 100.0D;
            double tot_liv3 = d_rifbce * (100.0D + d_liv3) / 100.0D;
            double tot_best = d_rifbce * (100.0D + d_best) / 100.0D;
            
            String[] out1 = {roundDoubleandFormat(tot_st, 8), "Std: " + formatMysqltoDisplay(roundDoubleandFormat(tot_st, 8)), cur, uic};
            String[] out2 = {roundDoubleandFormat(tot_liv1, 8), "Lev1: " + formatMysqltoDisplay(roundDoubleandFormat(tot_liv1, 8)), cur, uic};
            String[] out3 = {roundDoubleandFormat(tot_liv2, 8), "Lev2: " + formatMysqltoDisplay(roundDoubleandFormat(tot_liv2, 8)), cur, uic};
            String[] out4 = {roundDoubleandFormat(tot_liv3, 8), "Lev3: " + formatMysqltoDisplay(roundDoubleandFormat(tot_liv3, 8)), cur, uic};
            String[] out5 = {roundDoubleandFormat(tot_best, 8), "Best: " + formatMysqltoDisplay(roundDoubleandFormat(tot_best, 8)), cur, uic};
            
            out.add(out1);
            out.add(out2);
            out.add(out3);
            out.add(out4);
            out.add(out5);
        }
        return out;
    }

    /**
     *
     * @return
     */
    public ArrayList<Company> get_list_Agent_company() {
        ArrayList<Company> out = new ArrayList<>();
        try {
            String sql = "SELECT co.ndg,co.ragione_sociale,ag.ndg,ag.cognome,ag.nome FROM anagrafica_ru co, anagrafica_ru ag "
                    + "WHERE co.ndg = ag.ndg_rappresentante AND co.tipo_anagrafica = ? AND co.fg_annullato = ? AND ag.fg_annullato = ? AND ag.dt_scadenza >= curdate() "
                    + "ORDER BY co.ragione_sociale,ag.cognome,ag.nome";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, "G");
            ps.setString(2, "0");
            ps.setString(3, "0");
            ResultSet rs = ps.executeQuery();
            
            while (rs.next()) {
                Company co = new Company();
                co.setNdg(rs.getString("ag.ndg"));
                co.setNdg_rappresentante(rs.getString("co.ndg"));
                co.setCognome(visualizzaStringaMySQL(rs.getString("ag.cognome")));
                co.setNome(visualizzaStringaMySQL(rs.getString("ag.nome")));
                co.setRagione_sociale(visualizzaStringaMySQL(rs.getString("co.ragione_sociale")));
                out.add(co);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @param filiale
     * @return
     */
    public ArrayList<String[]> rate_range(String filiale) {
        ArrayList<String[]> out = new ArrayList<>();
        try {
            String sql = "SELECT supporto,minimo,massimo,buy_value,sell_value,fg_blocco FROM rate_range WHERE filiale = ? order by supporto,cast(minimo AS decimal (10,0))";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, filiale);
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                String[] o1 = {rs.getString(1), rs.getString(2), rs.getString(3), rs.getString(4), rs.getString(5), rs.getString(6)};
                out.add(o1);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @param kind
     * @return
     */
    public ArrayList<String[]> rate_range_enabled(String kind) {
        ArrayList<String[]> out = new ArrayList<>();
        try {
            String sql = "SELECT supporto,minimo,massimo,buy_value,sell_value FROM rate_range WHERE fg_blocco = ? AND supporto = ? ORDER BY supporto,cast(minimo AS decimal (10,0))";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, "0");
            ps.setString(2, kind);
            
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                String[] o1 = {rs.getString(1), rs.getString(2), rs.getString(3), rs.getString(4), rs.getString(5)};
                out.add(o1);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @return
     */
    public ArrayList<String[]> rate_range_enabled() {
        ArrayList<String[]> out = new ArrayList<>();
        try {
            String sql = "SELECT supporto,minimo,massimo,buy_value,sell_value FROM rate_range WHERE fg_blocco = ? ORDER BY supporto,cast(minimo AS decimal (10,0))";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, "0");
            
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                String[] o1 = {rs.getString(1), rs.getString(2), rs.getString(3), rs.getString(4), rs.getString(5)};
                out.add(o1);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @param kind
     * @param min
     * @param filiale
     * @return
     */
    public String[] get_rate_range(String kind, String min, String filiale) {
        try {
            String sql = "SELECT buy_value,sell_value,fg_blocco,massimo FROM rate_range WHERE supporto = ? AND minimo = ? AND filiale = ? order by supporto,cast(minimo AS decimal (10,0))";
            
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, kind);
            ps.setString(2, min);
            ps.setString(3, filiale);
            
            ResultSet rs = ps.executeQuery();
            if (rs.next()) {
                return new String[]{rs.getString(1), rs.getString(2), rs.getString(3), rs.getString(4)};
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return null;
    }

    /**
     *
     * @return
     */
    public ArrayList<String[]> kind_currency_enabled() {
        ArrayList<String[]> out = new ArrayList<>();
        try {
            String sql = "SELECT supporto,valuta FROM supporti_valuta WHERE annullato = ? AND filiale = ? ORDER BY supporto,valuta";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, "0");
            ps.setString(2, getCodLocal(true)[0]);
            ResultSet rs = ps.executeQuery();
            
            while (rs.next()) {
                String[] o1 = {rs.getString(1), rs.getString(2)};
                out.add(o1);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @return
     */
    public ArrayList<String[]> currency_min_sizes() {
        ArrayList<String[]> out = new ArrayList<>();
        try {
            String sql = "SELECT valuta,min(CAST(ip_taglio AS DECIMAL(12,2))) FROM valute_tagli where filiale = ? AND fg_stato = ? GROUP BY valuta ORDER BY valuta";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, getCodLocal(true)[0]);
            ps.setString(2, "1");
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                String[] o1 = {rs.getString(1), rs.getString(2)};
                out.add(o1);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @return
     */
    public String[] get_local_currency() {
        try {
            String sql = "SELECT valuta,codice_uic_divisa FROM valute WHERE fg_valuta_corrente = ?";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, "1");
            ResultSet rs = ps.executeQuery();
            if (rs.next()) {
                return new String[]{rs.getString(1), rs.getString(2)};
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        if (is_UK) {
            return new String[]{"GBP", "002"};
        } else if (is_CZ) {
            return new String[]{"CZK", "223"};
        } else {
            return new String[]{"EUR", "242"};
        }
    }

    /**
     *
     * @return
     */
    public ArrayList<Figures> list_figures_sell() {
        ArrayList<Figures> out = new ArrayList<>();
        try {
            String sql = "SELECT * FROM supporti WHERE sell = ? AND filiale = ? ORDER BY fg_sys_trans";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, "1");
            ps.setString(2, getCodLocal(true)[0]);
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                Figures fi = new Figures();
                fi.setCommissione_vendita(rs.getString("commissione_vendita"));
                fi.setCommissione_fissa(rs.getString("commissione_fissa"));
                fi.setDe_supporto(visualizzaStringaMySQL(rs.getString("de_supporto")));
                fi.setFg_annullato(rs.getString("fg_annullato"));
                fi.setFg_sys_trans(rs.getString("fg_sys_trans"));
                fi.setFiliale(rs.getString("filiale"));
                fi.setFix_sell_commission(rs.getString("fix_sell_commission"));
                fi.setSell_back_commission(rs.getString("sell_back_commission"));
                fi.setBuy_back_commission(rs.getString("buy_back_commission"));
                fi.setSell_comm_soglia_causale(rs.getString("sell_comm_soglia_causale"));
                fi.setSupporto(leftPad(rs.getString("supporto"), 2, "0"));
                fi.setResidenti(rs.getString("residenti"));
                fi.setFg_uploadobbl(rs.getString("fg_uploadobbl"));
                fi.setUpload_thr(rs.getString("upl_thr"));
                out.add(fi);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @return
     */
    public ArrayList<NC_causal> list_nc_causal_sell() {
        ArrayList<NC_causal> out = new ArrayList<>();
        try {
            String sql = "SELECT * FROM nc_causali WHERE fg_tipo_transazione_nc = ? AND annullato = ? AND fg_batch = ? AND filiale = ? order by causale_nc";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, "3");
            ps.setString(2, "0");
            ps.setString(3, "1");
            ps.setString(4, getCodLocal(true)[0]);
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                NC_causal nc1 = new NC_causal();
                nc1.setFiliale(rs.getString("filiale"));
                nc1.setGruppo_nc(rs.getString("gruppo_nc"));
                nc1.setCausale_nc(rs.getString("causale_nc"));
                nc1.setDe_causale_nc(visualizzaStringaMySQL(rs.getString("de_causale_nc")));
                nc1.setFg_in_out(rs.getString("fg_in_out"));
                nc1.setIp_prezzo_nc(rs.getString("ip_prezzo_nc"));
                nc1.setFg_tipo_transazione_nc(rs.getString("fg_tipo_transazione_nc"));
                nc1.setAnnullato(rs.getString("annullato"));
                nc1.setNc_de(rs.getString("nc_de"));
                nc1.setFg_batch(rs.getString("fg_batch"));
                nc1.setFg_gruppo_stampa(rs.getString("fg_gruppo_stampa"));
                nc1.setFg_scontrino(rs.getString("fg_scontrino"));
                nc1.setTicket_fee_type(rs.getString("ticket_fee_type"));
                nc1.setTicket_fee(rs.getString("ticket_fee"));
                nc1.setMax_ticket(rs.getString("max_ticket"));
                nc1.setData(rs.getString("data"));
                nc1.setBonus(rs.getString("bonus"));
                nc1.setCodice_integr(rs.getString("codice_integr"));
                nc1.setPaymat(rs.getString("paymat"));
                nc1.setDocric(rs.getString("docric"));
                out.add(nc1);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @return
     */
    public int getlastId_nc_trans() {
        try {
            String sql = "SELECT id FROM ch_transaction WHERE filiale = ? ORDER BY data DESC LIMIT 1";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, getCodLocal(true)[0]);
            ResultSet rs = ps.executeQuery();
            if (rs.next()) {
                return rs.getInt(1);
            }
            return 0;
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return -1;
    }

    /**
     *
     * @return
     */
    public String getNow() {
        try {
            String sql = "SELECT now()";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ResultSet rs = ps.executeQuery();
            if (rs.next()) {
                return rs.getString(1);
            }
        } catch (Exception ex) {
            //insertTR("E", "System",Thread.currentThread().getStackTrace()[1].getMethodName()+": "+ex.getMessage());
        }
        return new DateTime().toString("yyyy-MM-dd HH:mm:ss");
    }

    /**
     *
     * @return
     */
    public DateTime getNowDT() {
        try {
            String sql = "SELECT now()";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ResultSet rs = ps.executeQuery();
            if (rs.next()) {
                DateTimeFormatter formatter = forPattern(patternsqldate);
                return formatter.parseDateTime(rs.getString(1).substring(0, 19));
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return new DateTime();
    }

    /**
     *
     * @return
     */
    public DateTime getCurdateDT() {
        try {
            String sql = "SELECT curdate()";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ResultSet rs = ps.executeQuery();
            if (rs.next()) {
                DateTimeFormatter formatter = forPattern(patternsql);
                return formatter.parseDateTime(rs.getString(1));
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return new DateTime();
    }

    /**
     *
     * @return
     */
    public ArrayList<String[]> list_till_enabled() {
        ArrayList<String[]> out = new ArrayList<>();
        try {
            String sql = "SELECT cod,de_till,fg_tipo FROM till WHERE fg_annullato = ? AND filiale = ? ORDER BY fg_tipo,de_till";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, "0");
            ps.setString(2, getCodLocal(true)[0]);
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                String[] o1 = {rs.getString(1), visualizzaStringaMySQL(rs.getString(2)), rs.getString(3)};
                out.add(o1);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @param type
     * @param user
     * @param filiale
     * @return
     */
    public ArrayList<Till> list_till_status(String type, String user, String filiale) {
        ArrayList<Till> out = new ArrayList<>();
        ArrayList<Till> all = list_ALLtill(filiale);
        try {
            
            Statement st = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            
            String sql = "SELECT f.filiale,f.cod,f.data,f.id,f.user,f.fg_tipo,f.till FROM (SELECT till,"
                    + " MAX(data) AS maxd FROM oc_lista WHERE filiale = '" + filiale + "' GROUP BY till) AS x INNER JOIN oc_lista AS f ON f.till = x.till"
                    + " AND f.data = x.maxd AND f.filiale = '" + filiale + "' ";
            
            if (type != null) {
                sql = sql + " AND f.fg_tipo = '" + type + "'";
            }
            if (user != null && !user.equals("")) {
                sql = sql + " AND f.user = '" + user + "'";
            }
            
            sql = sql + " ORDER BY f.till";
            ResultSet rs = st.executeQuery(sql);
            while (rs.next()) {
                Till t = new Till(rs.getString(1), rs.getString(2), rs.getString(3),
                        format("%015d", new Object[]{rs.getInt(4)}), rs.getString(5), rs.getString(6), rs.getString(7),
                        formatDescTill(all, rs.getString(7)), isSafeTill(all, rs.getString(7)));
                out.add(t);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @param data1
     * @param data2
     * @param filiale
     * @return
     */
    public ArrayList<Till> list_till_status_data(String data1, String data2, String filiale) {
        ArrayList<Till> out = new ArrayList<>();
        ArrayList<Till> all = list_ALLtill();
        try {
            
            Statement st = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            
            String sql = "SELECT f.filiale,f.cod,f.data,f.id,f.user,f.fg_tipo,f.till FROM (SELECT till,"
                    + " MAX(data) AS maxd FROM oc_lista WHERE data<'" + data2 + ":59' GROUP BY till) AS x INNER JOIN oc_lista AS f ON f.till = x.till"
                    + " AND f.data = x.maxd AND f.filiale = '" + filiale + "' ";
            
            sql = sql + " ORDER BY f.till";
            ResultSet rs = st.executeQuery(sql);
            while (rs.next()) {
                Till t = new Till(rs.getString(1), rs.getString(2), rs.getString(3),
                        format("%015d", new Object[]{rs.getInt(4)}), rs.getString(5), rs.getString(6), rs.getString(7),
                        formatDescTill(all, rs.getString(7)), isSafeTill(all, rs.getString(7)));
                out.add(t);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @param type
     * @param user
     * @return
     */
    public ArrayList<Till> list_onlytill_status(String type, String user) {
        ArrayList<Till> out = new ArrayList<>();
        ArrayList<Till> all = list_ALLtill(filiale);
        try {
            Statement st = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            String sql = "SELECT f.filiale,f.cod,f.data,f.id,f.user,f.fg_tipo,f.till FROM (SELECT till,"
                    + " MAX(data) AS maxd FROM oc_lista WHERE filiale = '" + filiale + "' GROUP BY till) AS x INNER JOIN oc_lista AS f ON f.till = x.till"
                    + " AND f.data = x.maxd AND f.filiale = '" + filiale + "' ";
            if (type != null) {
                sql = sql + " AND f.fg_tipo = '" + type + "'";
            }
            if (user != null && !user.equals("")) {
                sql = sql + " AND f.user = '" + user + "'";
            }
            sql = sql + " ORDER BY f.till";
            ResultSet rs = st.executeQuery(sql);
            while (rs.next()) {
                if (!isSafeTill(all, rs.getString(7))) {
                    Till t = new Till(rs.getString(1), rs.getString(2), rs.getString(3),
                            format("%015d", new Object[]{rs.getInt(4)}), rs.getString(5), rs.getString(6), rs.getString(7),
                            formatDescTill(all, rs.getString(7)), isSafeTill(all, rs.getString(7)));
                    out.add(t);
                }
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @param type
     * @param user
     * @return
     */
    public ArrayList<Till> list_till_status(String type, String user) {
        ArrayList<Till> out = new ArrayList<>();
        String fil = getCodLocal(true)[0];
        ArrayList<Till> all = list_ALLtill(fil);
        try {
            
            Statement st = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            String sql = "SELECT f.filiale,f.cod,f.data,f.id,f.user,f.fg_tipo,f.till FROM (SELECT till,"
                    + " MAX(data) AS maxd FROM oc_lista WHERE filiale = '" + fil + "' GROUP BY till) AS x INNER JOIN oc_lista AS f ON f.till = x.till"
                    + " AND f.data = x.maxd AND f.filiale = '" + fil + "' ";
            
            if (type != null) {
                sql = sql + " AND f.fg_tipo = '" + type + "'";
            }
            if (user != null && !user.equals("")) {
                sql = sql + " AND f.user = '" + user + "'";
            }
            
            sql = sql + " ORDER BY f.till";
            ResultSet rs = st.executeQuery(sql);
            while (rs.next()) {
                Till t = new Till(rs.getString(1), rs.getString(2), rs.getString(3),
                        format("%015d", new Object[]{rs.getInt(4)}), rs.getString(5), rs.getString(6), rs.getString(7),
                        formatDescTill(all, rs.getString(7)), isSafeTill(all, rs.getString(7)));
                out.add(t);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @param type
     * @param user
     * @param fil
     * @return
     */
    public ArrayList<Till> list_till_status_new(String type, String user, String fil) {
        ArrayList<Till> out = new ArrayList<>();
        ArrayList<Till> all = list_ALLtill(fil);
        try {
            Statement st = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            String sql = "SELECT f.filiale,f.cod,f.data,f.id,f.user,f.fg_tipo,f.till FROM (SELECT till,"
                    + " MAX(data) AS maxd FROM oc_lista WHERE filiale = '" + fil + "' GROUP BY till) AS x INNER JOIN oc_lista AS f ON f.till = x.till"
                    + " AND f.data = x.maxd AND f.filiale = '" + fil + "' ";
            if (type != null) {
                sql = sql + " AND f.fg_tipo = '" + type + "'";
            }
            if (user != null && !user.equals("")) {
                sql = sql + " AND f.user = '" + user + "'";
            }
            
            sql = sql + " ORDER BY f.till";
            ResultSet rs = st.executeQuery(sql);
            while (rs.next()) {
                Till t = new Till(rs.getString(1), rs.getString(2), rs.getString(3),
                        format("%015d", new Object[]{rs.getInt(4)}), rs.getString(5), rs.getString(6), rs.getString(7),
                        formatDescTill(all, rs.getString(7)), isSafeTill(all, rs.getString(7)));
                out.add(t);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @param user
     * @return
     */
    public Till get_till_opened(String user) {
        String fil = getCodLocal(true)[0];
        ArrayList<Till> all = list_ALLtill(fil);
        try {
            Statement st = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            String sql = "SELECT f.filiale,f.cod,f.data,f.id,f.user,f.fg_tipo,f.till FROM (SELECT till,"
                    + " MAX(data) AS maxd FROM oc_lista WHERE filiale = '" + fil + "' GROUP BY till) AS x INNER JOIN oc_lista AS f ON f.till = x.till"
                    + " AND f.data = x.maxd AND f.filiale = '" + fil + "' ";
            sql = sql + " AND f.fg_tipo = 'O'";
            if (user != null && !user.equals("")) {
                sql = sql + " AND f.user = '" + user + "'";
            }
            sql = sql + " ORDER BY f.till";
            ResultSet rs = st.executeQuery(sql);
            while (rs.next()) {
                Till t = new Till(rs.getString(1), rs.getString(2), rs.getString(3),
                        format("%015d", new Object[]{rs.getInt(4)}), rs.getString(5), rs.getString(6), rs.getString(7),
                        formatDescTill(all, rs.getString(7)), isSafeTill(all, rs.getString(7)));
                
                if (!t.isSafe()) {
                    return t;
                }
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return null;
    }

    /**
     *
     * @return
     */
    public ArrayList<String[]> list_oc_change() {
        ArrayList<String[]> out = new ArrayList<>();
        try {
            String sql = "SELECT cod_oc,kind,valuta,value_op,num_kind_op,value_cl,num_kind_cl "
                    + "FROM oc_change where data >= DATE(NOW()) - INTERVAL 15 DAY ORDER BY cod_oc desc,data";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                String[] o1 = {rs.getString(1).trim(), rs.getString(2).trim(), rs.getString(3).trim(),
                    rs.getString(4).trim(), rs.getString(5).trim(), rs.getString(6).trim(), rs.getString(7).trim()};
                out.add(o1);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @param cod_oc
     * @return
     */
    public ArrayList<String[]> list_oc_change(String cod_oc) {
        ArrayList<String[]> out = new ArrayList<>();
        try {
            String sql = "SELECT cod_oc,kind,valuta,value_op,num_kind_op,value_cl,num_kind_cl,filiale FROM oc_change where cod_oc = ?";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, cod_oc);
            
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                String[] o1 = {rs.getString(1).trim(), rs.getString(2).trim(), rs.getString(3).trim(),
                    rs.getString(4).trim(), rs.getString(5).trim(),
                    rs.getString(6).trim(), rs.getString(7).trim(), rs.getString(8).trim()};
                out.add(o1);
            }
        } catch (SQLException ex) {
            
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @param cod_oc
     * @return
     */
    public ArrayList<String[]> list_oc_change_fisici(String cod_oc) {
        ArrayList<String[]> out = new ArrayList<>();
        try {
            String sql = "SELECT cod_oc,kind,valuta,value_op,num_kind_op,value_cl,num_kind_cl,filiale FROM oc_change where cod_oc = ? AND fisico = ?";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, cod_oc);
            ps.setString(2, "S");
            
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                String[] o1 = {rs.getString(1).trim(), rs.getString(2).trim(), rs.getString(3).trim(),
                    rs.getString(4).trim(), rs.getString(5).trim(),
                    rs.getString(6).trim(), rs.getString(7).trim(), rs.getString(8).trim()};
                out.add(o1);
            }
        } catch (SQLException ex) {
            
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @param cod_oc
     * @return
     */
    public ArrayList<String[]> list_oc_change_real(String cod_oc) {
        ArrayList<String[]> out = new ArrayList<>();
        try {
            String sql = "SELECT cod_oc,kind,valuta,value_op,num_kind_op FROM real_oc_change where cod_oc = ? ORDER BY valuta,data";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, cod_oc);
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                String[] o1 = {rs.getString(1).trim(), rs.getString(2).trim(), rs.getString(3).trim(),
                    roundDoubleandFormat(fd(rs.getString(4).trim()), 2), rs.getString(5).trim()};
                out.add(o1);
                
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @return
     */
    public ArrayList<String[]> list_oc_change_real() {
        ArrayList<String[]> out = new ArrayList<>();
        try {
            String sql = "SELECT cod_oc,kind,valuta,value_op,num_kind_op "
                    + "FROM real_oc_change where data >= DATE(NOW()) - INTERVAL 15 DAY ORDER BY cod_oc desc,valuta,kind,data";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                String[] o1 = {rs.getString(1).trim(), rs.getString(2).trim(), rs.getString(3).trim(),
                    roundDoubleandFormat(fd(rs.getString(4).trim()), 2), rs.getString(5).trim()};
                out.add(o1);
                
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @param user
     * @return
     */
    public ArrayList<String[]> list_oc_change_real_user(String user) {
        ArrayList<String[]> out = new ArrayList<>();
        try {
            String sql = "SELECT cod_oc,kind,valuta,value_op,num_kind_op FROM real_oc_change where data >= DATE(NOW()) - INTERVAL 75 DAY "
                    + "AND cod_oc in (SELECT cod FROM oc_lista where user = ?) ORDER BY cod_oc desc,valuta,data;";
            
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, user);
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                String[] o1 = {rs.getString(1).trim(), rs.getString(2).trim(), rs.getString(3).trim(),
                    rs.getString(4).trim(), rs.getString(5).trim()};
                out.add(o1);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @param cod_oc
     * @return
     */
    public ArrayList<String[]> list_oc_change_cuts(String cod_oc) {
        ArrayList<String[]> out = new ArrayList<>();
        try {
            String sql = "SELECT cod_oc,valuta,kind,ip_taglio,ip_quantity,ip_value FROM oc_change_tg WHERE cod_oc = ? "
                    + "ORDER BY cod_oc ASC,valuta ASC,CAST(ip_taglio AS DECIMAL(12,2)) DESC;";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, cod_oc);
            ResultSet rs = ps.executeQuery();
            
            while (rs.next()) {
                String[] o1 = {rs.getString(1), rs.getString(2), rs.getString(3), rs.getString(4), rs.getString(5), rs.getString(6)};
                out.add(o1);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @param cod_oc
     * @return
     */
    public ArrayList<String[]> list_oc_change_cuts_fisici(String cod_oc) {
        ArrayList<String[]> out = new ArrayList<>();
        try {
            String sql = "SELECT cod_oc,valuta,kind,ip_taglio,ip_quantity,ip_value FROM oc_change_tg WHERE cod_oc = ? AND fisico = ? "
                    + "ORDER BY cod_oc ASC,valuta ASC,CAST(ip_taglio AS DECIMAL(12,2)) DESC;";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, cod_oc);
            ps.setString(2, "S");
            ResultSet rs = ps.executeQuery();
            
            while (rs.next()) {
                String[] o1 = {rs.getString(1), rs.getString(2), rs.getString(3), rs.getString(4), rs.getString(5), rs.getString(6)};
                out.add(o1);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @param cod_oc
     * @return
     */
    public ArrayList<String[]> list_oc_change_cuts_real(String cod_oc) {
        ArrayList<String[]> out = new ArrayList<>();
        try {
            String sql = "SELECT cod_oc,valuta,kind,ip_taglio,ip_quantity,ip_value FROM real_oc_change_tg "
                    + "WHERE cod_oc = ? ORDER BY cod_oc ASC,valuta ASC,CAST(ip_taglio AS DECIMAL(12,2)) DESC;";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, cod_oc);
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                String[] o1 = {rs.getString(1), rs.getString(2), rs.getString(3), rs.getString(4), rs.getString(5), rs.getString(6)};
                out.add(o1);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @param cod_oc
     * @return
     */
    public ArrayList<String[]> list_oc_nochange(String cod_oc) {
        ArrayList<String[]> out = new ArrayList<>();
        try {
            String sql = "SELECT cod_oc,gruppo_nc,quantity_user,quantity_system,filiale FROM oc_nochange WHERE cod_oc = ? ORDER BY gruppo_nc";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, cod_oc);
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                String[] o1 = {rs.getString(1), rs.getString(2), rs.getString(3), rs.getString(4), rs.getString(5)};
                out.add(o1);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @param cod_oc
     * @return
     */
    public ArrayList<String[]> list_oc_nochange_fisici(String cod_oc) {
        ArrayList<String[]> out = new ArrayList<>();
        try {
            String sql = "SELECT cod_oc,gruppo_nc,quantity_user,quantity_system,filiale FROM oc_nochange WHERE cod_oc = ? AND fisico = ? ORDER BY gruppo_nc";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, cod_oc);
            ps.setString(2, "S");
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                String[] o1 = {rs.getString(1), rs.getString(2), rs.getString(3), rs.getString(4), rs.getString(5)};
                out.add(o1);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @param cod_oc
     * @return
     */
    public ArrayList<String[]> list_oc_errors(String cod_oc) {
        ArrayList<String[]> out = new ArrayList<>();
        try {
            String sql = "SELECT cod,tipo,valuta,kind,gruppo_nc,carta_credito,note,total_diff,rate,data,"
                    + "quantity_user,total_user,quantity_system,total_system"
                    + " FROM oc_errors WHERE cod = ? ORDER BY tipo,valuta,kind,gruppo_nc,carta_credito";
            
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, cod_oc);
            ResultSet rs = ps.executeQuery();
            
            while (rs.next()) {
                String[] o1 = {rs.getString(1), rs.getString(2), rs.getString(3), rs.getString(4), rs.getString(5),
                    rs.getString(6), rs.getString(7), rs.getString(8), rs.getString(9), rs.getString(10),
                    rs.getString(11),
                    rs.getString(12), rs.getString(13), rs.getString(14)};
                out.add(o1);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @param day
     * @return
     */
    public ArrayList<String[]> list_oc_nochange(int day) {
        ArrayList<String[]> out = new ArrayList<>();
        try {
            String sql = "SELECT cod_oc,gruppo_nc,quantity_user FROM oc_nochange WHERE data >= DATE_SUB(curdate(),INTERVAL " + day + " DAY) ORDER BY cod_oc,gruppo_nc";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                String[] o1 = {rs.getString(1), rs.getString(2), rs.getString(3)};
                out.add(o1);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @return
     */
    public ArrayList<String[]> list_oc_nochange_real() {
        ArrayList<String[]> out = new ArrayList<>();
        try {
            String sql = "SELECT cod_oc,gruppo_nc,quantity FROM real_oc_nochange ORDER BY gruppo_nc";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                String[] o1 = {rs.getString(1), rs.getString(2), rs.getString(3)};
                out.add(o1);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @param cod_oc
     * @return
     */
    public ArrayList<String[]> list_oc_nochange_real(String cod_oc) {
        ArrayList<String[]> out = new ArrayList<>();
        try {
            String sql = "SELECT cod_oc,gruppo_nc,quantity FROM real_oc_nochange WHERE cod_oc = ? ORDER BY gruppo_nc";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, cod_oc);
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                String[] o1 = {
                    rs.getString(1),
                    rs.getString(2),
                    roundDoubleandFormat(fd(rs.getString(3)), 0)};
                out.add(o1);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @return
     */
    public ArrayList<String[]> list_bank_enabled() {
        ArrayList<String[]> out = new ArrayList<>();
        try {
            String sql = "SELECT cod,de_bank,conto,bank_account FROM bank WHERE fg_annullato = ? ORDER BY de_bank";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, "0");
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                String[] o1 = {rs.getString(1), visualizzaStringaMySQL(rs.getString(2)), rs.getString(3), rs.getString(4)};
                out.add(o1);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @return
     */
    public ArrayList<String[]> list_only_bank_enabled() {
        ArrayList<String[]> out = new ArrayList<>();
        try {
            String sql = "SELECT cod,de_bank,conto,bank_account FROM bank WHERE fg_annullato = ? AND bank_account = ? ORDER BY de_bank";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, "0");
            ps.setString(2, "N");
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                String[] o1 = {rs.getString(1), visualizzaStringaMySQL(rs.getString(2)), rs.getString(3), rs.getString(4)};
                out.add(o1);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @return
     */
    public ArrayList<String[]> list_only_bank_enabled_new() {
        ArrayList<String[]> out = new ArrayList<>();
        try {
            String sql = "SELECT cod,de_bank,conto,bank_account FROM bank WHERE fg_annullato = ?"
                    + " AND cod NOT IN (select distinct(carta_credito) from carte_credito WHERE fg_annullato = ?)  ORDER BY de_bank";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, "0");
            ps.setString(2, "0");
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                String[] o1 = {rs.getString(1), visualizzaStringaMySQL(rs.getString(2)), rs.getString(3), rs.getString(4)};
                out.add(o1);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @return
     */
    public ArrayList<String[]> list_bank_pos_enabled() {
        ArrayList<String[]> out = new ArrayList<>();
        try {
            
            if (is_IT) {
                String sql = "SELECT cod,de_bank,conto,bank_account FROM bank WHERE fg_annullato = ? AND (bank_account = ? OR cod in (select distinct(carta_credito) "
                        + "from carte_credito)) ORDER BY de_bank";
                PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
                ps.setString(1, "0");
                ps.setString(2, "Y");
                ResultSet rs = ps.executeQuery();
                while (rs.next()) {
                    String[] o1 = {rs.getString(1), visualizzaStringaMySQL(rs.getString(2)), rs.getString(3), rs.getString(4)};
                    out.add(o1);
                }
            } else {
                String sql = "SELECT carta_credito,de_carta_credito FROM carte_credito WHERE fg_annullato = ? AND filiale = ? ORDER BY de_carta_credito";
                PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
                ps.setString(1, "0");
                ps.setString(2, getCodLocal(false)[0]);
                ResultSet rs = ps.executeQuery();
                while (rs.next()) {
                    String[] o1 = {rs.getString(1), visualizzaStringaMySQL(rs.getString(2)), "000000", "Y"};
                    out.add(o1);
                }
            }
            
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @return
     */
    public ArrayList<Branch> list_branch_completeAFTER311217() {
        
        ArrayList<Branch> out = new ArrayList<>();
        try {
            String sql = "SELECT * FROM branch WHERE fg_annullato='0' OR (fg_annullato='1' AND STR_TO_DATE(da_annull, '%Y-%m-%d')>'2017-12-31') ORDER BY de_branch";
            ResultSet rs = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql);
            while (rs.next()) {
                Branch ba = new Branch();
                ba.setFiliale(rs.getString("filiale"));
                ba.setCod(rs.getString("cod"));
                ba.setDe_branch(visualizzaStringaMySQL(rs.getString("de_branch")));
                ba.setAdd_city(visualizzaStringaMySQL(rs.getString("add_city")));
                ba.setAdd_cap(visualizzaStringaMySQL(rs.getString("add_cap")));
                ba.setAdd_via(visualizzaStringaMySQL(rs.getString("add_via")));
                ba.setFg_persgiur(rs.getString("fg_persgiur"));
                ba.setProv_raccval(rs.getString("prov_raccval"));
                ba.setDa_annull(formatStringtoStringDate(rs.getString("da_annull"), "yyyy-MM-dd", "dd/MM/yyyy"));
                ba.setFg_annullato(rs.getString("fg_annullato"));
                ba.setOpening(rs.getString("pay_terminale"));
                ba.setG01(rs.getString("g01"));
                ba.setG02(rs.getString("g02"));
                ba.setG03(rs.getString("g03"));
                ba.setFg_modrate(rs.getString("fg_modrate"));
                ba.setFg_crm(rs.getString("fg_crm"));
                ba.setFg_agency(rs.getString("fg_agency"));
                ba.setFg_pad(rs.getString("fg_pad"));
                ba.setDt_start(rs.getString("dt_start"));
                ba.setMax_ass(rs.getString("max_ass"));
                ba.setTarget(rs.getString("target"));
                ba.setBrgr_01(rs.getString("brgr_01"));
                ba.setBrgr_02(rs.getString("brgr_02"));
                ba.setBrgr_03(rs.getString("brgr_03"));
                ba.setBrgr_04(rs.getString("brgr_04"));
                ba.setBrgr_05(rs.getString("brgr_05"));
                ba.setBrgr_06(rs.getString("brgr_06"));
                ba.setBrgr_07(rs.getString("brgr_07"));
                ba.setBrgr_08(rs.getString("brgr_08"));
                ba.setBrgr_09(rs.getString("brgr_09"));
                ba.setBrgr_10(rs.getString("brgr_10"));
                ba.setListagruppi();
                out.add(ba);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
        
    }

    /**
     *
     * @return
     */
    public ArrayList<Branch> list_branch_enabled() {
        ArrayList<Branch> out = new ArrayList<>();
        try {
            String sql = "SELECT * FROM branch WHERE fg_annullato = ? ORDER BY de_branch";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, "0");
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                Branch ba = new Branch();
                ba.setFiliale(rs.getString("filiale"));
                ba.setCod(rs.getString("cod"));
                ba.setDe_branch(visualizzaStringaMySQL(rs.getString("de_branch")));
                ba.setAdd_city(visualizzaStringaMySQL(rs.getString("add_city")));
                ba.setAdd_cap(visualizzaStringaMySQL(rs.getString("add_cap")));
                ba.setAdd_via(visualizzaStringaMySQL(rs.getString("add_via")));
                ba.setFg_persgiur(rs.getString("fg_persgiur"));
                ba.setProv_raccval(rs.getString("prov_raccval"));
                ba.setDa_annull(formatStringtoStringDate(rs.getString("da_annull"), "yyyy-MM-dd", "dd/MM/yyyy"));
                ba.setFg_annullato(rs.getString("fg_annullato"));
                ba.setOpening(rs.getString("pay_terminale"));
                ba.setG01(rs.getString("g01"));
                ba.setG02(rs.getString("g02"));
                ba.setG03(rs.getString("g03"));
                ba.setFg_modrate(rs.getString("fg_modrate"));
                ba.setFg_crm(rs.getString("fg_crm"));
                ba.setFg_agency(rs.getString("fg_agency"));
                ba.setFg_pad(rs.getString("fg_pad"));
                ba.setDt_start(rs.getString("dt_start"));
                ba.setMax_ass(rs.getString("max_ass"));
                ba.setTarget(rs.getString("target"));
                ba.setBrgr_01(rs.getString("brgr_01"));
                ba.setBrgr_02(rs.getString("brgr_02"));
                ba.setBrgr_03(rs.getString("brgr_03"));
                ba.setBrgr_04(rs.getString("brgr_04"));
                ba.setBrgr_05(rs.getString("brgr_05"));
                ba.setBrgr_06(rs.getString("brgr_06"));
                ba.setBrgr_07(rs.getString("brgr_07"));
                ba.setBrgr_08(rs.getString("brgr_08"));
                ba.setBrgr_09(rs.getString("brgr_09"));
                ba.setBrgr_10(rs.getString("brgr_10"));
                ba.setListagruppi();
                out.add(ba);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @param d1
     * @param d2
     * @param branch
     * @param list_nc_cat
     * @return
     */
    public ArrayList<NC_transaction> query_NC_transaction(String d1, String d2, String branch, String list_nc_cat) {
        ArrayList<NC_transaction> out = new ArrayList<>();
        try {
            if (d1 == null || d1.equals("...")) {
                d1 = "";
            }
            d1 = d1.trim() + " 00:00:00";
            
            if (d2 == null || d2.equals("...")) {
                d2 = "";
            }
            d2 = d2.trim() + " 23:59:59";
            
            d1 = formatStringtoStringDate(d1, patternnormdate, patternsqldate);
            d2 = formatStringtoStringDate(d2, patternnormdate, patternsqldate);
            
            String sql = "SELECT cod,id,filiale,gruppo_nc,causale_nc,valuta,supporto,pos,user,till,data,total,commissione,netto,prezzo,quantita,fg_inout,ricevuta,mtcn,del_fg,del_dt,del_user,del_motiv,fg_tipo_transazione_nc,fg_dogana,ass_idcode,ass_startdate,ass_enddate,cl_cognome,cl_nome,cl_indirizzo,cl_citta,cl_nazione,cl_cap,cl_provincia,cl_email,cl_telefono,note,ti_diritti,ti_ticket_fee,id_open_till,posnum,percentiva,bonus,ch_transaction FROM nc_transaction WHERE data >= '" + d1 + "' AND data <= '" + d2 + "' ";
            
            if (branch != null && !branch.equals("") && !branch.equals("...")) {
                sql = sql + "AND filiale = '" + branch + "'";
            }
            
            Iterable<String> ite = onPattern(";").split(list_nc_cat);
            Iterator it = ite.iterator();
            String nccatwhere = "";
            while (it.hasNext()) {
                String nccat = it.next().toString().trim();
                if (!nccat.equals("") && !nccat.equals("...")) {
                    nccatwhere = nccatwhere + "gruppo_nc ='" + nccat + "' OR ";
                }
            }
            if (nccatwhere.length() > 3) {
                sql = sql + " AND (" + nccatwhere.substring(0, nccatwhere.length() - 3).trim() + ")";
            }
            
            sql = sql + " ORDER BY data";
            
            ResultSet rs = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql);
            while (rs.next()) {
                NC_transaction nc = new NC_transaction(
                        rs.getString(1), leftPad(rs.getString(2), 15, "0"),
                        rs.getString(3), rs.getString(4), rs.getString(5), rs.getString(6), rs.getString(7), rs.getString(8),
                        rs.getString(9), rs.getString(10), rs.getString(11), rs.getString(12), rs.getString(13), rs.getString(14),
                        rs.getString(15), rs.getString(16), rs.getString(17), rs.getString(18), rs.getString(19), rs.getString(20),
                        rs.getString(21), rs.getString(22), rs.getString(23), rs.getString(24), rs.getString(25), rs.getString(26),
                        rs.getString(27), rs.getString(28), rs.getString(29), rs.getString(30), rs.getString(31), rs.getString(32),
                        rs.getString(33), rs.getString(34), rs.getString(35), rs.getString(36), rs.getString(37), rs.getString(38),
                        rs.getString(39), rs.getString(40), rs.getString(41), rs.getString(42), rs.getString(43), rs.getString(44),
                        rs.getString(45), ""
                );
                out.add(nc);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @param d1
     * @param d2
     * @param filiale
     * @return
     */
    public ArrayList<NC_transaction> query_NC_transaction_enable(String d1, String d2, String filiale) {
        ArrayList<NC_transaction> out = new ArrayList<>();
        try {
            if (d1 == null || d1.equals("...")) {
                d1 = "";
            }
            d1 = d1.trim() + " 00:00:00";
            if (d2 == null || d2.equals("...")) {
                d2 = "";
            }
            d2 = d2.trim() + " 23:59:59";
            d1 = formatStringtoStringDate(d1, patternnormdate, patternsqldate);
            d2 = formatStringtoStringDate(d2, patternnormdate, patternsqldate);
            String sql = "SELECT data,quantita,total,gruppo_nc FROM nc_transaction WHERE data >= ? AND data <= ? AND filiale = ? AND del_fg = ? AND fg_tipo_transazione_nc <> '1' AND total NOT LIKE '-%' ";
//            String sql = "SELECT * FROM nc_transaction WHERE data >= ? AND data <= ? AND filiale = ? AND del_fg = ?";

//            !nc.getFg_tipo
//                    && !nc.getTotal().contains("-")_transazione_nc().equals("1") 
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, d1);
            ps.setString(2, d2);
            ps.setString(3, filiale);
            ps.setString(4, "0");
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                NC_transaction nc = new NC_transaction();
                nc.setData(rs.getString(1));
                nc.setQuantita(rs.getString(2));
                nc.setTotal(rs.getString(3));
                nc.setGruppo_nc(rs.getString(4));
                nc.setFiliale(filiale);

//                nc.getData().split(" ")[0]);
//                        double q = fd(nc.getQuantita().replaceAll("-", ""));
//                        double t = fd(nc.getTotal().replaceAll("-", ""));
//                        NC_val ncv = new NC_val(nc.getGruppo_nc(), yearstring, filiale1, q, t);
//
//                        if (d1o.isAfter(dtstart) || d1o.isEqual(dtstart)) {
//                            listcat_mtd.add(nc.getGruppo_nc());
//                            boolean found = false;
//                            for (int rr = 0; rr < nc_mtd.size(); rr++) {
//                                NC_val vx = nc_mtd.get(rr);
//                                if (vx.getCat().equals(nc.getGruppo_nc())
//                
//                NC_transaction nc = new NC_transaction(
//                        rs.getString(1), StringUtils.leftPad(rs.getString(2), 15, "0"),
//                        rs.getString(3), rs.getString(4), rs.getString(5), rs.getString(6), rs.getString(7), rs.getString(8),
//                        rs.getString(9), rs.getString(10), rs.getString(11), rs.getString(12), rs.getString(13), rs.getString(14),
//                        rs.getString(15), rs.getString(16), rs.getString(17), rs.getString(18), rs.getString(19), rs.getString(20),
//                        rs.getString(21), rs.getString(22), rs.getString(23), rs.getString(24), rs.getString(25), rs.getString(26),
//                        rs.getString(27), rs.getString(28), rs.getString(29), rs.getString(30), rs.getString(31), rs.getString(32),
//                        rs.getString(33), rs.getString(34), rs.getString(35), rs.getString(36), rs.getString(37), rs.getString(38),
//                        rs.getString(39), rs.getString(40), rs.getString(41), rs.getString(42), rs.getString(43), rs.getString(44),
//                        rs.getString(45), rs.getString(46)
//                );
                out.add(nc);
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @param cod
     * @return
     */
    public NC_transaction get_NC_transaction(String cod) {
        try {
            
            String sql = "SELECT * FROM nc_transaction WHERE cod = ?";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, cod);
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                NC_transaction nc = new NC_transaction(
                        rs.getString(1), leftPad(rs.getString(2), 15, "0"),
                        rs.getString(3), rs.getString(4), rs.getString(5), rs.getString(6), rs.getString(7), rs.getString(8),
                        rs.getString(9), rs.getString(10), rs.getString(11), rs.getString(12), rs.getString(13), rs.getString(14),
                        rs.getString(15), rs.getString(16), rs.getString(17), rs.getString(18), rs.getString(19), rs.getString(20),
                        rs.getString(21), rs.getString(22), rs.getString(23), rs.getString(24), rs.getString(25), rs.getString(26),
                        rs.getString(27), rs.getString(28), rs.getString(29), rs.getString(30), rs.getString(31), rs.getString(32),
                        rs.getString(33), rs.getString(34), rs.getString(35), rs.getString(36), rs.getString(37), rs.getString(38),
                        rs.getString(39), rs.getString(40), rs.getString(41), rs.getString(42), rs.getString(43), rs.getString(44),
                        rs.getString(45), rs.getString(46));
                return nc;
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return null;
    }

    /**
     *
     * @return
     */
    public int getlastId_ch_trans() {
        try {
            String sql = "SELECT id FROM nc_transaction ORDER BY data DESC LIMIT 1";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ResultSet rs = ps.executeQuery();
            if (rs.next()) {
                return rs.getInt(1);
            }
            return 0;
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return -1;
    }

    /**
     *
     * @param cod
     * @param filiale
     * @return
     */
    public boolean confirm_transaction_change(String cod, String filiale) {
        try {
            String ins = "INSERT INTO ch_transaction (SELECT * FROM ch_transaction_temp WHERE cod = ? AND filiale = ?)";
            PreparedStatement ps = this.c.prepareStatement(ins, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, cod);
            ps.setString(2, filiale);
            ps.execute();
            String dtoper = getNow();
            String dt_val = formatStringtoStringDate(dtoper, patternsqldate, patternnormdate);
            
            if (!filiale.equals("000")) {
                
                insert_aggiornamenti_mod(new Aggiornamenti_mod(
                        generaId(50), "000", dt_val, "0",
                        "PS", ps.toString(), "service", dtoper));
                
            }
            return true;
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return false;
    }

    /**
     *
     * @param nct
     * @param table
     * @return
     */
    public boolean insert_transaction_change(Ch_transaction nct, String table) {
        try {
            
            String ins = "INSERT INTO " + table + " (SELECT ?,LPAD((CAST(id AS DECIMAL(10))+1),15, '0'),?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,? "
                    + "FROM " + table + " WHERE filiale = ? ORDER BY CAST(id AS DECIMAL(10,2)) DESC LIMIT 1)";
            
            boolean newv = false;
            if (isFirstValueFILIALE(table, "id", nct.getFiliale())) {
                ins = "INSERT INTO " + table + " VALUES (?,'000000000000001',?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
                newv = true;
            }
            
            PreparedStatement ps = this.c.prepareStatement(ins, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, nct.getCod());
            ps.setString(2, nct.getFiliale());
            ps.setString(3, nct.getTipotr());
            ps.setString(4, nct.getUser());
            ps.setString(5, nct.getTill());
            ps.setString(6, nct.getData());
            ps.setString(7, nct.getTipocliente());
            ps.setString(8, nct.getId_open_till());
            ps.setString(9, nct.getPay());
            ps.setString(10, nct.getTotal());
            ps.setString(11, nct.getFix());
            ps.setString(12, nct.getCom());
            ps.setString(13, nct.getRound());
            ps.setString(14, nct.getCommission());
            ps.setString(15, nct.getSpread_total());
            ps.setString(16, nct.getNote());
            ps.setString(17, nct.getAgency());
            ps.setString(18, nct.getAgency_cod());
            ps.setString(19, nct.getLocalfigures());
            ps.setString(20, nct.getPos());
            ps.setString(21, nct.getIntbook());
            ps.setString(22, nct.getIntbook_type());
            ps.setString(23, nct.getIntbook_1_tf());
            ps.setString(24, nct.getIntbook_1_mod());
            ps.setString(25, nct.getIntbook_1_val());
            ps.setString(26, nct.getIntbook_2_tf());
            ps.setString(27, nct.getIntbook_2_mod());
            ps.setString(28, nct.getIntbook_2_val());
            ps.setString(29, nct.getIntbook_3_tf());
            ps.setString(30, nct.getIntbook_3_mod());
            ps.setString(31, nct.getIntbook_3_val());
            ps.setString(32, nct.getIntbook_mac());
            ps.setString(33, nct.getIntbook_cli());
            ps.setString(34, nct.getCl_cf());
            ps.setString(35, nct.getCl_cod());
            ps.setString(36, nct.getDel_fg());
            ps.setString(37, nct.getDel_dt());
            ps.setString(38, nct.getDel_user());
            ps.setString(39, nct.getDel_motiv());
            ps.setString(40, nct.getBl_status());
            ps.setString(41, nct.getBl_motiv());
            ps.setString(42, nct.getBb());
            ps.setString(43, nct.getRefund());
            ps.setString(44, nct.getFa_number());
            ps.setString(45, nct.getCn_number());
            ps.setString(46, nct.getCredccard_number());
            if (!newv) {
                ps.setString(47, nct.getFiliale());
            }
            ps.execute();
            String dtoper = getNow();
            String dt_val = formatStringtoStringDate(dtoper, patternsqldate, patternnormdate);
            
            if (!filiale.equals("000")) {
                insert_aggiornamenti_mod(new Aggiornamenti_mod(
                        generaId(50), "000", dt_val, "0",
                        "PS", ps.toString(), "service", dtoper));
            }
            return true;
        } catch (SQLException ex) {
            ex.printStackTrace();
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return false;
    }

    /**
     *
     * @param list
     * @return
     */
    public boolean insert_transaction_value(ArrayList<Ch_transaction_value> list) {
        try {
            for (int i = 0; i < list.size(); i++) {
                Ch_transaction_value nct = list.get(i);
                String ins = "INSERT INTO ch_transaction_valori VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
                PreparedStatement ps = this.c.prepareStatement(ins, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
                ps.setString(1, nct.getId());
                ps.setString(2, nct.getCod_tr());
                ps.setString(3, nct.getNumeroriga());
                ps.setString(4, nct.getSupporto());
                ps.setString(5, nct.getPos());
                ps.setString(6, nct.getValuta());
                ps.setString(7, nct.getQuantita());
                ps.setString(8, nct.getRate());
                ps.setString(9, nct.getCom_perc());
                ps.setString(10, nct.getCom_perc_tot());
                ps.setString(11, nct.getFx_com());
                ps.setString(12, nct.getTot_com());
                ps.setString(13, nct.getNet());
                ps.setString(14, nct.getSpread());
                ps.setString(15, nct.getTotal());
                ps.setString(16, nct.getKind_fix_comm());
                ps.setString(17, nct.getLow_com_ju());
                ps.setString(18, nct.getBb());
                ps.setString(19, nct.getBb_fidcode());
                ps.setString(20, nct.getDt_tr());
                ps.setString(21, nct.getContr_valuta());
                ps.setString(22, nct.getContr_supporto());
                ps.setString(23, nct.getContr_quantita());
                ps.setString(24, nct.getDel_fg());
                ps.setString(25, nct.getDel_dt());
                ps.setString(26, nct.getPosnum());
                ps.setString(27, nct.getRoundvalue());
                ps.execute();
                String dtoper = getNow();
                String dt_val = formatStringtoStringDate(dtoper, patternsqldate, patternnormdate);
                
                if (!filiale.equals("000")) {
                    
                    insert_aggiornamenti_mod(new Aggiornamenti_mod(
                            generaId(50), "000", dt_val, "0",
                            "PS", ps.toString(), "service", dtoper));
                }
            }
            return true;
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return false;
    }

    /**
     *
     * @param cl
     * @param table
     * @return
     */
    public boolean insert_client_transaction(Client_CZ cl, String table) {
        try {
            String ins = "INSERT INTO " + table + " VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
            PreparedStatement ps = this.c.prepareStatement(ins, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, cl.getCod_cliente());
            ps.setString(2, cl.getCod_tr());
            ps.setString(3, cl.getShowanagVALUE());
            ps.setString(4, cl.getHeavy_pno1());
            ps.setString(5, cl.getHeavy_cz_country());
            ps.setString(6, cl.getHeavy_cz_issuingcountry());
            ps.setString(7, cl.getHeavy_sanctions());
            ps.setString(8, cl.getHeavy_pep());
            ps.setString(9, cl.getHeavy_transactionre());
            ps.setString(10, cl.getHeavy_moneysource());
            ps.setString(11, cl.getOp_sos());
            ps.setString(12, cl.getDate());
            ps.setString(13, cl.getOccupation());
            ps.setString(14, cl.getPep_position());
            ps.setString(15, cl.getPep_country());
            ps.execute();
            String dtoper = getNow();
            String dt_val = formatStringtoStringDate(dtoper, patternsqldate, patternnormdate);
            insert_aggiornamenti_mod(new Aggiornamenti_mod(
                    generaId(50), "000", dt_val, "0",
                    "PS", ps.toString(), "service", dtoper));
            return true;
        } catch (SQLException ex) {
            out.println("insert_client_transaction R2 - " + getStackTrace(ex));

//            insertTR("E", "System", Thread.currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return false;
    }

    /**
     *
     * @param cl
     * @param codtr
     * @return
     */
    public boolean insert_client_transaction(Client cl, String codtr) {
        try {
            String ins = "INSERT INTO ch_transaction_client VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
            PreparedStatement ps = this.c.prepareStatement(ins, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, codtr);
            ps.setString(2, cl.getCognome());
            ps.setString(3, cl.getNome());
            ps.setString(4, cl.getSesso());
            ps.setString(5, cl.getCodfisc());
            ps.setString(6, cl.getNazione());
            ps.setString(7, cl.getCitta());
            ps.setString(8, cl.getIndirizzo());
            ps.setString(9, cl.getCap());
            ps.setString(10, cl.getProvincia());
            ps.setString(11, cl.getCitta_nascita());
            ps.setString(12, cl.getProvincia_nascita());
            ps.setString(13, cl.getNazione_nascita());
            ps.setString(14, cl.getDt_nascita());
            ps.setString(15, cl.getTipo_documento());
            ps.setString(16, cl.getNumero_documento());
            ps.setString(17, cl.getDt_rilascio_documento());
            ps.setString(18, cl.getDt_scadenza_documento());
            ps.setString(19, cl.getRilasciato_da_documento());
            ps.setString(20, cl.getLuogo_rilascio_documento());
            ps.setString(21, cl.getEmail());
            ps.setString(22, cl.getTelefono());
            ps.setString(23, cl.getPerc_buy());
            ps.setString(24, cl.getPerc_sell());
            ps.setString(25, cl.getTimestamp());
            ps.setString(26, cl.getPep());
            ps.setString(27, cl.getCode());
            ps.execute();
            String dtoper = getNow();
            String dt_val = formatStringtoStringDate(dtoper, patternsqldate, patternnormdate);
            insert_aggiornamenti_mod(new Aggiornamenti_mod(
                    generaId(50), "000", dt_val, "0",
                    "PS", ps.toString(), "service", dtoper));
            return true;
        } catch (SQLException ex) {
            out.println("insert_client_transaction R1 - " + getStackTrace(ex));
            //insertTR("E", "System", Thread.currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return false;
    }

    /**
     *
     * @param cl
     * @param oldclient
     * @return
     */
    public boolean insert_anagrafica_client_ITA(Client cl, String oldclient) {
        try {
            switch (oldclient) {
                case "0":
                    String ins = "INSERT INTO anagrafica_client VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
                    PreparedStatement ps = this.c.prepareStatement(ins, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
                    ps.setString(1, cl.getCode());
                    ps.setString(2, cl.getCognome());
                    ps.setString(3, cl.getNome());
                    ps.setString(4, cl.getSesso());
                    ps.setString(5, cl.getCodfisc());
                    ps.setString(6, cl.getNazione());
                    ps.setString(7, cl.getCitta());
                    ps.setString(8, cl.getIndirizzo());
                    ps.setString(9, cl.getCap());
                    ps.setString(10, cl.getProvincia());
                    ps.setString(11, cl.getCitta_nascita());
                    ps.setString(12, cl.getProvincia_nascita());
                    ps.setString(13, cl.getNazione_nascita());
                    ps.setString(14, cl.getDt_nascita());
                    ps.setString(15, cl.getTipo_documento());
                    ps.setString(16, cl.getNumero_documento());
                    ps.setString(17, cl.getDt_rilascio_documento());
                    ps.setString(18, cl.getDt_scadenza_documento());
                    ps.setString(19, cl.getRilasciato_da_documento());
                    ps.setString(20, cl.getLuogo_rilascio_documento());
                    ps.setString(21, cl.getEmail());
                    ps.setString(22, cl.getTelefono());
                    ps.setString(23, cl.getPerc_buy());
                    ps.setString(24, cl.getPerc_sell());
                    ps.setString(25, cl.getTimestamp());
                    ps.setString(26, cl.getPep());
                    ps.execute();
                    String dtoper = getNow();
                    String dt_val = formatStringtoStringDate(dtoper, patternsqldate, patternnormdate);
                    insert_aggiornamenti_mod(new Aggiornamenti_mod(generaId(50), "000", dt_val, "0", "PS", ps.toString(), "service", dtoper));
                    return true;
                case "1":
                    Client c1 = query_Client(cl.getCode());
                    if (c1 == null) {
                        String ins1 = "INSERT INTO anagrafica_client VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
                        PreparedStatement ps1 = this.c.prepareStatement(ins1, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
                        ps1.setString(1, cl.getCode());
                        ps1.setString(2, cl.getCognome());
                        ps1.setString(3, cl.getNome());
                        ps1.setString(4, cl.getSesso());
                        ps1.setString(5, cl.getCodfisc());
                        ps1.setString(6, cl.getNazione());
                        ps1.setString(7, cl.getCitta());
                        ps1.setString(8, cl.getIndirizzo());
                        ps1.setString(9, cl.getCap());
                        ps1.setString(10, cl.getProvincia());
                        ps1.setString(11, cl.getCitta_nascita());
                        ps1.setString(12, cl.getProvincia_nascita());
                        ps1.setString(13, cl.getNazione_nascita());
                        ps1.setString(14, cl.getDt_nascita());
                        ps1.setString(15, cl.getTipo_documento());
                        ps1.setString(16, cl.getNumero_documento());
                        ps1.setString(17, cl.getDt_rilascio_documento());
                        ps1.setString(18, cl.getDt_scadenza_documento());
                        ps1.setString(19, cl.getRilasciato_da_documento());
                        ps1.setString(20, cl.getLuogo_rilascio_documento());
                        ps1.setString(21, cl.getEmail());
                        ps1.setString(22, cl.getTelefono());
                        ps1.setString(23, cl.getPerc_buy());
                        ps1.setString(24, cl.getPerc_sell());
                        ps1.setString(25, cl.getTimestamp());
                        ps1.setString(26, cl.getPep());
                        ps1.execute();
                        dtoper = getNow();
                        dt_val = formatStringtoStringDate(dtoper, patternsqldate, patternnormdate);
                        ins = "UPDATE anagrafica_client SET cognome = ?, nome = ?, sesso = ?, codfisc = ?, nazione = ?, citta = ?, "
                                + "indirizzo = ?, cap = ?, provincia = ?, citta_nascita = ?, provincia_nascita = ?, nazione_nascita = ?, "
                                + "dt_nascita = ?, tipo_documento = ?, numero_documento = ?, dt_rilascio_documento = ?, dt_scadenza_documento = ?, "
                                + "rilasciato_da_documento = ?, luogo_rilascio_documento = ?, email = ?, telefono = ?, pep = ?, perc_buy = ?, perc_sell = ? WHERE code = ?";
                        ps = this.c.prepareStatement(ins, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
                        ps.setString(1, cl.getCognome());
                        ps.setString(2, cl.getNome());
                        ps.setString(3, cl.getSesso());
                        ps.setString(4, cl.getCodfisc());
                        ps.setString(5, cl.getNazione());
                        ps.setString(6, cl.getCitta());
                        ps.setString(7, cl.getIndirizzo());
                        ps.setString(8, cl.getCap());
                        ps.setString(9, cl.getProvincia());
                        ps.setString(10, cl.getCitta_nascita());
                        ps.setString(11, cl.getProvincia_nascita());
                        ps.setString(12, cl.getNazione_nascita());
                        ps.setString(13, cl.getDt_nascita());
                        ps.setString(14, cl.getTipo_documento());
                        ps.setString(15, cl.getNumero_documento());
                        ps.setString(16, cl.getDt_rilascio_documento());
                        ps.setString(17, cl.getDt_scadenza_documento());
                        ps.setString(18, cl.getRilasciato_da_documento());
                        ps.setString(19, cl.getLuogo_rilascio_documento());
                        ps.setString(20, cl.getEmail());
                        ps.setString(21, cl.getTelefono());
                        ps.setString(22, cl.getPep());
                        ps.setString(23, cl.getPerc_buy());
                        ps.setString(24, cl.getPerc_sell());
                        ps.setString(25, cl.getCode());
                        insert_aggiornamenti_mod(new Aggiornamenti_mod(generaId(50), "000", dt_val, "0", "PS", ps.toString(), "service", dtoper));
                        return true;
                    } else {
                        ins = "UPDATE anagrafica_client SET cognome = ?, nome = ?, sesso = ?, codfisc = ?, nazione = ?, citta = ?, "
                                + "indirizzo = ?, cap = ?, provincia = ?, citta_nascita = ?, provincia_nascita = ?, nazione_nascita = ?, "
                                + "dt_nascita = ?, tipo_documento = ?, numero_documento = ?, dt_rilascio_documento = ?, dt_scadenza_documento = ?, "
                                + "rilasciato_da_documento = ?, luogo_rilascio_documento = ?, email = ?, telefono = ?, pep = ?, perc_buy = ?, perc_sell = ? WHERE code = ?";
                        ps = this.c.prepareStatement(ins, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
                        ps.setString(1, cl.getCognome());
                        ps.setString(2, cl.getNome());
                        ps.setString(3, cl.getSesso());
                        ps.setString(4, cl.getCodfisc());
                        ps.setString(5, cl.getNazione());
                        ps.setString(6, cl.getCitta());
                        ps.setString(7, cl.getIndirizzo());
                        ps.setString(8, cl.getCap());
                        ps.setString(9, cl.getProvincia());
                        ps.setString(10, cl.getCitta_nascita());
                        ps.setString(11, cl.getProvincia_nascita());
                        ps.setString(12, cl.getNazione_nascita());
                        ps.setString(13, cl.getDt_nascita());
                        ps.setString(14, cl.getTipo_documento());
                        ps.setString(15, cl.getNumero_documento());
                        ps.setString(16, cl.getDt_rilascio_documento());
                        ps.setString(17, cl.getDt_scadenza_documento());
                        ps.setString(18, cl.getRilasciato_da_documento());
                        ps.setString(19, cl.getLuogo_rilascio_documento());
                        ps.setString(20, cl.getEmail());
                        ps.setString(21, cl.getTelefono());
                        ps.setString(22, cl.getPep());
                        ps.setString(23, cl.getPerc_buy());
                        ps.setString(24, cl.getPerc_sell());
                        ps.setString(25, cl.getCode());
                        ps.executeUpdate();
                        dtoper = getNow();
                        dt_val = formatStringtoStringDate(dtoper, patternsqldate, patternnormdate);
                        insert_aggiornamenti_mod(new Aggiornamenti_mod(generaId(50), "000", dt_val, "0", "PS", ps.toString(), "service", dtoper));
                        return true;
                    }
                default:
                    return false;
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return false;
    }

    /**
     *
     * @param d1
     * @param d2
     * @return
     */
    public ArrayList<Ch_transaction> query_transaction_ch(String d1, String d2) {
        ArrayList<Ch_transaction> out = new ArrayList<>();
        try {
            String sel = "SELECT * FROM ch_transaction ch WHERE data >= ? AND data <= ? ";
            
            if (d1 == null || d1.equals("...")) {
                d1 = "";
            }
            d1 = d1.trim() + " 00:00:00";
            if (d2 == null || d2.equals("...")) {
                d2 = "";
            }
            d2 = d2.trim() + " 23:59:59";
            
            d1 = formatStringtoStringDate(d1, patternnormdate, patternsqldate);
            d2 = formatStringtoStringDate(d2, patternnormdate, patternsqldate);
            
            PreparedStatement ps = this.c.prepareStatement(sel, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, d1);
            ps.setString(2, d2);
            ResultSet rs = ps.executeQuery();
            
            while (rs.next()) {
                Ch_transaction ch = new Ch_transaction();
                ch.setCod(rs.getString("cod"));
                ch.setId(leftPad(rs.getString("id"), 15, "0"));
                ch.setFiliale(rs.getString("filiale"));
                ch.setTipotr(rs.getString("tipotr"));
                ch.setUser(rs.getString("user"));
                ch.setTill(rs.getString("till"));
                ch.setData(rs.getString("data"));
                ch.setTipocliente(rs.getString("tipocliente"));
                ch.setId_open_till(rs.getString("id_open_till"));
                ch.setPay(rs.getString("pay"));
                ch.setTotal(rs.getString("total"));
                ch.setFix(rs.getString("fix"));
                ch.setCom(rs.getString("com"));
                ch.setRound(rs.getString("round"));
                ch.setCommission(rs.getString("commission"));
                ch.setSpread_total(rs.getString("spread_total"));
                ch.setNote(rs.getString("note"));
                ch.setAgency(rs.getString("agency"));
                ch.setAgency_cod(rs.getString("agency_cod"));
                ch.setLocalfigures(rs.getString("localfigures"));
                ch.setPos(rs.getString("pos"));
                ch.setIntbook(rs.getString("intbook"));
                ch.setIntbook_type(rs.getString("intbook_type"));
                ch.setIntbook_1_tf(rs.getString("intbook_1_tf"));
                ch.setIntbook_1_mod(rs.getString("intbook_1_mod"));
                ch.setIntbook_1_val(rs.getString("intbook_1_val"));
                ch.setIntbook_2_tf(rs.getString("intbook_2_tf"));
                ch.setIntbook_2_mod(rs.getString("intbook_2_mod"));
                ch.setIntbook_2_val(rs.getString("intbook_2_val"));
                ch.setIntbook_3_tf(rs.getString("intbook_3_tf"));
                ch.setIntbook_3_mod(rs.getString("intbook_3_mod"));
                ch.setIntbook_3_val(rs.getString("intbook_3_val"));
                ch.setIntbook_mac(rs.getString("intbook_mac"));
                ch.setIntbook_cli(rs.getString("intbook_cli"));
                ch.setCl_cf(rs.getString("cl_cf"));
                ch.setCl_cod(rs.getString("cl_cod"));
                ch.setDel_fg(rs.getString("del_fg"));
                ch.setDel_dt(rs.getString("del_dt"));
                ch.setDel_user(rs.getString("del_user"));
                ch.setDel_motiv(rs.getString("del_motiv"));
                ch.setBb(rs.getString("bb"));
                ch.setRefund(rs.getString("refund"));
                ch.setFa_number(rs.getString("fa_number"));
                ch.setCn_number(rs.getString("cn_number"));
                ch.setCredccard_number(rs.getString("credccard_number"));
                out.add(ch);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @param cod
     * @param motiv
     * @param user
     * @return
     */
    public boolean delete_transaction_ch(String cod, String motiv, String user) {
        try {
            String upd = "UPDATE ch_transaction SET del_fg = ? , del_dt = ? , del_user = ? , del_motiv = ? WHERE cod = ?";
            PreparedStatement ps = this.c.prepareStatement(upd, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, "1");
            ps.setString(2, getNow());
            ps.setString(3, user);
            ps.setString(4, motiv);
            ps.setString(5, cod);
            int x = ps.executeUpdate();
            if (x > 0) {
                
                String dtoper = getNow();
                String dt_val = formatStringtoStringDate(dtoper, patternsqldate, patternnormdate);
                if (!filiale.equals("000")) {
                    insert_aggiornamenti_mod(new Aggiornamenti_mod(
                            generaId(50), "000", dt_val, "0",
                            "PS", ps.toString(), "service", dtoper));
                }
            }
            return x > 0;
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return false;
    }

    /**
     *
     * @param cod
     * @return
     */
    public boolean delete_transaction_nochfromsell(String cod) {
        try {
            String upd = "DELETE FROM nc_transaction WHERE ch_transaction = ?";
            PreparedStatement ps = this.c.prepareStatement(upd, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, cod);
            int x = ps.executeUpdate();
            if (x > 0) {
                String dtoper = getNow();
                String dt_val = formatStringtoStringDate(dtoper, patternsqldate, patternnormdate);
                if (!filiale.equals("000")) {
                    insert_aggiornamenti_mod(new Aggiornamenti_mod(
                            generaId(50), "000", dt_val, "0",
                            "PS", ps.toString(), "service", dtoper));
                }
            }
            return x > 0;
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return false;
    }

    /**
     *
     * @param cod
     * @param motiv
     * @param user
     * @return
     */
    public boolean delete_internal_transfer(String cod, String motiv, String user) {
        try {
            String upd = "UPDATE it_change SET fg_annullato = ? , del_dt = ? , del_user = ? , del_motiv = ? WHERE cod = ?";
            PreparedStatement ps = this.c.prepareStatement(upd, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, "1");
            ps.setString(2, getNow());
            ps.setString(3, user);
            ps.setString(4, motiv);
            ps.setString(5, cod);
            int x = ps.executeUpdate();
            if (x > 0) {
                String dtoper = getNow();
                String dt_val = formatStringtoStringDate(dtoper, patternsqldate, patternnormdate);
                if (!filiale.equals("000")) {
                    insert_aggiornamenti_mod(new Aggiornamenti_mod(
                            generaId(50), "000", dt_val, "0",
                            "PS", ps.toString(), "service", dtoper));
                }
            }
            return x > 0;
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return false;
    }

    /**
     *
     * @param cod
     * @param motiv
     * @param user
     * @return
     */
    public boolean delete_external_transfer(String cod, String motiv, String user) {
        try {
            String upd = "UPDATE et_change SET fg_annullato = ? , del_dt = ? , del_user = ? , del_motiv = ? WHERE cod = ?";
            PreparedStatement ps = this.c.prepareStatement(upd, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, "1");
            ps.setString(2, getNow());
            ps.setString(3, user);
            ps.setString(4, motiv);
            ps.setString(5, cod);
            int x = ps.executeUpdate();
            if (x > 0) {
                String dtoper = getNow();
                String dt_val = formatStringtoStringDate(dtoper, patternsqldate, patternnormdate);
                if (!filiale.equals("000")) {
                    insert_aggiornamenti_mod(new Aggiornamenti_mod(
                            generaId(50), "000", dt_val, "0",
                            "PS", ps.toString(), "service", dtoper));
                }
            }
            return x > 0;
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return false;
    }

    /**
     *
     * @param cod
     * @param motiv
     * @param user
     * @return
     */
    public boolean delete_transaction_noch(String cod, String motiv, String user) {
        try {
            String upd = "UPDATE nc_transaction SET del_fg = ? , del_dt = ? , del_user = ? , del_motiv = ? WHERE cod = ?";
            PreparedStatement ps = this.c.prepareStatement(upd, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, "1");
            ps.setString(2, getNow());
            ps.setString(3, user);
            ps.setString(4, motiv);
            ps.setString(5, cod);
            int x = ps.executeUpdate();
            if (x > 0) {
                String dtoper = getNow();
                String dt_val = formatStringtoStringDate(dtoper, patternsqldate, patternnormdate);
                if (!filiale.equals("000")) {
                    insert_aggiornamenti_mod(new Aggiornamenti_mod(
                            generaId(50), "000", dt_val, "0",
                            "PS", ps.toString(), "service", dtoper));
                }
            }
            return x > 0;
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return false;
    }

    /**
     *
     * @param cod
     * @return
     */
    public Ch_transaction query_transaction_ch(String cod) {
        try {
            String sql = "SELECT * FROM ch_transaction WHERE cod = ? ";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, cod);
            ResultSet rs = ps.executeQuery();
            if (rs.next()) {
                Ch_transaction ch = new Ch_transaction();
                ch.setCod(rs.getString("cod"));
                ch.setId(leftPad(rs.getString("id"), 15, "0"));
                ch.setFiliale(rs.getString("filiale"));
                ch.setTipotr(rs.getString("tipotr"));
                ch.setUser(rs.getString("user"));
                ch.setTill(rs.getString("till"));
                ch.setData(rs.getString("data"));
                ch.setTipocliente(rs.getString("tipocliente"));
                ch.setId_open_till(rs.getString("id_open_till"));
                ch.setPay(rs.getString("pay"));
                ch.setTotal(rs.getString("total"));
                ch.setFix(rs.getString("fix"));
                ch.setCom(rs.getString("com"));
                ch.setRound(rs.getString("round"));
                ch.setCommission(rs.getString("commission"));
                ch.setSpread_total(rs.getString("spread_total"));
                ch.setNote(rs.getString("note"));
                ch.setAgency(rs.getString("agency"));
                ch.setAgency_cod(rs.getString("agency_cod"));
                ch.setLocalfigures(rs.getString("localfigures"));
                ch.setPos(rs.getString("pos"));
                ch.setCredccard_number(rs.getString("credccard_number"));
                ch.setIntbook(rs.getString("intbook"));
                ch.setIntbook_type(rs.getString("intbook_type"));
                ch.setIntbook_1_tf(rs.getString("intbook_1_tf"));
                ch.setIntbook_1_mod(rs.getString("intbook_1_mod"));
                ch.setIntbook_1_val(rs.getString("intbook_1_val"));
                ch.setIntbook_2_tf(rs.getString("intbook_2_tf"));
                ch.setIntbook_2_mod(rs.getString("intbook_2_mod"));
                ch.setIntbook_2_val(rs.getString("intbook_2_val"));
                ch.setIntbook_3_tf(rs.getString("intbook_3_tf"));
                ch.setIntbook_3_mod(rs.getString("intbook_3_mod"));
                ch.setIntbook_3_val(rs.getString("intbook_3_val"));
                ch.setIntbook_mac(rs.getString("intbook_mac"));
                ch.setIntbook_cli(rs.getString("intbook_cli"));
                ch.setCl_cf(rs.getString("cl_cf"));
                ch.setCl_cod(rs.getString("cl_cod"));
                ch.setDel_fg(rs.getString("del_fg"));
                ch.setDel_dt(rs.getString("del_dt"));
                ch.setDel_user(rs.getString("del_user"));
                ch.setDel_motiv(rs.getString("del_motiv"));
                ch.setRefund(rs.getString("refund"));
                ch.setFa_number(rs.getString("fa_number"));
                ch.setCn_number(rs.getString("cn_number"));
                ch.setBb(rs.getString("bb"));
                return ch;
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return null;
    }

    /**
     *
     * @param cod
     * @return
     */
    public Ch_transaction query_transaction_ch_temp(String cod) {
        try {
            String sql = "SELECT * FROM ch_transaction_temp WHERE cod = ? ";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, cod);
            ResultSet rs = ps.executeQuery();
            if (rs.next()) {
                Ch_transaction ch = new Ch_transaction();
                ch.setCod(rs.getString("cod"));
                ch.setId(leftPad(rs.getString("id"), 15, "0"));
                ch.setFiliale(rs.getString("filiale"));
                ch.setTipotr(rs.getString("tipotr"));
                ch.setUser(rs.getString("user"));
                ch.setTill(rs.getString("till"));
                ch.setData(rs.getString("data"));
                ch.setTipocliente(rs.getString("tipocliente"));
                ch.setId_open_till(rs.getString("id_open_till"));
                ch.setPay(rs.getString("pay"));
                ch.setTotal(rs.getString("total"));
                ch.setFix(rs.getString("fix"));
                ch.setCom(rs.getString("com"));
                ch.setRound(rs.getString("round"));
                ch.setCommission(rs.getString("commission"));
                ch.setSpread_total(rs.getString("spread_total"));
                ch.setNote(rs.getString("note"));
                ch.setAgency(rs.getString("agency"));
                ch.setAgency_cod(rs.getString("agency_cod"));
                ch.setLocalfigures(rs.getString("localfigures"));
                ch.setPos(rs.getString("pos"));
                ch.setIntbook(rs.getString("intbook"));
                ch.setIntbook_type(rs.getString("intbook_type"));
                ch.setIntbook_1_tf(rs.getString("intbook_1_tf"));
                ch.setIntbook_1_mod(rs.getString("intbook_1_mod"));
                ch.setIntbook_1_val(rs.getString("intbook_1_val"));
                ch.setIntbook_2_tf(rs.getString("intbook_2_tf"));
                ch.setIntbook_2_mod(rs.getString("intbook_2_mod"));
                ch.setIntbook_2_val(rs.getString("intbook_2_val"));
                ch.setIntbook_3_tf(rs.getString("intbook_3_tf"));
                ch.setIntbook_3_mod(rs.getString("intbook_3_mod"));
                ch.setIntbook_3_val(rs.getString("intbook_3_val"));
                ch.setIntbook_mac(rs.getString("intbook_mac"));
                ch.setIntbook_cli(rs.getString("intbook_cli"));
                ch.setCredccard_number(rs.getString("credccard_number"));
                ch.setCl_cf(rs.getString("cl_cf"));
                ch.setCl_cod(rs.getString("cl_cod"));
                ch.setDel_fg(rs.getString("del_fg"));
                ch.setDel_dt(rs.getString("del_dt"));
                ch.setDel_user(rs.getString("del_user"));
                ch.setDel_motiv(rs.getString("del_motiv"));
                ch.setRefund(rs.getString("refund"));
                ch.setFa_number(rs.getString("fa_number"));
                ch.setCn_number(rs.getString("cn_number"));
                ch.setCredccard_number(rs.getString("credccard_number"));
                ch.setBb(rs.getString("bb"));
                return ch;
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return null;
    }

    /**
     *
     * @param id
     * @return
     */
    public String getConf(String id) {
        try {
            String sql = "SELECT des FROM conf WHERE id = ? ";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, id);
            ResultSet rs = ps.executeQuery();
            if (rs.next()) {
                return rs.getString(1).trim();
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return "-";
    }

    /**
     *
     * @param chf
     * @return
     */
    public boolean insert_transaction_ch_file(Ch_transaction_file chf) {
        try {
            String ins = "INSERT INTO ch_transaction_file (cod_tr,directory,filename,size,user) VALUES (?,?,?,?,?)";
            PreparedStatement ps = this.c.prepareStatement(ins, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, chf.getCod_tr());
            ps.setString(2, chf.getDirectory());
            ps.setString(3, chf.getFilename());
            ps.setString(4, chf.getSize());
            ps.setString(5, chf.getUser());
            ps.execute();
            String dtoper = getNow();
            String dt_val = formatStringtoStringDate(dtoper, patternsqldate, patternnormdate);
            if (!filiale.equals("000")) {
                insert_aggiornamenti_mod(new Aggiornamenti_mod(
                        generaId(50), "000", dt_val, "0",
                        "PS", ps.toString(), "service", dtoper));
            }
            return true;
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return false;
    }

    /**
     *
     * @return
     */
    public ArrayList<Till> list_ALLtill() {
        ArrayList<Till> out = new ArrayList<>();
        ArrayList<String[]> all = list_till();
        try {
            String sql = "SELECT f.filiale,f.till,f.fg_tipo FROM (SELECT till, MAX(data) AS maxd FROM oc_lista GROUP BY till) "
                    + "AS x INNER JOIN oc_lista AS f ON f.till = x.till AND f.data = x.maxd AND f.filiale = '" + getCodLocal(true)[0] + "' ORDER BY f.till";
            
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                out.add(new Till(rs.getString(2), formatAL(rs.getString(2), all, 1),
                        formatAL(rs.getString(2), all, 2).equals("0"), rs.getString(3).equals("C")));
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @param filiale
     * @return
     */
    public ArrayList<Till> list_ALLtill(String filiale) {
        ArrayList<Till> out = new ArrayList<>();
        ArrayList<String[]> all = list_till();
        try {
            String sql = "SELECT f.filiale,f.till,f.fg_tipo FROM (SELECT till, MAX(data) AS maxd FROM oc_lista WHERE filiale = '" + filiale + "' GROUP BY till) "
                    + "AS x INNER JOIN oc_lista AS f ON f.till = x.till AND f.data = x.maxd AND f.filiale = '" + filiale + "' ORDER BY f.till";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                out.add(new Till(rs.getString(2), formatAL(rs.getString(2), all, 1),
                        formatAL(rs.getString(2), all, 2).equals("0"), rs.getString(3).equals("C")));
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @param codice
     * @param base64
     */
    public void insert_pdf_temp(String codice, String base64) {
        try {
            String ins = "INSERT INTO pdf_temp (codice,base64) VALUES (?,?)";
            PreparedStatement ps = this.c.prepareStatement(ins, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, codice);
            ps.setString(2, base64);
            ps.execute();
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
    }

    /**
     *
     * @param codice
     * @return
     */
    public String get_pdf_temp(String codice) {
        try {
            String ins = "SELECT base64 FROM pdf_temp WHERE codice = ?";
            PreparedStatement ps = this.c.prepareStatement(ins, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, codice);
            ResultSet rs = ps.executeQuery();
            if (rs.next()) {
                return rs.getString(1);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return null;
    }

    /**
     *
     * @param filiale
     * @param de_till
     * @param fg_tipo
     * @param username
     * @param dtoper
     * @return
     */
    public boolean insert_new_Till(String filiale, String de_till, String fg_tipo, String username, String dtoper) {
        try {
            String ins = "INSERT INTO till (SELECT ?,LPAD((CAST(cod AS DECIMAL(10))+1), 3, '0'),?,?,? FROM till WHERE filiale = ? order by CAST(cod AS DECIMAL(10,2)) desc LIMIT 1)";
            
            PreparedStatement ps = this.c.prepareStatement(ins, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, filiale);
            ps.setString(2, de_till);
            ps.setString(3, fg_tipo);
            ps.setString(4, "0");
            ps.setString(5, filiale);
            ps.execute();
            if (!filiale.equals("000")) {
                String dt_val = formatStringtoStringDate(dtoper, patternsqldate, patternnormdate);
                insert_aggiornamenti_mod(new Aggiornamenti_mod(
                        generaId(50), filiale, dt_val, "0",
                        "PS", ps.toString(), username, dtoper));
            }
            return true;
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return false;
    }

    /**
     *
     * @param cod
     * @param filiale
     * @param de_till
     * @param fg_tipo
     * @param fg_annullato
     * @param username
     * @param dtoper
     * @return
     */
    public boolean update_Till(String cod, String filiale, String de_till, String fg_tipo, String fg_annullato, String username, String dtoper) {
        try {
            String ins = "UPDATE till SET de_till = ?, fg_tipo = ?, fg_annullato = ? WHERE cod = ? AND filiale = ?";
            PreparedStatement ps = this.c.prepareStatement(ins, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, de_till);
            ps.setString(2, fg_tipo);
            ps.setString(3, fg_annullato);
            ps.setString(4, cod);
            ps.setString(5, filiale);
            int x = ps.executeUpdate();
            if (!filiale.equals("000")) {
                String dt_val = formatStringtoStringDate(dtoper, patternnormdate, patternsqldate);
                insert_aggiornamenti_mod(new Aggiornamenti_mod(
                        generaId(50), filiale, dt_val, "0",
                        "PS", ps.toString(), username, dtoper));
            }
            return x > 0;
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return false;
    }

    /**
     *
     * @param filiale
     * @param di_cod
     * @param descr
     * @param username
     * @return
     */
    public boolean insert_new_District(String filiale, String di_cod, String descr, String username) {
        try {
            String ins = "INSERT INTO province (SELECT LPAD(id_provincia+1, 3, '0'),?,?,? FROM province order by id_provincia desc LIMIT 1)";
            PreparedStatement ps = this.c.prepareStatement(ins, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, filiale);
            ps.setString(2, di_cod);
            ps.setString(3, descr);
            ps.execute();
            insertValue_agg_NOCENTRAL(ps, null, null, null, username);
            return true;
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return false;
    }

    /**
     *
     * @param id
     * @param filiale
     * @param di_cod
     * @param descr
     * @param username
     * @return
     */
    public boolean update_District(String id, String filiale, String di_cod, String descr, String username) {
        try {
            String ins = "UPDATE province SET provincia = ?, de_provincia = ? WHERE id_provincia = ? ";
            PreparedStatement ps = this.c.prepareStatement(ins, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, di_cod);
            ps.setString(2, descr);
            ps.setString(3, id);
            
            boolean es = ps.executeUpdate() > 0;
            if (es) {
                insertValue_agg(ps, null, null, null, username);
            }
            
            return es;
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return false;
    }

    /**
     *
     * @param filiale
     * @param na_cod
     * @param descr
     * @param fg_area
     * @param alpha_code
     * @param username
     * @return
     */
    public boolean insert_new_Nation(String filiale, String na_cod, String descr, String fg_area, String alpha_code, String username) {
        try {
            String ins = "INSERT INTO nazioni VALUES (?,?,?,?,?)";
            PreparedStatement ps = this.c.prepareStatement(ins, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, filiale);
            ps.setString(2, na_cod);
            ps.setString(3, descr);
            ps.setString(4, fg_area);
            ps.setString(5, alpha_code);
            ps.execute();
            insertValue_agg(ps, null, null, null, username);
            return true;
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return false;
    }

    /**
     *
     * @param filiale
     * @param na_cod
     * @param descr
     * @param fg_area
     * @param alpha_code
     * @param username
     * @return
     */
    public boolean update_Nation(String filiale, String na_cod, String descr, String fg_area, String alpha_code, String username) {
        try {
            String ins = "UPDATE nazioni SET de_nazione = ?, fg_area_geografica = ?, alpha_code = ? WHERE filiale = ? AND nazione = ?";
            PreparedStatement ps = this.c.prepareStatement(ins, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, descr);
            ps.setString(2, fg_area);
            ps.setString(3, alpha_code);
            ps.setString(4, filiale);
            ps.setString(5, na_cod);
            
            boolean es = ps.executeUpdate() > 0;
            if (es) {
                insertValue_agg(ps, null, null, null, username);
            }
            
            return es;
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return false;
    }

    /**
     *
     * @param filiale
     * @param doc_code
     * @param descr
     * @param oam
     * @param username
     * @return
     */
    public boolean insert_new_Doctype(String filiale, String doc_code, String descr, String oam, String username) {
        try {
            String ins = "INSERT INTO tipologiadocumento (filiale,tipo_documento_identita,de_tipo_documento_identita,OAM_code) VALUES (?,?,?,?)";
            PreparedStatement ps = this.c.prepareStatement(ins, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, filiale);
            ps.setString(2, doc_code);
            ps.setString(3, descr);
            ps.setString(4, oam);
            ps.execute();
            insertValue_agg(ps, null, null, null, username);
            return true;
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return false;
    }

    /**
     *
     * @param filiale
     * @param doc_code
     * @param descr
     * @param oam
     * @param username
     * @return
     */
    public boolean update_Doctype(String filiale, String doc_code, String descr, String oam, String username) {
        try {
            String ins = "UPDATE tipologiadocumento SET de_tipo_documento_identita = ?, OAM_code = ? WHERE filiale = ? AND tipo_documento_identita = ?";
            PreparedStatement ps = this.c.prepareStatement(ins, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, descr);
            ps.setString(2, oam);
            ps.setString(3, filiale);
            ps.setString(4, doc_code);
            boolean es = ps.executeUpdate() > 0;
            if (es) {
                insertValue_agg(ps, null, null, null, username);
            }
            return es;
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return false;
    }

    /**
     *
     * @param filiale
     * @param descr
     * @param username
     * @return
     */
    public boolean insert_new_Lowcom(String filiale, String descr, String username) {
        try {
            String id = "01";
            ResultSet rs1 = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery("SELECT id_under_min_comm_justify FROM under_min_comm_justify "
                    + "ORDER BY id_under_min_comm_justify DESC");
            if (rs1.next()) {
                int newID = rs1.getInt(1) + 1;
                if (newID < 10) {
                    id = "0" + newID;
                } else {
                    id = valueOf(newID);
                }
            }
            String ins = "INSERT INTO under_min_comm_justify VALUES (?,?,?,?)";
            PreparedStatement ps = this.c.prepareStatement(ins, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, filiale);
            ps.setString(2, id);
            ps.setString(3, descr);
            ps.setString(4, "0");
            ps.execute();
            insertValue_agg_NOCENTRAL(ps, null, null, null, username);
            return true;
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return false;
    }
    
    public boolean insert_new_unlockratejust(String filiale, String descr, String username) {
        try {
            String id = "01";
            ResultSet rs1 = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE)
                    .executeQuery("SELECT id_unlockrate_justify FROM unlockrate_justify "
                            + "ORDER BY id_unlockrate_justify DESC");
            if (rs1.next()) {
                int newID = rs1.getInt(1) + 1;
                if (newID < 10) {
                    id = "0" + newID;
                } else {
                    id = valueOf(newID);
                }
            }
            String ins = "INSERT INTO unlockrate_justify VALUES (?,?,?,?)";
            PreparedStatement ps = this.c.prepareStatement(ins, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, filiale);
            ps.setString(2, id);
            ps.setString(3, descr);
            ps.setString(4, "0");
            ps.execute();
            insertValue_agg_NOCENTRAL(ps, null, null, null, username);
            return true;
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return false;
    }

    /**
     *
     * @param filiale
     * @param id
     * @param descr
     * @param status
     * @param username
     * @return
     */
    public boolean update_Lowcom(String filiale, String id, String descr, String status, String username) {
        try {
            String ins = "UPDATE under_min_comm_justify SET de_under_min_comm_justify = ?, fg_blocco = ? WHERE filiale = ? AND id_under_min_comm_justify = ?";
            PreparedStatement ps = this.c.prepareStatement(ins, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, descr);
            ps.setString(2, status);
            ps.setString(3, filiale);
            ps.setString(4, id);
            boolean es = ps.executeUpdate() > 0;
            if (es) {
                insertValue_agg(ps, null, null, null, username);
            }
            return es;
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return false;
    }
    
    public boolean update_unrate(String filiale, String id, String descr, String status, String username) {
        try {
            String ins = "UPDATE unlockrate_justify SET de_unlockrate_justify = ?, fg_blocco = ? WHERE filiale = ? AND id_unlockrate_justify = ?";
            PreparedStatement ps = this.c.prepareStatement(ins, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, descr);
            ps.setString(2, status);
            ps.setString(3, filiale);
            ps.setString(4, id);
            boolean es = ps.executeUpdate() > 0;
            if (es) {
                insertValue_agg(ps, null, null, null, username);
            }
            return es;
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return false;
    }

    /**
     *
     * @param filiale
     * @param descr
     * @param value
     * @param username
     * @param dtval
     * @param dt
     * @return
     */
    public String insert_new_Fixcomkind(String filiale, String descr, String value,
            String username, String dtval, String dt) {
        try {
            String ins = "INSERT INTO kind_commissione_fissa (SELECT ?,LPAD(id_kind_commissione_fissa+1, 3, '0'),?,?,? FROM kind_commissione_fissa WHERE filiale = ? order by id_kind_commissione_fissa desc LIMIT 1)";
            PreparedStatement ps = this.c.prepareStatement(ins, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, filiale);
            ps.setString(2, descr);
            ps.setString(3, value);
            ps.setString(4, "0");
            ps.setString(5, filiale);
            ps.execute();
            if (!filiale.equals("000")) {
                insert_aggiornamenti_mod(new Aggiornamenti_mod(
                        generaId(50), filiale, dtval, "0",
                        "PS", ps.toString(), username, dt));
            }
            return "0";
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
            if (ex.getMessage().contains("Duplicate")) {
                return "1";
            }
        }
        return "2";
    }

    /**
     *
     * @param filiale
     * @param id
     * @param descr
     * @param value
     * @param status
     * @param username
     * @param dtval
     * @param dt
     * @return
     */
    public boolean update_Fixcomkind(String filiale, String id, String descr, String value, String status, String username, String dtval, String dt) {
        try {
            String ins = "UPDATE kind_commissione_fissa SET de_kind_commissione_fissa = ?, ip_kind_commissione_fissa = ?, fg_blocco = ? WHERE filiale = ? AND id_kind_commissione_fissa = ?";
            PreparedStatement ps = this.c.prepareStatement(ins, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, descr);
            ps.setString(2, value);
            ps.setString(3, status);
            ps.setString(4, filiale);
            ps.setString(5, id);
            ps.executeUpdate();
            if (!filiale.equals("000")) {
                insert_aggiornamenti_mod(new Aggiornamenti_mod(
                        generaId(50), filiale, dtval, "0",
                        "PS", ps.toString(), username, dt));
            }
            return true;
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return false;
    }

    /**
     *
     * @param filiale
     * @param kind
     * @param min
     * @param max
     * @param buy
     * @param sell
     * @param username
     * @param dtval
     * @param dt
     * @return
     */
    public String insert_new_Fixcom(String filiale, String kind, String min, String max, String buy,
            String sell, String username, String dtval, String dt) {
        try {
            String ins = "INSERT INTO commissione_fissa VALUES (?,?,?,?,?,?,?)";
            PreparedStatement ps = this.c.prepareStatement(ins, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, filiale);
            ps.setString(2, kind);
            ps.setString(3, min);
            ps.setString(4, max);
            ps.setString(5, buy);
            ps.setString(6, sell);
            ps.setString(7, "0");
            ps.execute();
            
            if (!filiale.equals("000")) {
                insert_aggiornamenti_mod(new Aggiornamenti_mod(
                        generaId(50), filiale, dtval, "0",
                        "PS", ps.toString(), username, dt));
            }
            
            return "0";
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
            if (ex.getMessage().contains("Duplicate")) {
                return "1";
            }
        }
        return "2";
    }

    /**
     *
     * @param filiale
     * @param kind
     * @param min
     * @param max
     * @param buy
     * @param sell
     * @param status
     * @param min_old
     * @param username
     * @param dtval
     * @param dt
     * @return
     */
    public boolean edit_Fixcom(String filiale, String kind, String min, String max, String buy,
            String sell, String status, String min_old, String username, String dtval, String dt) {
        try {
            String ins = "UPDATE commissione_fissa SET minimo = ?, massimo = ?, commissione_buy = ?, commissione_sell = ?, fg_blocco = ? WHERE filiale = ? AND supporto = ? AND minimo = ?";
            
            PreparedStatement ps = this.c.prepareStatement(ins, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, min);
            ps.setString(2, max);
            ps.setString(3, buy);
            ps.setString(4, sell);
            ps.setString(5, status);
            ps.setString(6, filiale);
            ps.setString(7, kind);
            ps.setString(8, min_old);
            ps.executeUpdate();
            
            if (!filiale.equals("000")) {
                insert_aggiornamenti_mod(new Aggiornamenti_mod(
                        generaId(50), filiale, dtval, "0",
                        "PS", ps.toString(), username, dt));
            }

//            if (es) {
//                insertValue_agg(ps, null, null, null, username);
//            }
            return true;
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return false;
    }

    /**
     *
     * @param ck
     * @param username
     * @param dt_val
     * @return
     */
    public boolean insert_new_Kindtransaction(CustomerKind ck, String username, String dt_val) {
        try {
            String ins = "INSERT INTO tipologiaclienti (SELECT ?,LPAD(tipologia_clienti+1, 3, '0'),?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,? "
                    + "FROM tipologiaclienti ORDER BY tipologia_clienti DESC LIMIT 1)";
            PreparedStatement ps = this.c.prepareStatement(ins, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, ck.getFiliale());
            ps.setString(2, ck.getDe_tipologia_clienti());
            ps.setString(3, ck.getFg_nazionalita());
            ps.setString(4, ck.getFg_tipo_cliente());
            ps.setString(5, ck.getIp_max_singola_transazione());
            ps.setString(6, ck.getIp_max_settimanale());
            ps.setString(7, ck.getFg_area_geografica());
            ps.setString(8, ck.getStampa_autocertificazione());
            ps.setString(9, ck.getIp_soglia_antiriciclaggio());
            ps.setString(10, ck.getIp_soglia_extraCEE_certification());
            ps.setString(11, ck.getFg_annullato());
            ps.setString(12, ck.getFg_uploadobbl());
            ps.setString(13, ck.getTipofat());
            ps.setString(14, ck.getVatcode());
            ps.setString(15, ck.getIp_soglia_bollo());
            ps.setString(16, ck.getIp_value_bollo());
            ps.setString(17, ck.getDescr_bollo());
            ps.setString(18, ck.getResident());
            ps.setString(19, ck.getTaxfree());
            ps.execute();
            insertValue_agg_NOCENTRAL(ps, null, null, dt_val, username);
            return true;
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return false;
    }

    /**
     *
     * @param ck
     * @param username
     * @param dt_val
     * @return
     */
    public boolean edit_Kindtransaction(CustomerKind ck, String username, String dt_val) {
        try {
            String ins = "UPDATE tipologiaclienti SET de_tipologia_clienti = ?, fg_nazionalita = ?, fg_tipo_cliente = ?, "
                    + "ip_max_singola_transazione = ?,ip_max_settimanale = ?, fg_area_geografica = ?, stampa_autocertificazione = ?, "
                    + "ip_soglia_antiriciclaggio = ?, ip_soglia_extraCEE_certification = ?, fg_annullato = ? , fg_uploadobbl = ?, "
                    + "tipofat = ?, vatcode = ?, ip_soglia_bollo = ?, ip_value_bollo = ?, descr_bollo = ? , resid = ? , taxfree = ? "
                    + "WHERE filiale = ? AND tipologia_clienti = ?";
            PreparedStatement ps = this.c.prepareStatement(ins, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, ck.getDe_tipologia_clienti());
            ps.setString(2, ck.getFg_nazionalita());
            ps.setString(3, ck.getFg_tipo_cliente());
            ps.setString(4, ck.getIp_max_singola_transazione());
            ps.setString(5, ck.getIp_max_settimanale());
            ps.setString(6, ck.getFg_area_geografica());
            ps.setString(7, ck.getStampa_autocertificazione());
            ps.setString(8, ck.getIp_soglia_antiriciclaggio());
            ps.setString(9, ck.getIp_soglia_extraCEE_certification());
            ps.setString(10, ck.getFg_annullato());
            ps.setString(11, ck.getFg_uploadobbl());
            ps.setString(12, ck.getTipofat());
            ps.setString(13, ck.getVatcode());
            ps.setString(14, ck.getIp_soglia_bollo());
            ps.setString(15, ck.getIp_value_bollo());
            ps.setString(16, ck.getDescr_bollo());
            ps.setString(17, ck.getResident());
            ps.setString(18, ck.getTaxfree());
            ps.setString(19, ck.getFiliale());
            ps.setString(20, ck.getTipologia_clienti());
            boolean es = ps.executeUpdate() > 0;
            insertValue_agg_NOCENTRAL(ps, null, null, dt_val, username);
            return es;
        } catch (SQLException ex) {
            ex.printStackTrace();
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return false;
    }

    /**
     *
     * @param status
     * @return
     */
    public boolean edit_Showag(String status) {
        try {
            String ins = "UPDATE office SET showagency = ? WHERE cod = ? ";
            PreparedStatement ps = this.c.prepareStatement(ins, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, status);
            ps.setString(2, "000");
            return ps.executeUpdate() > 0;
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return false;
    }

    /**
     *
     * @param ag
     * @param username
     * @return
     */
    public boolean insert_new_Agency(Agency ag, String username) {
        try {
            String ins = "INSERT INTO agenzie (SELECT ?,LPAD(agenzia+1, 4, '0'),?,?,?,?,?,?,?,? FROM agenzie ORDER BY agenzia DESC LIMIT 1)";
            PreparedStatement ps = this.c.prepareStatement(ins, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, ag.getFiliale());
            ps.setString(2, ag.getDe_agenzia());
            ps.setString(3, ag.getIndirizzo());
            ps.setString(4, ag.getCap());
            ps.setString(5, ag.getCitta());
            ps.setString(6, ag.getTelefono());
            ps.setString(7, ag.getFax());
            ps.setString(8, ag.getEmail());
            ps.setString(9, ag.getFg_annullato());
            ps.execute();
            insertValue_agg(ps, null, null, null, username);
            return true;
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return false;
    }

    /**
     *
     * @param ag
     * @param username
     * @return
     */
    public boolean edit_Agency(Agency ag, String username) {
        try {
            String ins = "UPDATE agenzie SET de_agenzia = ?, indirizzo = ?, cap = ?, citta = ?, telefono = ?, fax = ?, email = ?, fg_annullato = ? WHERE filiale = ? AND agenzia = ?";
            PreparedStatement ps = this.c.prepareStatement(ins, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, ag.getDe_agenzia());
            ps.setString(2, ag.getIndirizzo());
            ps.setString(3, ag.getCap());
            ps.setString(4, ag.getCitta());
            ps.setString(5, ag.getTelefono());
            ps.setString(6, ag.getFax());
            ps.setString(7, ag.getEmail());
            ps.setString(8, ag.getFg_annullato());
            ps.setString(9, ag.getFiliale());
            ps.setString(10, ag.getAgenzia());
            
            insertValue_agg(ps, null, null, null, username);
            
            return ps.executeUpdate() > 0;
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return false;
    }

    /**
     *
     * @param filiale
     * @param descr
     * @param username
     * @return
     */
    public boolean insert_new_Intbooking(String filiale, String descr, String username) {
        try {
            String ins = "INSERT INTO internetbooking (SELECT ?,LPAD(internet_booking+1, 2, '0'),? FROM internetbooking ORDER BY internet_booking DESC LIMIT 1)";
            if (isFirstValue("internetbooking", "internet_booking")) {
                ins = "INSERT INTO internetbooking VALUES (?,'01',?)";
            }
            PreparedStatement ps = this.c.prepareStatement(ins, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, filiale);
            ps.setString(2, descr);
            ps.execute();
            insertValue_agg_NOCENTRAL(ps, null, null, null, username);
            return true;
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return false;
    }

    /**
     *
     * @param filiale
     * @param id
     * @param descr
     * @param username
     * @return
     */
    public boolean edit_Intbooking(String filiale, String id, String descr, String username) {
        try {
            String ins = "UPDATE internetbooking SET de_internet_booking = ? WHERE filiale = ? AND internet_booking = ?";
            PreparedStatement ps = this.c.prepareStatement(ins, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, descr);
            ps.setString(2, filiale);
            ps.setString(3, id);
            
            boolean es = ps.executeUpdate() > 0;
            if (es) {
                insertValue_agg(ps, null, null, null, username);
            }
            
            return es;
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return false;
    }

    /**
     *
     * @param filiale
     * @param cod
     * @param descr
     * @param username
     * @param dt
     * @return
     */
    public boolean insert_new_Credit(String filiale, String cod, String descr, String username, String dt) {
        try {
            String ins = "INSERT INTO carte_credito VALUES (?,?,?,?)";
            PreparedStatement ps = this.c.prepareStatement(ins, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, filiale);
            ps.setString(2, cod);
            ps.setString(3, descr);
            ps.setString(4, "0");
            ps.execute();
            if (!filiale.equals("000")) {
                String dt_val = formatStringtoStringDate(dt, patternnormdate, patternsqldate);
                insert_aggiornamenti_mod(new Aggiornamenti_mod(
                        generaId(50), filiale, dt_val, "0",
                        "PS", ps.toString(), username, dt));
            }
            return true;
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return false;
    }

    /**
     *
     * @param filiale
     * @param cod
     * @param descr
     * @param status
     * @param username
     * @param dt
     * @return
     */
    public boolean edit_Credit(String filiale, String cod, String descr, String status, String username, String dt) {
        try {
            String ins = "UPDATE carte_credito SET de_carta_credito = ? , fg_annullato = ? WHERE filiale = ? AND carta_credito = ?";
            PreparedStatement ps = this.c.prepareStatement(ins, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, descr);
            ps.setString(2, status);
            ps.setString(3, filiale);
            ps.setString(4, cod);
            boolean es = ps.executeUpdate() > 0;
            if (es) {
                if (!filiale.equals("000")) {
                    String dt_val = formatStringtoStringDate(dt, patternnormdate, patternsqldate);
                    insert_aggiornamenti_mod(new Aggiornamenti_mod(
                            generaId(50), filiale, dt_val, "0",
                            "PS", ps.toString(), username, dt));
                }
            }
            return es;
        } catch (SQLException ex) {
            
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return false;
    }

    /**
     *
     * @param fi
     * @param username
     * @param dtoper
     * @return
     */
    public boolean insert_new_Figures(Figures fi, String username, String dtoper) {
        try {
            String ins = "INSERT INTO supporti (SELECT ?,LPAD(supporto+1, 2, '0'),?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,? FROM supporti WHERE filiale = ? ORDER BY supporto DESC LIMIT 1)";
            PreparedStatement ps = this.c.prepareStatement(ins, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, fi.getFiliale());
            ps.setString(2, fi.getDe_supporto());
            ps.setString(3, fi.getFg_sys_trans());
            ps.setString(4, fi.getCommissione_acquisto());
            ps.setString(5, fi.getCommissione_vendita());
            ps.setString(6, fi.getCommissione_fissa());
            ps.setString(7, fi.getFix_buy_commission());
            ps.setString(8, fi.getFix_sell_commission());
            ps.setString(9, fi.getFg_tipo_incasso());
            ps.setString(10, fi.getBuy_comm_soglia_causale());
            ps.setString(11, fi.getSell_comm_soglia_causale());
            ps.setString(12, fi.getBuy_back_commission());
            ps.setString(13, fi.getSell_back_commission());
            ps.setString(14, fi.getBuy());
            ps.setString(15, fi.getSell());
            ps.setString(16, fi.getFg_annullato());
            ps.setString(17, fi.getResidenti());
            ps.setString(18, fi.getFg_uploadobbl());
            ps.setString(19, fi.getUpload_thr());
            ps.setString(20, fi.getFiliale());
            ps.execute();
            if (!fi.getFiliale().equals("000")) {
                insert_aggiornamenti_mod(new Aggiornamenti_mod(
                        generaId(50), fi.getFiliale(), fi.getDt_val(), "0",
                        "PS", ps.toString(), username, dtoper));
            }
            return true;
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return false;
    }

    /**
     *
     * @param fi
     * @param username
     * @param dtoper
     * @return
     */
    public boolean edit_Figures(Figures fi, String username, String dtoper) {
        try {
            String ins = "UPDATE supporti SET  de_supporto = ?,fg_sys_trans = ?,commissione_acquisto = ?,commissione_vendita = ?,commissione_fissa = ?,"
                    + "fix_buy_commission = ?,fix_sell_commission = ?,fg_tipo_incasso = ?,buy_comm_soglia_causale = ?,sell_comm_soglia_causale = ?,"
                    + "buy_back_commission = ?,sell_back_commission = ?,buy = ?,sell = ?,fg_annullato = ?, residenti = ? , fg_uploadobbl = ? , upl_thr = ? WHERE filiale = ? AND supporto = ?";
            
            PreparedStatement ps = this.c.prepareStatement(ins, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, fi.getDe_supporto());
            ps.setString(2, fi.getFg_sys_trans());
            ps.setString(3, fi.getCommissione_acquisto());
            ps.setString(4, fi.getCommissione_vendita());
            ps.setString(5, fi.getCommissione_fissa());
            ps.setString(6, fi.getFix_buy_commission());
            ps.setString(7, fi.getFix_sell_commission());
            ps.setString(8, fi.getFg_tipo_incasso());
            ps.setString(9, fi.getBuy_comm_soglia_causale());
            ps.setString(10, fi.getSell_comm_soglia_causale());
            ps.setString(11, fi.getBuy_back_commission());
            ps.setString(12, fi.getSell_back_commission());
            ps.setString(13, fi.getBuy());
            ps.setString(14, fi.getSell());
            ps.setString(15, fi.getFg_annullato());
            ps.setString(16, fi.getResidenti());
            ps.setString(17, fi.getFg_uploadobbl());
            ps.setString(18, fi.getUpload_thr());
            ps.setString(19, fi.getFiliale());
            ps.setString(20, fi.getSupporto());
            
            if (!fi.getFiliale().equals("000")) {
                insert_aggiornamenti_mod(new Aggiornamenti_mod(
                        generaId(50), fi.getFiliale(), fi.getDt_val(), "0",
                        "PS", ps.toString(), username, dtoper));
            }
            
            return ps.executeUpdate() > 0;
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return false;
    }

    /**
     *
     * @param cu
     * @param username
     * @return
     */
    public boolean edit_Currency_spread(Currency cu, String username) {
        try {
            String upd = "UPDATE valute SET buy_std_type = ?,buy_std = ?,buy_std_value = ?,buy_l1 = ?,buy_l2 = ?,"
                    + "buy_l3 = ?,buy_best = ?,sell_std_type = ?,sell_std = ?,sell_std_value = ?,sell_l1 = ?,sell_l2 = ?,sell_l3 = ?,sell_best = ? "
                    + "WHERE filiale = ? AND valuta = ?";
            
            PreparedStatement ps = this.c.prepareStatement(upd, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, cu.getBuy_std_type());
            ps.setString(2, cu.getBuy_std());
            ps.setString(3, cu.getBuy_std_value());
            ps.setString(4, cu.getBuy_l1());
            ps.setString(5, cu.getBuy_l2());
            ps.setString(6, cu.getBuy_l3());
            ps.setString(7, cu.getBuy_best());
            ps.setString(8, cu.getSell_std_type());
            ps.setString(9, cu.getSell_std());
            ps.setString(10, cu.getSell_std_value());
            ps.setString(11, cu.getSell_l1());
            ps.setString(12, cu.getSell_l2());
            ps.setString(13, cu.getSell_l3());
            ps.setString(14, cu.getSell_best());
            ps.setString(15, cu.getFilial());
            ps.setString(16, cu.getCode());
            ps.execute();
            String psstring = ps.toString();
            String dtoper = new DateTime().toString(patternsqldate);
            insert_aggiornamenti_mod(new Aggiornamenti_mod(
                    generaId(50), cu.getFilial(), cu.getDt_val(), "0",
                    "PS", psstring, username, dtoper));
            return true;
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return false;
    }

    /**
     *
     * @param buy_std_value
     * @param sell_std_value
     * @param filial
     * @param valuta
     * @param username
     * @return
     */
    public boolean edit_Currency_dafiliale(String buy_std_value, String sell_std_value, String filial, String valuta, String username) {
        try {
            String upd = "UPDATE valute SET buy_std_value = ?, sell_std_value = ?, buy_std_type = ?, sell_std_type = ? WHERE filiale = ? AND valuta = ?";
            PreparedStatement ps = this.c.prepareStatement(upd, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, buy_std_value);
            ps.setString(2, sell_std_value);
            ps.setString(3, "1");
            ps.setString(4, "1");
            ps.setString(5, filial);
            ps.setString(6, valuta);
            return ps.executeUpdate() > 0;
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return false;
        
    }

    /**
     *
     * @param cu
     * @param username
     * @return
     */
    public boolean edit_Currency_nospread(Currency cu, String username) {
        try {
            String upd = "UPDATE valute SET codice_uic_divisa = ?,de_valuta = ?,"
                    + "cambio_acquisto = ?,cambio_vendita = ?,cambio_bce = ?,de_messaggio = ?,"
                    + "fg_valuta_corrente = ?,enable_buy = ?,enable_sell = ? "
                    + "WHERE filiale = ? AND valuta = ?";
            
            PreparedStatement ps = this.c.prepareStatement(upd, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, cu.getUic());
            ps.setString(2, cu.getDescrizione());
            ps.setString(3, cu.getEnable_sellback());
            ps.setString(4, cu.getChange_sell());
            ps.setString(5, cu.getCambio_bce());
            ps.setString(6, cu.getMessage());
            ps.setString(7, cu.getInternal_cur());
            ps.setString(8, cu.getEnable_buy());
            ps.setString(9, cu.getEnable_sell());
            ps.setString(10, cu.getFilial());
            ps.setString(11, cu.getCode());
            String psstring = ps.toString();
            String dtoper = new DateTime().toString(patternsqldate);
            if (cu.getEditce().equals("1")) {
                insert_aggiornamenti_mod(new Aggiornamenti_mod(
                        generaId(50), cu.getFilial(), cu.getDt_val(), "0",
                        "PS", psstring, username, dtoper));
                if (!cu.getFilial().equals("000")) {
                    insert_aggiornamenti_mod(new Aggiornamenti_mod(
                            generaId(50), "000", cu.getDt_val(), "0",
                            "PS", psstring, username, dtoper));
                }
                return true;
            } else {
                return ps.executeUpdate() > 0;
            }
            
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return false;
    }

    /**
     *
     * @param cu
     * @param username
     * @return
     */
    public boolean edit_Currency(Currency cu, String username) {
        try {
            String upd = "UPDATE valute SET codice_uic_divisa = ?,de_valuta = ?,"
                    + "cambio_acquisto = ?,cambio_vendita = ?,cambio_bce = ?,de_messaggio = ?,"
                    + "fg_valuta_corrente = ?,enable_buy = ?,enable_sell = ?,buy_std_type = ?,buy_std = ?,buy_std_value = ?,buy_l1 = ?,buy_l2 = ?,"
                    + "buy_l3 = ?,buy_best = ?,sell_std_type = ?,sell_std = ?,sell_std_value = ?,sell_l1 = ?,sell_l2 = ?,sell_l3 = ?,sell_best = ? "
                    + "WHERE filiale = ? AND valuta = ?";
            
            PreparedStatement ps = this.c.prepareStatement(upd, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, cu.getUic());
            ps.setString(2, cu.getDescrizione());
            ps.setString(3, cu.getEnable_sellback());
            ps.setString(4, cu.getChange_sell());
            ps.setString(5, cu.getCambio_bce());
            ps.setString(6, cu.getMessage());
            ps.setString(7, cu.getInternal_cur());
            ps.setString(8, cu.getEnable_buy());
            ps.setString(9, cu.getEnable_sell());
            ps.setString(10, cu.getBuy_std_type());
            ps.setString(11, cu.getBuy_std());
            ps.setString(12, cu.getBuy_std_value());
            ps.setString(13, cu.getBuy_l1());
            ps.setString(14, cu.getBuy_l2());
            ps.setString(15, cu.getBuy_l3());
            ps.setString(16, cu.getBuy_best());
            ps.setString(17, cu.getSell_std_type());
            ps.setString(18, cu.getSell_std());
            ps.setString(19, cu.getSell_std_value());
            ps.setString(20, cu.getSell_l1());
            ps.setString(21, cu.getSell_l2());
            ps.setString(22, cu.getSell_l3());
            ps.setString(23, cu.getSell_best());
            ps.setString(24, cu.getFilial());
            ps.setString(25, cu.getCode());
            String psstring = ps.toString();
            String dtoper = new DateTime().toString(patternsqldate);
            
            if (cu.getEditce().equals("1")) {
                insert_aggiornamenti_mod(new Aggiornamenti_mod(
                        generaId(50), cu.getFilial(), cu.getDt_val(), "0",
                        "PS", psstring, username, dtoper));
//                if (!cu.getFilial().equals("000")) {
                insert_aggiornamenti_mod(new Aggiornamenti_mod(
                        generaId(50), "000", cu.getDt_val(), "0",
                        "PS", psstring, username, dtoper));
//                }
                return true;
            } else {
                return ps.executeUpdate() > 0;
            }
            
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return false;
    }

    /**
     *
     * @param am
     */
    public void insert_aggiornamenti_mod(Aggiornamenti_mod am) {
        try {
            String ins = "INSERT INTO aggiornamenti_mod VALUES (?,?,?,?,?,?,?,?)";
            PreparedStatement ps = this.c.prepareStatement(ins, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, am.getCod());
            ps.setString(2, am.getFiliale());
            ps.setString(3, am.getDt_start());
            ps.setString(4, am.getFg_stato());
            ps.setString(5, am.getTipost());
            ps.setString(6, am.getAction());
            ps.setString(7, am.getUser());
            ps.setString(8, am.getTimestamp());
            ps.execute();
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
    }
    
    private void insertValue_agg_NOCENTRAL(PreparedStatement ps, String statement, String filiali,
            String dt_val, String username) {
        String ty;
        String psstring;
        if (ps != null) {
            ty = "PS";
            psstring = ps.toString();
        } else if (statement != null) {
            ty = "ST";
            psstring = statement;
        } else {
            return;
        }
        if (filiali == null) {
            filiali = "";
            ArrayList<String> al = list_branchcode_ENABLED();
            for (int i = 0; i < al.size(); i++) {
                if (!al.get(i).equals(filiale)) {
                    filiali = filiali + al.get(i) + comma;
                }
            }
        }
        
        Iterable<String> parameters = on(comma).split(filiali);
        Iterator<String> it = parameters.iterator();
        String dtoper = new DateTime().toString(patternsqldate);
        if (dt_val == null) {
            dt_val = formatStringtoStringDate(dtoper, patternsqldate, patternnormdate);
        }
        
        while (it.hasNext()) {
            
            String value = it.next().trim();
            if (!value.equals("")) {
                insert_aggiornamenti_mod(new Aggiornamenti_mod(
                        generaId(50), value, dt_val, "0",
                        ty, psstring, username, dtoper));
            }
        }
    }
    
    private void insertValue_agg(PreparedStatement ps, String statement, String filiali,
            String dt_val, String username) {
        String ty;
        String psstring;
        if (ps != null) {
            ty = "PS";
            psstring = ps.toString();
        } else if (statement != null) {
            ty = "ST";
            psstring = statement;
        } else {
            return;
        }
        if (filiali == null) {
            filiali = "";
            ArrayList<String> al = list_branchcode_ENABLED();
            for (int i = 0; i < al.size(); i++) {
                filiali = filiali + al.get(i) + comma;
            }
        }
        Iterable<String> parameters = on(comma).split(filiali);
        Iterator<String> it = parameters.iterator();
        String dtoper = new DateTime().toString(patternsqldate);
        if (dt_val == null) {
            dt_val = formatStringtoStringDate(dtoper, patternsqldate, patternnormdate);
        }
        while (it.hasNext()) {
            String value = it.next().trim();
            if (!value.equals("")) {
                insert_aggiornamenti_mod(new Aggiornamenti_mod(
                        generaId(50), value, dt_val, "0",
                        ty, psstring, username, dtoper));
            }
        }
    }

    /**
     *
     * @param cu
     * @param list_kind_value
     * @param username
     * @return
     */
    public boolean edit_Currency_Supporti(Currency cu, ArrayList<String[]> list_kind_value, String username) {
        try {
            String del = "DELETE FROM supporti_valuta WHERE filiale = ? AND valuta = ?";
            PreparedStatement ps = this.c.prepareStatement(del, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, cu.getFilial());
            ps.setString(2, cu.getCode());
            String psstring = ps.toString();
            
            if (cu.getEditce().equals("1")) {
                insert_aggiornamenti_mod(new Aggiornamenti_mod(
                        generaId(50), cu.getFilial(), cu.getDt_val(), "0",
                        "PS", psstring, username, new DateTime().toString(patternsqldate)));
                insert_aggiornamenti_mod(new Aggiornamenti_mod(
                        generaId(50), "000", cu.getDt_val(), "0",
                        "PS", psstring, username, new DateTime().toString(patternsqldate)));
            } else {
                ps.execute();
            }
            
            String ins = "INSERT INTO supporti_valuta (filiale,valuta,supporto,annullato) VALUES (?,?,?,?)";
            for (int i = 0; i < list_kind_value.size(); i++) {
                if (list_kind_value.get(i)[1].equals("1")) {
                    PreparedStatement ps2 = this.c.prepareStatement(ins, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
                    ps2.setString(1, cu.getFilial());
                    ps2.setString(2, cu.getCode());
                    ps2.setString(3, (list_kind_value.get(i))[0]);
                    ps2.setString(4, "0");
                    String psstring2 = ps2.toString();
                    
                    if (cu.getEditce().equals("1")) {
                        insert_aggiornamenti_mod(new Aggiornamenti_mod(
                                generaId(50), cu.getFilial(), cu.getDt_val(), "0",
                                "PS", psstring2, username, new DateTime().toString(patternsqldate)));
                        insert_aggiornamenti_mod(new Aggiornamenti_mod(
                                generaId(50), "000", cu.getDt_val(), "0",
                                "PS", psstring2, username, new DateTime().toString(patternsqldate)));
                    } else {
                        ps2.execute();
                    }
                }
            }
            return true;
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return false;
    }

    /**
     *
     * @param cu
     * @param list_sizecut
     * @param username
     * @return
     */
    public boolean edit_Currency_Tagli(Currency cu, List<Sizecuts> list_sizecut, String username) {
        try {
            String del = "DELETE FROM valute_tagli WHERE filiale = '" + cu.getFilial() + "' AND valuta = '" + cu.getCode() + "'";
            if (cu.getEditce().equals("1")) {
                insert_aggiornamenti_mod(new Aggiornamenti_mod(
                        generaId(50), cu.getFilial(), cu.getDt_val(), "0",
                        "ST", del, username, new DateTime().toString(patternsqldate)));
                insert_aggiornamenti_mod(new Aggiornamenti_mod(
                        generaId(50), "000", cu.getDt_val(), "0",
                        "ST", del, username, new DateTime().toString(patternsqldate)));
            } else {
                this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).execute(del);
            }
            String ins = "INSERT INTO valute_tagli VALUES (?,?,?,?)";
            for (int i = 0; i < list_sizecut.size(); i++) {
                PreparedStatement ps2 = this.c.prepareStatement(ins, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
                ps2.setString(1, cu.getFilial());
                ps2.setString(2, cu.getCode());
                ps2.setString(3, list_sizecut.get(i).getIp_taglio_MOD());
                ps2.setString(4, list_sizecut.get(i).getFg_stato());
                
                String psstring2 = ps2.toString();
                if (cu.getEditce().equals("1")) {
                    insert_aggiornamenti_mod(new Aggiornamenti_mod(
                            generaId(50), cu.getFilial(), cu.getDt_val(), "0",
                            "PS", psstring2, username, new DateTime().toString(patternsqldate)));
                    insert_aggiornamenti_mod(new Aggiornamenti_mod(
                            generaId(50), "000", cu.getDt_val(), "0",
                            "PS", psstring2, username, new DateTime().toString(patternsqldate)));
                } else {
                    ps2.execute();
                }
            }
            return true;
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return false;
    }

    /**
     *
     * @param filial
     * @return
     */
    public ArrayList<Currency> list_figures_query_edit(String filial) {
        ArrayList<Currency> out = new ArrayList<>();
        try {
            String sql;
            PreparedStatement ps;
            if (filial == null) {
                sql = "SELECT filiale,valuta,de_valuta,cambio_bce,enable_buy,enable_sell,buy_std_type,"
                        + "buy_std,buy_std_value,sell_std_type,sell_std,sell_std_value FROM valute GROUP BY valuta ORDER BY valuta";
                ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            } else {
                sql = "SELECT filiale,valuta,de_valuta,cambio_bce,enable_buy,enable_sell,buy_std_type,"
                        + "buy_std,buy_std_value,sell_std_type,sell_std,sell_std_value FROM valute WHERE filiale = ? ORDER BY valuta";
                ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
                ps.setString(1, filial);
            }
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                Currency cu = new Currency();
                cu.setCode(rs.getString("valuta"));
                cu.setDescrizione(correggiValueJS(rs.getString("de_valuta")));
                cu.setFilial(rs.getString("filiale"));
                cu.setCambio_bce(rs.getString("cambio_bce"));
                cu.setEnable_buy(rs.getString("enable_buy"));
                cu.setEnable_sell(rs.getString("enable_sell"));
                cu.setBuy_std_type(rs.getString("buy_std_type"));
                cu.setSell_std_type(rs.getString("sell_std_type"));
                double bce = fd(cu.getCambio_bce());
                if (cu.getEnable_buy().equals("1")) {
                    if (cu.getBuy_std_type().equals("0")) {
                        double standard = fd(rs.getString("buy_std"));
                        double buy_st = bce * (100.0D + standard) / 100.0D;
                        cu.setEnable_buy(formatMysqltoDisplay(roundDoubleandFormat(buy_st, 8)));
                    } else {
                        cu.setEnable_buy(rs.getString("buy_std_value"));
                    }
                } else {
                    cu.setEnable_buy("<div class='font-red'>Disabled <i class='fa fa-close'></i></div>");
                }
                if (cu.getEnable_sell().equals("1")) {
                    if (cu.getSell_std_type().equals("0")) {
                        double standard = fd(rs.getString("sell_std"));
                        double buy_st = bce * (100.0D + standard) / 100.0D;
                        cu.setEnable_sell(formatMysqltoDisplay(roundDoubleandFormat(buy_st, 8)));
                    } else {
                        cu.setEnable_sell(rs.getString("sell_std_value"));
                    }
                } else {
                    cu.setEnable_sell("<div class='font-red'>Disabled <i class='fa fa-close'></i></div>");
                }
                out.add(cu);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @param filiale
     * @param cod
     * @param descr
     * @param conto
     * @param username
     * @param bankaccount
     * @return
     */
    public boolean insert_new_Bank(String filiale, String cod, String descr, String conto, String username, String bankaccount) {
        try {
            String ins = "INSERT INTO bank VALUES (?,?,?,?,?,?,?)";
//            String ins = "INSERT INTO bank (SELECT ?,LPAD(cod+1, 3, '0'),?,?,?,?,? FROM bank ORDER BY cod DESC LIMIT 1)";
            PreparedStatement ps = this.c.prepareStatement(ins, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, filiale);
            ps.setString(2, cod);
            ps.setString(3, descr);
            ps.setString(4, conto);
            ps.setString(5, "-");
            ps.setString(6, "0");
            ps.setString(7, bankaccount);
            ps.execute();
            insertValue_agg(ps, null, null, null, username);
            return true;
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return false;
    }

    /**
     *
     * @param filiale
     * @param oldcod
     * @param newcod
     * @param descr
     * @param conto
     * @param da_annull
     * @param fg_annullato
     * @param username
     * @param bankaccount
     * @return
     */
    public boolean edit_Bank(String filiale, String oldcod, String newcod, String descr, String conto, String da_annull, String fg_annullato, String username, String bankaccount) {
        try {
            String ins = "UPDATE bank SET de_bank = ?, conto = ?, da_annull = ?, fg_annullato = ? , bank_account = ?, cod = ? WHERE filiale = ? AND cod = ?";
            PreparedStatement ps = this.c.prepareStatement(ins, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, descr);
            ps.setString(2, conto);
            ps.setString(3, da_annull);
            ps.setString(4, fg_annullato);
            ps.setString(5, bankaccount);
            ps.setString(6, newcod);
            ps.setString(7, filiale);
            ps.setString(8, oldcod);
            boolean es = ps.executeUpdate() > 0;
            
            if (es) {
                insertValue_agg(ps, null, null, null, username);
            }
            return es;
        } catch (SQLException ex) {
            
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return false;
    }

    /**
     *
     * @param table
     * @return
     */
    public ArrayList<String[]> list_group_branch(String table) {
        ArrayList<String[]> out = new ArrayList<>();
        try {
            String sql = "SELECT * FROM " + table + " ORDER BY codice";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                String[] ar = {rs.getString(1), rs.getString(2)};
                out.add(ar);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @return
     */
    public ArrayList<String[]> list_branch_group() {
        ArrayList<String[]> out = new ArrayList<>();
        try {
            String sql = "SELECT * FROM branchgroup ORDER BY descrizione";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                String[] ar = {rs.getString(1), rs.getString(2), rs.getString(3), rs.getString(4), rs.getString(5), rs.getString(6), rs.getString(7), rs.getString(8)};
                out.add(ar);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @param br
     * @param username
     * @return
     */
    public boolean insert_new_Branch(Branch br, String username) {
        try {
            String ins = "INSERT INTO branch VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
            PreparedStatement ps = this.c.prepareStatement(ins, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, br.getFiliale());
            ps.setString(2, br.getCod());
            ps.setString(3, br.getDe_branch());
            ps.setString(4, br.getAdd_city());
            ps.setString(5, br.getAdd_cap());
            ps.setString(6, br.getAdd_via());
            ps.setString(7, br.getFg_persgiur());
            ps.setString(8, br.getProv_raccval());
            ps.setString(9, br.getFg_annullato());
            ps.setString(10, br.getDa_annull());
            ps.setString(11, br.getG01());
            ps.setString(12, br.getG02());
            ps.setString(13, br.getG03());
            ps.setString(14, br.getFg_modrate());
            ps.setString(15, br.getFg_crm());
            ps.setString(16, br.getOlta_user());
            ps.setString(17, br.getOlta_pass());
            ps.setString(18, br.getPay_nomeazienda());
            ps.setString(19, br.getPay_idazienda());
            ps.setString(20, br.getPay_skin());
            ps.setString(21, br.getPay_user());
            ps.setString(22, br.getPay_password());
            ps.setString(23, br.getPay_token());
            ps.setString(24, br.getPay_terminale());
            ps.setString(25, br.getFg_agency());
            ps.setString(26, br.getFg_pad());
            ps.setString(27, br.getDt_start());
            ps.setString(28, br.getMax_ass());
            
            ps.setString(29, br.getBrgr_01());
            ps.setString(30, br.getBrgr_02());
            ps.setString(31, br.getBrgr_03());
            ps.setString(32, br.getBrgr_04());
            ps.setString(33, br.getBrgr_05());
            ps.setString(34, br.getBrgr_06());
            ps.setString(35, br.getBrgr_07());
            ps.setString(36, br.getBrgr_08());
            ps.setString(37, br.getBrgr_09());
            ps.setString(38, br.getBrgr_10());
            ps.setString(39, br.getTarget());
            
            ps.execute();
            insertValue_agg(ps, null, null, null, username);
            return true;
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return false;
    }

    /**
     *
     * @param br
     * @param username
     * @return
     */
    public boolean edit_Branch(Branch br, String username) {
        try {
            String ins = "UPDATE branch SET de_branch = ?, add_city = ?, add_cap = ?, add_via = ?, fg_persgiur = ?, prov_raccval = ?, "
                    + "fg_annullato = ?, da_annull = ?, g01 = ?, g02 = ?, g03 = ? , fg_modrate = ? , fg_crm = ? , olta_user = ? , olta_psw = ? , "
                    + "pay_nomeazienda = ?, pay_idazienda = ?, pay_skin = ?, pay_user = ?, pay_password = ?, pay_token = ?, pay_terminale = ?, "
                    + "fg_agency = ? , fg_pad = ?, dt_start = ?, max_ass = ?, brgr_01 = ?, brgr_02 = ?, brgr_03 = ?, brgr_04 = ?, brgr_05 = ?,"
                    + " brgr_06 = ?, brgr_07 = ?, brgr_08 = ?, brgr_09 = ?, brgr_10 = ?, target = ? WHERE filiale = ? AND cod = ?";
            PreparedStatement ps = this.c.prepareStatement(ins, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, br.getDe_branch());
            ps.setString(2, br.getAdd_city());
            ps.setString(3, br.getAdd_cap());
            ps.setString(4, br.getAdd_via());
            ps.setString(5, br.getFg_persgiur());
            ps.setString(6, br.getProv_raccval());
            ps.setString(7, br.getFg_annullato());
            ps.setString(8, br.getDa_annull());
            ps.setString(9, br.getG01());
            ps.setString(10, br.getG02());
            ps.setString(11, br.getG03());
            ps.setString(12, br.getFg_modrate());
            ps.setString(13, br.getFg_crm());
            ps.setString(14, br.getOlta_user());
            ps.setString(15, br.getOlta_pass());
            ps.setString(16, br.getPay_nomeazienda());
            ps.setString(17, br.getPay_idazienda());
            ps.setString(18, br.getPay_skin());
            ps.setString(19, br.getPay_user());
            ps.setString(20, br.getPay_password());
            ps.setString(21, br.getPay_token());
            ps.setString(22, br.getPay_terminale());
            ps.setString(23, br.getFg_agency());
            ps.setString(24, br.getFg_pad());
            ps.setString(25, br.getDt_start());
            ps.setString(26, br.getMax_ass());
            
            ps.setString(27, br.getBrgr_01());
            ps.setString(28, br.getBrgr_02());
            ps.setString(29, br.getBrgr_03());
            ps.setString(30, br.getBrgr_04());
            ps.setString(31, br.getBrgr_05());
            ps.setString(32, br.getBrgr_06());
            ps.setString(33, br.getBrgr_07());
            ps.setString(34, br.getBrgr_08());
            ps.setString(35, br.getBrgr_09());
            ps.setString(36, br.getBrgr_10());
            ps.setString(37, br.getTarget());
            
            ps.setString(38, br.getFiliale());
            ps.setString(39, br.getCod());
            boolean es = ps.executeUpdate() > 0;
            if (es) {
                insertValue_agg(ps, null, null, null, username);
            }
            return es;
        } catch (SQLException ex) {
            ex.printStackTrace();
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return false;
    }

    /**
     *
     * @param bl
     * @param username
     * @return
     */
    public boolean insert_new_Blacklist(BlacklistM bl, String username) {
        try {
            String ins = "INSERT INTO blacklist (SELECT LPAD(code+1, 3, '0'),?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,? FROM blacklist ORDER BY cast(code AS decimal (10,0)) DESC LIMIT 1)";
            
            if (isFirstValue("blacklist", "code")) {
                ins = "INSERT INTO blacklist VALUES ('001',?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
            }
            
            PreparedStatement ps = this.c.prepareStatement(ins, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, bl.getCognome());
            ps.setString(2, bl.getNome());
            ps.setString(3, bl.getSesso());
            ps.setString(4, bl.getCodfisc());
            ps.setString(5, bl.getNazione());
            ps.setString(6, bl.getCitta());
            ps.setString(7, bl.getIndirizzo());
            ps.setString(8, bl.getCap());
            ps.setString(9, bl.getProvincia());
            ps.setString(10, bl.getCitta_nascita());
            ps.setString(11, bl.getProvincia_nascita());
            ps.setString(12, bl.getNazione_nascita());
            ps.setString(13, bl.getDt_nascita());
            ps.setString(14, bl.getTipo_documento());
            ps.setString(15, bl.getNumero_documento());
            ps.setString(16, bl.getDt_rilascio_documento());
            ps.setString(17, bl.getDt_scadenza_documento());
            ps.setString(18, bl.getRilasciato_da_documento());
            ps.setString(19, bl.getLuogo_rilascio_documento());
            ps.setString(20, bl.getEmail());
            ps.setString(21, bl.getTelefono());
            ps.setString(22, bl.getText());
            ps.setString(23, bl.getDt_blocco());
            ps.setString(24, bl.getFg_annullato());
            ps.setString(25, bl.getTimestamp());
            ps.execute();
            
            insertValue_agg_NOCENTRAL(ps, null, null, null, username);
            
            return true;
        } catch (SQLException ex) {
            ex.printStackTrace();
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return false;
    }

    /**
     *
     * @param bl
     * @param username
     * @return
     */
    public boolean edit_Blacklist(BlacklistM bl, String username) {
        try {
            String upd = "UPDATE blacklist SET cognome = ?, nome = ?, sesso = ?, codfisc = ?, nazione = ?, citta = ?, "
                    + "indirizzo = ?, cap = ?, provincia = ?, citta_nascita = ?, provincia_nascita = ?, nazione_nascita = ?, "
                    + "dt_nascita = ?, tipo_documento = ?, numero_documento = ?, dt_rilascio_documento = ?, dt_scadenza_documento = ?, "
                    + "rilasciato_da_documento = ?, luogo_rilascio_documento = ?, email = ?, telefono = ?, text = ? , fg_annullato = ? WHERE code = ?";
            
            PreparedStatement ps = this.c.prepareStatement(upd, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, bl.getCognome());
            ps.setString(2, bl.getNome());
            ps.setString(3, bl.getSesso());
            ps.setString(4, bl.getCodfisc());
            ps.setString(5, bl.getNazione());
            ps.setString(6, bl.getCitta());
            ps.setString(7, bl.getIndirizzo());
            ps.setString(8, bl.getCap());
            ps.setString(9, bl.getProvincia());
            ps.setString(10, bl.getCitta_nascita());
            ps.setString(11, bl.getProvincia_nascita());
            ps.setString(12, bl.getNazione_nascita());
            ps.setString(13, bl.getDt_nascita());
            ps.setString(14, bl.getTipo_documento());
            ps.setString(15, bl.getNumero_documento());
            ps.setString(16, bl.getDt_rilascio_documento());
            ps.setString(17, bl.getDt_scadenza_documento());
            ps.setString(18, bl.getRilasciato_da_documento());
            ps.setString(19, bl.getLuogo_rilascio_documento());
            ps.setString(20, bl.getEmail());
            ps.setString(21, bl.getTelefono());
            ps.setString(22, bl.getText());
            ps.setString(23, bl.getFg_annullato());
            ps.setString(24, bl.getCode());
            
            boolean es = ps.executeUpdate() > 0;
            
            if (es) {
                insertValue_agg_NOCENTRAL(ps, null, null, null, username);
            }
            
            return es;
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return false;
    }

    /**
     *
     * @param o
     * @param username
     * @return
     */
    public boolean edit_Natoff(Office o, String username) {
        try {
            String upd = "UPDATE office SET de_office = ?, add_city = ?, add_cap = ?, add_via = ?, vat = ?, reg_impr = ?, rea = ?, "
                    + "changetype = ?, decimalround = ?, scadenza_bb = ?, url_bl = ?, minutes = ?, kyc_mesi = ?, kyc_soglia = ? , "
                    + "risk_days = ? , risk_ntr = ? , risk_soglia = ? WHERE cod = ?";
            
            String upd2 = "UPDATE office SET txt_ricev_1 = \"" + o.n_getTxt_ricev_1() + "\" WHERE cod = '" + o.getCod() + "'";
            String upd3 = "UPDATE office SET txt_ricev_2 = \"" + o.n_getTxt_ricev_2() + "\" WHERE cod = '" + o.getCod() + "'";
            String upd4 = "UPDATE office SET txt_ricev_bb = \"" + o.n_getTxt_ricev_bb() + "\" WHERE cod = '" + o.getCod() + "'";
            String upd5 = "UPDATE office SET txt_alert_threshold_1 = \"" + o.n_getTxt_alert_threshold_1() + "\" WHERE cod = '" + o.getCod() + "'";
            String upd6 = "UPDATE office SET txt_alert_threshold_2 = \"" + o.n_getTxt_alert_threshold_2() + "\" WHERE cod = '" + o.getCod() + "'";
            String upd7 = "UPDATE office SET txt_nopep = \"" + o.n_getTxt_nopep() + "\" WHERE cod = '" + o.getCod() + "'";
            
            PreparedStatement ps = this.c.prepareStatement(upd, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, o.getDe_office());
            ps.setString(2, o.getAdd_city());
            ps.setString(3, o.getAdd_cap());
            ps.setString(4, o.getAdd_via());
            ps.setString(5, o.getVat());
            ps.setString(6, o.getReg_impr());
            ps.setString(7, o.getRea());
            ps.setString(8, o.getChangetype());
            ps.setString(9, o.getDecimalround());
            ps.setString(10, o.getScadenza_bb());
            ps.setString(11, o.getUrl_bl());
            ps.setString(12, o.getMinutes());
            ps.setString(13, o.getKyc_mesi());
            ps.setString(14, o.getKyc_soglia());
            ps.setString(15, o.getRisk_days());
            ps.setString(16, o.getRisk_ntr());
            ps.setString(17, o.getRisk_soglia());
            ps.setString(18, o.getCod());
            boolean es = ps.executeUpdate() > 0;
            boolean es2 = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeUpdate(upd2) > 0;
            boolean es3 = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeUpdate(upd3) > 0;
            boolean es4 = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeUpdate(upd4) > 0;
            boolean es5 = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeUpdate(upd5) > 0;
            boolean es6 = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeUpdate(upd6) > 0;
            boolean es7 = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeUpdate(upd7) > 0;
            
            if (es) {
                insertValue_agg_NOCENTRAL(ps, null, null, null, username);
                sleeping(1000);
                
                if (es2) {
                    insertValue_agg_NOCENTRAL(null, upd2, null, null, username);
                }
                if (es3) {
                    insertValue_agg_NOCENTRAL(null, upd3, null, null, username);
                }
                if (es4) {
                    insertValue_agg_NOCENTRAL(null, upd4, null, null, username);
                }
                if (es5) {
                    insertValue_agg_NOCENTRAL(null, upd5, null, null, username);
                }
                if (es6) {
                    insertValue_agg_NOCENTRAL(null, upd6, null, null, username);
                }
                if (es7) {
                    insertValue_agg_NOCENTRAL(null, upd7, null, null, username);
                }
            }
            return es;
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return false;
    }

    /**
     *
     * @param filiale
     * @param kind
     * @param min
     * @param max
     * @param buy
     * @param sell
     * @param username
     * @param dtval
     * @param dt
     * @return
     */
    public String insert_new_Ratera(String filiale, String kind, String min, String max,
            String buy, String sell, String username, String dtval, String dt) {
        try {
            String ins = "INSERT INTO rate_range VALUES (?,?,?,?,?,?,?)";
            PreparedStatement ps = this.c.prepareStatement(ins, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, filiale);
            ps.setString(2, kind);
            ps.setString(3, min);
            ps.setString(4, max);
            ps.setString(5, buy);
            ps.setString(6, sell);
            ps.setString(7, "0");
            ps.execute();
            if (!filiale.equals("000")) {
                insert_aggiornamenti_mod(new Aggiornamenti_mod(
                        generaId(50), filiale, dtval, "0",
                        "PS", ps.toString(), username, dt));
            }
            return "0";
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
            if (ex.getMessage().contains("Duplicate")) {
                return "1";
            }
        }
        return "2";
    }

    /**
     *
     * @param filiale
     * @param kind
     * @param min
     * @param max
     * @param buy
     * @param sell
     * @param status
     * @param min_old
     * @param username
     * @param dtval
     * @param dt
     * @return
     */
    public boolean edit_Ratera(String filiale, String kind, String min, String max, String buy,
            String sell, String status, String min_old, String username, String dtval, String dt) {
        try {
            String ins = "UPDATE rate_range SET minimo = ?, massimo = ?, buy_value = ?, sell_value = ?, fg_blocco = ? WHERE filiale = ? AND supporto = ? AND minimo = ?";
            
            PreparedStatement ps = this.c.prepareStatement(ins, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, min);
            ps.setString(2, max);
            ps.setString(3, buy);
            ps.setString(4, sell);
            ps.setString(5, status);
            ps.setString(6, filiale);
            ps.setString(7, kind);
            ps.setString(8, min_old);
            boolean es = ps.executeUpdate() > 0;
            
            if (!filiale.equals("000")) {
                insert_aggiornamenti_mod(new Aggiornamenti_mod(
                        generaId(50), filiale, dtval, "0",
                        "PS", ps.toString(), username, dt));
            }
            
            return es;
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return false;
    }

    /**
     *
     * @return
     */
    public ArrayList<String[]> selectgroupbranch() {
        ArrayList<String[]> out = new ArrayList<>();
        try {
            String sql = "SELECT id,descrizione FROM selectgroupbranch WHERE stato = ? order by descrizione";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, "1");
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                String[] s = {rs.getString(1), rs.getString(2)};
                out.add(s);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @param table
     * @param cod
     * @param type
     * @param descr
     * @param username
     * @return
     */
    public String insert_new_Groupbr(String table, String cod, String type, String descr, String username) {
        try {
            String ins = "INSERT INTO " + table + " (cod,descrizione,type) VALUES (?,?,?)";
            PreparedStatement ps = this.c.prepareStatement(ins, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, cod);
            ps.setString(2, descr);
            ps.setString(3, type);
            ps.execute();
            
            insertValue_agg_NOCENTRAL(ps, null, null, null, username);
            
            return "0";
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
            if (ex.getMessage().contains("Duplicate")) {
                return "1";
            }
        }
        return "2";
    }

    /**
     *
     * @param table
     * @param cod
     * @param type
     * @param descr
     * @param username
     * @return
     */
    public boolean edit_Groupbr(String table, String cod, String type, String descr, String username) {
        try {
            String ins = "UPDATE " + table + " SET descrizione = ? WHERE codice = ?";
            PreparedStatement ps = this.c.prepareStatement(ins, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, descr);
            ps.setString(2, cod);
            
            boolean es = ps.executeUpdate() > 0;
            
            insertValue_agg_NOCENTRAL(ps, null, null, null, username);
            
            return es;
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return false;
    }

    /**
     *
     * @param table
     * @param cod
     * @param type
     * @param descr
     * @param username
     * @return
     */
    public boolean edit_Groupbr2(String table, String cod, String type, String descr, String username) {
        try {
            String ins = "UPDATE " + table + " SET descrizione = ? WHERE cod = ?";
            PreparedStatement ps = this.c.prepareStatement(ins, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, descr);
            ps.setString(2, cod);
            
            boolean es = ps.executeUpdate() > 0;
            
            insertValue_agg_NOCENTRAL(ps, null, null, null, username);
            
            return es;
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return false;
    }

    /**
     *
     * @return
     */
    public ArrayList<Users> list_all_users_show() {
        ArrayList<Users> out = new ArrayList<>();
        try {
            String sql = "SELECT * FROM users WHERE fg_stato <> ? AND cod <> ? ORDER BY CAST(cod AS decimal (10,0))";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, "0");
            ps.setString(2, "0000");
            
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                Users us = new Users();
                us.setFiliale(rs.getString(1));
                us.setCod(rs.getString(2));
                us.setUsername(rs.getString(3));
                us.setPwd(rs.getString(4));
                us.setDe_nome(rs.getString(5));
                us.setDe_cognome(rs.getString(6));
                us.setDt_mod_pwd(rs.getString(7));
                us.setValidita(rs.getString(8));
                us.setConto(rs.getString(9));
                us.setEmail(rs.getString(10));
                us.setFg_tipo(rs.getString(11));
                us.setFg_stato(rs.getString(12));
                us.setDt_insert(rs.getString(13));
                out.add(us);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @return
     */
    public ArrayList<Users> list_all_users_enabled() {
        ArrayList<Users> out = new ArrayList<>();
        try {
            String sql = "SELECT * FROM users WHERE fg_stato <> ? ORDER BY CAST(cod AS decimal (10,0))";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, "0");
            
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                Users us = new Users();
                us.setFiliale(rs.getString(1));
                us.setCod(rs.getString(2));
                us.setUsername(rs.getString(3));
                us.setPwd(rs.getString(4));
                us.setDe_nome(rs.getString(5));
                us.setDe_cognome(rs.getString(6));
                us.setDt_mod_pwd(rs.getString(7));
                us.setValidita(rs.getString(8));
                us.setConto(rs.getString(9));
                us.setEmail(rs.getString(10));
                us.setFg_tipo(rs.getString(11));
                us.setFg_stato(rs.getString(12));
                us.setDt_insert(rs.getString(13));
                out.add(us);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @return
     */
    public ArrayList<Users> list_all_users() {
        ArrayList<Users> out = new ArrayList<>();
        try {
            String sql = "SELECT * FROM users ORDER BY CAST(cod AS decimal (10,0))";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                Users us = new Users();
                us.setFiliale(rs.getString(1));
                us.setCod(rs.getString(2));
                us.setUsername(rs.getString(3));
                us.setPwd(rs.getString(4));
                us.setDe_nome(rs.getString(5));
                us.setDe_cognome(rs.getString(6));
                us.setDt_mod_pwd(rs.getString(7));
                us.setValidita(rs.getString(8));
                us.setConto(rs.getString(9));
                us.setEmail(rs.getString(10));
                us.setFg_tipo(rs.getString(11));
                us.setFg_stato(rs.getString(12));
                us.setDt_insert(rs.getString(13));
                out.add(us);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @param cod
     * @return
     */
    public Users get_user(String cod) {
        try {
            String sql = "SELECT * FROM users WHERE cod = ?";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, cod);
            ResultSet rs = ps.executeQuery();
            
            if (rs.next()) {
                Users us = new Users();
                us.setFiliale(rs.getString(1));
                us.setCod(rs.getString(2));
                us.setUsername(rs.getString(3));
                us.setPwd(rs.getString(4));
                us.setDe_nome(rs.getString(5));
                us.setDe_cognome(rs.getString(6));
                us.setDt_mod_pwd(rs.getString(7));
                us.setValidita(rs.getString(8));
                us.setConto(rs.getString(9));
                us.setEmail(rs.getString(10));
                us.setFg_tipo(rs.getString(11));
                us.setFg_stato(rs.getString(12));
                us.setDt_insert(rs.getString(13));
                return us;
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return null;
    }

    /**
     *
     * @return
     */
    public String getIdnewUser() {
        try {
            String sql = "SELECT LPAD((CAST(cod AS DECIMAL(10))+1), 4, '0') FROM users ORDER BY CAST(cod AS DECIMAL(10,2)) DESC LIMIT 1";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ResultSet rs = ps.executeQuery();
            if (rs.next()) {
                return rs.getString(1);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return "000";
    }

    /**
     *
     * @param us
     * @param username
     * @return
     */
    public String insert_new_User(Users us, String username) {
        try {
            String ins = "INSERT INTO users (filiale,cod,username,pwd,de_nome,de_cognome,validita,conto,email,fg_tipo) VALUES (?,?,?,?,?,?,?,?,?,?)";
            PreparedStatement ps = this.c.prepareStatement(ins, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, us.getFiliale());
            ps.setString(2, us.getCod());
            ps.setString(3, us.getUsername());
            ps.setString(4, us.getPwd());
            ps.setString(5, us.getDe_nome());
            ps.setString(6, us.getDe_cognome());
            ps.setString(7, us.getValidita());
            ps.setString(8, us.getConto());
            ps.setString(9, us.getEmail());
            ps.setString(10, us.getFg_tipo());
            
            ps.execute();
            
            insertValue_agg(ps, null, null, null, username);
            return "0";
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
            if (ex.getMessage().contains("Duplicate")) {
                return "1";
            }
        }
        return "2";
    }

    /**
     *
     * @param us
     * @param username
     * @return
     */
    public boolean edit_User(Users us, String username) {
        try {
            String ins = "UPDATE users SET de_nome = ?,de_cognome = ?,validita = ?,conto = ?,email = ?,fg_tipo = ?, fg_stato = ? WHERE filiale = ? AND cod = ?";
            PreparedStatement ps = this.c.prepareStatement(ins, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, us.getDe_nome());
            ps.setString(2, us.getDe_cognome());
            ps.setString(3, us.getValidita());
            ps.setString(4, us.getConto());
            ps.setString(5, us.getEmail());
            ps.setString(6, us.getFg_tipo());
            ps.setString(7, us.getFg_stato());
            ps.setString(8, us.getFiliale());
            ps.setString(9, us.getCod());
            boolean es = ps.executeUpdate() > 0;
            if (es) {
                insertValue_agg(ps, null, null, null, username);
            }
            return es;
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return false;
    }

    /**
     *
     * @param position
     * @return
     */
    public String getMillis(int position) {
        try {
            String sql = "SELECT NOW(" + position + ")";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ResultSet rs = ps.executeQuery();
            if (rs.next()) {
                return rs.getString(1);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        String pos = "";
        while (pos.length() < position) {
            pos = pos + "S";
        }
        return new DateTime().toString("yyyy-MM-dd HH:mm:ss." + pos);
    }

    /**
     *
     * @param filiale
     * @param us_cod
     * @param newpass
     * @param username
     * @return
     */
    public boolean edit_Pswuser(String filiale, String us_cod, String newpass, String username) {
        try {
            String ins = "UPDATE users SET fg_stato = ? , pwd = ? , dt_mod_pwd = ? WHERE cod = ?";
            PreparedStatement ps = this.c.prepareStatement(ins, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, "2");
            ps.setString(2, convMd5(newpass));
            ps.setString(3, getMillis(3));
            ps.setString(4, us_cod);
            boolean es = ps.executeUpdate() > 0;
            if (es) {
                insertValue_agg(ps, null, null, null, username);
            }
            
            return es;
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return false;
    }

    /**
     *
     * @param cod
     * @return
     */
    public String getPath(String cod) {
        try {
            String sql = "SELECT descr FROM path WHERE cod = ?";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, cod);
            ResultSet rs = ps.executeQuery();
            if (rs.next()) {
                return rs.getString(1);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        if (is_IT) {
            return null;
        }
        return "";
    }

    /**
     *
     * @param cod
     * @param descr
     * @param username
     * @return
     */
    public boolean updatePath(String cod, String descr, String username) {
        try {
            String sql = "UPDATE path SET descr = ? WHERE cod = ?";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, descr);
            ps.setString(2, cod);
            int x = ps.executeUpdate();
            insertValue_agg(ps, null, null, null, username);
            return x > 0;
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return false;
    }

    /**
     *
     * @param nl
     * @return
     */
    public boolean insert_new_News_UPL(Newsletters nl) {
        try {
            String ins = "INSERT INTO newsletter_upl VALUES (?,?,?,?,?,?,?,?,?)";
            PreparedStatement ps = this.c.prepareStatement(ins, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, nl.getCod());
            ps.setString(2, nl.getTitolo());
            ps.setString(3, nl.getDescr());
            ps.setString(4, nl.getFileout());
            ps.setString(5, nl.getDest());
            ps.setString(6, nl.getDt_updatestart());
            ps.setString(7, nl.getDt_upload());
            ps.setString(8, nl.getUser());
            ps.setString(9, "0");
            ps.execute();
            return true;
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return false;
    }

    /**
     *
     * @param nl
     * @param user
     * @return
     */
    public boolean insert_new_News(Newsletters nl, String user) {
        try {
            String ins = "INSERT INTO newsletter VALUES (?,?,?,?,?,?,?)";
            PreparedStatement ps = this.c.prepareStatement(ins, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, nl.getCod());
            ps.setString(2, nl.getTitolo());
            ps.setString(3, nl.getDescr());
            ps.setString(4, nl.getFileout());
            ps.setString(5, nl.getDest());
            ps.setString(6, nl.getDt_updatestart());
            ps.setString(7, nl.getDt_upload());
            ps.execute();
            
            insertValue_agg_NOCENTRAL(ps, null, null, null, user);
            
            return true;
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return false;
    }

    /**
     *
     * @param nl
     * @param user
     * @return
     */
    public boolean insert_new_News_recipients(Newsletters nl, String user) {
        try {
            String ins = "INSERT INTO newsletter_status VALUES (?,?,?,?)";
            PreparedStatement ps = this.c.prepareStatement(ins, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, nl.getCod());
            ps.setString(2, nl.getUser());
            ps.setString(3, nl.getStatus());
            ps.setString(4, nl.getDt_read());
            
            insertValue_agg_NOCENTRAL(ps, null, null, null, user);
            
            return ps.executeUpdate() > 0;
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return false;
    }

    /**
     *
     * @param cod
     * @return
     */
    public Newsletters get_newsletters(String cod) {
        try {
            String sql = "SELECT n.cod,n.titolo,n.descr,n.fileout,ns.status,ns.dt_read,n.dt_upload FROM newsletter_status ns,newsletter n WHERE n.cod = ns.cod AND n.cod = ?";
            
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, cod);
            ResultSet rs = ps.executeQuery();
            if (rs.next()) {
                Newsletters nw = new Newsletters();
                nw.setCod(rs.getString(1));
                nw.setTitolo(rs.getString(2));
                nw.setDescr(rs.getString(3));
                nw.setFileout(rs.getString(4));
                nw.setStatus(rs.getString(5));
                nw.setDt_read(rs.getString(6));
                nw.setDt_upload(rs.getString(7));
                return nw;
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return null;
    }

    /**
     *
     * @param cod
     * @param user
     * @return
     */
    public Newsletters get_newsletters(String cod, String user) {
        try {
            String sql = "SELECT n.cod,n.titolo,n.descr,n.fileout,ns.status,ns.dt_read,n.dt_upload FROM newsletter_status ns,newsletter n WHERE n.cod = ns.cod AND n.cod = ? AND ns.user = ?";
            
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, cod);
            ps.setString(2, user);
            ResultSet rs = ps.executeQuery();
            if (rs.next()) {
                Newsletters nw = new Newsletters();
                nw.setCod(rs.getString(1));
                nw.setTitolo(rs.getString(2));
                nw.setDescr(rs.getString(3));
                nw.setFileout(rs.getString(4));
                nw.setStatus(rs.getString(5));
                nw.setDt_read(rs.getString(6));
                nw.setDt_upload(rs.getString(7));
                return nw;
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return null;
    }

    /**
     *
     * @return
     */
    public ArrayList<Newsletters> query_newsletters() {
        ArrayList<Newsletters> list = new ArrayList<>();
        try {
            String select = "SELECT n.cod,n.titolo,n.descr,n.fileout,n.dt_upload FROM newsletter n WHERE n.cod IN (select distinct(cod) from newsletter_status)";
            ResultSet rs = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(select);
            while (rs.next()) {
                Newsletters nw = new Newsletters();
                nw.setCod(rs.getString(1));
                nw.setTitolo(rs.getString(2));
                nw.setDescr(rs.getString(3));
                nw.setFileout(rs.getString(4));
                nw.setStatus("");
                nw.setDt_read("");
                nw.setDt_upload(rs.getString(5));
                list.add(nw);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return list;
    }

    /**
     *
     * @param cod
     * @return
     */
    public ArrayList<Newsletters> query_newsletters_user(String cod) {
        ArrayList<Newsletters> list = new ArrayList<>();
        try {
            String select = "SELECT n.cod,n.titolo,n.descr,n.fileout,ns.status,ns.dt_read,n.dt_upload,ns.user FROM newsletter_status ns,newsletter n WHERE n.cod = ns.cod AND ns.cod = ?";
            PreparedStatement ps = this.c.prepareStatement(select, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, cod);
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                Newsletters nw = new Newsletters();
                nw.setCod(rs.getString(1));
                nw.setTitolo(rs.getString(2));
                nw.setDescr(rs.getString(3));
                nw.setFileout(rs.getString(4));
                nw.setStatus(rs.getString(5));
                nw.setDt_read(rs.getString(6));
                nw.setDt_upload(rs.getString(7));
                nw.setUser(rs.getString(8));
                list.add(nw);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return list;
    }

    /**
     *
     * @param cod
     * @return
     */
    public ArrayList<Newsletters> query_newsletters_user_mod(String cod) {
        ArrayList<Newsletters> list = new ArrayList<>();
        try {
            String select = "SELECT n.cod,n.titolo,n.descr,ns.status,ns.dt_read,n.dt_upload,ns.user FROM newsletter_status ns,newsletter n WHERE n.cod = ns.cod AND ns.cod = ?";
            PreparedStatement ps = this.c.prepareStatement(select, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, cod);
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                Newsletters nw = new Newsletters();
                nw.setCod(rs.getString(1));
                nw.setTitolo(rs.getString(2));
                nw.setDescr(rs.getString(3));
                nw.setStatus(rs.getString(4));
                nw.setDt_read(rs.getString(5));
                nw.setDt_upload(rs.getString(6));
                nw.setUser(rs.getString(7));
                list.add(nw);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return list;
    }

    /**
     *
     * @param user
     * @param status
     * @return
     */
    public ArrayList<Newsletters> query_newsletters(String user, String status) {
        ArrayList<Newsletters> list = new ArrayList<>();
        try {
            String sql;
            PreparedStatement ps;
            String select = "SELECT n.cod,n.titolo,n.descr,n.fileout,ns.status,ns.dt_read,n.dt_upload FROM newsletter_status ns,newsletter n ";
            if (status.equals("...")) {
                sql = select + "WHERE n.cod = ns.cod AND ns.user = ?";
                ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
                ps.setString(1, user);
            } else {
                sql = select + "WHERE n.cod = ns.cod AND ns.user = ? AND ns.status = ?";
                ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
                ps.setString(1, user);
                ps.setString(2, status);
            }
            
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                Newsletters nw = new Newsletters();
                nw.setCod(rs.getString(1));
                nw.setTitolo(rs.getString(2));
                nw.setDescr(rs.getString(3));
                nw.setFileout(rs.getString(4));
                nw.setStatus(rs.getString(5));
                nw.setDt_read(rs.getString(6));
                nw.setDt_upload(rs.getString(7));
                list.add(nw);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return list;
    }

    /**
     *
     * @param cod
     * @param user
     * @param status
     * @param dt_read
     * @return
     */
    public boolean update_newsletters(String cod, String user, String status, String dt_read) {
        try {
            String upd = "UPDATE newsletter_status SET status = ? , dt_read = ? WHERE cod = ? AND user = ?";
            PreparedStatement ps = this.c.prepareStatement(upd, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, status);
            ps.setString(2, dt_read);
            ps.setString(3, cod);
            ps.setString(4, user);
            
            insertValue_agg(ps, null, null, null, user);
            
            return ps.executeUpdate() > 0;
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return false;
    }

    /**
     *
     * @param user
     * @return
     */
    public int[] countNews(String user) {
        int total = 0;
        int newn = 0;
        try {
            String sql = "SELECT status FROM newsletter n,newsletter_status ns where n.cod=ns.cod and user = ?";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, user);
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                if (rs.getString(1).equals("U")) {
                    newn++;
                }
                total++;
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        int[] ou = {newn, total};
        return ou;
    }

    /**
     *
     * @param nc
     * @param username
     * @param dt_val
     * @param dt
     * @return
     */
    public String insert_new_category(NC_category nc, String username, String dt_val, String dt) {
        try {
            String ins = "INSERT INTO nc_tipologia (filiale,gruppo_nc,de_gruppo_nc,fg_tipo_transazione_nc,"
                    + "ip_prezzo_nc,conto_coge_01,conto_coge_02,de_scontrino,"
                    + "de_riga,ticket_fee,max_ticket,ticket_fee_type,ticket_enabled,"
                    + "int_corrisp,int_iva,int_code,fg_registratore) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
            PreparedStatement ps = this.c.prepareStatement(ins, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, nc.getFiliale());
            ps.setString(2, nc.getGruppo_nc());
            ps.setString(3, nc.getDe_gruppo_nc());
            ps.setString(4, nc.getFg_tipo_transazione_nc());
            ps.setString(5, nc.getIp_prezzo_nc());
            ps.setString(6, nc.getConto_coge_01());
            ps.setString(7, nc.getConto_coge_02());
            ps.setString(8, nc.getDe_scontrino());
            ps.setString(9, nc.getDe_riga());
            ps.setString(10, nc.getTicket_fee());
            ps.setString(11, nc.getMax_ticket());
            ps.setString(12, nc.getTicket_fee_type());
            ps.setString(13, nc.getTicket_enabled());
            ps.setString(14, nc.getInt_corrisp());
            ps.setString(15, nc.getInt_iva());
            ps.setString(16, nc.getInt_code());
            ps.setString(17, nc.getFg_registratore());
            ps.execute();
            
            if (!nc.getFiliale().equals("000")) {
                insert_aggiornamenti_mod(new Aggiornamenti_mod(
                        generaId(50), nc.getFiliale(), dt_val, "0",
                        "PS", ps.toString(), username, dt));
            }
            
            return "0";
        } catch (SQLException ex) {
            ex.printStackTrace();
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
            if (ex.getMessage().contains("Duplicate")) {
                return "1";
            }
        }
        return "2";
    }

    /**
     *
     * @param nc
     * @param username
     * @param dt_val
     * @param dt
     * @return
     */
    public boolean edit_category(NC_category nc, String username, String dt_val, String dt) {
        try {
            String ins = "UPDATE nc_tipologia SET de_gruppo_nc = ?, fg_tipo_transazione_nc = ?,"
                    + "ip_prezzo_nc = ?, conto_coge_01 = ?, conto_coge_02 = ?, de_scontrino = ?,"
                    + "de_riga = ?, ticket_fee = ?, max_ticket = ?, ticket_fee_type = ?, "
                    + "ticket_enabled = ?, annullato  = ? , int_corrisp  = ? , "
                    + "int_iva  = ? , int_code  = ? , fg_registratore = ? "
                    + "WHERE filiale = ? AND gruppo_nc  = ?";
            PreparedStatement ps = this.c.prepareStatement(ins, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, nc.getDe_gruppo_nc());
            ps.setString(2, nc.getFg_tipo_transazione_nc());
            ps.setString(3, nc.getIp_prezzo_nc());
            ps.setString(4, nc.getConto_coge_01());
            ps.setString(5, nc.getConto_coge_02());
            ps.setString(6, nc.getDe_scontrino());
            ps.setString(7, nc.getDe_riga());
            ps.setString(8, nc.getTicket_fee());
            ps.setString(9, nc.getMax_ticket());
            ps.setString(10, nc.getTicket_fee_type());
            ps.setString(11, nc.getTicket_enabled());
            ps.setString(12, nc.getAnnullato());
            ps.setString(13, nc.getInt_corrisp());
            ps.setString(14, nc.getInt_iva());
            ps.setString(15, nc.getInt_code());
            ps.setString(16, nc.getFg_registratore());
            ps.setString(17, nc.getFiliale());
            ps.setString(18, nc.getGruppo_nc());
            
            boolean es = ps.executeUpdate() > 0;
            
            if (nc.getAnnullato().equals("1")) {
                String upd = "UPDATE nc_causali SET annullato = ? where gruppo_nc = ?";
                PreparedStatement psd = this.c.prepareStatement(upd, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
                psd.setString(1, "1");
                psd.setString(2, nc.getGruppo_nc());
                psd.executeUpdate();
                if (!nc.getFiliale().equals("000")) {
                    insert_aggiornamenti_mod(new Aggiornamenti_mod(
                            generaId(50), nc.getFiliale(), dt_val, "0",
                            "PS", psd.toString(), username, dt));
                }
            }
            
            try {
                
                String de1 = "DELETE FROM department_nc WHERE gruppo_nc = ?";
                PreparedStatement psde1 = this.c.prepareStatement(de1, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
                psde1.setString(1, nc.getGruppo_nc());
                psde1.execute();
                
                sleeping(100);
                
                String ins1 = "INSERT INTO department_nc VALUES (?,?)";
                PreparedStatement psins1 = this.c.prepareStatement(ins1, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
                psins1.setString(1, nc.getDepartment());
                psins1.setString(2, nc.getGruppo_nc());
                psins1.execute();
                
                if (!nc.getFiliale().equals("000")) {
                    
                    insert_aggiornamenti_mod(new Aggiornamenti_mod(
                            generaId(50), nc.getFiliale(), dt_val, "0",
                            "PS", psde1.toString(), username, new DateTime().minusMinutes(3).toString(patternsqldate)));
                    insert_aggiornamenti_mod(new Aggiornamenti_mod(
                            generaId(50), nc.getFiliale(), dt_val, "0",
                            "PS", psins1.toString(), username, new DateTime().plusMinutes(3).toString(patternsqldate)));
                    
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
            
            if (!nc.getFiliale().equals("000")) {
                insert_aggiornamenti_mod(new Aggiornamenti_mod(
                        generaId(50), nc.getFiliale(), dt_val, "0",
                        "PS", ps.toString(), username, dt));
            }
            
            return es;
            
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return false;
    }

    /**
     *
     * @param nc
     * @param username
     * @param dt_val
     * @param dt
     * @return
     */
    public String insert_new_causal(NC_causal nc, String username, String dt_val, String dt) {
        try {
            String sql = "SELECT LPAD((CAST(causale_nc AS DECIMAL(10))+1), 6, '0') FROM nc_causali WHERE filiale = ? order by CAST(causale_nc AS DECIMAL(10,2)) desc LIMIT 1";
            PreparedStatement ps0 = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps0.setString(1, nc.getFiliale());
            ResultSet rs = ps0.executeQuery();
            if (rs.next()) {
                String id = rs.getString(1);
                String ins = "INSERT INTO nc_causali VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
                PreparedStatement ps = this.c.prepareStatement(ins, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
                ps.setString(1, nc.getFiliale());
                ps.setString(2, nc.getGruppo_nc());
                ps.setString(3, id);
                ps.setString(4, nc.getDe_causale_nc());
                ps.setString(5, nc.getFg_in_out());
                ps.setString(6, nc.getIp_prezzo_nc());
                ps.setString(7, nc.getFg_tipo_transazione_nc());
                ps.setString(8, nc.getAnnullato());
                ps.setString(9, nc.getNc_de());
                ps.setString(10, nc.getFg_batch());
                ps.setString(11, nc.getFg_gruppo_stampa());
                ps.setString(12, nc.getFg_scontrino());
                ps.setString(13, nc.getTicket_fee_type());
                ps.setString(14, nc.getTicket_fee());
                ps.setString(15, nc.getMax_ticket());
                ps.setString(16, nc.getData());
                ps.setString(17, nc.getBonus());
                ps.setString(18, nc.getCodice_integr());
                ps.setString(19, nc.getPaymat());
                ps.setString(20, nc.getDocric());
                ps.execute();
                
                if (!nc.getFiliale().equals("000")) {
                    insert_aggiornamenti_mod(new Aggiornamenti_mod(
                            generaId(50), nc.getFiliale(), dt_val, "0",
                            "PS", ps.toString(), username, dt));
                }
                
                return id;
            }
        } catch (SQLException ex) {
            
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return null;
    }

    /**
     *
     * @param nc
     * @param username
     * @param dt_val
     * @param dt
     * @return
     */
    public boolean edit_causal(NC_causal nc, String username, String dt_val, String dt) {
        try {
            String ins = "UPDATE nc_causali SET de_causale_nc = ?, fg_in_out = ?, ip_prezzo_nc = ?, fg_tipo_transazione_nc = ?, "
                    + "annullato = ?, nc_de = ?, fg_batch = ?, fg_gruppo_stampa = ?, fg_scontrino = ?, ticket_fee_type = ?, ticket_fee = ?, "
                    + "max_ticket = ?, data = ?, bonus = ?, codice_integr = ?, paymat = ?, docric = ? WHERE filiale = ? AND gruppo_nc = ? AND causale_nc = ?";
            PreparedStatement ps = this.c.prepareStatement(ins, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, nc.getDe_causale_nc());
            ps.setString(2, nc.getFg_in_out());
            ps.setString(3, nc.getIp_prezzo_nc());
            ps.setString(4, nc.getFg_tipo_transazione_nc());
            ps.setString(5, nc.getAnnullato());
            ps.setString(6, nc.getNc_de());
            ps.setString(7, nc.getFg_batch());
            ps.setString(8, nc.getFg_gruppo_stampa());
            ps.setString(9, nc.getFg_scontrino());
            ps.setString(10, nc.getTicket_fee_type());
            ps.setString(11, nc.getTicket_fee());
            ps.setString(12, nc.getMax_ticket());
            ps.setString(13, nc.getData());
            ps.setString(14, nc.getBonus());
            ps.setString(15, nc.getCodice_integr());
            ps.setString(16, nc.getPaymat());
            ps.setString(17, nc.getDocric());
            ps.setString(18, nc.getFiliale());
            ps.setString(19, nc.getGruppo_nc());
            ps.setString(20, nc.getCausale_nc());
            ps.executeUpdate();
            
            if (!nc.getFiliale().equals("000")) {
                insert_aggiornamenti_mod(new Aggiornamenti_mod(
                        generaId(50), nc.getFiliale(), dt_val, "0",
                        "PS", ps.toString(), username, dt));
            }
            
            return true;
            
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return false;
    }

    /**
     *
     * @param user
     * @param psw
     * @return
     */
    public Users checkLogin(String user, String psw) {
        try {
            String sql = "SELECT cod,username,pwd,de_nome,de_cognome,conto,email,fg_tipo,fg_stato FROM users WHERE username = ? AND pwd = ?";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, user);
            
            ps.setString(2, convMd5(psw));
            ResultSet rs = ps.executeQuery();
            if (rs.next()) {
                Users us = new Users();
                us.setCod(rs.getString(1));
                us.setUsername(rs.getString(2));
                us.setPwd(rs.getString(3));
                us.setDe_nome(rs.getString(4));
                us.setDe_cognome(rs.getString(5));
                us.setConto(rs.getString(6));
                us.setEmail(rs.getString(7));
                us.setFg_tipo(rs.getString(8));
                us.setFg_stato(rs.getString(9));
                return us;
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return null;
    }

    /**
     *
     * @param onlycod
     * @return
     */
    public String[] getCodLocal(boolean onlycod) {
        try {
            String sql = "SELECT cod FROM local LIMIT 1";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ResultSet rs = ps.executeQuery();
            if (rs.next()) {
                String cod = rs.getString(1);
                if (onlycod) {
                    String[] out = {cod, cod};
                    return out;
                }
                
                String sql2 = "SELECT de_branch FROM branch WHERE cod = ?";
                PreparedStatement ps2 = this.c.prepareStatement(sql2, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
                ps2.setString(1, cod);
                ResultSet rs2 = ps2.executeQuery();
                if (rs2.next()) {
                    String[] out = {cod, visualizzaStringaMySQL(rs2.getString(1))};
                    return out;
                }
                
            }
            
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return null;
    }

    /**
     *
     * @param cod
     * @param psw
     * @param status
     * @param change
     * @return
     */
    public boolean setPasswordUser(String cod, String psw, String status, boolean change) {
        try {
            if (change) {
                String upd = "UPDATE users SET pwd = ? , fg_stato = ? , dt_mod_pwd = ? WHERE cod = ?";
                PreparedStatement ps = this.c.prepareStatement(upd, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
                ps.setString(1, convMd5(psw));
                ps.setString(2, status);
                ps.setString(3, getMillis(3));
                ps.setString(4, cod);
                int x = ps.executeUpdate();
                insertValue_agg(ps, null, null, null, "service");
                return x > 0;
            } else {
                String upd = "UPDATE users SET pwd = ? , fg_stato = ? WHERE cod = ?";
                PreparedStatement ps = this.c.prepareStatement(upd, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
                ps.setString(1, convMd5(psw));
                ps.setString(2, status);
                ps.setString(3, cod);
                int x = ps.executeUpdate();
                insertValue_agg(ps, null, null, null, "service");
                return x > 0;
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return false;
    }

    /**
     *
     * @param cod
     * @return
     */
    public boolean companyenabled(String cod) {
        try {
            String sql = "SELECT fg_persgiur FROM branch WHERE cod = ? ";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, cod);
            ResultSet rs = ps.executeQuery();
            if (rs.next()) {
                return rs.getString("fg_persgiur").equals("1");
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return false;
    }

    /**
     *
     * @param cod
     * @return
     */
    public boolean agencyenabled(String cod) {
        try {
            String sql = "SELECT fg_agency FROM branch WHERE cod = ? ";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, cod);
            ResultSet rs = ps.executeQuery();
            if (rs.next()) {
                return rs.getString("fg_agency").equals("1");
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return false;
    }

    /**
     *
     * @param filiale
     * @param gruppo_nc
     * @param causale_nc
     * @return
     */
    public ArrayList<String[]> nc_causal_payment(String filiale, String gruppo_nc, String causale_nc) {
        ArrayList<String[]> li = new ArrayList<>();
        try {
            String sql = "SELECT supporto,fg_annullato FROM nc_causali_pay WHERE filiale = ? AND gruppo_nc = ? AND causale_nc = ? order by cast(supporto AS decimal (10,0))";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, filiale);
            ps.setString(2, gruppo_nc);
            ps.setString(3, causale_nc);
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                String[] ou = {rs.getString(1), rs.getString(2)};
                li.add(ou);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return li;
    }

    /**
     *
     * @param kind_payment_list
     * @param username
     * @return
     */
    public boolean insert_nc_kind_payment(ArrayList<String[]> kind_payment_list, String username) {
        try {
            String[] s1 = kind_payment_list.get(0);
            String sql = "DELETE FROM nc_causali_pay WHERE filiale = ? AND gruppo_nc = ? AND causale_nc = ?";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, s1[0]);
            ps.setString(2, s1[1]);
            ps.setString(3, s1[2]);
            ps.execute();
            if (!s1[0].equals("000")) {
                insertValue_agg(ps, null, s1[0], null, username);
            }
            for (int i = 0; i < kind_payment_list.size(); i++) {
                String[] s2 = kind_payment_list.get(i);
                String ins = "INSERT INTO nc_causali_pay VALUES (?,?,?,?,?)";
                PreparedStatement ps2 = this.c.prepareStatement(ins, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
                ps2.setString(1, s2[0]);
                ps2.setString(2, s2[1]);
                ps2.setString(3, s2[2]);
                ps2.setString(4, s2[3]);
                ps2.setString(5, s2[4]);
                ps2.execute();
                if (!s1[0].equals("000")) {
                    insertValue_agg(ps2, null, s1[0], null, username);
                }
            }
            return true;
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return false;
    }

    /**
     *
     * @return
     */
    public ArrayList<String[]> nc_causal_payment_enabled() {
        ArrayList<String[]> li = new ArrayList<>();
        try {
            String sql = "SELECT * FROM nc_causali_pay WHERE fg_annullato = ? ORDER BY CAST(supporto AS decimal (10,0))";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, "0");
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                String[] ou = {rs.getString(1), rs.getString(2), rs.getString(3), rs.getString(4), rs.getString(5)};
                li.add(ou);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return li;
    }

    /**
     *
     * @param nccausal
     * @return
     */
    public ArrayList<String> nc_causal_payment_enabled(String nccausal) {
        ArrayList<String> li = new ArrayList<>();
        try {
            String sql = "SELECT supporto FROM nc_causali_pay WHERE fg_annullato = ? AND causale_nc = ?";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, "0");
            ps.setString(2, nccausal);
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                li.add(rs.getString(1));
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return li;
    }

    /**
     *
     * @return
     */
    public String isBlockedOperation() {
        
        try {
            String sql = "SELECT user FROM block_it_et WHERE data = curdate() AND status = ?";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, "1");
            ResultSet rs = ps.executeQuery();
            if (rs.next()) {
                return rs.getString(1);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return null;
    }

    /**
     *
     * @param us
     * @return
     */
    public boolean isBlockedOperationUser(String us) {
        
        try {
            String sql = "SELECT user FROM block_it_et WHERE data = curdate() AND user = ? AND status = ?";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, us);
            ps.setString(2, "1");
            return ps.executeQuery().next();
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return false;
    }

    /**
     *
     * @param user
     * @param status
     * @return
     */
    public boolean updateBlockedOperation(String user, String status) {
        try {
            String upd = "UPDATE block_it_et SET user = ?, status = ? WHERE data = curdate()";
            PreparedStatement ps = this.c.prepareStatement(upd, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, user);
            ps.setString(2, status);
            return ps.executeUpdate() > 0;
        } catch (SQLException ex) {
            
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return false;
    }

    /**
     *
     * @param user
     * @return
     */
    public boolean insertBlockedOperation(String user) {
        try {
            String sql = "INSERT INTO block_it_et (data,user,status) VALUES (curdate(),?,?)";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, user);
            ps.setString(2, "1");
            ps.execute();
            return true;
        } catch (SQLException ex) {
            if (ex.getMessage().toLowerCase().contains("duplicate")) {
                return updateBlockedOperation(user, "1");
            } else {
                insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
            }
        }
        return false;
    }

    /**
     *
     * @param table
     * @param field
     * @return
     */
    public boolean isFirstValue(String table, String field) {
        try {
            String sql = "SELECT " + field + " FROM " + table + " LIMIT 1";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            if (ps.executeQuery().next()) {
                return false;
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return true;
    }

    /**
     *
     * @param table
     * @param field
     * @param filiale
     * @return
     */
    public boolean isFirstValueFILIALE(String table, String field, String filiale) {
        try {
            String sql = "SELECT " + field + " FROM " + table + " WHERE filiale = '" + filiale + "' LIMIT 1";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            if (ps.executeQuery().next()) {
                return false;
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return true;
        
    }

    /**
     *
     * @param table
     * @param field
     * @param namefielddata
     * @param filiale
     * @return
     */
    public boolean isFirstValueYEAR(String table, String field, String namefielddata, String filiale) {
        try {
            String sql = "SELECT " + field + " FROM " + table + " WHERE YEAR(" + namefielddata + ") = YEAR(CURDATE()) "
                    + "AND filiale = '" + filiale + "' LIMIT 1";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            if (ps.executeQuery().next()) {
                return false;
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return true;
        
    }

    /**
     *
     * @param it
     * @return
     */
    public boolean insert_IT_change(IT_change it) {
        try {
            
            String ins = "INSERT INTO it_change (SELECT ?,LPAD(id+1, 15, '0'),?,?,?,?,?,?,?,?,?,?,? "
                    + "FROM it_change WHERE filiale='" + it.getFiliale() + "' ORDER BY id DESC LIMIT 1)";
            if (isFirstValueFILIALE("it_change", "id", it.getFiliale())) {
                ins = "INSERT INTO it_change VALUES (?,'000000000000001',?,?,?,?,?,?,?,?,?,?,?)";
            }
            PreparedStatement ps = this.c.prepareStatement(ins, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, it.getCod());
            ps.setString(2, it.getFiliale());
            ps.setString(3, it.getUser());
            ps.setString(4, it.getTill_from());
            ps.setString(5, it.getTill_to());
            ps.setString(6, it.getIdopen_from());
            ps.setString(7, it.getIdopen_to());
            ps.setString(8, getNow());
            ps.setString(9, it.getFg_annullato());
            ps.setString(10, it.getDel_dt());
            ps.setString(11, it.getDel_user());
            ps.setString(12, it.getDel_motiv());
            ps.execute();
            String dtoper = getNow();
            String dt_val = formatStringtoStringDate(dtoper, patternsqldate, patternnormdate);
            if (!filiale.equals("000")) {
                insert_aggiornamenti_mod(new Aggiornamenti_mod(
                        generaId(50), "000", dt_val, "0",
                        "PS", ps.toString(), "service", dtoper));
            }
            return true;
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return false;
    }

    /**
     *
     * @param it
     * @return
     */
    public boolean insert_IT_change_value(IT_change it) {
        try {
            String ins = "INSERT INTO it_change_valori VALUES (?,?,?,?,?,?,?)";
            PreparedStatement ps = this.c.prepareStatement(ins, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, it.getFiliale());
            ps.setString(2, it.getCod());
            ps.setString(3, it.getValuta());
            ps.setString(4, it.getSupporto());
            ps.setString(5, it.getQuantita());
            ps.setString(6, it.getTotale());
            ps.setString(7, it.getDt_it());
            ps.execute();
            String dtoper = getNow();
            String dt_val = formatStringtoStringDate(dtoper, patternsqldate, patternnormdate);
            if (!filiale.equals("000")) {
                insert_aggiornamenti_mod(new Aggiornamenti_mod(
                        generaId(50), "000", dt_val, "0",
                        "PS", ps.toString(), "service", dtoper));
            }
            return true;
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return false;
    }

    /**
     *
     * @param it
     * @return
     */
    public boolean insert_IT_change_tg(IT_change it) {
        try {
            String ins = "INSERT INTO it_change_tg VALUES (?,?,?,?,?,?,?,?)";
            PreparedStatement ps = this.c.prepareStatement(ins, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, it.getFiliale());
            ps.setString(2, it.getCod());
            ps.setString(3, it.getValuta());
            ps.setString(4, it.getSupporto());
            ps.setString(5, it.getTaglio());
            ps.setString(6, it.getQuantita());
            ps.setString(7, it.getTotale());
            ps.setString(8, it.getDt_it());
            ps.execute();
            String dtoper = getNow();
            String dt_val = formatStringtoStringDate(dtoper, patternsqldate, patternnormdate);
            if (!filiale.equals("000")) {
                insert_aggiornamenti_mod(new Aggiornamenti_mod(
                        generaId(50), "000", dt_val, "0",
                        "PS", ps.toString(), "service", dtoper));
            }
            return true;
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return false;
    }

    /**
     *
     * @param it
     * @return
     */
    public boolean insert_ET_change_tg(ET_change it) {
        try {
            String ins = "INSERT INTO et_change_tg VALUES (?,?,?,?,?,?,?,?)";
            PreparedStatement ps = this.c.prepareStatement(ins, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, it.getFiliale());
            ps.setString(2, it.getCod());
            ps.setString(3, it.getValuta());
            ps.setString(4, it.getSupporto());
            ps.setString(5, it.getIp_taglio());
            ps.setString(6, it.getIp_quantity());
            ps.setString(7, it.getIp_total());
            ps.setString(8, it.getDt_it());
            ps.execute();
            String dtoper = getNow();
            String dt_val = formatStringtoStringDate(dtoper, patternsqldate, patternnormdate);
            if (!filiale.equals("000")) {
                insert_aggiornamenti_mod(new Aggiornamenti_mod(
                        generaId(50), "000", dt_val, "0",
                        "PS", ps.toString(), "service", dtoper));
            }
            return true;
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return false;
    }

    /**
     *
     * @param it
     * @param coddest
     * @return
     */
    public boolean insert_ET_change_tg_tobr(ET_change it, String coddest) {
        try {
            String ins = "INSERT INTO et_change_tg VALUES (?,?,?,?,?,?,?,?)";
            PreparedStatement ps = this.c.prepareStatement(ins, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, it.getFiliale());
            ps.setString(2, it.getCod());
            ps.setString(3, it.getValuta());
            ps.setString(4, it.getSupporto());
            ps.setString(5, it.getIp_taglio());
            ps.setString(6, it.getIp_quantity());
            ps.setString(7, it.getIp_total());
            ps.setString(8, it.getDt_it());
            
            String dtoper = getNow();
            String dt_val = formatStringtoStringDate(dtoper, patternsqldate, patternnormdate);
            insert_aggiornamenti_mod(new Aggiornamenti_mod(
                    generaId(50), coddest, dt_val, "0",
                    "PS", ps.toString(), "service", dtoper));
            return true;
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return false;
    }

    /**
     *
     * @param roc
     * @param field
     * @param returnv
     * @return
     */
    public String getField_real_oc_change(Real_oc_change roc, String field, String returnv) {
        try {
            
            String sql = "SELECT " + field + " FROM real_oc_change WHERE filiale = ? AND cod_oc = ? AND valuta = ? AND kind = ?";
            
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, roc.getFiliale());
            ps.setString(2, roc.getCod_oc());
            ps.setString(3, roc.getValuta());
            ps.setString(4, roc.getKind());
            ResultSet rs = ps.executeQuery();
            out.println(ps.toString());
            if (rs.next()) {
                return rs.getString(1);
            }
            
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return returnv;
    }

    /**
     *
     * @param rop
     * @param field
     * @param returnv
     * @return
     */
    public String getField_real_oc_pos(Real_oc_pos rop, String field, String returnv) {
        try {
            
            String sql = "SELECT " + field + " FROM real_oc_pos WHERE filiale = ? AND cod_oc = ? AND valuta = ? AND kind = ? AND carta_credito = ?";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, rop.getFiliale());
            ps.setString(2, rop.getCod_oc());
            ps.setString(3, rop.getValuta());
            ps.setString(4, rop.getKind());
            ps.setString(5, rop.getCarta_credito());
            ResultSet rs = ps.executeQuery();
            if (rs.next()) {
                return rs.getString(1);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return returnv;
    }

    /**
     *
     * @param roc
     * @return
     */
    public boolean update_real_oc_change(Real_oc_change roc) {
        try {
            String sql = "SELECT data FROM real_oc_change WHERE filiale = '" + roc.getFiliale() + "' AND cod_oc = '" + roc.getCod_oc() + "'"
                    + " AND valuta = '" + roc.getValuta() + "' AND kind = '" + roc.getKind() + "'";
            
            if (this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql).next()) {
                
                try {
                    String del3 = "DELETE FROM real_oc_change_temp WHERE filiale = '" + roc.getFiliale() + "' AND cod_oc = '" + roc.getCod_oc() + "'";
                    this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).execute(del3);
                    String dtoper = getNow();
                    String dt_val = formatStringtoStringDate(dtoper, patternsqldate, patternnormdate);
                    if (!filiale.equals("000")) {
                        insert_aggiornamenti_mod(new Aggiornamenti_mod(
                                generaId(50), "000", dt_val, "0",
                                "ST", del3, "service", dtoper));
                    }
                    sleeping(500);
                } catch (SQLException ex) {
                    insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
                }
                try {
                    String ins = "INSERT INTO real_oc_change_temp (SELECT * FROM real_oc_change WHERE filiale = '" + roc.getFiliale() + "' AND cod_oc = '" + roc.getCod_oc() + "')";
                    this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).execute(ins);
                    String dtoper = getNow();
                    String dt_val = formatStringtoStringDate(dtoper, patternsqldate, patternnormdate);
                    if (!filiale.equals("000")) {
                        insert_aggiornamenti_mod(new Aggiornamenti_mod(
                                generaId(50), "000", dt_val, "0",
                                "ST", ins, "service", dtoper));
                    }
                    sleeping(500);
                } catch (SQLException ex) {
                    insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
                }
                
                String upd = "UPDATE real_oc_change SET value_op = '" + roc.getValue_op() + "', num_kind_op = '" + roc.getNum_kind_op() + "', data = '" + roc.getData() + "'"
                        + " WHERE filiale = '" + roc.getFiliale() + "' AND cod_oc = '" + roc.getCod_oc() + "' AND valuta = '" + roc.getValuta() + "' AND kind = '" + roc.getKind() + "'";
                int x = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeUpdate(upd);
                if (x > 0) {
                    String dtoper = getNow();
                    String dt_val = formatStringtoStringDate(dtoper, patternsqldate, patternnormdate);
                    if (!filiale.equals("000")) {
                        insert_aggiornamenti_mod(new Aggiornamenti_mod(
                                generaId(50), "000", dt_val, "0",
                                "ST", upd, "service", dtoper));
                    }
                }
                return x > 0;
            } else {
                String ins = "INSERT INTO real_oc_change VALUES (?,?,?,?,?,?,?)";
                PreparedStatement ps2 = this.c.prepareStatement(ins, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
                ps2.setString(1, roc.getFiliale());
                ps2.setString(2, roc.getCod_oc());
                ps2.setString(3, roc.getValuta());
                ps2.setString(4, roc.getKind());
                ps2.setString(5, roc.getValue_op());
                ps2.setString(6, roc.getNum_kind_op());
                ps2.setString(7, roc.getData());
                ps2.execute();
                String dtoper = getNow();
                String dt_val = formatStringtoStringDate(dtoper, patternsqldate, patternnormdate);
                if (!filiale.equals("000")) {
                    insert_aggiornamenti_mod(new Aggiornamenti_mod(
                            generaId(50), "000", dt_val, "0",
                            "PS", ps2.toString(), "service", dtoper));
                }
                return true;
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return false;
    }

    /**
     *
     * @param roc
     * @return
     */
    public boolean update_real_oc_change_cuts(Real_oc_change roc) {
        try {
            String sql = "SELECT data FROM real_oc_change_tg WHERE filiale = ? AND cod_oc = ? AND valuta = ? AND kind = ? AND ip_taglio = ?";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, roc.getFiliale());
            ps.setString(2, roc.getCod_oc());
            ps.setString(3, roc.getValuta());
            ps.setString(4, roc.getKind());
            ps.setString(5, roc.getIp_taglio());
            if (ps.executeQuery().next()) {
                
                String del3 = "DELETE FROM real_oc_change_tg_temp WHERE filiale = ? AND cod_oc = ?";
                PreparedStatement ps03 = this.c.prepareStatement(del3, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
                ps03.setString(1, roc.getFiliale());
                ps03.setString(2, roc.getCod_oc());
                ps03.execute();
                String dtoper = getNow();
                String dt_val = formatStringtoStringDate(dtoper, patternsqldate, patternnormdate);
                if (!filiale.equals("000")) {
                    insert_aggiornamenti_mod(new Aggiornamenti_mod(
                            generaId(50), "000", dt_val, "0",
                            "PS", ps03.toString(), "service", dtoper));
                }
                sleeping(500);
                String ins = "INSERT INTO real_oc_change_tg_temp (SELECT * FROM real_oc_change_tg WHERE filiale = ? AND cod_oc = ?)";
                PreparedStatement ps1 = this.c.prepareStatement(ins, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
                ps1.setString(1, roc.getFiliale());
                ps1.setString(2, roc.getCod_oc());
                ps1.execute();
                dt_val = formatStringtoStringDate(dtoper, patternsqldate, patternnormdate);
                if (!filiale.equals("000")) {
                    insert_aggiornamenti_mod(new Aggiornamenti_mod(
                            generaId(50), "000", dt_val, "0",
                            "PS", ps1.toString(), "service", dtoper));
                }
                sleeping(500);
                String upd = "UPDATE real_oc_change_tg SET ip_quantity = ?, ip_value = ?, data = ? WHERE filiale = ? AND cod_oc = ? AND valuta = ? AND kind = ? AND ip_taglio = ?";
                PreparedStatement ps2 = this.c.prepareStatement(upd, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
                ps2.setString(1, roc.getNum_kind_op());
                ps2.setString(2, roc.getValue_op());
                ps2.setString(3, roc.getData());
                ps2.setString(4, roc.getFiliale());
                ps2.setString(5, roc.getCod_oc());
                ps2.setString(6, roc.getValuta());
                ps2.setString(7, roc.getKind());
                ps2.setString(8, roc.getIp_taglio());
                int x = ps2.executeUpdate();
                if (x > 0) {
                    dt_val = formatStringtoStringDate(dtoper, patternsqldate, patternnormdate);
                    if (!filiale.equals("000")) {
                        insert_aggiornamenti_mod(new Aggiornamenti_mod(
                                generaId(50), "000", dt_val, "0",
                                "PS", ps2.toString(), "service", dtoper));
                    }
                }
                return x > 0;
            } else {
                String ins = "INSERT INTO real_oc_change_tg VALUES (?,?,?,?,?,?,?,?)";
                PreparedStatement ps2 = this.c.prepareStatement(ins, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
                ps2.setString(1, roc.getFiliale());
                ps2.setString(2, roc.getCod_oc());
                ps2.setString(3, roc.getValuta());
                ps2.setString(4, roc.getKind());
                ps2.setString(5, roc.getIp_taglio());
                ps2.setString(6, roc.getNum_kind_op());
                ps2.setString(7, roc.getValue_op());
                ps2.setString(8, roc.getData());
                ps2.execute();
                String dtoper = getNow();
                String dt_val = formatStringtoStringDate(dtoper, patternsqldate, patternnormdate);
                if (!filiale.equals("000")) {
                    insert_aggiornamenti_mod(new Aggiornamenti_mod(
                            generaId(50), "000", dt_val, "0",
                            "PS", ps2.toString(), "service", dtoper));
                }
                return true;
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return false;
    }

    /**
     *
     * @param roc
     * @param field
     * @param returnv
     * @return
     */
    public String getField_real_oc_change_cuts(Real_oc_change roc, String field, String returnv) {
        try {
            String sql = "SELECT " + field + " FROM real_oc_change_tg WHERE filiale = ? AND cod_oc = ? AND valuta = ? AND kind = ? AND ip_taglio = ?";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, roc.getFiliale());
            ps.setString(2, roc.getCod_oc());
            ps.setString(3, roc.getValuta());
            ps.setString(4, roc.getKind());
            ps.setString(5, roc.getIp_taglio());
            ResultSet rs = ps.executeQuery();
            if (rs.next()) {
                return rs.getString(1);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return returnv;
    }

    /**
     *
     * @param cod
     * @param idfrom
     * @param idto
     * @param filiale
     * @return
     */
    public boolean delete_IT_change(String cod, String idfrom, String idto, String filiale) {
        try {
            String d1 = "DELETE FROM it_change WHERE cod = '" + cod + "'";
            String d2 = "DELETE FROM it_change_tg WHERE cod = '" + cod + "'";
            String d3 = "DELETE FROM it_change_valori WHERE cod = '" + cod + "'";
            this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeUpdate(d1);
            String dtoper = getNow();
            String dt_val = formatStringtoStringDate(dtoper, patternsqldate, patternnormdate);
            if (!filiale.equals("000")) {
                insert_aggiornamenti_mod(new Aggiornamenti_mod(
                        generaId(50), "000", dt_val, "0",
                        "ST", d1, "service", dtoper));
            }
            this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeUpdate(d2);
            dtoper = getNow();
            dt_val = formatStringtoStringDate(dtoper, patternsqldate, patternnormdate);
            if (!filiale.equals("000")) {
                insert_aggiornamenti_mod(new Aggiornamenti_mod(
                        generaId(50), "000", dt_val, "0",
                        "ST", d2, "service", dtoper));
            }
            
            this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeUpdate(d3);
            dtoper = getNow();
            dt_val = formatStringtoStringDate(dtoper, patternsqldate, patternnormdate);
            if (!filiale.equals("000")) {
                insert_aggiornamenti_mod(new Aggiornamenti_mod(
                        generaId(50), "000", dt_val, "0",
                        "ST", d3, "service", dtoper));
            }
            
            String del1 = "DELETE FROM real_oc_change WHERE filiale = '" + filiale + "' AND (cod_oc = '" + idfrom + "' OR cod_oc = '" + idto + "')";
            this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeUpdate(del1);
            dtoper = getNow();
            dt_val = formatStringtoStringDate(dtoper, patternsqldate, patternnormdate);
            if (!filiale.equals("000")) {
                insert_aggiornamenti_mod(new Aggiornamenti_mod(
                        generaId(50), "000", dt_val, "0",
                        "ST", del1, "service", dtoper));
            }
            
            String del2 = "DELETE FROM real_oc_change_tg WHERE filiale = '" + filiale + "' AND (cod_oc = '" + idfrom + "' OR cod_oc = '" + idto + "')";
            this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeUpdate(del2);
            dtoper = getNow();
            dt_val = formatStringtoStringDate(dtoper, patternsqldate, patternnormdate);
            if (!filiale.equals("000")) {
                insert_aggiornamenti_mod(new Aggiornamenti_mod(
                        generaId(50), "000", dt_val, "0",
                        "ST", del2, "service", dtoper));
            }
            sleeping(500);
            String ins = "INSERT INTO real_oc_change (SELECT * FROM real_oc_change_temp WHERE filiale = ? AND cod_oc = ?)";
            PreparedStatement ps4 = this.c.prepareStatement(ins, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps4.setString(1, filiale);
            ps4.setString(2, idfrom);
            ps4.execute();
            dtoper = getNow();
            dt_val = formatStringtoStringDate(dtoper, patternsqldate, patternnormdate);
            if (!filiale.equals("000")) {
                insert_aggiornamenti_mod(new Aggiornamenti_mod(
                        generaId(50), "000", dt_val, "0",
                        "PS", ps4.toString(), "service", dtoper));
            }
            sleeping(500);
            String ins1 = "INSERT INTO real_oc_change_tg (SELECT * FROM real_oc_change_tg_temp WHERE filiale = ? AND cod_oc = ?)";
            PreparedStatement ps5 = this.c.prepareStatement(ins1, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps5.setString(1, filiale);
            ps5.setString(2, idfrom);
            ps5.execute();
            dtoper = getNow();
            dt_val = formatStringtoStringDate(dtoper, patternsqldate, patternnormdate);
            if (!filiale.equals("000")) {
                insert_aggiornamenti_mod(new Aggiornamenti_mod(
                        generaId(50), "000", dt_val, "0",
                        "PS", ps5.toString(), "service", dtoper));
            }
            sleeping(500);
            String ins2 = "INSERT INTO real_oc_change (SELECT * FROM real_oc_change_temp WHERE filiale = ? AND cod_oc = ?)";
            PreparedStatement ps6 = this.c.prepareStatement(ins2, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps6.setString(1, filiale);
            ps6.setString(2, idto);
            ps6.execute();
            dtoper = getNow();
            dt_val = formatStringtoStringDate(dtoper, patternsqldate, patternnormdate);
            if (!filiale.equals("000")) {
                insert_aggiornamenti_mod(new Aggiornamenti_mod(
                        generaId(50), "000", dt_val, "0",
                        "PS", ps6.toString(), "service", dtoper));
            }
            
            String ins3 = "INSERT INTO real_oc_change_tg (SELECT * FROM real_oc_change_tg_temp WHERE filiale = ? AND cod_oc = ? )";
            PreparedStatement ps7 = this.c.prepareStatement(ins3, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps7.setString(1, filiale);
            ps7.setString(2, idto);
            ps7.execute();
            dtoper = getNow();
            dt_val = formatStringtoStringDate(dtoper, patternsqldate, patternnormdate);
            if (!filiale.equals("000")) {
                insert_aggiornamenti_mod(new Aggiornamenti_mod(
                        generaId(50), "000", dt_val, "0",
                        "PS", ps7.toString(), "service", dtoper));
            }
            sleeping(500);
            String del3 = "DELETE FROM real_oc_change_temp WHERE filiale = '" + filiale + "' AND (cod_oc = '" + idfrom + "' OR cod_oc = '" + idto + "')";
            c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeUpdate(del3);
            dtoper = getNow();
            dt_val = formatStringtoStringDate(dtoper, patternsqldate, patternnormdate);
            if (!filiale.equals("000")) {
                insert_aggiornamenti_mod(new Aggiornamenti_mod(
                        generaId(50), "000", dt_val, "0",
                        "ST", del3, "service", dtoper));
            }
            
            String del4 = "DELETE FROM real_oc_change_tg_temp WHERE filiale = '" + filiale + "' AND (cod_oc = '" + idfrom + "' OR cod_oc = '" + idto + "')";
            c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeUpdate(del4);
            dtoper = getNow();
            dt_val = formatStringtoStringDate(dtoper, patternsqldate, patternnormdate);
            if (!filiale.equals("000")) {
                insert_aggiornamenti_mod(new Aggiornamenti_mod(
                        generaId(50), "000", dt_val, "0",
                        "ST", del4, "service", dtoper));
            }
            
            return true;
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return false;
    }

    /**
     *
     * @param idfrom
     * @param idto
     * @param filiale
     * @return
     */
    public boolean delete_IT_change_temp(String idfrom, String idto, String filiale) {
        try {
            Statement stmt = c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            stmt.executeUpdate("delete from real_oc_change_temp WHERE filiale = '" + filiale
                    + "' AND (cod_oc = '" + idfrom + "' OR cod_oc = '" + idto + "')");
            
            String dtoper = getNow();
            String dt_val = formatStringtoStringDate(dtoper, patternsqldate, patternnormdate);
            if (!filiale.equals("000")) {
                insert_aggiornamenti_mod(new Aggiornamenti_mod(
                        generaId(50), "000", dt_val, "0",
                        "ST", "delete from real_oc_change_temp WHERE filiale = '" + filiale
                        + "' AND (cod_oc = '" + idfrom + "' OR cod_oc = '" + idto + "')", "service", dtoper));
            }
            stmt.executeUpdate("delete from real_oc_change_tg_temp WHERE filiale = '" + filiale
                    + "' AND (cod_oc = '" + idfrom + "' OR cod_oc = '" + idto + "')");
            sleeping(500);
            dtoper = getNow();
            dt_val = formatStringtoStringDate(dtoper, patternsqldate, patternnormdate);
            if (!filiale.equals("000")) {
                insert_aggiornamenti_mod(new Aggiornamenti_mod(
                        generaId(50), "000", dt_val, "0",
                        "ST", "delete from real_oc_change_tg_temp WHERE filiale = '" + filiale + "' AND (cod_oc = '" + idfrom + "' OR cod_oc = '" + idto + "')", "service", dtoper));
            }
            return true;
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return false;
    }

    /**
     *
     * @param idfrom
     * @param idto
     * @param filiale
     * @return
     */
    public boolean delete_ET_change_temp(String idfrom, String idto, String filiale) {
        try {
            Statement stmt = c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            stmt.executeUpdate("delete from real_oc_nochange_temp WHERE filiale = '" + filiale + "' AND (cod_oc = '" + idfrom + "' OR cod_oc = '" + idto + "')");
            sleeping(500);
            String dtoper = getNow();
            String dt_val = formatStringtoStringDate(dtoper, patternsqldate, patternnormdate);
            if (!filiale.equals("000")) {
                insert_aggiornamenti_mod(new Aggiornamenti_mod(
                        generaId(50), "000", dt_val, "0",
                        "ST", "delete from real_oc_nochange_temp WHERE filiale = '" + filiale + "' AND (cod_oc = '" + idfrom + "' OR cod_oc = '" + idto + "')", "service", dtoper));
            }
            return true;
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return false;
    }

    /**
     *
     * @param it
     * @return
     */
    public boolean insert_IT_nochange_value(IT_change it) {
        try {
            String ins = "INSERT INTO it_nochange_valori VALUES (?,?,?,?,?)";
            PreparedStatement ps = this.c.prepareStatement(ins, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, it.getFiliale());
            ps.setString(2, it.getCod());
            ps.setString(3, it.getNc_causal());
            ps.setString(4, it.getQuantita());
            ps.setString(5, it.getDt_it());
            ps.execute();
            String dtoper = getNow();
            String dt_val = formatStringtoStringDate(dtoper, patternsqldate, patternnormdate);
            if (!filiale.equals("000")) {
                insert_aggiornamenti_mod(new Aggiornamenti_mod(
                        generaId(50), "000", dt_val, "0",
                        "PS", ps.toString(), "service", dtoper));
            }
            return true;
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return false;
    }

    /**
     *
     * @param roc
     * @return
     */
    public String getQuantity_real_oc_nochange(Real_oc_nochange roc) {
        try {
            String sql = "SELECT quantity FROM real_oc_nochange WHERE filiale = ? AND cod_oc = ? AND gruppo_nc = ? ";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, roc.getFiliale());
            ps.setString(2, roc.getCod_oc());
            ps.setString(3, roc.getGruppo_nc());
            ResultSet rs = ps.executeQuery();
            if (rs.next()) {
                return rs.getString(1);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return "0";
    }

    /**
     *
     * @param roc
     * @return
     */
    public boolean update_real_oc_nochange(Real_oc_nochange roc) {
        try {
            String sql = "SELECT data FROM real_oc_nochange WHERE filiale = ? AND cod_oc = ? AND gruppo_nc = ? ";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, roc.getFiliale());
            ps.setString(2, roc.getCod_oc());
            ps.setString(3, roc.getGruppo_nc());
            
            if (ps.executeQuery().next()) {
                
                String del3 = "DELETE FROM real_oc_nochange_temp WHERE filiale = ? AND cod_oc = ?";
                PreparedStatement ps03 = this.c.prepareStatement(del3, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
                ps03.setString(1, roc.getFiliale());
                ps03.setString(2, roc.getCod_oc());
                ps03.execute();
                String dtoper = getNow();
                String dt_val = formatStringtoStringDate(dtoper, patternsqldate, patternnormdate);
                if (!filiale.equals("000")) {
                    insert_aggiornamenti_mod(new Aggiornamenti_mod(
                            generaId(50), "000", dt_val, "0",
                            "PS", ps03.toString(), "service", dtoper));
                }
                
                String ins = "INSERT INTO real_oc_nochange_temp (SELECT * FROM real_oc_nochange WHERE filiale = ? AND cod_oc = ?)";
                PreparedStatement ps1 = this.c.prepareStatement(ins, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
                ps1.setString(1, roc.getFiliale());
                ps1.setString(2, roc.getCod_oc());
                ps1.execute();
                dtoper = getNow();
                dt_val = formatStringtoStringDate(dtoper, patternsqldate, patternnormdate);
                if (!filiale.equals("000")) {
                    insert_aggiornamenti_mod(new Aggiornamenti_mod(
                            generaId(50), "000", dt_val, "0",
                            "PS", ps1.toString(), "service", dtoper));
                }
                
                String upd = "UPDATE real_oc_nochange SET quantity = ?, data = ? WHERE filiale = ? AND cod_oc = ? AND gruppo_nc = ?";
                PreparedStatement ps2 = this.c.prepareStatement(upd, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
                ps2.setString(1, roc.getQuantity());
                ps2.setString(2, roc.getData());
                ps2.setString(3, roc.getFiliale());
                ps2.setString(4, roc.getCod_oc());
                ps2.setString(5, roc.getGruppo_nc());
                int x = ps2.executeUpdate();
                if (x > 0) {
                    dtoper = getNow();
                    dt_val = formatStringtoStringDate(dtoper, patternsqldate, patternnormdate);
                    if (!filiale.equals("000")) {
                        insert_aggiornamenti_mod(new Aggiornamenti_mod(
                                generaId(50), "000", dt_val, "0",
                                "PS", ps2.toString(), "service", dtoper));
                    }
                }
                return x > 0;
                
            } else {
                String ins = "INSERT INTO real_oc_nochange VALUES (?,?,?,?,?)";
                PreparedStatement ps2 = this.c.prepareStatement(ins, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
                ps2.setString(1, roc.getFiliale());
                ps2.setString(2, roc.getCod_oc());
                ps2.setString(3, roc.getGruppo_nc());
                ps2.setString(4, roc.getQuantity());
                ps2.setString(5, roc.getData());
                ps2.execute();
                String dtoper = getNow();
                String dt_val = formatStringtoStringDate(dtoper, patternsqldate, patternnormdate);
                if (!filiale.equals("000")) {
                    insert_aggiornamenti_mod(new Aggiornamenti_mod(
                            generaId(50), "000", dt_val, "0",
                            "PS", ps2.toString(), "service", dtoper));
                }
                return true;
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return false;
    }

    /**
     *
     * @param idfrom
     * @param idto
     * @param filiale
     * @return
     */
    public boolean delete_IT_nochange_temp(String idfrom, String idto, String filiale) {
        try {
            Statement stmt = c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            stmt.executeUpdate("delete from real_oc_nochange_temp WHERE filiale = '" + filiale + "' AND (cod_oc = '" + idfrom + "' OR cod_oc = '" + idto + "')");
            String dtoper = getNow();
            String dt_val = formatStringtoStringDate(dtoper, patternsqldate, patternnormdate);
            if (!filiale.equals("000")) {
                insert_aggiornamenti_mod(new Aggiornamenti_mod(
                        generaId(50), "000", dt_val, "0",
                        "ST", "delete from real_oc_nochange_temp WHERE filiale = '" + filiale + "' AND (cod_oc = '" + idfrom + "' OR cod_oc = '" + idto + "')", "service", dtoper));
            }
            return true;
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return false;
    }

    /**
     *
     * @param cod
     * @param idfrom
     * @param idto
     * @param filiale
     * @return
     */
    public boolean delete_IT_nochange(String cod, String idfrom, String idto, String filiale) {
        try {
            String d1 = "DELETE FROM it_change WHERE cod = '" + cod + "'";
            String d2 = "DELETE FROM it_nochange_valori WHERE cod = '" + cod + "'";
            this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeUpdate(d1);
            String dtoper = getNow();
            String dt_val = formatStringtoStringDate(dtoper, patternsqldate, patternnormdate);
            if (!filiale.equals("000")) {
                insert_aggiornamenti_mod(new Aggiornamenti_mod(
                        generaId(50), "000", dt_val, "0",
                        "ST", d1, "service", dtoper));
            }
            
            this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeUpdate(d2);
            dtoper = getNow();
            dt_val = formatStringtoStringDate(dtoper, patternsqldate, patternnormdate);
            if (!filiale.equals("000")) {
                insert_aggiornamenti_mod(new Aggiornamenti_mod(
                        generaId(50), "000", dt_val, "0",
                        "ST", d2, "service", dtoper));
            }
            
            String del1 = "DELETE FROM real_oc_nochange WHERE filiale = '" + filiale + "' AND (cod_oc = '" + idfrom + "' OR cod_oc = '" + idto + "')";
            this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeUpdate(del1);
            dtoper = getNow();
            dt_val = formatStringtoStringDate(dtoper, patternsqldate, patternnormdate);
            if (!filiale.equals("000")) {
                insert_aggiornamenti_mod(new Aggiornamenti_mod(
                        generaId(50), "000", dt_val, "0",
                        "ST", del1, "service", dtoper));
            }
            
            String ins = "INSERT INTO real_oc_nochange (SELECT * FROM real_oc_nochange_temp WHERE filiale = ? AND cod_oc = ?)";
            PreparedStatement ps4 = this.c.prepareStatement(ins, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps4.setString(1, filiale);
            ps4.setString(2, idfrom);
            ps4.execute();
            dtoper = getNow();
            dt_val = formatStringtoStringDate(dtoper, patternsqldate, patternnormdate);
            if (!filiale.equals("000")) {
                insert_aggiornamenti_mod(new Aggiornamenti_mod(
                        generaId(50), "000", dt_val, "0",
                        "PS", ps4.toString(), "service", dtoper));
            }
            
            String ins2 = "INSERT INTO real_oc_nochange (SELECT * FROM real_oc_nochange_temp WHERE filiale = ? AND cod_oc = ?)";
            PreparedStatement ps6 = this.c.prepareStatement(ins2, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps6.setString(1, filiale);
            ps6.setString(2, idto);
            ps6.execute();
            dtoper = getNow();
            dt_val = formatStringtoStringDate(dtoper, patternsqldate, patternnormdate);
            if (!filiale.equals("000")) {
                insert_aggiornamenti_mod(new Aggiornamenti_mod(
                        generaId(50), "000", dt_val, "0",
                        "PS", ps6.toString(), "service", dtoper));
            }
            
            String del3 = "DELETE FROM real_oc_nochange_temp WHERE filiale = '" + filiale + "' AND (cod_oc = '" + idfrom + "' OR cod_oc = '" + idto + "')";
            this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeUpdate(del3);
            dtoper = getNow();
            dt_val = formatStringtoStringDate(dtoper, patternsqldate, patternnormdate);
            if (!filiale.equals("000")) {
                insert_aggiornamenti_mod(new Aggiornamenti_mod(
                        generaId(50), "000", dt_val, "0",
                        "ST", del3, "service", dtoper));
            }
            
            return true;
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return false;
    }

    /**
     *
     * @param cod
     * @param idfrom
     * @param filiale
     * @return
     */
    public boolean delete_ET_nochange(String cod, String idfrom, String filiale) {
        try {
            String d1 = "DELETE FROM et_change WHERE cod = '" + cod + "'";
            String d2 = "DELETE FROM et_nochange_valori WHERE cod = '" + cod + "'";
            c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeUpdate(d1);
            String dtoper = getNow();
            String dt_val = formatStringtoStringDate(dtoper, patternsqldate, patternnormdate);
            if (!filiale.equals("000")) {
                insert_aggiornamenti_mod(new Aggiornamenti_mod(
                        generaId(50), "000", dt_val, "0",
                        "ST", d1, "service", dtoper));
            }
            
            c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeUpdate(d2);
            
            if (!filiale.equals("000")) {
                insert_aggiornamenti_mod(new Aggiornamenti_mod(
                        generaId(50), "000", dt_val, "0",
                        "ST", d2, "service", dtoper));
            }
            
            String ins = "INSERT INTO real_oc_nochange (SELECT * FROM real_oc_nochange_temp WHERE filiale = ? AND cod_oc = ?)";
            PreparedStatement ps4 = this.c.prepareStatement(ins, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps4.setString(1, filiale);
            ps4.setString(2, idfrom);
            ps4.execute();
            
            if (!filiale.equals("000")) {
                insert_aggiornamenti_mod(new Aggiornamenti_mod(
                        generaId(50), "000", dt_val, "0",
                        "PS", ps4.toString(), "service", dtoper));
            }
            
            String del3 = "DELETE FROM real_oc_nochange_temp WHERE filiale = '" + filiale + "' AND cod_oc = '" + idfrom + "'";
            c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeUpdate(del3);
            
            if (!filiale.equals("000")) {
                insert_aggiornamenti_mod(new Aggiornamenti_mod(
                        generaId(50), "000", dt_val, "0",
                        "ST", del3, "service", dtoper));
            }
            return true;
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return false;
    }

    /**
     *
     * @param it
     * @return
     */
    public boolean insert_ET_change(ET_change it) {
        try {
            String ins = "INSERT INTO et_change (SELECT ?,LPAD(id+1, 10, '0'),?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,? FROM et_change "
                    + "WHERE filiale ='" + it.getFiliale() + "' ORDER BY id DESC LIMIT 1)";
            if (isFirstValueFILIALE("et_change", "id", it.getFiliale())) {
                ins = "INSERT INTO et_change VALUES (?,'0000000001',?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
            }
            PreparedStatement ps = this.c.prepareStatement(ins, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, it.getCod());
            ps.setString(2, it.getFiliale());
            ps.setString(3, it.getUser());
            ps.setString(4, it.getTill_from());
            ps.setString(5, it.getFg_tofrom());
            ps.setString(6, it.getFg_brba());
            ps.setString(7, it.getCod_dest());
            ps.setString(8, it.getIdopen_from());
            ps.setString(9, it.getDt_it());
            ps.setString(10, it.getFg_annullato());
            ps.setString(11, it.getDel_dt());
            ps.setString(12, it.getDel_user());
            ps.setString(13, it.getDel_motiv());
            ps.setString(14, it.getNote());
            ps.setString(15, it.getIp_oneri());
            ps.setString(16, it.getFiliale_in());
            ps.setString(17, it.getId_in());
            ps.setString(18, it.getCod_in());
            ps.setString(19, it.getAuto());
            
            ps.execute();
            String dtoper = getNow();
            String dt_val = formatStringtoStringDate(dtoper, patternsqldate, patternnormdate);
            if (!filiale.equals("000")) {
                insert_aggiornamenti_mod(new Aggiornamenti_mod(
                        generaId(50), "000", dt_val, "0",
                        "PS", ps.toString(), "service", dtoper));
            }
            return true;
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return false;
    }

    /**
     *
     * @param it
     * @return
     */
    public boolean insert_ET_change_value(ET_change it) {
        try {
            String ins = "INSERT INTO et_change_valori VALUES (?,?,?,?,?,?,?,?,?,?,?)";
            PreparedStatement ps = this.c.prepareStatement(ins, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, it.getFiliale());
            ps.setString(2, it.getCod());
            ps.setString(3, it.getValuta());
            ps.setString(4, it.getSupporto());
            ps.setString(5, it.getIp_stock());
            ps.setString(6, it.getIp_quantity());
            ps.setString(7, it.getIp_rate());
            ps.setString(8, it.getIp_total());
            ps.setString(9, it.getIp_buyvalue());
            ps.setString(10, it.getIp_spread());
            ps.setString(11, it.getDt_it());
            ps.execute();
            String dtoper = getNow();
            String dt_val = formatStringtoStringDate(dtoper, patternsqldate, patternnormdate);
            if (!filiale.equals("000")) {
                insert_aggiornamenti_mod(new Aggiornamenti_mod(
                        generaId(50), "000", dt_val, "0",
                        "PS", ps.toString(), "service", dtoper));
            }
            return true;
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return false;
    }

    /**
     *
     * @param it
     * @param coddest
     * @return
     */
    public boolean insert_ET_nochange_value_tobr(ET_change it, String coddest) {
        try {
            String ins = "INSERT INTO et_nochange_valori VALUES (?,?,?,?,?)";
            PreparedStatement ps = this.c.prepareStatement(ins, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, it.getFiliale());
            ps.setString(2, it.getCod());
            ps.setString(3, it.getNc_causal());
            ps.setString(4, it.getIp_quantity());
            ps.setString(5, it.getDt_it());
            
            String dtoper = getNow();
            String dt_val = formatStringtoStringDate(dtoper, patternsqldate, patternnormdate);
            insert_aggiornamenti_mod(new Aggiornamenti_mod(
                    generaId(50), coddest, dt_val, "0",
                    "PS", ps.toString(), "service", dtoper));
            return true;
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return false;
    }

    /**
     *
     * @param it
     * @param coddest
     * @return
     */
    public boolean insert_ET_change_value_tobr(ET_change it, String coddest) {
        try {
            String ins = "INSERT INTO et_change_valori VALUES (?,?,?,?,?,?,?,?,?,?,?)";
            PreparedStatement ps = this.c.prepareStatement(ins, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, it.getFiliale());
            ps.setString(2, it.getCod());
            ps.setString(3, it.getValuta());
            ps.setString(4, it.getSupporto());
            ps.setString(5, it.getIp_stock());
            ps.setString(6, it.getIp_quantity());
            ps.setString(7, it.getIp_rate());
            ps.setString(8, it.getIp_total());
            ps.setString(9, it.getIp_buyvalue());
            ps.setString(10, it.getIp_spread());
            ps.setString(11, it.getDt_it());
            
            String dtoper = getNow();
            String dt_val = formatStringtoStringDate(dtoper, patternsqldate, patternnormdate);
            insert_aggiornamenti_mod(new Aggiornamenti_mod(
                    generaId(50), coddest, dt_val, "0",
                    "PS", ps.toString(), "service", dtoper));
            
            return true;
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return false;
    }

    /**
     *
     * @param it
     * @return
     */
    public boolean insert_ET_nochange_value(ET_change it) {
        try {
            String ins = "INSERT INTO et_nochange_valori VALUES (?,?,?,?,?)";
            PreparedStatement ps = this.c.prepareStatement(ins, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, it.getFiliale());
            ps.setString(2, it.getCod());
            ps.setString(3, it.getNc_causal());
            ps.setString(4, it.getIp_quantity());
            ps.setString(5, it.getDt_it());
            ps.execute();
            String dtoper = getNow();
            String dt_val = formatStringtoStringDate(dtoper, patternsqldate, patternnormdate);
            if (!filiale.equals("000")) {
                
                insert_aggiornamenti_mod(new Aggiornamenti_mod(
                        generaId(50), "000", dt_val, "0",
                        "PS", ps.toString(), "service", dtoper));
            }
            return true;
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return false;
    }

    /**
     *
     * @param cod
     * @param idfrom
     * @param filiale
     * @return
     */
    public boolean delete_ET_change(String cod, String idfrom, String filiale) {
        try {
            String d1 = "DELETE FROM et_change WHERE cod = '" + cod + "'";
            String d2 = "DELETE FROM et_change_tg WHERE cod = '" + cod + "'";
            String d3 = "DELETE FROM et_change_valori WHERE cod = '" + cod + "'";
            c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeUpdate(d1);
            String dtoper = getNow();
            String dt_val = formatStringtoStringDate(dtoper, patternsqldate, patternnormdate);
            if (!filiale.equals("000")) {
                insert_aggiornamenti_mod(new Aggiornamenti_mod(
                        generaId(50), "000", dt_val, "0",
                        "ST", d1, "service", dtoper));
            }
            
            c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeUpdate(d2);
            dtoper = getNow();
            dt_val = formatStringtoStringDate(dtoper, patternsqldate, patternnormdate);
            if (!filiale.equals("000")) {
                insert_aggiornamenti_mod(new Aggiornamenti_mod(
                        generaId(50), "000", dt_val, "0",
                        "ST", d2, "service", dtoper));
            }
            
            c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeUpdate(d3);
            dtoper = getNow();
            dt_val = formatStringtoStringDate(dtoper, patternsqldate, patternnormdate);
            if (!filiale.equals("000")) {
                insert_aggiornamenti_mod(new Aggiornamenti_mod(
                        generaId(50), "000", dt_val, "0",
                        "ST", d3, "service", dtoper));
            }
            
            String del1 = "DELETE FROM real_oc_change WHERE filiale = '" + cod + "' AND cod_oc = '" + idfrom + "'";
            c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeUpdate(del1);
            dtoper = getNow();
            dt_val = formatStringtoStringDate(dtoper, patternsqldate, patternnormdate);
            if (!filiale.equals("000")) {
                insert_aggiornamenti_mod(new Aggiornamenti_mod(
                        generaId(50), "000", dt_val, "0",
                        "ST", del1, "service", dtoper));
            }
            
            String del2 = "DELETE FROM real_oc_change_tg WHERE filiale = '" + cod + "' AND cod_oc = '" + idfrom + "'";
            c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeUpdate(del2);
            dtoper = getNow();
            dt_val = formatStringtoStringDate(dtoper, patternsqldate, patternnormdate);
            if (!filiale.equals("000")) {
                insert_aggiornamenti_mod(new Aggiornamenti_mod(
                        generaId(50), "000", dt_val, "0",
                        "ST", del2, "service", dtoper));
            }
            
            String ins = "INSERT INTO real_oc_change (SELECT * FROM real_oc_change_temp WHERE filiale = ? AND cod_oc = ?)";
            PreparedStatement ps4 = this.c.prepareStatement(ins, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps4.setString(1, filiale);
            ps4.setString(2, idfrom);
            ps4.execute();
            dtoper = getNow();
            dt_val = formatStringtoStringDate(dtoper, patternsqldate, patternnormdate);
            if (!filiale.equals("000")) {
                insert_aggiornamenti_mod(new Aggiornamenti_mod(
                        generaId(50), "000", dt_val, "0",
                        "PS", ps4.toString(), "service", dtoper));
            }
            
            String ins1 = "INSERT INTO real_oc_change_tg (SELECT * FROM real_oc_change_tg_temp WHERE filiale = ? AND cod_oc = ?)";
            PreparedStatement ps5 = this.c.prepareStatement(ins1, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps5.setString(1, filiale);
            ps5.setString(2, idfrom);
            ps5.execute();
            dtoper = getNow();
            dt_val = formatStringtoStringDate(dtoper, patternsqldate, patternnormdate);
            if (!filiale.equals("000")) {
                insert_aggiornamenti_mod(new Aggiornamenti_mod(
                        generaId(50), "000", dt_val, "0",
                        "PS", ps5.toString(), "service", dtoper));
            }
            
            String del3 = "DELETE FROM real_oc_change_temp WHERE filiale = '" + cod + "' AND cod_oc = '" + idfrom + "'";
            c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeUpdate(del3);
            dtoper = getNow();
            dt_val = formatStringtoStringDate(dtoper, patternsqldate, patternnormdate);
            if (!filiale.equals("000")) {
                insert_aggiornamenti_mod(new Aggiornamenti_mod(
                        generaId(50), "000", dt_val, "0",
                        "ST", del3, "service", dtoper));
            }
            
            String del4 = "DELETE FROM real_oc_change_tg_temp WHERE filiale = '" + cod + "' AND cod_oc = '" + idfrom + "'";
            c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeUpdate(del4);
            dtoper = getNow();
            dt_val = formatStringtoStringDate(dtoper, patternsqldate, patternnormdate);
            if (!filiale.equals("000")) {
                insert_aggiornamenti_mod(new Aggiornamenti_mod(
                        generaId(50), "000", dt_val, "0",
                        "ST", del4, "service", dtoper));
            }
            return true;
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return false;
    }

    /**
     *
     * @param cod
     * @return
     */
    public ET_change get_ET_change(String cod) {
        try {
            String sql = "SELECT * FROM et_change Where cod = ?";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, cod);
            ResultSet rs = ps.executeQuery();
            if (rs.next()) {
                ET_change et = new ET_change();
                et.setCod(rs.getString(1));
                et.setId(leftPad(rs.getString(2), 10, "0"));
                et.setFiliale(rs.getString(3));
                et.setUser(rs.getString(4));
                et.setTill_from(rs.getString(5));
                et.setFg_tofrom(rs.getString(6));
                et.setFg_brba(rs.getString(7));
                et.setCod_dest(rs.getString(8));
                et.setIdopen_from(rs.getString(9));
                et.setDt_it(rs.getString(10));
                et.setFg_annullato(rs.getString(11));
                et.setDel_dt(rs.getString(12));
                et.setDel_user(rs.getString(13));
                et.setDel_motiv(rs.getString(14));
                et.setNote(rs.getString(15));
                et.setIp_oneri(rs.getString(16));
                et.setFiliale_in(rs.getString(17));
                et.setId_in(rs.getString(18));
                et.setCod_in(rs.getString(19));
                et.setAuto(rs.getString(20));
                
                if (et.getCod().startsWith("ETN")) {
                    et.setType("NC");
                } else {
                    et.setType("CH");
                }
                
                return et;
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return null;
    }

    /**
     *
     * @param cod
     * @return
     */
    public ArrayList<ET_change> get_ET_nochange_value(String cod) {
        try {
            ArrayList<ET_change> list = new ArrayList<>();
            String sql = "SELECT * FROM et_nochange_valori Where cod = ?";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, cod);
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                ET_change et = new ET_change();
                et.setFiliale(rs.getString(1));
                et.setCod(rs.getString(2));
                et.setNc_causal(rs.getString(3));
                
                et.setIp_quantity(rs.getString(4));
                et.setDt_it(rs.getString(5));
                list.add(et);
            }
            return list;
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return null;
    }

    /**
     *
     * @param cod
     * @return
     */
    public ArrayList<ET_change> get_ET_change_value(String cod) {
        try {
            ArrayList<ET_change> list = new ArrayList<>();
            String sql = "SELECT * FROM et_change_valori Where cod = ?";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, cod);
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                ET_change et = new ET_change();
                et.setFiliale(rs.getString(1));
                et.setCod(rs.getString(2));
                et.setValuta(rs.getString(3));
                et.setSupporto(rs.getString(4));
                et.setIp_stock(rs.getString(5));
                et.setIp_quantity(rs.getString(6));
                et.setIp_rate(rs.getString(7));
                et.setIp_total(rs.getString(8));
                et.setIp_buyvalue(rs.getString(9));
                et.setIp_spread(rs.getString(10));
                et.setDt_it(rs.getString(11));
                list.add(et);
            }
            return list;
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return null;
    }

    /**
     *
     * @param cod
     * @return
     */
    public ArrayList<ET_change> get_ET_change_tg(String cod) {
        try {
            ArrayList<ET_change> list = new ArrayList<>();
            String sql = "SELECT * FROM et_change_tg Where cod = ? order by currency ASC,CAST(ip_taglio AS DECIMAL(12,2)) DESC";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, cod);
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                ET_change et = new ET_change();
                et.setFiliale(rs.getString(1));
                et.setCod(rs.getString(2));
                et.setValuta(rs.getString(3));
                et.setSupporto(rs.getString(4));
                et.setIp_taglio(rs.getString(5));
                et.setIp_quantity(rs.getString(6));
                et.setIp_total(rs.getString(7));
                et.setDt_it(rs.getString(8));
                list.add(et);
            }
            return list;
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return null;
    }

    /**
     *
     * @param cod
     * @return
     */
    public String note_fromBranch(String cod) {
        try {
            String sql = "SELECT note FROM et_frombranch WHERE cod = ?";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, cod);
            ResultSet rs = ps.executeQuery();
            if (rs.next()) {
                return rs.getString(1);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return "";
    }

    /**
     *
     * @param filiale
     * @param stato
     * @param type
     * @return
     */
    public ArrayList<ET_change> get_ET_change_frombranch(String filiale, String stato, String type) {
        ArrayList<ET_change> list = new ArrayList<>();
        try {
            PreparedStatement ps;
            if (stato == null) {
                String sql = "SELECT * FROM et_frombranch WHERE cod_dest = ? AND type = ?";
                ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
                ps.setString(1, filiale);
                ps.setString(2, type);
            } else {
                String sql = "SELECT * FROM et_frombranch WHERE cod_dest = ? AND fg_stato = ?  AND type = ?";
                ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
                ps.setString(1, filiale);
                ps.setString(2, stato);
                ps.setString(3, type);
            }
            
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                ET_change et = new ET_change();
                et.setCod(rs.getString(1));
                et.setId(leftPad(rs.getString(2), 10, "0"));
                et.setFiliale(rs.getString(3));
                et.setUser(rs.getString(4));
                et.setTill_from(rs.getString(5));
                et.setCod_dest(rs.getString(6));
                et.setIdopen_from(rs.getString(7));
                et.setDt_it(rs.getString(8));
                et.setFg_stato(rs.getString(9));
                et.setTr_dt(rs.getString(10));
                et.setTr_user(rs.getString(11));
                et.setTr_motiv(rs.getString(12));
                et.setNote(rs.getString(13));
                list.add(et);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return list;
    }

    /**
     *
     * @param filiale
     * @param valuta
     * @param valore
     * @param dtstart
     * @param username
     * @return
     */
    public boolean update_change_BCE(String filiale, String valuta, String valore, String dtstart, String username) {
        String upd = "update valute set cambio_bce = '" + valore + "' where valuta = '" + valuta + "' AND filiale = '" + filiale + "'";
        insertValue_agg(null, upd, filiale, dtstart, username);
        return true;
    }

    /**
     *
     * @param filiale
     * @param valuta
     * @param bce
     * @param dt_start
     * @param user
     * @return
     */
    public boolean getPresenzaValuta(String filiale, String valuta, String bce, String dt_start, String user) {
        try {
            ResultSet rs = c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery("select valuta from valute where valuta='" + valuta + "'");
            if (!rs.next()) {
                String ins = "insert into valute (filiale,valuta,codice_uic_divisa,de_valuta,cambio_acquisto,cambio_vendita,cambio_bce,de_messaggio) values ('" + filiale + "','" + valuta + "','','-','','','" + bce + "','-')";
                insertValue_agg(null, ins, null, dt_start, user);
            }
            return true;
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return false;
    }

    /**
     *
     * @param et
     * @return
     */
    public boolean insert_ET_change_frombranch(ET_change et) {
        try {
            String ins = "INSERT INTO et_frombranch VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
            PreparedStatement ps = this.c.prepareStatement(ins, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, et.getCod());
            ps.setString(2, et.getId());
            ps.setString(3, et.getFiliale());
            ps.setString(4, et.getUser());
            ps.setString(5, et.getTill_from());
            ps.setString(6, et.getCod_dest());
            ps.setString(7, et.getIdopen_from());
            ps.setString(8, et.getDt_it());
            ps.setString(9, et.getFg_stato());
            ps.setString(10, et.getTr_dt());
            ps.setString(11, et.getTr_user());
            ps.setString(12, et.getTr_motiv());
            ps.setString(13, et.getNote());
            ps.setString(14, et.getType());
            ps.execute();
            String dtoper = getNow();
            String dt_val = formatStringtoStringDate(dtoper, patternsqldate, patternnormdate);
            
            insert_aggiornamenti_mod(new Aggiornamenti_mod(
                    generaId(50), "000", dt_val, "0",
                    "PS", ps.toString(), "service", dtoper));
            
            insert_aggiornamenti_mod(new Aggiornamenti_mod(
                    generaId(50), et.getCod_dest(), dt_val, "0",
                    "PS", ps.toString(), "service", dtoper));
            
            return true;
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return false;
    }

    /**
     *
     * @param nct
     * @return
     */
    public boolean insert_NC_transaction(NC_transaction nct) {
        try {
            String ins = "INSERT INTO nc_transaction (SELECT ?,LPAD(id+1, 15, '0'),?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,? FROM "
                    + "nc_transaction WHERE filiale = '" + nct.getFiliale() + "' ORDER BY id DESC LIMIT 1)";
            if (isFirstValueFILIALE("nc_transaction", "id", nct.getFiliale())) {
                ins = "INSERT INTO nc_transaction VALUES (?,'000000000000001',?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
            }
            PreparedStatement ps = this.c.prepareStatement(ins, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, nct.getCod());
            ps.setString(2, nct.getFiliale());
            ps.setString(3, nct.getGruppo_nc());
            ps.setString(4, nct.getCausale_nc());
            ps.setString(5, nct.getValuta());
            ps.setString(6, nct.getSupporto());
            ps.setString(7, nct.getPos());
            ps.setString(8, nct.getUser());
            ps.setString(9, nct.getTill());
            ps.setString(10, getNow());
            ps.setString(11, nct.getTotal());
            ps.setString(12, nct.getCommissione());
            ps.setString(13, nct.getNetto());
            ps.setString(14, nct.getPrezzo());
            ps.setString(15, nct.getQuantita());
            ps.setString(16, nct.getFg_inout());
            ps.setString(17, nct.getRicevuta());
            ps.setString(18, nct.getMtcn());
            ps.setString(19, nct.getDel_fg());
            ps.setString(20, nct.getDel_dt());
            ps.setString(21, nct.getDel_user());
            ps.setString(22, nct.getDel_motiv());
            ps.setString(23, nct.getFg_tipo_transazione_nc());
            ps.setString(24, nct.getFg_dogana());
            ps.setString(25, nct.getAss_idcode());
            ps.setString(26, nct.getAss_startdate());
            ps.setString(27, nct.getAss_enddate());
            ps.setString(28, nct.getCl_cognome());
            ps.setString(29, nct.getCl_nome());
            ps.setString(30, nct.getCl_indirizzo());
            ps.setString(31, nct.getCl_citta());
            ps.setString(32, nct.getCl_nazione());
            ps.setString(33, nct.getCl_cap());
            ps.setString(34, nct.getCl_provincia());
            ps.setString(35, nct.getCl_email());
            ps.setString(36, nct.getCl_telefono());
            ps.setString(37, nct.getNote());
            ps.setString(38, nct.getTi_diritti());
            ps.setString(39, nct.getTi_ticket_fee());
            ps.setString(40, nct.getId_open_till());
            ps.setString(41, nct.getPosnum());
            ps.setString(42, nct.getPercentiva());
            ps.setString(43, nct.getBonus());
            ps.setString(44, nct.getCh_transaction());
            ps.setString(45, nct.getDocrico());
            ps.execute();
            String dtoper = getNow();
            String dt_val = formatStringtoStringDate(dtoper, patternsqldate, patternnormdate);
            insert_aggiornamenti_mod(new Aggiornamenti_mod(
                    generaId(50), "000", dt_val, "0",
                    "PS", ps.toString(), "service", dtoper));
            return true;
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return false;
    }

    /**
     *
     * @param ndg
     * @param stato
     * @return
     */
    public ArrayList<Company_attach> listAttachment(String ndg, String stato) {
        ArrayList<Company_attach> li = new ArrayList<>();
        try {
            String sql;
            PreparedStatement ps;
            if (stato == null) {
                sql = "SELECT * FROM anagrafica_ru_attach WHERE code_ndg = ? ORDER BY dt_upload";
                ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
                ps.setString(1, ndg);
            } else {
                sql = "SELECT * FROM anagrafica_ru_attach WHERE code_ndg = ? AND fg_annullato = ? ORDER BY dt_upload";
                ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
                ps.setString(1, ndg);
                ps.setString(2, stato);
            }
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                Company_attach att = new Company_attach(rs.getString(1), rs.getString(2), rs.getString(3),
                        rs.getString(4), rs.getString(5), rs.getString(6));
                li.add(att);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return li;
    }

    /**
     *
     * @param co
     * @param username
     * @return
     */
    public boolean edit_Company(Company co, String username) {
        try {
            String upd = "UPDATE anagrafica_ru SET ragione_sociale = ?, codice_fiscale = ?, indirizzo = ?, cap = ?, provincia = ?, cab_comune = ?,"
                    + " paese_estero_residenza = ?, fg_annullato = ? WHERE ndg = ?";
            PreparedStatement ps = this.c.prepareStatement(upd, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, co.getRagione_sociale());
            ps.setString(2, co.getCodice_fiscale());
            ps.setString(3, co.getIndirizzo());
            ps.setString(4, co.getCap());
            ps.setString(5, co.getProvincia());
            ps.setString(6, co.getCab_comune());
            ps.setString(7, co.getPaese_estero_residenza());
            ps.setString(8, co.getFg_annullato());
            ps.setString(9, co.getNdg());
            
            boolean es = ps.executeUpdate() > 0;
            if (es) {
                insertValue_agg(ps, null, null, null, username);
            }
            
            return es;
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return false;
    }

    /**
     *
     * @param ag
     * @return
     */
    public boolean delete_Agent(Company ag) {
        try {
            String upd = "UPDATE anagrafica_ru SET fg_annullato = ? WHERE ndg = ?";
            PreparedStatement ps = this.c.prepareStatement(upd, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, "1");
            ps.setString(2, ag.getNdg());
            int x = ps.executeUpdate();
            if (x > 0) {
                insertValue_agg(ps, null, null, null, "service");
            }
            
            return x > 0;
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return false;
    }

    /**
     *
     * @param cod
     * @return
     */
    public boolean delete_Company_attach(String cod) {
        try {
            String upd = "UPDATE anagrafica_ru_attach SET fg_annullato = ? WHERE cod = ?";
            PreparedStatement ps = this.c.prepareStatement(upd, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, "1");
            ps.setString(2, cod);
            int x = ps.executeUpdate();
            if (x > 0) {
                insertValue_agg(ps, null, null, null, "service");
            }
            
            return x > 0;
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return false;
    }

    /**
     *
     * @param ag
     * @param username
     * @return
     */
    public boolean edit_Agent(Company ag, String username) {
        try {
            String upd = "UPDATE anagrafica_ru SET nome = ?, cognome = ?, codice_fiscale = ?, indirizzo = ?, cap = ?, provincia = ?, cab_comune = ?,"
                    + " paese_estero_residenza = ?, dt_nascita = ?,  comune_nascita = ?, cod_provincia_nascita = ?,  tipo_documento = ?, dt_rilascio = ?,"
                    + " dt_scadenza = ?, autorita_rilascio = ?, luogo_rilascio_documento = ? , numero_documento = ? WHERE ndg = ?";
            PreparedStatement ps = this.c.prepareStatement(upd, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, ag.getNome());
            ps.setString(2, ag.getCognome());
            ps.setString(3, ag.getCodice_fiscale());
            ps.setString(4, ag.getIndirizzo());
            ps.setString(5, ag.getCap());
            ps.setString(6, ag.getProvincia());
            ps.setString(7, ag.getCab_comune());
            ps.setString(8, ag.getPaese_estero_residenza());
            ps.setString(9, ag.getDt_nascita());
            ps.setString(10, ag.getComune_nascita());
            ps.setString(11, ag.getCod_provincia_nascita());
            ps.setString(12, ag.getTipo_documento());
            ps.setString(13, ag.getDt_rilascio());
            ps.setString(14, ag.getDt_scadenza());
            ps.setString(15, ag.getAutorita_rilascio());
            ps.setString(16, ag.getLuogo_rilascio_documento());
            ps.setString(17, ag.getNumero_documento());
            ps.setString(18, ag.getNdg());
            boolean es = ps.executeUpdate() > 0;
            if (es) {
                insertValue_agg(ps, null, null, null, username);
            }
            
            return es;
        } catch (SQLException ex) {
            ex.printStackTrace();
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return false;
    }

    /**
     *
     * @param ca
     * @param username
     * @return
     */
    public boolean insert_Company_attach(Company_attach ca, String username) {
        try {
            String ins = "INSERT INTO anagrafica_ru_attach VALUES (?,?,?,?,?,?)";
            PreparedStatement ps = this.c.prepareStatement(ins, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, ca.getCod());
            ps.setString(2, ca.getCode_ndg());
            ps.setString(3, ca.getDescr());
            ps.setString(4, ca.getFileout());
            ps.setString(5, ca.getFg_annullato());
            ps.setString(6, ca.getDt_upload());
            ps.execute();
            insertValue_agg(ps, null, null, null, username);
            return true;
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return false;
    }

    /**
     *
     * @param cod
     * @return
     */
    public String view_Company_attach(String cod) {
        try {
            String sql = "SELECT fileout FROM anagrafica_ru_attach WHERE cod = ?";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, cod);
            ResultSet rs = ps.executeQuery();
            if (rs.next()) {
                return rs.getString(1);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return null;
    }

    /**
     *
     * @return
     */
    public String getNextNgdCompany() {
        try {
            String sql = "SELECT LPAD((CAST(ndg AS DECIMAL(10))+1), 5, '0') FROM anagrafica_ru order by CAST(ndg AS DECIMAL(10,2)) desc LIMIT 1";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ResultSet rs = ps.executeQuery();
            if (rs.next()) {
                return rs.getString(1);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return "00001";
    }

    /**
     *
     * @param co
     * @param username
     * @return
     */
    public Company insert_Company(Company co, String username) {
        try {
            String ins = "INSERT INTO anagrafica_ru (filiale,ndg,ragione_sociale,paese_estero_residenza,cab_comune,"
                    + "provincia,cap,indirizzo,codice_fiscale) VALUES (?,?,?,?,?,?,?,?,?)";
            PreparedStatement ps = this.c.prepareStatement(ins, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, co.getFiliale());
            ps.setString(2, co.getNdg());
            ps.setString(3, co.getRagione_sociale());
            ps.setString(4, co.getPaese_estero_residenza());
            ps.setString(5, co.getCab_comune());
            ps.setString(6, co.getProvincia());
            ps.setString(7, co.getCap());
            ps.setString(8, co.getIndirizzo());
            ps.setString(9, co.getCodice_fiscale());
            boolean es = ps.executeUpdate() > 0;
            if (es) {
                insertValue_agg(ps, null, null, null, username);
                return co;
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
            if (ex.getMessage().contains("Duplicate")) {
                co.setNdg(getNextNgdCompany());
                return co;
            }
        }
        return null;
    }

    /**
     *
     * @param ag
     * @param username
     * @return
     */
    public Company insert_Agent(Company ag, String username) {
        try {
            String ins = "INSERT INTO anagrafica_ru (filiale,ndg,ndg_rappresentante,cognome,nome,"
                    + "paese_estero_residenza,cab_comune,provincia,cap,indirizzo,codice_fiscale,"
                    + "dt_nascita,comune_nascita,tipo_documento,dt_rilascio,autorita_rilascio,"
                    + "sesso,numero_documento,dt_scadenza,cod_provincia_nascita,luogo_rilascio_documento,tipo_anagrafica)"
                    + " VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
            PreparedStatement ps = this.c.prepareStatement(ins, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, ag.getFiliale());
            ps.setString(2, ag.getNdg());
            ps.setString(3, ag.getNdg_rappresentante());
            ps.setString(4, ag.getCognome());
            ps.setString(5, ag.getNome());
            ps.setString(6, ag.getPaese_estero_residenza());
            ps.setString(7, ag.getCab_comune());
            ps.setString(8, ag.getProvincia());
            ps.setString(9, ag.getCap());
            ps.setString(10, ag.getIndirizzo());
            ps.setString(11, ag.getCodice_fiscale());
            ps.setString(12, ag.getDt_nascita());
            ps.setString(13, ag.getComune_nascita());
            ps.setString(14, ag.getTipo_documento());
            ps.setString(15, ag.getDt_rilascio());
            ps.setString(16, ag.getAutorita_rilascio());
            ps.setString(17, ag.getSesso());
            ps.setString(18, ag.getNumero_documento());
            ps.setString(19, ag.getDt_scadenza());
            ps.setString(20, ag.getCod_provincia_nascita());
            ps.setString(21, ag.getLuogo_rilascio_documento());
            ps.setString(22, ag.getTipo_anagrafica());
            boolean es = ps.executeUpdate() > 0;
            if (es) {
                insertValue_agg(ps, null, null, null, username);
                return ag;
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
            if (ex.getMessage().contains("Duplicate")) {
                ag.setNdg(getNextNgdCompany());
                return ag;
            }
        }
        return null;
    }

    /**
     *
     * @param id
     * @param value
     */
    public void insertConf(String id, String value) {
        try {
            String ins = "INSERT INTO conf VALUES (?,?)";
            PreparedStatement ps = this.c.prepareStatement(ins, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, id);
            ps.setString(2, value);
            ps.execute();
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
    }

    /**
     *
     * @param id
     * @param value
     */
    public void insertConfconAGG(String id, String value) {
        try {
            String ins = "INSERT INTO conf VALUES (?,?)";
            PreparedStatement ps = this.c.prepareStatement(ins, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, id);
            ps.setString(2, value);
            ps.execute();
            insertValue_agg_NOCENTRAL(ps, null, null, null, "service");
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
    }

    /**
     *
     * @param id
     * @param value
     */
    public void updateConfconAGG(String id, String value) {
        try {
            String ins = "UPDATE conf SET des = ? WHERE id = ?";
            PreparedStatement ps = this.c.prepareStatement(ins, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, value);
            ps.setString(2, id);
            ps.execute();
            insertValue_agg_NOCENTRAL(ps, null, null, null, "service1");
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
    }
    
    public void updateConf(String id, String value) {
        try {
            String ins = "UPDATE conf SET des = ? WHERE id = ?";
            PreparedStatement ps = this.c.prepareStatement(ins, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, value);
            ps.setString(2, id);
            ps.execute();
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
    }

    /**
     *
     * @return
     */
    public ArrayList<String[]> list_nc_descr() {
        ArrayList<String[]> out = new ArrayList<>();
        try {
            String sql = "SELECT cod,descr,kind,fg_inout FROM selectncde ORDER BY cod";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                String[] o1 = {rs.getString(1), rs.getString(2), rs.getString(3), rs.getString(4)};
                out.add(o1);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @param typeop
     * @param d1
     * @param d2
     * @param branch
     * @return
     */
    public ArrayList<IT_change> query_it(String typeop, String d1, String d2, String branch) {
        ArrayList<IT_change> out = new ArrayList<>();
        try {
            String sel;
            if (d1 == null || d1.equals("...")) {
                d1 = "";
            }
            d1 = d1.trim() + " 00:00:00";
            if (d2 == null || d2.equals("...")) {
                d2 = "";
            }
            d2 = d2.trim() + " 23:59:59";
            d1 = formatStringtoStringDate(d1, patternnormdate, patternsqldate);
            d2 = formatStringtoStringDate(d2, patternnormdate, patternsqldate);
            
            switch (typeop) {
                case "CH":
                    sel = "SELECT * FROM it_change i, it_change_valori v WHERE i.cod=v.cod AND dt_it >= '" + d1 + "' AND dt_it <= '" + d2 + "'";
                    break;
                case "NC":
                    sel = "SELECT * FROM it_change i, it_nochange_valori v WHERE i.cod=v.cod AND dt_it >= '" + d1 + "' AND dt_it <= '" + d2 + "'";
                    break;
                default:
                    return out;
            }
            
            if (branch != null && !branch.equals("") && !branch.equals("...")) {
                sel = sel + " AND i.filiale = '" + branch + "'";
            }
            
            sel = sel + " GROUP BY i.cod ORDER BY dt_it";
            
            ResultSet rs = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sel);
            while (rs.next()) {
                IT_change it = new IT_change();
                it.setCod(rs.getString("cod"));
                it.setId(leftPad(rs.getString("id"), 15, "0"));
                it.setDt_it(rs.getString("dt_it"));
                it.setUser(rs.getString("user"));
                it.setTill_from(rs.getString("till_from"));
                it.setIdopen_from(rs.getString("idopen_from"));
                it.setTill_to(rs.getString("till_to"));
                it.setIdopen_to(rs.getString("idopen_to"));
                it.setFg_annullato(rs.getString("fg_annullato"));
                it.setDel_dt(rs.getString("del_dt"));
                it.setTypeop(typeop);
                it.setFiliale(rs.getString("filiale"));
                out.add(it);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @param cod
     * @return
     */
    public IT_change get_internal_transfer(String cod) {
        try {
            String sql = "SELECT * FROM it_change WHERE cod = ?";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, cod);
            
            ResultSet rs = ps.executeQuery();
            if (rs.next()) {
                IT_change it = new IT_change();
                it.setCod(rs.getString("cod"));
                it.setId(leftPad(rs.getString("id"), 15, "0"));
                it.setDt_it(rs.getString("dt_it"));
                it.setUser(rs.getString("user"));
                it.setTill_from(rs.getString("till_from"));
                it.setIdopen_from(rs.getString("idopen_from"));
                it.setTill_to(rs.getString("till_to"));
                it.setIdopen_to(rs.getString("idopen_to"));
                it.setFg_annullato(rs.getString("fg_annullato"));
                it.setDel_dt(rs.getString("del_dt"));
                it.setDel_motiv(rs.getString("del_motiv"));
                it.setDel_user(rs.getString("del_user"));
                it.setFiliale(rs.getString("filiale"));
                if (it.getCod().startsWith("ITN")) {
                    it.setTypeop("NC");
                } else {
                    it.setTypeop("CH");
                }
                return it;
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return null;
    }

    /**
     *
     * @param cod
     * @return
     */
    public ArrayList<IT_change> get_internal_transfer_ch_value(String cod) {
        ArrayList<IT_change> out = new ArrayList<>();
        try {
            String sql = "SELECT * FROM it_change_valori WHERE cod = ? ORDER BY kind,currency";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, cod);
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                IT_change it = new IT_change();
                it.setCod(rs.getString("cod"));
                it.setValuta(rs.getString("currency"));
                it.setSupporto(rs.getString("kind"));
                it.setQuantita(rs.getString("ip_quantity"));
                it.setTotale(rs.getString("total"));
                out.add(it);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @param cod
     * @return
     */
    public ArrayList<IT_change> get_internal_transfer_noch_value(String cod) {
        ArrayList<IT_change> out = new ArrayList<>();
        try {
            String sql = "SELECT cod,causale_nc,ip_quantity FROM it_nochange_valori WHERE cod = ? ORDER BY causale_nc";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, cod);
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                IT_change it = new IT_change();
                it.setCod(rs.getString("cod"));
                it.setNc_causal(rs.getString("causale_nc"));
                it.setQuantita(rs.getString("ip_quantity"));
                out.add(it);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @param cod
     * @return
     */
    public ArrayList<IT_change> get_internal_transfer_ch_tg(String cod) {
        ArrayList<IT_change> out = new ArrayList<>();
        try {
            String sql = "SELECT * FROM it_change_tg WHERE cod = ? ORDER BY kind,currency,CAST(ip_taglio AS DECIMAL(12,2)) DESC";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, cod);
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                IT_change it = new IT_change();
                it.setCod(rs.getString("cod"));
                it.setValuta(rs.getString("currency"));
                it.setSupporto(rs.getString("kind"));
                it.setTaglio(rs.getString("ip_taglio"));
                it.setQuantita(rs.getString("ip_quantity"));
                it.setTotale(rs.getString("total"));
                out.add(it);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @return
     */
    public ArrayList<ET_change> query_et_pending() {
        ArrayList<ET_change> out = new ArrayList<>();
        
        try {
            
            String sel = "SELECT * FROM et_frombranch WHERE fg_stato='0'";
            
            ResultSet rs = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sel);
            
            while (rs.next()) {
                ET_change et = new ET_change();
                et.setCod(rs.getString(1));
                et.setId(leftPad(rs.getString(2), 10, "0"));
                et.setFiliale(rs.getString(3));
                et.setUser(rs.getString(4));
                et.setTill_from(rs.getString(5));
                et.setCod_dest(rs.getString(6));
                et.setIdopen_from(rs.getString(7));
                et.setDt_it(rs.getString(8));
                et.setNote(rs.getString(13).trim());
                et.setType(rs.getString(14));
                out.add(et);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
        
    }

    /**
     *
     * @param typeop
     * @param d1
     * @param d2
     * @param branch
     * @return
     */
    public ArrayList<ET_change> query_et(String typeop, String d1, String d2, String branch) {
        ArrayList<ET_change> out = new ArrayList<>();
        try {
            if (d1 == null || d1.equals("...")) {
                d1 = "";
            }
            d1 = d1.trim() + " 00:00:00";
            if (d2 == null || d2.equals("...")) {
                d2 = "";
            }
            d2 = d2.trim() + " 23:59:59";
            d1 = formatStringtoStringDate(d1, patternnormdate, patternsqldate);
            d2 = formatStringtoStringDate(d2, patternnormdate, patternsqldate);
            
            String sel = "";
            switch (typeop) {
                case "CH":
                    sel = "SELECT * FROM et_change i, et_change_valori v WHERE i.cod=v.cod AND dt_it >= '" + d1 + "' AND dt_it <= '" + d2 + "'";
                    break;
                case "NC":
                    sel = "SELECT * FROM et_change i, et_nochange_valori v WHERE i.cod=v.cod AND dt_it >= '" + d1 + "' AND dt_it <= '" + d2 + "'";
                    break;
//                return out;
                default:
                    break;
            }
            
            if (branch != null && !branch.equals("") && !branch.equals("...")) {
                sel = sel + " AND i.filiale = '" + branch + "'";
            }
            
            sel = sel + " GROUP BY i.cod ORDER BY dt_it";
            
            ResultSet rs = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sel);
            
            while (rs.next()) {
                ET_change et = new ET_change();
                et.setCod(rs.getString(1));
                et.setId(leftPad(rs.getString(2), 10, "0"));
                et.setFiliale(rs.getString(3));
                et.setUser(rs.getString(4));
                et.setTill_from(rs.getString(5));
                et.setFg_tofrom(rs.getString(6));
                et.setFg_brba(rs.getString(7));
                et.setCod_dest(rs.getString(8));
                et.setIdopen_from(rs.getString(9));
                et.setDt_it(rs.getString(10));
                et.setFg_annullato(rs.getString(11));
                et.setDel_dt(rs.getString(12));
                et.setDel_user(rs.getString(13));
                et.setDel_motiv(rs.getString(14));
                et.setNote(rs.getString(15));
                et.setIp_oneri(rs.getString(16));
                et.setFiliale_in(rs.getString(17));
                et.setId_in(rs.getString(18));
                et.setCod_in(rs.getString(19));
                et.setAuto(rs.getString(20));
                et.setType(typeop);
                out.add(et);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @param kind
     * @param cod
     * @return
     */
    public String getFg_inout_ncde(String kind, String cod) {
        try {
            String sql = "SELECT fg_inout FROM selectncde where kind = ? AND cod = ?";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, kind);
            ps.setString(2, cod);
            ResultSet rs = ps.executeQuery();
            if (rs.next()) {
                return rs.getString(1);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return "1";
    }

    /**
     *
     * @return
     */
    public ArrayList<String[]> list_kind_pos() {
        ArrayList<String[]> out = new ArrayList<>();
        try {
            ArrayList<String[]> cc = credit_card_enabled();
            ArrayList<String[]> ba = list_bankAccount();
            String sql = "SELECT supporto,de_supporto FROM supporti where (fg_sys_trans = ? or fg_sys_trans = ? or fg_sys_trans = ? or fg_sys_trans = ? ) AND filiale = ? order by fg_sys_trans";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, "6");
            ps.setString(2, "7");
            ps.setString(3, "8");
            ps.setString(4, "4");
            ps.setString(5, getCodLocal(true)[0]);
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                if (leftPad(rs.getString(1), 2, "0").equals("08")) {
                    for (int i = 0; i < ba.size(); i++) {
                        String[] o1 = {
                            "",
                            leftPad(rs.getString(1), 2, "0") + " - " + rs.getString(2),
                            ba.get(i)[0] + " - " + ba.get(i)[1]};
                        out.add(o1);
                    }
                } else {
                    for (int i = 0; i < cc.size(); i++) {
                        String[] o1 = {
                            "",
                            leftPad(rs.getString(1), 2, "0") + " - " + rs.getString(2),
                            cc.get(i)[0] + " - " + cc.get(i)[1]};
                        out.add(o1);
                    }
                }
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @param cod
     * @param type
     * @param filename
     * @param fileout
     * @param user
     * @param dt_start
     * @return
     */
    public boolean insert_excel_upl(String cod, String type, String filename, String fileout, String user, String dt_start) {
        try {
            String ins = "INSERT INTO excel_upload (cod,type,filename,fileout,user,dt_start) VALUES (?,?,?,?,?,?)";
            PreparedStatement ps = this.c.prepareStatement(ins, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, cod);
            ps.setString(2, type);
            ps.setString(3, filename);
            ps.setString(4, fileout);
            ps.setString(5, user);
            ps.setString(6, dt_start);
            ps.execute();
            return true;
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return false;
    }

    /**
     *
     * @return
     */
    public String get_last_excel_upl() {
        try {
            String ins = "SELECT user,data FROM excel_upload WHERE type = ? ORDER BY data DESC LIMIT 1";
            PreparedStatement ps = this.c.prepareStatement(ins, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, "CU");
            ResultSet rs = ps.executeQuery();
            if (rs.next()) {
                return "Last Update: " + rs.getString(1) + " " + formatStringtoStringDate(rs.getString(2), patternsqldate, patternnormdate);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return "";
    }

    /**
     *
     * @return
     */
    public String get_last_excel_rep() {
        try {
            String ins = "SELECT data FROM excel_upload WHERE type = ? ORDER BY data DESC LIMIT 1";
            PreparedStatement ps = this.c.prepareStatement(ins, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, "CU");
            ResultSet rs = ps.executeQuery();
            if (rs.next()) {
                return formatStringtoStringDate(rs.getString(1), patternsqldate, patternnormdate);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return "";
    }

    /**
     *
     * @param cod_oc
     * @return
     */
    public Openclose query_oc(String cod_oc) {
        try {
            String sql = "SELECT * FROM oc_lista WHERE cod = ?";
            
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, cod_oc);
            
            ResultSet rs = ps.executeQuery();
            if (rs.next()) {
                Openclose oc = new Openclose(rs.getString(1), rs.getString(2), leftPad(rs.getString(3), 15, "0"),
                        rs.getString(4), rs.getString(5), rs.getString(6), rs.getString(7), rs.getString(8));
                oc.setCod_it(rs.getString("cod_it"));
                oc.setCod_itnc(rs.getString("cod_itnc"));
                oc.setForeign_tr(rs.getString("foreign_tr"));
                oc.setLocal_tr(rs.getString("local_tr"));
                oc.setStock_tr(rs.getString("stock_tr"));
                return oc;
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return null;
    }

    /**
     *
     * @param till
     * @param d1
     * @param d2
     * @param branch
     * @return
     */
    public ArrayList<Openclose> query_oc(String till, String d1, String d2, String branch) {
        ArrayList<Openclose> out = new ArrayList<>();
        try {
            
            if (d1 == null || d1.equals("...")) {
                d1 = "";
            }
            d1 = d1.trim() + " 00:00:00";
            
            if (d2 == null || d2.equals("...")) {
                d2 = "";
            }
            d2 = d2.trim() + " 23:59:59";
            
            d1 = formatStringtoStringDate(d1, patternnormdate, patternsqldate);
            d2 = formatStringtoStringDate(d2, patternnormdate, patternsqldate);
            
            String sql = "SELECT * FROM oc_lista WHERE data >= '" + d1 + "' AND data <= '" + d2 + "' ";
            
            if (branch != null && !branch.equals("") && !branch.equals("...")) {
                sql = sql + " AND filiale = '" + branch + "'";
            }
            
            if (till != null && !till.equals("") && !till.equals("...")) {
                sql = sql + " AND till = '" + till + "'";
            }
            
            sql = sql + " ORDER BY data,id DESC";
            
            ResultSet rs = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql);
            while (rs.next()) {
                out.add(new Openclose(rs.getString(1), rs.getString(2), leftPad(rs.getString(3), 15, "0"),
                        rs.getString(4), rs.getString(5), rs.getString(6), rs.getString(7), rs.getString(8)));
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @param oc
     * @return
     */
    public boolean insert_new_Openclose(Openclose oc) {
        try {
            String ins = "INSERT INTO oc_lista (SELECT ?,?,LPAD((CAST(id AS DECIMAL(10))+1), 15, '0'),?,?,?,?,?,?,?,?,?,? "
                    + "FROM oc_lista WHERE filiale = '" + oc.getFiliale() + "' order by CAST(id AS DECIMAL(10,2)) desc LIMIT 1)";
            
            if (isFirstValueFILIALE("oc_lista", "id", oc.getFiliale())) {
                ins = "INSERT INTO oc_lista VALUES (?,?,'000000000000001',?,?,?,?,?,?,?,?,?,?)";
            }
            PreparedStatement ps = this.c.prepareStatement(ins, RETURN_GENERATED_KEYS);
            ps.setString(1, oc.getFiliale());
            ps.setString(2, oc.getCod());
            ps.setString(3, oc.getTill());
            ps.setString(4, oc.getUser());
            ps.setString(5, oc.getFg_tipo());
            ps.setString(6, oc.getData());
            ps.setString(7, oc.getErrors());
            ps.setString(8, oc.getForeign_tr());
            ps.setString(9, oc.getLocal_tr());
            ps.setString(10, oc.getStock_tr());
            ps.setString(11, oc.getCod_it());
            ps.setString(12, oc.getCod_itnc());
            ps.execute();
            String dtoper = getNow();
            String dt_val = formatStringtoStringDate(dtoper, patternsqldate, patternnormdate);
            insert_aggiornamenti_mod(new Aggiornamenti_mod(
                    generaId(50), "000", dt_val, "0",
                    "PS", ps.toString(), "service", dtoper));
            return true;
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return false;
    }

    /**
     *
     * @param oc
     * @return
     */
    public boolean insert_new_Openclose_value_ch(Openclose oc) {
        try {
            String ins = "INSERT INTO oc_change VALUES (?,?,?,?,?,?,?,?,?,?)";
            PreparedStatement ps = this.c.prepareStatement(ins, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, oc.getFiliale());
            ps.setString(2, oc.getCod());
            ps.setString(3, oc.getValuta());
            ps.setString(4, oc.getKind());
            ps.setString(5, oc.getValue_op());
            ps.setString(6, oc.getNum_kind_op());
            ps.setString(7, oc.getValue_cl());
            ps.setString(8, oc.getNum_kind_cl());
            ps.setString(9, oc.getData());
            ps.setString(10, oc.getFisico());
            ps.execute();
            String dtoper = getNow();
            String dt_val = formatStringtoStringDate(dtoper, patternsqldate, patternnormdate);
            insert_aggiornamenti_mod(new Aggiornamenti_mod(
                    generaId(50), "000", dt_val, "0",
                    "PS", ps.toString(), "service", dtoper));
            return true;
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return false;
    }

    /**
     *
     * @param oc
     * @return
     */
    public boolean insert_new_Openclose_value_tg(Openclose oc) {
        try {
            String ins = "INSERT INTO oc_change_tg VALUES (?,?,?,?,?,?,?,?,?)";
            PreparedStatement ps = this.c.prepareStatement(ins, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, oc.getFiliale());
            ps.setString(2, oc.getCod());
            ps.setString(3, oc.getValuta());
            ps.setString(4, oc.getKind());
            ps.setString(5, oc.getIp_taglio());
            ps.setString(6, oc.getIp_quantity());
            ps.setString(7, oc.getIp_value());
            ps.setString(8, oc.getData());
            ps.setString(9, oc.getFisico());
            ps.execute();
            String dtoper = getNow();
            String dt_val = formatStringtoStringDate(dtoper, patternsqldate, patternnormdate);
            insert_aggiornamenti_mod(new Aggiornamenti_mod(
                    generaId(50), "000", dt_val, "0",
                    "PS", ps.toString(), "service", dtoper));
            return true;
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return false;
    }

    /**
     *
     * @param oc
     * @return
     */
    public boolean insert_new_Openclose_value_nc(Openclose oc) {
        try {
            String ins = "INSERT INTO oc_nochange VALUES (?,?,?,?,?,?,?)";
            PreparedStatement ps = this.c.prepareStatement(ins, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, oc.getFiliale());
            ps.setString(2, oc.getCod());
            ps.setString(3, oc.getGruppo_nc());
            ps.setString(4, oc.getQuantity_user());
            ps.setString(5, oc.getQuantity_system());
            ps.setString(6, oc.getData());
            ps.setString(7, oc.getFisico());
            ps.execute();
            String dtoper = getNow();
            String dt_val = formatStringtoStringDate(dtoper, patternsqldate, patternnormdate);
            insert_aggiornamenti_mod(new Aggiornamenti_mod(
                    generaId(50), "000", dt_val, "0",
                    "PS", ps.toString(), "service", dtoper));
            return true;
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return false;
    }

    /**
     *
     * @param oc
     * @return
     */
    public boolean insert_new_Openclose_pos(Openclose oc) {
        try {
            String ins = "INSERT INTO oc_pos VALUES (?,?,?,?,?,?,?,?,?,?)";
            PreparedStatement ps = this.c.prepareStatement(ins, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, oc.getFiliale());
            ps.setString(2, oc.getCod());
            ps.setString(3, oc.getValuta());
            ps.setString(4, oc.getKind());
            ps.setString(5, oc.getCarta_credito());
            ps.setString(6, oc.getIp_quantity_op());
            ps.setString(7, oc.getIp_value_op());
            ps.setString(8, oc.getIp_quantity_sys());
            ps.setString(9, oc.getIp_value_sys());
            ps.setString(10, oc.getData());
            ps.execute();
            String dtoper = getNow();
            String dt_val = formatStringtoStringDate(dtoper, patternsqldate, patternnormdate);
            insert_aggiornamenti_mod(new Aggiornamenti_mod(
                    generaId(50), "000", dt_val, "0",
                    "PS", ps.toString(), "service", dtoper));
            return true;
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return false;
    }

    /**
     *
     * @param oc
     * @return
     */
    public boolean insert_new_Openclose_value_err(Openclose oc) {
        try {
            String ins = "INSERT INTO oc_errors VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
            PreparedStatement ps = this.c.prepareStatement(ins, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, oc.getFiliale());
            ps.setString(2, oc.getCod());
            ps.setString(3, oc.getTipo());
            ps.setString(4, oc.getValuta());
            ps.setString(5, oc.getKind());
            ps.setString(6, oc.getGruppo_nc());
            ps.setString(7, oc.getCarta_credito());
            ps.setString(8, oc.getNote());
            ps.setString(9, oc.getTotal_diff());
            ps.setString(10, oc.getData());
            ps.setString(11, oc.getRate());
            
            ps.setString(12, oc.getQuantity_user());
            ps.setString(13, oc.getIp_value_op());
            ps.setString(14, oc.getQuantity_system());
            ps.setString(15, oc.getIp_value_sys());
            
            ps.execute();
            String dtoper = getNow();
            String dt_val = formatStringtoStringDate(dtoper, patternsqldate, patternnormdate);
            insert_aggiornamenti_mod(new Aggiornamenti_mod(
                    generaId(50), "000", dt_val, "0",
                    "PS", ps.toString(), "service", dtoper));
            return true;
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return false;
    }

    /**
     *
     * @param cod_oc
     * @return
     */
    public boolean insert_realtime_open(String cod_oc) {
        try {
            String sql1 = "INSERT INTO real_oc_change (SELECT filiale,cod_oc,valuta,kind,value_op,num_kind_op,data FROM oc_change WHERE cod_oc = ?)";
            PreparedStatement ps1 = this.c.prepareStatement(sql1, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps1.setString(1, cod_oc);
            ps1.execute();
            String dtoper = getNow();
            String dt_val = formatStringtoStringDate(dtoper, patternsqldate, patternnormdate);
            insert_aggiornamenti_mod(new Aggiornamenti_mod(
                    generaId(50), "000", dt_val, "0",
                    "PS", ps1.toString(), "service", dtoper));
            
            String sql2 = "INSERT INTO real_oc_change_tg (SELECT filiale,cod_oc,valuta,kind,ip_taglio,ip_quantity,ip_value,data FROM oc_change_tg WHERE cod_oc = ?)";
            PreparedStatement ps2 = this.c.prepareStatement(sql2, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps2.setString(1, cod_oc);
            ps2.execute();
            dtoper = getNow();
            dt_val = formatStringtoStringDate(dtoper, patternsqldate, patternnormdate);
            insert_aggiornamenti_mod(new Aggiornamenti_mod(
                    generaId(50), "000", dt_val, "0",
                    "PS", ps2.toString(), "service", dtoper));
            
            String sql3 = "INSERT INTO real_oc_nochange (SELECT  filiale,cod_oc,gruppo_nc,quantity_user,data FROM oc_nochange WHERE cod_oc = ?)";
            PreparedStatement ps3 = this.c.prepareStatement(sql3, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps3.setString(1, cod_oc);
            ps3.execute();
            dtoper = getNow();
            dt_val = formatStringtoStringDate(dtoper, patternsqldate, patternnormdate);
            insert_aggiornamenti_mod(new Aggiornamenti_mod(
                    generaId(50), "000", dt_val, "0",
                    "PS", ps3.toString(), "service", dtoper));
            return true;
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return false;
    }

    /**
     *
     * @param cod_oc
     * @return
     */
    public boolean delete_realtime_close(String cod_oc) {
        try {
            String sql1 = "DELETE FROM real_oc_change WHERE cod_oc = ?";
            PreparedStatement ps1 = this.c.prepareStatement(sql1, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps1.setString(1, cod_oc);
            ps1.execute();
            String dtoper = getNow();
            String dt_val = formatStringtoStringDate(dtoper, patternsqldate, patternnormdate);
            insert_aggiornamenti_mod(new Aggiornamenti_mod(
                    generaId(50), "000", dt_val, "0",
                    "PS", ps1.toString(), "service", dtoper));
            
            String sql2 = "DELETE FROM real_oc_change_tg WHERE cod_oc = ?";
            PreparedStatement ps2 = this.c.prepareStatement(sql2, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps2.setString(1, cod_oc);
            ps2.execute();
            
            insert_aggiornamenti_mod(new Aggiornamenti_mod(
                    generaId(50), "000", dt_val, "0",
                    "PS", ps2.toString(), "service", dtoper));
            
            String sql3 = "DELETE FROM real_oc_nochange WHERE cod_oc = ?";
            PreparedStatement ps3 = this.c.prepareStatement(sql3, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps3.setString(1, cod_oc);
            ps3.execute();
            insert_aggiornamenti_mod(new Aggiornamenti_mod(
                    generaId(50), "000", dt_val, "0",
                    "PS", ps3.toString(), "service", dtoper));
            
            String sql4 = "DELETE FROM real_oc_pos WHERE cod_oc = ?";
            PreparedStatement ps4 = this.c.prepareStatement(sql4, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps4.setString(1, cod_oc);
            ps4.execute();
            insert_aggiornamenti_mod(new Aggiornamenti_mod(
                    generaId(50), "000", dt_val, "0",
                    "PS", ps4.toString(), "service", dtoper));
            
            return true;
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return false;
    }

    /**
     *
     * @param cod_oc
     * @return
     */
    public ArrayList<String[]> list_oc_pos(String cod_oc) {
        ArrayList<String[]> out = new ArrayList<>();
        try {
            String sql = "SELECT cod_oc,valuta,kind,carta_credito,ip_quantity,ip_value,filiale"
                    + " FROM real_oc_pos WHERE cod_oc = ? ORDER BY valuta,kind,carta_credito";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, cod_oc);
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                String[] o1 = {rs.getString(1), rs.getString(2), rs.getString(3), rs.getString(4), rs.getString(5), rs.getString(6)};
                out.add(o1);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @param cod_oc
     * @return
     */
    public ArrayList<String[]> list_oc_allpos(String cod_oc) {
        ArrayList<String[]> out = new ArrayList<>();
        try {
            String sql = "SELECT cod_oc,valuta,kind,carta_credito,ip_quantity_op,ip_value_op,ip_quantity_sys,ip_value_sys,filiale"
                    + " FROM oc_pos WHERE cod_oc = ? ORDER BY valuta,kind,carta_credito";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, cod_oc);
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                String[] o1 = {
                    rs.getString(1), rs.getString(2),
                    rs.getString(3), rs.getString(4),
                    rs.getString(5), rs.getString(6),
                    rs.getString(7), rs.getString(8), rs.getString(9)};
                out.add(o1);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @param cod
     * @return
     */
    public boolean delete_oc(String cod) {
        try {
            this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).execute("DELETE FROM oc_lista WHERE cod='" + cod + "'");
            String dtoper = getNow();
            String dt_val = formatStringtoStringDate(dtoper, patternsqldate, patternnormdate);
            insert_aggiornamenti_mod(new Aggiornamenti_mod(
                    generaId(50), "000", dt_val, "0",
                    "ST", "DELETE FROM oc_lista WHERE cod='" + cod + "'", "service", dtoper));
            
            this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).execute("DELETE FROM oc_change WHERE cod_oc='" + cod + "'");
            insert_aggiornamenti_mod(new Aggiornamenti_mod(
                    generaId(50), "000", dt_val, "0",
                    "ST", "DELETE FROM oc_change WHERE cod_oc='" + cod + "'", "service", dtoper));
            
            this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).execute("DELETE FROM oc_change_tg WHERE cod_oc='" + cod + "'");
            insert_aggiornamenti_mod(new Aggiornamenti_mod(
                    generaId(50), "000", dt_val, "0",
                    "ST", "DELETE FROM oc_change_tg WHERE cod_oc='" + cod + "'", "service", dtoper));
            
            this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).execute("DELETE FROM oc_nochange WHERE cod_oc='" + cod + "'");
            insert_aggiornamenti_mod(new Aggiornamenti_mod(
                    generaId(50), "000", dt_val, "0",
                    "ST", "DELETE FROM oc_nochange WHERE cod_oc='" + cod + "'", "service", dtoper));
            
            this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).execute("DELETE FROM oc_errors WHERE cod='" + cod + "'");
            insert_aggiornamenti_mod(new Aggiornamenti_mod(
                    generaId(50), "000", dt_val, "0",
                    "ST", "DELETE FROM oc_errors WHERE cod='" + cod + "'", "service", dtoper));
            
            this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).execute("DELETE FROM oc_pos WHERE cod_oc='" + cod + "'");
            insert_aggiornamenti_mod(new Aggiornamenti_mod(
                    generaId(50), "000", dt_val, "0",
                    "ST", "DELETE FROM oc_pos WHERE cod_oc='" + cod + "'", "service", dtoper));
            
            return true;
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return false;
    }

    /**
     *
     * @param cod
     * @return
     */
    public ArrayList<String[]> search_curr_till(String cod) {
        ArrayList<Till> array_till = list_till_status(null, null);
        Currency cu = getCurrency(cod);
        ArrayList<String[]> out = new ArrayList<>();
        for (int i = 0; i < array_till.size(); i++) {
            Till t1 = array_till.get(i);
            switch (t1.getTy_opcl()) {
                case "OPEN": {
                    boolean found = false;
                    ArrayList<String[]> array_list_oc_change = list_oc_change_real(t1.getId_opcl());
                    for (int j = 0; j < array_list_oc_change.size(); j++) {
                        if (array_list_oc_change.get(j)[1].equals("01")) {
                            if (array_list_oc_change.get(j)[2].equals(cod)) {
                                String[] ou = {cu.getCode() + " - " + cu.getDescrizione(), t1.getCod() + " - " + t1.getName(), t1.getTy_opcl(), array_list_oc_change.get(j)[4], array_list_oc_change.get(j)[3]};
                                out.add(ou);
                                found = true;
                                break;
                            }
                        }
                    }
                    if (!found) {
                        String[] ou = {cu.getCode() + " - " + cu.getDescrizione(), t1.getCod() + " - " + t1.getName(), t1.getTy_opcl(), "0", "0.00"};
                        out.add(ou);
                    }
                    break;
                }
                case "CLOSE": {
                    boolean found = false;
                    ArrayList<String[]> array_list_oc_change = list_oc_change(t1.getId_opcl());
                    for (int j = 0; j < array_list_oc_change.size(); j++) {
                        if (array_list_oc_change.get(j)[1].equals("01")) {
                            if (array_list_oc_change.get(j)[2].equals(cod)) {
                                String[] ou = {cu.getCode() + " - " + cu.getDescrizione(), t1.getCod() + " - " + t1.getName(), t1.getTy_opcl(), array_list_oc_change.get(j)[4], array_list_oc_change.get(j)[3]};
                                out.add(ou);
                                found = true;
                                break;
                            }
                        }
                    }
                    if (!found) {
                        String[] ou = {cu.getCode() + " - " + cu.getDescrizione(), t1.getCod() + " - " + t1.getName(), t1.getTy_opcl(), "0", "0.00"};
                        out.add(ou);
                    }
                    break;
                }
                default:
                    String[] ou = {cu.getCode() + " - " + cu.getDescrizione(), t1.getCod() + " - " + t1.getName(), t1.getTy_opcl(), "0", "0.00"};
                    out.add(ou);
                    break;
            }
        }
        return out;
    }

    /**
     *
     * @param filiali
     * @param status
     * @param valuta
     * @param d1
     * @param d2
     * @return
     */
    public ArrayList<Booking> query_prenot_list(String[] filiali, String status, String valuta, String d1, String d2) {
        ArrayList<Booking> out = new ArrayList<>();
        try {
            String sql = "SELECT * FROM forex_prenot WHERE stato = '" + status + "'";
            if (!filiali[0].equals("")) {
                String add;
                if (filiali.length == 1) {
                    add = " AND filiale = '" + filiali[0] + "'";
                } else {
                    add = " AND (";
                    for (String filiali1 : filiali) {
                        add = add + " filiale = '" + filiali1 + "' OR";
                    }
                    add = add.substring(0, add.length() - 2).trim();
                    add = add + ")";
                }
                sql = sql + add;
            }
            if (valuta != null) {
                sql = sql + " AND currency = '" + valuta + "'";
            }
            
            if (d1 == null || d1.equals("...")) {
                d1 = "";
            }
            if (!d1.equals("")) {
                d1 = d1.trim() + " 00:00:00";
                d1 = formatStringtoStringDate(d1, patternnormdate, patternsqldate);
                sql = sql + " AND dt_ritiro >= '" + d1 + "'";
            }
            if (d2 == null || d2.equals("...")) {
                d2 = "";
            }
            if (!d2.equals("")) {
                d2 = d2.trim() + " 00:00:00";
                d2 = formatStringtoStringDate(d2, patternnormdate, patternsqldate);
                sql = sql + " AND dt_ritiro <= '" + d2 + "'";
            }
            sql = sql + " ORDER BY dt_ritiro";
            ResultSet rs = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql);
            while (rs.next()) {
                Booking bo = new Booking();
                bo.setCod(rs.getString(1));
                bo.setCurrency(rs.getString(2));
                bo.setTotal(rs.getString(3));
                bo.setRate(rs.getString(4));
                bo.setFx_comm(rs.getString(5));
                bo.setSconti(rs.getString(6));
                bo.setFg_sconto_giovani(rs.getString(7));
                bo.setFg_coupon(rs.getString(8));
                bo.setFg_fxbb(rs.getString(9));
                bo.setFiliale(rs.getString(10));
                bo.setDt_ritiro(rs.getString(11));
                bo.setFg_ritiro_10(rs.getString(12));
                bo.setNote(rs.getString(13));
                bo.setCl_email(rs.getString(14));
                bo.setCl_nome(rs.getString(15));
                bo.setCl_cognome(rs.getString(16));
                bo.setCl_telefono(rs.getString(17));
                bo.setCl_tipologia(rs.getString(18));
                bo.setCl_aut(rs.getString(19));
                bo.setStato(rs.getString(20));
                bo.setCod_tr(rs.getString(21));
                bo.setDt_tr(rs.getString(22));
                bo.setCrv(rs.getString(23));
                bo.setBookid(rs.getString(24));
                bo.setEuro(rs.getString(25));
                bo.setDt(rs.getString(26));
                out.add(bo);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @param cod
     * @param total
     * @param dt_ritiro
     * @param branch
     * @param status
     * @return
     */
    public boolean edit_prenot(String cod, String total, String dt_ritiro, String branch, String status) {
        try {
            String upd = "UPDATE forex_prenot SET total = ?, dt_ritiro = ?, filiale = ?, stato = ? WHERE cod = ?";
            PreparedStatement ps = this.c.prepareStatement(upd, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, total);
            ps.setString(2, dt_ritiro);
            ps.setString(3, branch);
            ps.setString(4, status);
            ps.setString(5, cod);
            int x = ps.executeUpdate();
            if (x > 0) {
                String dtoper = getNow();
                String dt_val = formatStringtoStringDate(dtoper, patternsqldate, patternnormdate);
                insert_aggiornamenti_mod(new Aggiornamenti_mod(
                        generaId(50), "000", dt_val, "0",
                        "PS", ps.toString(), "service", dtoper));
            }
            return x > 0;
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return false;
    }

    /**
     *
     * @param cod
     * @param status
     * @return
     */
    public boolean edit_prenot(String cod, String status) {
        try {
            String upd = "UPDATE forex_prenot SET stato = ? WHERE cod = ?";
            PreparedStatement ps = this.c.prepareStatement(upd, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, status);
            ps.setString(2, cod);
            int x = ps.executeUpdate();
            if (x > 0) {
                String dtoper = getNow();
                String dt_val = formatStringtoStringDate(dtoper, patternsqldate, patternnormdate);
                insert_aggiornamenti_mod(new Aggiornamenti_mod(
                        generaId(50), "000", dt_val, "0",
                        "PS", ps.toString(), "service", dtoper));
            }
            return x > 0;
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return false;
    }
    
    private ArrayList<String[]> query_prenot_listtotal(String filiale, String valuta) {
        ArrayList<String[]> list = new ArrayList<>();
        try {
            String sql = "SELECT filiale,currency,dt_ritiro,sum(total) FROM forex_prenot WHERE filiale='" + filiale + "' AND currency = '" + valuta + "' AND stato='1' group by currency,filiale,dt_ritiro";
            ResultSet rs = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql);
            while (rs.next()) {
                String[] o = {rs.getString(1), rs.getString(2), rs.getString(3), rs.getString(4)};
                list.add(o);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return list;
    }
    
    private ArrayList<String[]> query_prenot_listvalue() {
        ArrayList<String[]> list = new ArrayList<>();
        try {
            String sql = "SELECT filiale,currency FROM forex_prenot where stato='1' group by filiale,currency";
            ResultSet rs = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql);
            while (rs.next()) {
                String[] o = {rs.getString(1), rs.getString(2)};
                list.add(o);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return list;
    }
    
    private ArrayList<String[]> search_curr_till(String cod, String filiale) {
        ArrayList<Till> array_till = list_till_status(null, filiale);
        Currency cu = getCurrency(cod);
        ArrayList<String[]> out = new ArrayList<>();
        for (int i = 0; i < array_till.size(); i++) {
            Till t1 = array_till.get(i);
            switch (t1.getTy_opcl()) {
                case "OPEN": {
                    boolean found = false;
                    ArrayList<String[]> array_list_oc_change = list_oc_change_real(t1.getId_opcl());
                    for (int j = 0; j < array_list_oc_change.size(); j++) {
                        if (array_list_oc_change.get(j)[1].equals("01")) {
                            if (array_list_oc_change.get(j)[2].equals(cod)) {
                                String[] ou = {cu.getCode() + " - " + cu.getDescrizione(), t1.getCod() + " - " + t1.getName(), t1.getTy_opcl(), array_list_oc_change.get(j)[4], array_list_oc_change.get(j)[3]};
                                out.add(ou);
                                found = true;
                                break;
                            }
                        }
                    }
                    if (!found) {
                        String[] ou = {cu.getCode() + " - " + cu.getDescrizione(), t1.getCod() + " - " + t1.getName(), t1.getTy_opcl(), "0", "0.00"};
                        out.add(ou);
                    }
                    break;
                }
                case "CLOSE": {
                    boolean found = false;
                    ArrayList<String[]> array_list_oc_change = list_oc_change(t1.getId_opcl());
                    for (int j = 0; j < array_list_oc_change.size(); j++) {
                        if (array_list_oc_change.get(j)[1].equals("01")) {
                            if (array_list_oc_change.get(j)[2].equals(cod)) {
                                String[] ou = {cu.getCode() + " - " + cu.getDescrizione(), t1.getCod() + " - " + t1.getName(), t1.getTy_opcl(), array_list_oc_change.get(j)[4], array_list_oc_change.get(j)[3]};
                                out.add(ou);
                                found = true;
                                break;
                            }
                        }
                    }
                    if (!found) {
                        String[] ou = {cu.getCode() + " - " + cu.getDescrizione(), t1.getCod() + " - " + t1.getName(), t1.getTy_opcl(), "0", "0.00"};
                        out.add(ou);
                    }
                    break;
                }
                default:
                    String[] ou = {cu.getCode() + " - " + cu.getDescrizione(), t1.getCod() + " - " + t1.getName(), t1.getTy_opcl(), "0", "0.00"};
                    out.add(ou);
                    break;
            }
        }
        return out;
    }

    /**
     *
     * @param currency
     * @param filiale
     * @return
     */
    public double search_(String currency, String filiale) {
        
        ArrayList<String[]> list = search_curr_till(currency, filiale);
        double total = 0.00;
        for (int i = 0; i < list.size(); i++) {
            double d = fd(list.get(i)[4]);
            total = total + d;
        }
        
        return total;
    }

    /**
     *
     * @return
     */
    public ArrayList<String[]> valuePrenot() {
        ArrayList<String[]> out = new ArrayList<>();
        ArrayList<String[]> partenza = query_prenot_listvalue();
        ArrayList<String[]> valori = new ArrayList<>();
        for (int i = 0; i < partenza.size(); i++) {
            double totini = search_(partenza.get(i)[1], partenza.get(i)[0]);
            String[] v1 = {partenza.get(i)[0], partenza.get(i)[1], totini + ""};
            valori.add(v1);
        }
        for (int i = 0; i < valori.size(); i++) {
            ArrayList<String[]> bo = query_prenot_listtotal(valori.get(i)[0], valori.get(i)[1]);
            double total = fd(valori.get(i)[2]);
            for (int j = 0; j < bo.size(); j++) {
                String[] b1 = bo.get(j);
                if (fd(b1[3]) < total) {
                    total -= fd(b1[3]);
                    String[] valout = {b1[0], b1[1], b1[2], b1[3], "OK"};
                    out.add(valout);
                } else {
                    String[] valout = {b1[0], b1[1], b1[2], b1[3], "KO"};
                    out.add(valout);
                }
            }
        }
        return out;
    }

    /**
     *
     * @param cod_tr
     * @return
     */
    public Ch_transaction_refund get_refund_trans(String cod_tr) {
        try {
            String sql = "SELECT * FROM ch_transaction_refund WHERE cod_tr = ?";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, cod_tr);
            ResultSet rs = ps.executeQuery();
            if (rs.next()) {
                Ch_transaction_refund ref = new Ch_transaction_refund();
                ref.setCod(rs.getString(1));
                ref.setCod_tr(rs.getString(2));
                ref.setFrom(rs.getString(3));
                ref.setMethod(rs.getString(4));
                ref.setBranch_cod(rs.getString(5));
                ref.setType(rs.getString(6));
                ref.setValue(rs.getString(7));
                ref.setCod_usaegetta(rs.getString(8));
                ref.setStatus(rs.getString(9));
                ref.setUser_refund(rs.getString(10));
                ref.setDt_refund(rs.getString(11));
                ref.setIdopentill_refund(rs.getString(12));
                ref.setTimestamp(rs.getString(13));
                
                return ref;
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return null;
    }

    /**
     *
     * @param ref
     * @param update
     * @return
     */
    public boolean edit_refund_trans(Ch_transaction_refund ref, boolean update) {
        try {
            if (update) {
                String upd = "UPDATE ch_transaction_refund SET fromref = ?,method = ?,branch_cod = ?,type = ?,value = ?,"
                        + "cod_usaegetta = ?,status = ?,user_refund = ?,dt_refund = ?,idopentill_refund = ?,timestamp = ? WHERE cod = ?";
                PreparedStatement ps = this.c.prepareStatement(upd, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
                ps.setString(1, ref.getFrom());
                ps.setString(2, ref.getMethod());
                ps.setString(3, ref.getBranch_cod());
                ps.setString(4, ref.getType());
                ps.setString(5, ref.getValue());
                ps.setString(6, ref.getCod_usaegetta());
                ps.setString(7, ref.getStatus());
                ps.setString(8, ref.getUser_refund());
                ps.setString(9, ref.getDt_refund());
                ps.setString(10, ref.getIdopentill_refund());
                ps.setString(11, ref.getTimestamp());
                ps.setString(12, ref.getCod());
                int x = ps.executeUpdate();
                String dtoper = getNow();
                String dt_val = formatStringtoStringDate(dtoper, patternsqldate, patternnormdate);
                
                if (filiale.equals(ref.getBranch_cod())) {
                    insert_aggiornamenti_mod(new Aggiornamenti_mod(
                            generaId(50), "000", dt_val, "0",
                            "PS", ps.toString(), ref.getUser_refund(), dtoper));
                    
                } else {
                    insert_aggiornamenti_mod(new Aggiornamenti_mod(
                            generaId(50), ref.getBranch_cod(), dt_val, "0",
                            "PS", ps.toString(), ref.getUser_refund(), dtoper));
                }
                
                return x > 0;
            } else {
                String ins = "INSERT INTO ch_transaction_refund VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?)";
                PreparedStatement ps = this.c.prepareStatement(ins, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
                ps.setString(1, ref.getCod());
                ps.setString(2, ref.getCod_tr());
                ps.setString(3, ref.getFrom());
                ps.setString(4, ref.getMethod());
                ps.setString(5, ref.getBranch_cod());
                ps.setString(6, ref.getType());
                ps.setString(7, ref.getValue());
                ps.setString(8, ref.getCod_usaegetta());
                ps.setString(9, ref.getStatus());
                ps.setString(10, ref.getUser_refund());
                ps.setString(11, ref.getDt_refund());
                ps.setString(12, ref.getIdopentill_refund());
                ps.setString(13, ref.getTimestamp());
                ps.execute();
                String dtoper = getNow();
                String dt_val = formatStringtoStringDate(dtoper, patternsqldate, patternnormdate);
                if (filiale.equals(ref.getBranch_cod())) {
                    insert_aggiornamenti_mod(new Aggiornamenti_mod(
                            generaId(50), "000", dt_val, "0",
                            "PS", ps.toString(), ref.getUser_refund(), dtoper));
                    
                } else {
                    insert_aggiornamenti_mod(new Aggiornamenti_mod(
                            generaId(50), ref.getBranch_cod(), dt_val, "0",
                            "PS", ps.toString(), ref.getUser_refund(), dtoper));
                }
                return true;
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return false;
    }

    /**
     *
     * @param cod
     * @param status
     * @param filialetrans
     * @return
     */
    public boolean update_transaction_refund(String cod, String status, String filialetrans) {
        try {
            String upd = "UPDATE ch_transaction SET refund = ? WHERE cod = ?";
            PreparedStatement ps = this.c.prepareStatement(upd, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, status);
            ps.setString(2, cod);
            int x = ps.executeUpdate();
            String dtoper = getNow();
            String dt_val = formatStringtoStringDate(dtoper, patternsqldate, patternnormdate);
            
            if (filiale.equals(filialetrans)) {
                insert_aggiornamenti_mod(new Aggiornamenti_mod(
                        generaId(50), "000", dt_val, "0",
                        "PS", ps.toString(), "service", dtoper));
            } else {
                insert_aggiornamenti_mod(new Aggiornamenti_mod(
                        generaId(50), filialetrans, dt_val, "0",
                        "PS", ps.toString(), "service", dtoper));
            }
            
            return x > 0;
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return false;
    }

    /**
     *
     * @param idref
     * @param val
     * @param idopentill
     * @param codusagetta
     * @param timestamp
     * @param user_refund
     * @param status
     * @return
     */
    public boolean execute_transaction_refund(String idref, String val, String idopentill, String codusagetta, String timestamp, String user_refund, String status) {
        try {
            
            String upd = "UPDATE ch_transaction_refund "
                    + "SET value = ?, idopentill_refund = ?, cod_usaegetta = ?, dt_refund = ?, user_refund = ?, status = ? WHERE cod = ?";
            PreparedStatement ps = this.c.prepareStatement(upd, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, val);
            ps.setString(2, idopentill);
            ps.setString(3, codusagetta);
            ps.setString(4, timestamp);
            ps.setString(5, user_refund);
            ps.setString(6, status);
            ps.setString(7, idref);
            int x = ps.executeUpdate();
            if (x > 0) {
                String dtoper = getNow();
                String dt_val = formatStringtoStringDate(dtoper, patternsqldate, patternnormdate);
                insert_aggiornamenti_mod(new Aggiornamenti_mod(
                        generaId(50), "000", dt_val, "0",
                        "PS", ps.toString(), "service", dtoper));
            }
            return x > 0;
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return false;
    }

    /**
     *
     * @param status
     * @return
     */
    public ArrayList<Codici_sblocco> list_codici_sblocco(String status) {
        ArrayList<Codici_sblocco> li = new ArrayList<>();
        try {
            String sql = "SELECT * FROM codici_sblocco";
            if (status != null) {
                sql = sql + " WHERE fg_stato = '" + status + "'";
            }
            sql = sql + " ORDER BY dt_gen";
            ResultSet rs = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql);
            while (rs.next()) {
                li.add(new Codici_sblocco(leftPad(rs.getString(1), 10, "0"), rs.getString(2),
                        rs.getString(3), rs.getString(4), rs.getString(5), rs.getString(6), rs.getString(7)));
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return li;
    }

    /**
     *
     * @return
     */
    public ArrayList<Codici_sblocco_file> list_codici_sblocco_file() {
        ArrayList<Codici_sblocco_file> li = new ArrayList<>();
        try {
            String sql = "SELECT * FROM codici_sblocco_file ORDER BY dt_oper desc ";
            ResultSet rs = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql);
            while (rs.next()) {
                li.add(new Codici_sblocco_file(leftPad(rs.getString(1), 10, "0"), rs.getString(2),
                        rs.getString(3), rs.getString(4), rs.getString(5), rs.getString(6), rs.getString(7), rs.getString(8)));
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return li;
    }

    /**
     *
     * @param cod
     * @return
     */
    public boolean codici_sblocco_isEnabled(String cod) {
        try {
            String sql = "SELECT * FROM codici_sblocco WHERE fg_stato = ? AND BINARY codice = ?";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, "E");
            ps.setString(2, cod);
            return ps.executeQuery().next();
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return false;
    }

    /**
     *
     * @param id
     * @param field
     * @return
     */
    public String view_file_codici_sblocco(String id, String field) {
        try {
            String sql = "SELECT " + field + " FROM codici_sblocco_file WHERE id = ?";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, id);
            ResultSet rs = ps.executeQuery();
            if (rs.next()) {
                return rs.getString(1);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return null;
    }

    /**
     *
     * @param num
     * @param username
     * @return
     */
    public String create_codici_sblocco(int num, String username) {
        ArrayList<String> li = new ArrayList<>();
        for (int i = 0; i < num; i++) {
            try {
                String cod = randomAlphabetic(3).toUpperCase() + randomNumeric(7);
                
                String sql = "INSERT INTO codici_sblocco (codice) VALUES ('" + cod + "')";
                this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).execute(sql);
                
                insertValue_agg_NOCENTRAL(null, sql, null, null, username);
                
                li.add(cod);
            } catch (SQLException ex) {
                if (ex.getMessage().contains("Duplicate")) {
                    i--;
                } else {
                    insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
                }
            }
        }
        
        String out = "";
        for (int i = 0; i < li.size(); i++) {
            out = out + li.get(i) + ";";
        }
        return out;
    }

    /**
     *
     * @param csf
     * @return
     */
    public boolean insert_file_codici_sblocco(Codici_sblocco_file csf) {
        try {
            String cod = "0000000001";
            String sql = "SELECT LPAD(id+1, 10, '0') FROM codici_sblocco_file ORDER BY dt_oper DESC LIMIT 1";
            ResultSet rs = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql);
            if (rs.next()) {
                cod = leftPad(rs.getString(1), 10, "0");
            }
            String ins = "INSERT INTO codici_sblocco_file (user,dest,numcod,pdf,excel,listcod,id) values (?,?,?,?,?,?,?)";
            PreparedStatement ps = this.c.prepareStatement(ins, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, csf.getUser());
            ps.setString(2, csf.getDest());
            ps.setString(3, csf.getNumcod());
            ps.setString(4, csf.getPdf());
            ps.setString(5, csf.getExcel());
            ps.setString(6, csf.getListcod());
            ps.setString(7, cod);
            ps.execute();
            insertValue_agg_NOCENTRAL(ps, null, null, null, csf.getUser());
            return true;
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return false;
    }

    /**
     *
     * @param dt_utilizzo
     * @param ty_util
     * @param user
     * @param cod_tr
     * @return
     */
    public boolean use_codice_sblocco_NEW(String dt_utilizzo, String ty_util, String user, String cod_tr, String motivazione) {
        try {
            String ins = "INSERT INTO codici_sblocco VALUES (?,?,?,?,?,?,?)";
            PreparedStatement ps = this.c.prepareStatement(ins, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, "UNLOCK###" + motivazione);
            ps.setString(2, dt_utilizzo);
            ps.setString(3, "U");
            ps.setString(4, user);
            ps.setString(5, dt_utilizzo);
            ps.setString(6, ty_util);
            ps.setString(7, cod_tr);
            insertValue_agg(ps, null, null, null, "service");
            return true;
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return false;
    }

    /**
     *
     * @param cod
     * @param dt_utilizzo
     * @param ty_util
     * @param user
     * @param cod_tr
     * @return
     */
    public boolean use_codice_sblocco(String cod, String dt_utilizzo, String ty_util, String user, String cod_tr) {
        try {
            String upd = "UPDATE codici_sblocco SET fg_stato = ?, dt_utilizzo = ?, ty_util = ?, user_gen = ?, cod_tr = ? WHERE codice = ?";
            PreparedStatement ps = this.c.prepareStatement(upd, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, "U");
            ps.setString(2, dt_utilizzo);
            ps.setString(3, ty_util);
            ps.setString(4, user);
            ps.setString(5, cod_tr);
            ps.setString(6, cod);
            int x = ps.executeUpdate();
            if (x > 0) {
                insertValue_agg(ps, null, null, null, "service");
            }
            return x > 0;
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return false;
    }

    /**
     *
     * @param codtr
     * @param codcl
     * @return
     */
    public String query_Client_transactionCN(String codtr, String codcl) {
        try {
            String sql = "SELECT cognome,nome FROM ch_transaction_client WHERE codtr = ?";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, codtr);
            ResultSet rs = ps.executeQuery();
            if (rs.next()) {
                return rs.getString("cognome") + " " + rs.getString("nome");
            } else {
                sql = "SELECT cognome,nome FROM ch_transaction_client WHERE codcl = ? ORDER BY timestamp DESC LIMIT 1";
                ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
                ps.setString(1, codcl);
                rs = ps.executeQuery();
                if (rs.next()) {
                    return rs.getString("cognome") + " " + rs.getString("nome");
                }
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return query_ClientCN(codcl);
    }

    /**
     *
     * @param codtr
     * @param codcl
     * @return
     */
    public Client query_Client_transaction(String codtr, String codcl) {
        try {
            String sql = "SELECT * FROM ch_transaction_client WHERE codtr = ?";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, codtr);
            ResultSet rs = ps.executeQuery();
            if (rs.next()) {
                Client bl = new Client();
                bl.setCode(rs.getString("codcl"));
                bl.setCognome(rs.getString("cognome"));
                bl.setNome(rs.getString("nome"));
                bl.setSesso(rs.getString("sesso"));
                bl.setCodfisc(rs.getString("codfisc"));
                bl.setNazione(rs.getString("nazione"));
                bl.setCitta(rs.getString("citta"));
                bl.setIndirizzo(visualizzaStringaMySQL(rs.getString("indirizzo")));
                bl.setCap(rs.getString("cap"));
                bl.setProvincia(rs.getString("provincia"));
                bl.setCitta_nascita(rs.getString("citta_nascita"));
                bl.setProvincia_nascita(rs.getString("provincia_nascita"));
                bl.setNazione_nascita(rs.getString("nazione_nascita"));
                bl.setDt_nascita(rs.getString("dt_nascita"));
                bl.setTipo_documento(rs.getString("tipo_documento"));
                bl.setNumero_documento(rs.getString("numero_documento"));
                bl.setDt_rilascio_documento(rs.getString("dt_rilascio_documento"));
                bl.setDt_scadenza_documento(rs.getString("dt_scadenza_documento"));
                bl.setRilasciato_da_documento(rs.getString("rilasciato_da_documento"));
                bl.setLuogo_rilascio_documento(rs.getString("luogo_rilascio_documento"));
                bl.setEmail(rs.getString("email"));
                bl.setTelefono(rs.getString("telefono"));
                bl.setPerc_buy(rs.getString("perc_buy"));
                bl.setPerc_sell(rs.getString("perc_sell"));
                bl.setTimestamp(rs.getString("timestamp"));
                bl.setPep(rs.getString("pep"));
                if (!is_IT) {
                    Client_CZ c1 = query_Client_NOITA(rs.getString("codtr"), rs.getString("codcl"));
                    bl.setRepceca(c1);
                }
                return bl;
            } else {
                sql = "SELECT * FROM ch_transaction_client WHERE codcl = ? ORDER BY timestamp DESC LIMIT 1";
                ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
                ps.setString(1, codcl);
                rs = ps.executeQuery();
                if (rs.next()) {
                    Client bl = new Client();
                    bl.setCode(rs.getString("codcl"));
                    bl.setCognome(rs.getString("cognome"));
                    bl.setNome(rs.getString("nome"));
                    bl.setSesso(rs.getString("sesso"));
                    bl.setCodfisc(rs.getString("codfisc"));
                    bl.setNazione(rs.getString("nazione"));
                    bl.setCitta(rs.getString("citta"));
                    bl.setIndirizzo(visualizzaStringaMySQL(rs.getString("indirizzo")));
                    bl.setCap(rs.getString("cap"));
                    bl.setProvincia(rs.getString("provincia"));
                    bl.setCitta_nascita(rs.getString("citta_nascita"));
                    bl.setProvincia_nascita(rs.getString("provincia_nascita"));
                    bl.setNazione_nascita(rs.getString("nazione_nascita"));
                    bl.setDt_nascita(rs.getString("dt_nascita"));
                    bl.setTipo_documento(rs.getString("tipo_documento"));
                    bl.setNumero_documento(rs.getString("numero_documento"));
                    bl.setDt_rilascio_documento(rs.getString("dt_rilascio_documento"));
                    bl.setDt_scadenza_documento(rs.getString("dt_scadenza_documento"));
                    bl.setRilasciato_da_documento(rs.getString("rilasciato_da_documento"));
                    bl.setLuogo_rilascio_documento(rs.getString("luogo_rilascio_documento"));
                    bl.setEmail(rs.getString("email"));
                    bl.setTelefono(rs.getString("telefono"));
                    bl.setPerc_buy(rs.getString("perc_buy"));
                    bl.setPerc_sell(rs.getString("perc_sell"));
                    bl.setTimestamp(rs.getString("timestamp"));
                    bl.setPep(rs.getString("pep"));
                    if (!is_IT) {
                        Client_CZ c1 = query_Client_NOITA(rs.getString("codtr"), rs.getString("codcl"));
                        bl.setRepceca(c1);
                    }
                    return bl;
                }
            }
            
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return query_Client(codcl);
    }

    /**
     *
     * @param cod
     * @return
     */
    public String query_ClientCN(String cod) {
        try {
            String sql = "SELECT cognome,nome FROM ch_transaction_client WHERE codcl = ? ORDER BY timestamp DESC LIMIT 1";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, cod);
            ResultSet rs = ps.executeQuery();
            if (rs.next()) {
                return rs.getString("cognome") + " " + rs.getString("nome");
            } else {
                sql = "SELECT cognome,nome FROM anagrafica_ru where ndg = ? limit 1";
                PreparedStatement ps1 = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
                ps1.setString(1, cod);
                ResultSet rs1 = ps1.executeQuery();
                if (rs1.next()) {
                    return rs1.getString("cognome") + " " + rs1.getString("nome");
                }
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return "";
    }

    /**
     *
     * @param codtr
     * @param codcl
     * @return
     */
    public Client_CZ query_Client_NOITA(String codtr, String codcl) {
        try {
            if (!codcl.equals("---")) {
                if (!is_IT) {
                    String table = "";
                    if (is_CZ) {
                        table = "client_cz";
                    }
                    if (is_UK) {
                        table = "client_uk";
                    }
                    String sql = "SELECT * FROM " + table + " WHERE cod_tr = ?";
                    PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
                    ps.setString(1, codtr);
                    ResultSet rs = ps.executeQuery();
                    if (rs.next()) {
                        return new Client_CZ(rs.getString(1), rs.getString(2), rs.getString(3), rs.getString(4), rs.getString(5), rs.getString(6),
                                rs.getString(7), rs.getString(8), rs.getString(9), rs.getString(10),
                                rs.getString(11), rs.getString(13),
                                rs.getString(14), rs.getString(15));
                    }
                }
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return null;
    }

    /**
     *
     * @param cod
     * @return
     */
    public Client query_Client(String cod) {
        try {
            String sql = "SELECT * FROM ch_transaction_client WHERE codcl = ? ORDER BY timestamp DESC LIMIT 1";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, cod);
            ResultSet rs = ps.executeQuery();
            if (rs.next()) {
                Client bl = new Client();
                bl.setCode(rs.getString("codcl"));
                bl.setCognome(rs.getString("cognome"));
                bl.setNome(rs.getString("nome"));
                bl.setSesso(rs.getString("sesso"));
                bl.setCodfisc(rs.getString("codfisc"));
                bl.setNazione(rs.getString("nazione"));
                bl.setCitta(rs.getString("citta"));
                bl.setIndirizzo(visualizzaStringaMySQL(rs.getString("indirizzo")));
                bl.setCap(rs.getString("cap"));
                bl.setProvincia(rs.getString("provincia"));
                bl.setCitta_nascita(rs.getString("citta_nascita"));
                bl.setProvincia_nascita(rs.getString("provincia_nascita"));
                bl.setNazione_nascita(rs.getString("nazione_nascita"));
                bl.setDt_nascita(rs.getString("dt_nascita"));
                bl.setTipo_documento(rs.getString("tipo_documento"));
                bl.setNumero_documento(rs.getString("numero_documento"));
                bl.setDt_rilascio_documento(rs.getString("dt_rilascio_documento"));
                bl.setDt_scadenza_documento(rs.getString("dt_scadenza_documento"));
                bl.setRilasciato_da_documento(rs.getString("rilasciato_da_documento"));
                bl.setLuogo_rilascio_documento(rs.getString("luogo_rilascio_documento"));
                bl.setEmail(rs.getString("email"));
                bl.setTelefono(rs.getString("telefono"));
                bl.setPerc_buy(rs.getString("perc_buy"));
                bl.setPerc_sell(rs.getString("perc_sell"));
                bl.setTimestamp(rs.getString("timestamp"));
                bl.setPep(rs.getString("pep"));
                return bl;
            } else {
                sql = "SELECT * FROM anagrafica_ru where ndg = ? limit 1";
                PreparedStatement ps1 = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
                ps1.setString(1, cod);
                ResultSet rs1 = ps1.executeQuery();
                if (rs1.next()) {
                    Client bl = new Client();
                    bl.setCode(rs1.getString("ndg"));
                    bl.setCognome(rs1.getString("cognome"));
                    bl.setNome(rs1.getString("nome"));
                    bl.setSesso(rs1.getString("sesso"));
                    bl.setCodfisc(rs1.getString("codice_fiscale"));
                    bl.setNazione(rs1.getString("paese_estero_residenza"));
                    if (rs1.getString("citta").trim().equals("")) {
                        bl.setCitta(rs1.getString("cab_comune"));
                    } else {
                        bl.setCitta(rs1.getString("citta"));
                    }
                    bl.setIndirizzo(visualizzaStringaMySQL(rs1.getString("indirizzo")));
                    bl.setCap(rs1.getString("cap"));
                    bl.setProvincia(rs1.getString("provincia"));
                    bl.setCitta_nascita(rs1.getString("comune_nascita"));
                    bl.setProvincia_nascita(rs1.getString("cod_provincia_nascita"));
                    bl.setNazione_nascita(rs1.getString("paese_estero_residenza"));
                    bl.setDt_nascita(formatStringtoStringDate(rs1.getString("dt_nascita"), patternsql, patternnormdate_filter));
                    bl.setTipo_documento(rs1.getString("tipo_documento"));
                    bl.setNumero_documento(rs1.getString("numero_documento"));
                    bl.setDt_rilascio_documento(formatStringtoStringDate(rs1.getString("dt_rilascio"), patternsql, patternnormdate_filter));
                    bl.setDt_scadenza_documento(formatStringtoStringDate(rs1.getString("dt_scadenza"), patternsql, patternnormdate_filter));
                    bl.setRilasciato_da_documento(rs1.getString("autorita_rilascio"));
                    bl.setLuogo_rilascio_documento(rs1.getString("luogo_rilascio_documento"));
                    bl.setEmail("");
                    bl.setTelefono("");
                    bl.setPerc_buy("-");
                    bl.setPerc_sell("-");
                    bl.setTimestamp("");
                    bl.setPep("NO");
                    return bl;
                }
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return new Client();
    }

    /**
     *
     * @param co1
     * @param na1
     * @param nz1
     * @param dn1
     * @return
     */
    public List<String> cod_Client_STUK(String co1, String na1, String nz1, String dn1) {
        List<String> out = new ArrayList<>();
        try {
            String sql = "SELECT codcl FROM ch_transaction_client where cognome = ? AND nome = ? AND nazione_nascita = ? AND dt_nascita = ?";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, co1);
            ps.setString(2, na1);
            ps.setString(3, nz1);
            ps.setString(4, dn1);
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                out.add(rs.getString("codcl"));
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @param co1
     * @param na1
     * @param nz1
     * @param dn1
     * @return
     */
    public Client query_Client_STRANIERO(String co1, String na1, String nz1, String dn1) {
        try {
            String sql = "SELECT * FROM ch_transaction_client where cognome = ? AND nome = ? AND nazione_nascita = ? AND dt_nascita = ? "
                    + "ORDER BY TIMESTAMP DESC LIMIT 1";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, co1);
            ps.setString(2, na1);
            ps.setString(3, nz1);
            ps.setString(4, dn1);
            ResultSet rs = ps.executeQuery();
            if (rs.next()) {
                Client bl = new Client();
                bl.setCode(rs.getString("codcl"));
                bl.setCognome(rs.getString("cognome"));
                bl.setNome(rs.getString("nome"));
                bl.setSesso(rs.getString("sesso"));
                bl.setCodfisc(rs.getString("codfisc"));
                bl.setNazione(rs.getString("nazione"));
                bl.setCitta(rs.getString("citta"));
                bl.setIndirizzo(visualizzaStringaMySQL(rs.getString("indirizzo")));
                bl.setCap(rs.getString("cap"));
                bl.setProvincia(rs.getString("provincia"));
                bl.setCitta_nascita(rs.getString("citta_nascita"));
                bl.setProvincia_nascita(rs.getString("provincia_nascita"));
                bl.setNazione_nascita(rs.getString("nazione_nascita"));
                bl.setDt_nascita(rs.getString("dt_nascita"));
                bl.setTipo_documento(rs.getString("tipo_documento"));
                bl.setNumero_documento(rs.getString("numero_documento"));
                bl.setDt_rilascio_documento(rs.getString("dt_rilascio_documento"));
                bl.setDt_scadenza_documento(rs.getString("dt_scadenza_documento"));
                bl.setRilasciato_da_documento(rs.getString("rilasciato_da_documento"));
                bl.setLuogo_rilascio_documento(rs.getString("luogo_rilascio_documento"));
                bl.setEmail(rs.getString("email"));
                bl.setTelefono(rs.getString("telefono"));
                bl.setPerc_buy(rs.getString("perc_buy"));
                bl.setPerc_sell(rs.getString("perc_sell"));
                bl.setTimestamp(rs.getString("timestamp"));
                bl.setPep(rs.getString("pep"));
                if (!is_IT) {
                    Client_CZ c1 = query_Client_NOITA(rs.getString("codtr"), rs.getString("codcl"));
                    bl.setRepceca(c1);
                }
                return bl;
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return null;
    }

    /**
     *
     * @param cod
     * @return
     */
    public Client query_Client_cf(String cod) {
        try {
            String sql = "SELECT * FROM ch_transaction_client WHERE codfisc = ?";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, cod);
            ResultSet rs = ps.executeQuery();
            if (rs.next()) {
                Client bl = new Client();
                bl.setCode(rs.getString("codcl"));
                bl.setCognome(rs.getString("cognome"));
                bl.setNome(rs.getString("nome"));
                bl.setSesso(rs.getString("sesso"));
                bl.setCodfisc(rs.getString("codfisc"));
                bl.setNazione(rs.getString("nazione"));
                bl.setCitta(rs.getString("citta"));
                bl.setIndirizzo(visualizzaStringaMySQL(rs.getString("indirizzo")));
                bl.setCap(rs.getString("cap"));
                bl.setProvincia(rs.getString("provincia"));
                bl.setCitta_nascita(rs.getString("citta_nascita"));
                bl.setProvincia_nascita(rs.getString("provincia_nascita"));
                bl.setNazione_nascita(rs.getString("nazione_nascita"));
                bl.setDt_nascita(rs.getString("dt_nascita"));
                bl.setTipo_documento(rs.getString("tipo_documento"));
                bl.setNumero_documento(rs.getString("numero_documento"));
                bl.setDt_rilascio_documento(rs.getString("dt_rilascio_documento"));
                bl.setDt_scadenza_documento(rs.getString("dt_scadenza_documento"));
                bl.setRilasciato_da_documento(rs.getString("rilasciato_da_documento"));
                bl.setLuogo_rilascio_documento(rs.getString("luogo_rilascio_documento"));
                bl.setEmail(rs.getString("email"));
                bl.setTelefono(rs.getString("telefono"));
                bl.setPerc_buy(rs.getString("perc_buy"));
                bl.setPerc_sell(rs.getString("perc_sell"));
                bl.setTimestamp(rs.getString("timestamp"));
                bl.setPep(rs.getString("pep"));
                
                return bl;
            } else {
                sql = "SELECT * FROM anagrafica_ru where codice_fiscale = ? limit 1";
                PreparedStatement ps1 = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
                ps1.setString(1, cod);
                ResultSet rs1 = ps1.executeQuery();
                if (rs1.next()) {
                    Client bl = new Client();
                    bl.setCode(rs1.getString("ndg"));
                    bl.setCognome(rs1.getString("cognome"));
                    bl.setNome(rs1.getString("nome"));
                    bl.setSesso(rs1.getString("sesso"));
                    bl.setCodfisc(rs1.getString("codice_fiscale"));
                    bl.setNazione(rs1.getString("paese_estero_residenza"));
                    bl.setCitta(rs1.getString("citta"));
                    bl.setIndirizzo(visualizzaStringaMySQL(rs1.getString("indirizzo")));
                    bl.setCap(rs1.getString("cap"));
                    bl.setProvincia(rs1.getString("provincia"));
                    bl.setCitta_nascita(rs1.getString("comune_nascita"));
                    bl.setProvincia_nascita(rs1.getString("cod_provincia_nascita"));
                    bl.setNazione_nascita(rs1.getString("paese_estero_residenza"));
                    bl.setDt_nascita(formatStringtoStringDate(rs1.getString("dt_nascita"), patternsql, patternnormdate_filter));
                    bl.setTipo_documento(rs1.getString("tipo_documento"));
                    bl.setNumero_documento(rs1.getString("numero_documento"));
                    bl.setDt_rilascio_documento(formatStringtoStringDate(rs1.getString("dt_rilascio"), patternsql, patternnormdate_filter));
                    bl.setDt_scadenza_documento(formatStringtoStringDate(rs1.getString("dt_scadenza"), patternsql, patternnormdate_filter));
                    bl.setRilasciato_da_documento(rs1.getString("autorita_rilascio"));
                    bl.setLuogo_rilascio_documento(rs1.getString("luogo_rilascio_documento"));
                    bl.setEmail("");
                    bl.setTelefono("");
                    bl.setPerc_buy("-");
                    bl.setPerc_sell("-");
                    bl.setTimestamp("");
                    bl.setPep("NO");
                    return bl;
                }
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return null;
    }

    /**
     *
     * @param cod_tr
     * @return
     */
    public ArrayList<Ch_transaction_value> query_transaction_value(String cod_tr) {
        ArrayList<Ch_transaction_value> li = new ArrayList<>();
        try {
            Ch_transaction ch1 = query_transaction_ch(cod_tr);
            if (ch1 == null) {
                ch1 = query_transaction_ch_temp(cod_tr);
                if (ch1 == null) {
                    return li;
                }
            }
            
            String sql = "SELECT * FROM ch_transaction_valori WHERE cod_tr = ?";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, cod_tr);
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                Ch_transaction_value chv = new Ch_transaction_value();
                chv.setId(rs.getString(1));
                chv.setCod_tr(rs.getString(2));
                chv.setNumeroriga(rs.getString(3));
                chv.setSupporto(rs.getString(4));
                chv.setPos(rs.getString(5));
                chv.setValuta(rs.getString(6));
                chv.setQuantita(rs.getString(7));
                chv.setRate(rs.getString(8));
                chv.setCom_perc(rs.getString(9));
                chv.setCom_perc_tot(rs.getString(10));
                chv.setFx_com(rs.getString(11));
                chv.setTot_com(rs.getString(12));
                chv.setNet(rs.getString(13));
                chv.setSpread(rs.getString(14));
                chv.setTotal(rs.getString(15));
                chv.setKind_fix_comm(rs.getString(16));
                chv.setLow_com_ju(rs.getString(17));
                chv.setBb(rs.getString(18));
                chv.setBb_fidcode(rs.getString(19));
                chv.setDt_tr(rs.getString(20));
                chv.setContr_valuta(rs.getString(21));
                chv.setContr_supporto(rs.getString(22));
                chv.setContr_quantita(rs.getString(23));
                chv.setDel_fg(rs.getString(24));
                chv.setDel_dt(rs.getString(25));
                chv.setPosnum(rs.getString(26));
                chv.setTrorig(ch1);
                chv.setRoundvalue(rs.getString(27));
                li.add(chv);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return li;
    }

    /**
     *
     * @param codtr
     * @return
     */
    public ArrayList<Ch_transaction_doc> get_list_tr_doc_view(String codtr) {
        ArrayList<Ch_transaction_doc> li = new ArrayList<>();
        try {
            String sql = "SELECT * FROM ch_transaction_doc WHERE codtr = ? AND tipodoc<>'_signobb' ORDER BY data_load DESC";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, codtr);
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                Ch_transaction_doc ctd = new Ch_transaction_doc(rs.getString(1), rs.getString(2), rs.getString(3),
                        rs.getString(4), rs.getString(5), rs.getString(6), rs.getString(7), rs.getString(8));
                li.add(ctd);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return li;
    }

    /**
     *
     * @param codtr
     * @return
     */
    public ArrayList<Ch_transaction_doc> get_list_tr_doc(String codtr) {
        ArrayList<Ch_transaction_doc> li = new ArrayList<>();
        try {
            String sql = "SELECT * FROM ch_transaction_doc WHERE codtr = ? ORDER BY data_load DESC";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, codtr);
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                Ch_transaction_doc ctd = new Ch_transaction_doc(rs.getString(1), rs.getString(2), rs.getString(3),
                        rs.getString(4), rs.getString(5), rs.getString(6), rs.getString(7), rs.getString(8));
                li.add(ctd);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return li;
    }

    /**
     *
     * @param codtr
     * @param tipodoc
     * @return
     */
    public Ch_transaction_doc get_tr_doc(String codtr, String tipodoc) {
        try {
            String sql = "SELECT * FROM ch_transaction_doc WHERE codtr = ? AND tipodoc = ? ORDER BY data_load DESC";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, codtr);
            ps.setString(2, tipodoc);
            ResultSet rs = ps.executeQuery();
            if (rs.next()) {
                Ch_transaction_doc ctd = new Ch_transaction_doc(rs.getString(1), rs.getString(2), rs.getString(3),
                        rs.getString(4), rs.getString(5), rs.getString(6), rs.getString(7), rs.getString(8));
                return ctd;
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return null;
    }

    /**
     *
     * @param cod_doc
     * @return
     */
    public Ch_transaction_doc get_tr_doc(String cod_doc) {
        try {
            String sql = "SELECT * FROM ch_transaction_doc WHERE codice_documento = ?";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, cod_doc);
            ResultSet rs = ps.executeQuery();
            if (rs.next()) {
                Ch_transaction_doc ctd = new Ch_transaction_doc(rs.getString(1), rs.getString(2), rs.getString(3),
                        rs.getString(4), rs.getString(5), rs.getString(6), rs.getString(7), rs.getString(8));
                return ctd;
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return null;
    }

    /**
     *
     * @param codtr
     * @param tipodoc
     * @return
     */
    public Ch_transaction_doc get_doc_nc_firmato(String codtr, String tipodoc) {
        try {
            String sql = "SELECT * FROM ch_transaction_doc WHERE codtr = ? AND tipodoc = ? ORDER BY data_load DESC LIMIT 1";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, codtr);
            ps.setString(2, tipodoc);
            
            ResultSet rs = ps.executeQuery();
            if (rs.next()) {
                Ch_transaction_doc ctd = new Ch_transaction_doc(rs.getString(1), rs.getString(2), rs.getString(3),
                        rs.getString(4), rs.getString(5), rs.getString(6), rs.getString(7), rs.getString(8));
                return ctd;
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return null;
    }

    /**
     *
     * @param ctd
     * @param filiale
     * @return
     */
    public boolean insert_transaction_doc_centrale(Ch_transaction_doc ctd, String filiale) {
        try {
            if (get_tr_doc(ctd.getCodtr(), ctd.getTipodoc()) == null) {
                String ins = "INSERT INTO ch_transaction_doc VALUES (?,?,?,?,?,?,?,?)";
                PreparedStatement ps = this.c.prepareStatement(ins, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
                ps.setString(1, ctd.getCodice_documento());
                ps.setString(2, ctd.getCodtr());
                ps.setString(3, ctd.getTipodoc());
                ps.setString(4, ctd.getContent());
                ps.setString(5, ctd.getNomefile());
                ps.setString(6, ctd.getData_load());
                ps.setString(7, ctd.getClient());
                ps.setString(8, ctd.getOnline());
                ps.execute();
                String dtoper = getNow();
                String dt_val = formatStringtoStringDate(dtoper, patternsqldate, patternnormdate);
                insert_aggiornamenti_mod(new Aggiornamenti_mod(
                        generaId(50), filiale, dt_val, "0",
                        "PS", ps.toString(), "service", dtoper));
                return true;
            } else {
                String upd = "UPDATE ch_transaction_doc SET codice_documento = ?, content = ?, nomefile = ?, data_load = ? , client = ? , online = ? WHERE codtr = ? AND tipodoc = ?";
                PreparedStatement ps = this.c.prepareStatement(upd, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
                ps.setString(1, ctd.getCodice_documento());
                ps.setString(2, ctd.getContent());
                ps.setString(3, ctd.getNomefile());
                ps.setString(4, ctd.getData_load());
                ps.setString(5, ctd.getClient());
                ps.setString(6, ctd.getOnline());
                ps.setString(7, ctd.getCodtr());
                ps.setString(8, ctd.getTipodoc());
                int x = ps.executeUpdate();
                if (x > 0) {
                    String dtoper = getNow();
                    String dt_val = formatStringtoStringDate(dtoper, patternsqldate, patternnormdate);
                    insert_aggiornamenti_mod(new Aggiornamenti_mod(
                            generaId(50), filiale, dt_val, "0",
                            "PS", ps.toString(), "service", dtoper));
                }
                return x > 0;
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return false;
    }

    /**
     *
     * @param ctd
     * @return
     */
    public boolean insert_transaction_doc_NOCENTRAL(Ch_transaction_doc ctd) {
        try {
            if (get_tr_doc(ctd.getCodtr(), ctd.getTipodoc()) == null) {
                String ins = "INSERT INTO ch_transaction_doc VALUES (?,?,?,?,?,?,?,?)";
                PreparedStatement ps = this.c.prepareStatement(ins, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
                ps.setString(1, ctd.getCodice_documento());
                ps.setString(2, ctd.getCodtr());
                ps.setString(3, ctd.getTipodoc());
                ps.setString(4, ctd.getContent());
                ps.setString(5, ctd.getNomefile());
                ps.setString(6, ctd.getData_load());
                ps.setString(7, ctd.getClient());
                ps.setString(8, ctd.getOnline());
                ps.execute();
                return true;
            } else {
                String upd = "UPDATE ch_transaction_doc SET codice_documento = ?, content = ?, nomefile = ?, data_load = ? , client = ? , online = ? WHERE codtr = ? AND tipodoc = ?";
                PreparedStatement ps = this.c.prepareStatement(upd, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
                ps.setString(1, ctd.getCodice_documento());
                ps.setString(2, ctd.getContent());
                ps.setString(3, ctd.getNomefile());
                ps.setString(4, ctd.getData_load());
                ps.setString(5, ctd.getClient());
                ps.setString(6, ctd.getOnline());
                ps.setString(7, ctd.getCodtr());
                ps.setString(8, ctd.getTipodoc());
                int x = ps.executeUpdate();
                return x > 0;
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return false;
    }

    /**
     *
     * @param ctd
     * @return
     */
    public boolean insert_transaction_doc(Ch_transaction_doc ctd) {
        try {
            if (get_tr_doc(ctd.getCodtr(), ctd.getTipodoc()) == null) {
                String ins = "INSERT INTO ch_transaction_doc VALUES (?,?,?,?,?,?,?,?)";
                PreparedStatement ps = this.c.prepareStatement(ins, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
                ps.setString(1, ctd.getCodice_documento());
                ps.setString(2, ctd.getCodtr());
                ps.setString(3, ctd.getTipodoc());
                ps.setString(4, ctd.getContent());
                ps.setString(5, ctd.getNomefile());
                ps.setString(6, ctd.getData_load());
                ps.setString(7, ctd.getClient());
                ps.setString(8, ctd.getOnline());
                ps.execute();
                String dtoper = getNow();
                String dt_val = formatStringtoStringDate(dtoper, patternsqldate, patternnormdate);
                insert_aggiornamenti_mod(new Aggiornamenti_mod(
                        generaId(50), "000", dt_val, "0",
                        "PS", ps.toString(), "service", dtoper));
                return true;
            } else {
                String upd = "UPDATE ch_transaction_doc SET codice_documento = ?, content = ?, nomefile = ?, data_load = ? , client = ? , online = ? WHERE codtr = ? AND tipodoc = ?";
                PreparedStatement ps = this.c.prepareStatement(upd, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
                ps.setString(1, ctd.getCodice_documento());
                ps.setString(2, ctd.getContent());
                ps.setString(3, ctd.getNomefile());
                ps.setString(4, ctd.getData_load());
                ps.setString(5, ctd.getClient());
                ps.setString(6, ctd.getOnline());
                ps.setString(7, ctd.getCodtr());
                ps.setString(8, ctd.getTipodoc());
                int x = ps.executeUpdate();
                if (x > 0) {
                    String dtoper = getNow();
                    String dt_val = formatStringtoStringDate(dtoper, patternsqldate, patternnormdate);
                    insert_aggiornamenti_mod(new Aggiornamenti_mod(
                            generaId(50), "000", dt_val, "0",
                            "PS", ps.toString(), "service", dtoper));
                }
                return x > 0;
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return false;
    }

    /**
     *
     * @param ctd
     * @param filiale
     * @return
     */
    public boolean insert_transaction_doc_FILIALE(Ch_transaction_doc ctd, String filiale) {
        try {
            if (get_tr_doc(ctd.getCodtr(), ctd.getTipodoc()) == null) {
                String ins = "INSERT INTO ch_transaction_doc VALUES (?,?,?,?,?,?,?,?)";
                PreparedStatement ps = this.c.prepareStatement(ins, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
                ps.setString(1, ctd.getCodice_documento());
                ps.setString(2, ctd.getCodtr());
                ps.setString(3, ctd.getTipodoc());
                ps.setString(4, ctd.getContent());
                ps.setString(5, ctd.getNomefile());
                ps.setString(6, ctd.getData_load());
                ps.setString(7, ctd.getClient());
                ps.setString(8, ctd.getOnline());
                ps.execute();
                String dtoper = getNow();
                String dt_val = formatStringtoStringDate(dtoper, patternsqldate, patternnormdate);
                insert_aggiornamenti_mod(new Aggiornamenti_mod(
                        generaId(50), filiale, dt_val, "0",
                        "PS", ps.toString(), "service", dtoper));
                return true;
            } else {
                String upd = "UPDATE ch_transaction_doc SET codice_documento = ?, content = ?, nomefile = ?, data_load = ? , client = ? , online = ? WHERE codtr = ? AND tipodoc = ?";
                PreparedStatement ps = this.c.prepareStatement(upd, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
                ps.setString(1, ctd.getCodice_documento());
                ps.setString(2, ctd.getContent());
                ps.setString(3, ctd.getNomefile());
                ps.setString(4, ctd.getData_load());
                ps.setString(5, ctd.getClient());
                ps.setString(6, ctd.getOnline());
                ps.setString(7, ctd.getCodtr());
                ps.setString(8, ctd.getTipodoc());
                int x = ps.executeUpdate();
                if (x > 0) {
                    String dtoper = getNow();
                    String dt_val = formatStringtoStringDate(dtoper, patternsqldate, patternnormdate);
                    insert_aggiornamenti_mod(new Aggiornamenti_mod(
                            generaId(50), filiale, dt_val, "0",
                            "PS", ps.toString(), "service", dtoper));
                }
                return x > 0;
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return false;
    }

    /**
     *
     * @param stato
     * @return
     */
    public ArrayList<Document> list_typedoc_tra(String stato) {
        ArrayList<Document> li = new ArrayList<>();
        try {
            String sql;
            PreparedStatement ps;
            if (stato == null) {
                sql = "SELECT * FROM selectdoctrans order by place";
                ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
                
            } else {
                sql = "SELECT * FROM selectdoctrans WHERE fg_stato = ? order by place";
                ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
                ps.setString(1, stato);
            }
            
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                Document d1 = new Document(
                        rs.getString(1), rs.getString(2),
                        rs.getString(3), rs.getString(4),
                        rs.getInt(5), false);
                li.add(d1);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return li;
    }

    /**
     *
     * @param cod
     * @return
     */
    public String[] get_typedoc_tra(String cod) {
        try {
            String sql = "SELECT * FROM selectdoctrans WHERE codice = ? order by place";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, cod);
            ResultSet rs = ps.executeQuery();
            if (rs.next()) {
                String[] out = {rs.getString(1), rs.getString(2), rs.getString(3)};
                return out;
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return null;
    }

    /**
     *
     * @param filiale
     * @param valuta
     * @param d1
     * @param d2
     * @return
     */
    public ArrayList<Rate_history> list_ratehistory(String filiale, String valuta, String d1, String d2) {
        ArrayList<Rate_history> li = new ArrayList<>();
        try {
            String sql = "SELECT * FROM rate_history WHERE filiale = ? AND valuta = ? ";
            
            if (d1 != null) {
                sql = sql + " AND dt_mod >= '" + d1 + " 00:00:00' ";
            }
            if (d2 != null) {
                sql = sql + " AND dt_mod <= '" + d2 + " 23:59:59' ";
            }
            
            sql = sql + " GROUP BY valuta,modify ORDER BY filiale,dt_mod DESC";
            
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, filiale);
            ps.setString(2, valuta);
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                Rate_history rh
                        = new Rate_history(rs.getString(1), rs.getString(2), rs.getString(3),
                                rs.getString(4), rs.getString(5), rs.getString(6), rs.getString(7));
                li.add(rh);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return li;
    }

    /**
     *
     * @param rh
     * @param listbranch
     * @return
     */
    public boolean insert_ratehistory(Rate_history rh, String listbranch) {
        try {
            String ins = "INSERT INTO rate_history VALUES (?,?,?,?,?,?,?)";
            PreparedStatement ps = this.c.prepareStatement(ins, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, rh.getCodic());
            ps.setString(2, rh.getFiliale());
            ps.setString(3, rh.getValuta());
            ps.setString(4, rh.getTipomod());
            ps.setString(5, rh.getModify());
            ps.setString(6, rh.getUser());
            ps.setString(7, rh.getDt_mod());
            ps.execute();
            String dtoper = getNow();
            String dt_val = formatStringtoStringDate(dtoper, patternsqldate, patternnormdate);
            
            if (filiale.equals("000")) {
                insertValue_agg_NOCENTRAL(ps, null, listbranch, dt_val, rh.getUser());
            } else {
                insert_aggiornamenti_mod(new Aggiornamenti_mod(
                        generaId(50), "000", dt_val, "0",
                        "PS", ps.toString(), "service", dtoper));
            }
            
            return true;
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return false;
    }

    /**
     *
     * @param cu
     */
    public void ins_newCurrency(Currency cu) {
        try {
            String query = "INSERT INTO valute (filiale,valuta,codice_uic_divisa,de_valuta,cambio_acquisto,cambio_vendita,cambio_bce,de_messaggio,fg_valuta_corrente,enable_buy,"
                    + "enable_sell,buy_std_type,buy_std,buy_std_value,buy_l1,buy_l2,buy_l3,buy_best,sell_std_type,sell_std,sell_std_value,sell_l1,"
                    + "sell_l2,sell_l3,sell_best) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
            PreparedStatement ps = this.c.prepareStatement(query, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, cu.getFilial());
            ps.setString(2, cu.getCode());
            ps.setString(3, cu.getUic());
            ps.setString(4, cu.getDescrizione());
            ps.setString(5, cu.getEnable_sellback());
            ps.setString(6, cu.getChange_sell());
            ps.setString(7, cu.getCambio_bce());
            ps.setString(8, cu.getMessage());
            ps.setString(9, cu.getFilial());
            ps.setString(10, cu.getEnable_buy());
            ps.setString(11, cu.getEnable_sell());
            ps.setString(12, cu.getBuy_std_type());
            ps.setString(13, cu.getBuy_std());
            ps.setString(14, cu.getBuy_std_value());
            ps.setString(15, cu.getBuy_l1());
            ps.setString(16, cu.getBuy_l2());
            ps.setString(17, cu.getBuy_l3());
            ps.setString(18, cu.getBuy_best());
            ps.setString(19, cu.getSell_std_type());
            ps.setString(20, cu.getSell_std());
            ps.setString(21, cu.getSell_std_value());
            ps.setString(22, cu.getSell_l1());
            ps.setString(23, cu.getSell_l2());
            ps.setString(24, cu.getSell_l3());
            ps.setString(25, cu.getSell_best());
            ps.execute();
            String dtoper = getNow();
            String dt_val = formatStringtoStringDate(dtoper, patternsqldate, patternnormdate);
            insert_aggiornamenti_mod(new Aggiornamenti_mod(
                    generaId(50), "000", dt_val, "0",
                    "PS", ps.toString(), "service", dtoper));
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
    }

    /**
     *
     * @param st
     * @return
     */
    public ArrayList<VATcode> li_vat(String st) {
        ArrayList<VATcode> li = new ArrayList<>();
        try {
            String sql = "SELECT * FROM vatcode ";
            if (st != null) {
                sql = sql + " WHERE fg_annullato = '" + st + "'";
            }
            sql += " ORDER BY cast(codice AS decimal (10,0))";
            ResultSet rs = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql);
            while (rs.next()) {
                li.add(new VATcode(leftPad(rs.getString(1), 2, "0"), rs.getString(2), rs.getString(3),
                        rs.getString(4), rs.getString(5), rs.getString(6)));
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return li;
    }

    /**
     *
     * @param cod
     * @return
     */
    public VATcode get_vat(String cod) {
        try {
            String sql = "SELECT * FROM vatcode WHERE id = '" + cod + "'";
            ResultSet rs = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql);
            while (rs.next()) {
                return new VATcode(leftPad(rs.getString(1), 2, "0"), rs.getString(2), rs.getString(3),
                        rs.getString(4), rs.getString(5), rs.getString(6));
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return null;
    }

    /**
     *
     * @param cod
     * @return
     */
    public VATcode get_vat_cod(String cod) {
        try {
            String sql = "SELECT * FROM vatcode WHERE codice = '" + cod + "'";
            ResultSet rs = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql);
            while (rs.next()) {
                return new VATcode(leftPad(rs.getString(1), 2, "0"), rs.getString(2), rs.getString(3),
                        rs.getString(4), rs.getString(5), rs.getString(6));
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return null;
    }

    /**
     *
     * @param vat
     * @param username
     * @return
     */
    public boolean edit_vat(VATcode vat, String username) {
        try {
            String upd = "UPDATE vatcode SET codice = ?, descrizione = ?, aliquota = ?, fg_annullato = ? where id = ?";
            PreparedStatement ps = this.c.prepareStatement(upd, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, vat.getCodice());
            ps.setString(2, vat.getDescrizione());
            ps.setString(3, vat.getAliquota());
            ps.setString(4, vat.getFg_annullato());
            ps.setString(5, vat.getId());
            
            boolean es = ps.executeUpdate() > 0;
            
            if (es) {
                insertValue_agg(ps, null, null, null, username);
            }
            
            return es;
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return false;
    }

    /**
     *
     * @param vat
     * @param username
     * @return
     */
    public boolean ins_vat(VATcode vat, String username) {
        try {
            String upd = "INSERT INTO vatcode (codice,descrizione,aliquota) VALUES (?,?,?)";
            PreparedStatement ps = this.c.prepareStatement(upd, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, vat.getCodice());
            ps.setString(2, vat.getDescrizione());
            ps.setString(3, vat.getAliquota());
            ps.execute();
            insertValue_agg_NOCENTRAL(ps, null, null, null, username);
            return true;
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return false;
    }

    /**
     *
     * @return
     */
    public ArrayList<String[]> list_type_selecttipov() {
        ArrayList<String[]> out = new ArrayList<>();
        try {
            String sql = "SELECT * FROM selecttipov";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                String[] o1 = {rs.getString(1), rs.getString(2)};
                out.add(o1);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @param codtr
     * @return
     */
    public String insert_get_incremental_invoicenc(String codtr) {
        try {
            String fil = getCodLocal(true)[0];
            String ye = getYear();
            String cod = "0000000001";
            String sql = "SELECT LPAD(numberinv+1, 10, '0') FROM inv_incremental WHERE year = ? AND filiale = ? ORDER BY numberinv DESC LIMIT 1";
//          String sql = "SELECT LPAD(numberinv+1, 10, '0') FROM inv_incremental WHERE year = ? AND filiale = ? ORDER BY DT DESC LIMIT 1";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, ye);
            ps.setString(2, fil);
            ResultSet rs = ps.executeQuery();
            if (rs.next()) {
                cod = leftPad(rs.getString(1), 10, "0");
            }
            String ins = "INSERT INTO inv_incremental (numberinv,year,filiale,tr_num) VALUES (?,?,?,?)";
            PreparedStatement ps1 = this.c.prepareStatement(ins, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps1.setString(1, cod);
            ps1.setString(2, ye);
            ps1.setString(3, fil);
            ps1.setString(4, codtr);
            ps1.execute();
            String dtoper = getNow();
            String dt_val = formatStringtoStringDate(dtoper, patternsqldate, patternnormdate);
            insert_aggiornamenti_mod(new Aggiornamenti_mod(
                    generaId(50), "000", dt_val, "0",
                    "PS", ps1.toString(), "service", dtoper));
            return cod;
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
            if (ex.getMessage().contains("Duplicate")) {
                insert_get_incremental_invoicenc(codtr);
            }
        }
        return null;
    }

    /**
     *
     * @return
     */
    public String getYear() {
        try {
            String sql = "SELECT YEAR(curdate())";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ResultSet rs = ps.executeQuery();
            if (rs.next()) {
                return rs.getString(1);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return new DateTime().toString("yyyy");
    }

    /**
     *
     * @param codtr
     * @return
     */
    public String get_invoice_number(String codtr) {
        String cod = insert_get_incremental_invoicenc(codtr);
        String year = getYear();
        String fil = getCodLocal(true)[0];
        return cod + " " + year + " " + fil;
    }

    /**
     *
     * @return
     */
    public ResultSet list_currency() {
        try {
            return this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery("SELECT distinct(valuta) FROM valute order by valuta");
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return null;
    }

    /**
     *
     * @return
     */
    public ArrayList<String> list_branchcode() {
        ArrayList<String> li = new ArrayList<>();
        try {
            ResultSet rs = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery("SELECT distinct(cod) FROM branch where fg_annullato='0'");
            while (rs.next()) {
                li.add(rs.getString(1));
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return li;
    }

    /**
     *
     * @return
     */
    public ArrayList<String> list_branchcode_ENABLED() {
        ArrayList<String> li = new ArrayList<>();
        try {
            ResultSet rs = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery("SELECT distinct(cod) FROM branch WHERE fg_annullato='0' order by cast(cod AS decimal (10,0))");
            while (rs.next()) {
                li.add(rs.getString(1));
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return li;
    }

    /**
     *
     * @return
     */
    public ArrayList<String> list_branchcode_completeAFTER311217() {
        ArrayList<String> li = new ArrayList<>();
        try {
            ResultSet rs = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery("SELECT distinct(cod) FROM branch WHERE fg_annullato='0' OR (fg_annullato='1' AND STR_TO_DATE(da_annull, \"%Y-%m-%d\")>'2017-12-31') order by cast(cod AS decimal (10,0))");
            while (rs.next()) {
                li.add(rs.getString(1));
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return li;
    }

    /**
     *
     * @param cod_tr
     * @return
     */
    public boolean delete_trans(String cod_tr) {
        try {
            this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).execute("DELETE FROM ch_transaction WHERE cod = '" + cod_tr + "'");
            String dtoper = getNow();
            String dt_val = formatStringtoStringDate(dtoper, patternsqldate, patternnormdate);
            insert_aggiornamenti_mod(new Aggiornamenti_mod(
                    generaId(50), "000", dt_val, "0",
                    "ST", "DELETE FROM ch_transaction WHERE cod = '" + cod_tr + "'", "service", dtoper));
            
            this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).execute("DELETE FROM ch_transaction_doc WHERE codtr = '" + cod_tr + "'");
            insert_aggiornamenti_mod(new Aggiornamenti_mod(
                    generaId(50), "000", dt_val, "0",
                    "ST", "DELETE FROM ch_transaction_doc WHERE codtr = '" + cod_tr + "'", "service", dtoper));
            
            this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).execute("DELETE FROM ch_transaction_file WHERE cod_tr = '" + cod_tr + "'");
            insert_aggiornamenti_mod(new Aggiornamenti_mod(
                    generaId(50), "000", dt_val, "0",
                    "ST", "DELETE FROM ch_transaction_file WHERE cod_tr = '" + cod_tr + "'", "service", dtoper));
            
            this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).execute("DELETE FROM ch_transaction_refund WHERE cod_tr = '" + cod_tr + "'");
            insert_aggiornamenti_mod(new Aggiornamenti_mod(
                    generaId(50), "000", dt_val, "0",
                    "ST", "DELETE FROM ch_transaction_refund WHERE cod_tr = '" + cod_tr + "'", "service", dtoper));
            
            this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).execute("DELETE FROM ch_transaction_valori WHERE cod_tr = '" + cod_tr + "'");
            insert_aggiornamenti_mod(new Aggiornamenti_mod(
                    generaId(50), "000", dt_val, "0",
                    "ST", "DELETE FROM ch_transaction_valori WHERE cod_tr = '" + cod_tr + "'", "service", dtoper));
            
            return true;
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return false;
        
    }

    /**
     *
     * @param cod
     * @param desc
     * @param ta
     * @param username
     * @return
     */
    public boolean ins_city(String cod, String desc, String ta, String username) {
        try {
            String ins = "INSERT INTO comuni_apm VALUES (?,?,?)";
            PreparedStatement ps = this.c.prepareStatement(ins, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, cod);
            ps.setString(2, desc);
            ps.setString(3, ta);
            ps.execute();
            insertValue_agg_NOCENTRAL(ps, null, null, null, username);
            return true;
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return false;
        
    }

    /**
     *
     * @param cod
     * @param desc
     * @param ta
     * @param username
     * @return
     */
    public boolean edit_city(String cod, String desc, String ta, String username) {
        try {
            String ins = "UPDATE comuni_apm SET denominazione = ?, targa = ? WHERE codice_avv_bancario = ?";
            PreparedStatement ps = this.c.prepareStatement(ins, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, desc);
            ps.setString(2, ta);
            ps.setString(3, cod);
            boolean es = ps.executeUpdate() > 0;
            if (es) {
                insertValue_agg(ps, null, null, null, username);
            }
            return es;
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return false;
        
    }

    /**
     *
     * @return
     */
    public ArrayList<String> list_temp_paymat() {
        ArrayList<String> li = new ArrayList<>();
        try {
            String sql = "SELECT distinct(codice) FROM temppaymat WHERE stato = ?";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, "1");
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                li.add(rs.getString(1));
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return li;
        
    }

    /**
     *
     * @param codice
     * @return
     */
    public String[] get_temp_paymat(String codice) {
        try {
            String sql = "SELECT category,causal FROM temppaymat WHERE codice = ?";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, codice);
            ResultSet rs = ps.executeQuery();
            if (rs.next()) {
                String[] out = {rs.getString(1), rs.getString(2)};
                return out;
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return null;
        
    }

    /**
     *
     * @param newprotocol
     * @return
     */
    public Paymat_conf get_conf_paymat(boolean newprotocol) {
        Branch br = get_branch("000");
        String value_token = br.getPay_token();
        String value_idAziendaDistributore = br.getPay_nomeazienda();
        String value_idAziendaEsercente = br.getPay_idazienda();
        String value_userIP = "127.0.0.1";
        String value_callerId = br.getPay_user();
        String value_sk = br.getPay_password();
        String value_skin = br.getPay_skin();
        String value_CAB = getConf("path.paymat.cab");
        String value_idterminale = br.getPay_terminale();
        String url;
        String serverURI;
        if (newprotocol) {
            url = getConf("path.paymat.linknew");
            serverURI = getConf("path.paymat.urinew");
        } else {
            url = getConf("path.paymat.linkold");
            serverURI = getConf("path.paymat.uriold");
        }
        return new Paymat_conf(url, serverURI, value_callerId, value_skin, value_userIP, value_token,
                value_idAziendaDistributore, value_idAziendaEsercente, value_CAB, value_sk, value_idterminale);
    }

    /**
     *
     * @return @throws ServletException
     * @throws IOException
     */
    public ArrayList<Taglio> list_paymat() throws ServletException, IOException {
        ArrayList<Taglio> total = new ArrayList<>();
        ArrayList<String> litemp = list_temp_paymat();
        String path = getPath("temp");
        Paymat_conf pc = get_conf_paymat(true);
        if (pc != null) {
            Paymat_new pn = new Paymat_new();
            String idrich = "TESTMAC" + new DateTime().toString(patterntsdate) + randomAlphanumeric(15).trim().toLowerCase();
            ArrayList<Brand> infoBrandRicariche = pn.infoBrandRicariche(path, pc, idrich);
            Brand esito = infoBrandRicariche.get(0);
            if (esito.getResultCode().equals("0")) {
                for (int i = 0; i < infoBrandRicariche.size(); i++) {
                    Brand b = infoBrandRicariche.get(i);
                    if (b.getCodiceBrand() != null) {
                        ArrayList<Taglio> ta = pn.infoTagliRicariche(path, pc, pc.getValue_callerId(), b.getCodiceBrand(), b.getDescrizione());
                        for (int j = 0; j < ta.size(); j++) {
                            Taglio t1 = ta.get(j);
                            if (t1.getCodiceTaglio() != null) {
                                if (litemp.contains(t1.getCodiceTaglio())) {
                                    total.add(t1);
                                }
                            }
                        }
                    }
                }
            } else {
                insertTR("E", "service", new Exception().getStackTrace()[0].getMethodName() + ": " + esito.getResultCode() + " - " + esito.getResultDesc());
            }
        }
        
        sort(total);
        
        return total;
        
    }

    //REPORT
    /**
     *
     * @param filiale
     * @param datereport
     * @return
     */
    public ArrayList<Openclose_Synt_value> list_Openclose_Synt_value(String filiale, String datereport) {
        ArrayList<Openclose_Synt_value> out = new ArrayList<>();
        try {
            String dtsql = formatStringtoStringDate(datereport, patternnormdate_filter, patternsql);
            String sql = "SELECT * FROM oc_lista where filiale = '" + filiale + "' and data like '" + dtsql + "%' order by data";
            ResultSet rs = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql);
            while (rs.next()) {
                Openclose_Synt_value osp = new Openclose_Synt_value();
                osp.setUser(rs.getString("user"));
                osp.setSafetill(rs.getString("till"));
                osp.setData(formatStringtoStringDate(rs.getString("data"), patternsqldate, patternnormdate));
                osp.setOperazione(rs.getString("id"));
                osp.setTipo(rs.getString("fg_tipo"));
                String sql2 = "SELECT count(*) FROM oc_errors where cod='" + rs.getString("cod") + "'";
                ResultSet rs2 = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql2);
                if (rs2.next()) {
                    osp.setNumerrori(rs2.getString(1));
                } else {
                    osp.setNumerrori("0");
                }
                out.add(osp);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @param filiale
     * @param datad1
     * @param datad2
     * @return
     */
    public ArrayList<Openclose> list_openclose_report(String filiale, String datad1, String datad2) {
        ArrayList<Openclose> out = new ArrayList<>();
        try {
            String sql = "SELECT * FROM oc_lista where filiale ='" + filiale + "' ";
            if (datad1 != null) {
                sql = sql + "AND data >= '" + datad1 + " 00:00:00' ";
            }
            if (datad2 != null) {
                sql = sql + "AND data <= '" + datad2 + " 23:59:59' ";
            }
            
            sql = sql + " ORDER BY data";
            
            ResultSet rs = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql);
            while (rs.next()) {
                Openclose oc = new Openclose(rs.getString(1), rs.getString(2), leftPad(rs.getString(3), 15, "0"),
                        rs.getString(4), rs.getString(5), rs.getString(6), rs.getString(7), rs.getString(8));
                oc.setCod_it(rs.getString("cod_it"));
                oc.setCod_itnc(rs.getString("cod_itnc"));
                oc.setForeign_tr(rs.getString("foreign_tr"));
                oc.setLocal_tr(rs.getString("local_tr"));
                oc.setStock_tr(rs.getString("stock_tr"));
                out.add(oc);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @param oc
     * @return
     */
    public ArrayList<Openclose_Anal_value_stock> list_Openclose_Anal_value_stock(Openclose oc) {
        ArrayList<Openclose_Anal_value_stock> out = new ArrayList<>();
        try {
            ArrayList<NC_category> li = query_nc_category("");
            String sql = "SELECT * FROM oc_nochange where cod_oc='" + oc.getCod() + "'";
            ResultSet rs = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql);
            while (rs.next()) {
                NC_category nc = getNC_category(li, rs.getString("gruppo_nc"));
                Openclose_Anal_value_stock osp = new Openclose_Anal_value_stock();
                osp.setCategory(nc.getGruppo_nc() + " " + nc.getDe_gruppo_nc());
                osp.setQuantity(roundDoubleandFormat(fd(rs.getString("quantity_user")), 0));
                double d = fd(rs.getString("quantity_user")) * fd(nc.getIp_prezzo_nc());
                osp.setAmount(((roundDoubleandFormat(d, 0))));
                out.add(osp);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @param oc
     * @param fil
     * @return
     */
    public Openclose_Anal_value list_Openclose_Anal_value(Openclose oc, String[] fil) {
        Openclose_Anal_value ocv = new Openclose_Anal_value();
        try {
            ocv.setOperazione(oc.getId());
            ocv.setTipo(oc.getFg_tipo());
            ocv.setData(formatStringtoStringDate(oc.getData(), patternsqldate, patternnormdate));
            ocv.setUser(oc.getUser());
            ocv.setSafetill(oc.getTill());
            String sql2 = "SELECT count(*) FROM oc_errors where cod='" + oc.getCod() + "'";
            ResultSet rs2 = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql2);
            if (rs2.next()) {
                ocv.setNumerrori(rs2.getString(1));
            } else {
                ocv.setNumerrori("0");
            }
            ocv.setId_filiale(fil[0]);
            ocv.setDe_filiale(fil[1]);
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return ocv;
    }

    /**
     *
     * @param oc
     * @return
     */
    public ArrayList<Openclose_Anal_value> list_Openclose_Anal_value(Openclose oc) {
        ArrayList<Openclose_Anal_value> out = new ArrayList<>();
        try {
            
            String sql = "SELECT * FROM oc_change where cod_oc='" + oc.getCod() + "'";
            ResultSet rs = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql);
            while (rs.next()) {
                Openclose_Anal_value osp = new Openclose_Anal_value();
                osp.setValuta(rs.getString("valuta"));
                osp.setSuppporto(rs.getString("kind"));
                osp.setNumsupporti(rs.getString("num_kind_op"));
                osp.setImporto(rs.getString("value_op"));
                out.add(osp);
            }
            
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
        
    }

    /**
     *
     * @param cu
     * @param buy
     * @param sell
     * @return
     */
    public String[] rate_currency(Currency cu, boolean buy, boolean sell) {
        if (cu.getInternal_cur().equals("1")) {
            String[] out1 = {"1.00000000", "1.0000000"};
            return out1;
        }
        String cur = cu.getCode();
        String uic = cu.getUic();
        double d_rifbce = fd(cu.getCambio_bce());
        double d_standard;
        double tot_st;
        if (buy) {
            d_standard = fd(cu.getBuy_std());
            String typebuy = cu.getBuy_std_type();
            if (typebuy.equals("0")) {
                tot_st = d_rifbce * (100.0D + d_standard) / 100.0D;
            } else {
                tot_st = fd(cu.getBuy_std_value());
            }
        } else if (sell) {
            d_standard = fd(cu.getSell_std());
            String typesell = cu.getSell_std_type();
            if (typesell.equals("0")) {
                tot_st = d_rifbce * (100.0D + d_standard) / 100.0D;
            } else {
                tot_st = fd(cu.getSell_std_value());
            }
        } else {
            return null;
        }
        String out = roundDoubleandFormat(tot_st, 8);
        String[] out1 = {out, "Std: " + formatMysqltoDisplay(out), cur, uic};
        return out1;
    }

    /**
     *
     * @param filiale
     * @param datad1
     * @param datad2
     * @return
     */
    public ArrayList<Openclose> list_openclose_errors_report(String filiale, String datad1, String datad2) {
        ArrayList<Openclose> out = new ArrayList<>();
        try {
            String sql = "SELECT * FROM oc_lista where filiale='" + filiale + "' AND errors ='Y' ";
            
            if (datad1 != null) {
                sql = sql + "AND data >= '" + datad1 + " 00:00:00' ";
            }
            if (datad2 != null) {
                sql = sql + "AND data <= '" + datad2 + " 23:59:59' ";
            }
            sql = sql + " ORDER BY data";
            
            ResultSet rs = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql);
            while (rs.next()) {
                Openclose oc = new Openclose(rs.getString(1), rs.getString(2), leftPad(rs.getString(3), 15, "0"),
                        rs.getString(4), rs.getString(5), rs.getString(6), rs.getString(7), rs.getString(8));
                oc.setCod_it(rs.getString("cod_it"));
                oc.setCod_itnc(rs.getString("cod_itnc"));
                oc.setForeign_tr(rs.getString("foreign_tr"));
                oc.setLocal_tr(rs.getString("local_tr"));
                oc.setStock_tr(rs.getString("stock_tr"));
                out.add(oc);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @param oc
     * @param list_oc_errors
     * @param allbr
     * @param soglia
     * @return
     */
    public ArrayList<Openclose_Error_value> list_openclose_errors_report(
            Openclose oc,
            ArrayList<String[]> list_oc_errors, ArrayList<Branch> allbr, String soglia) {
        ArrayList<Openclose_Error_value> out = new ArrayList<>();
        
        String oper = get_national_office().getChangetype();
        boolean dividi = oper.equals("/");
        ArrayList<String[]> list_cc = credit_card_enabled();
        ArrayList<String[]> ba = list_bankAccount();
        ArrayList<NC_category> li = query_nc_category("");
        double finalbalance = 0.00;
        
        ArrayList<Openclose_Error_value> temp = new ArrayList<>();
        
        for (int i = 0; i < list_oc_errors.size(); i++) {
            String[] value = list_oc_errors.get(i);
            
            switch (value[1]) {
                case "CH": {
                    Openclose_Error_value osp = new Openclose_Error_value();
                    if (allbr != null) {
                        osp.setId_filiale(oc.getFiliale());
                        osp.setDe_filiale(get_Branch(oc.getFiliale(), allbr).getDe_branch());
                    }
                    osp.setId_filiale(oc.getFiliale());
                    osp.setDe_filiale(formatBankBranchReport(oc.getFiliale(), "BR", null, allbr));
                    osp.setUser(oc.getUser());
                    osp.setData(formatStringtoStringDate(oc.getData(), patternsqldate, patternnormdate));
                    osp.setTipo(oc.getFg_tipo());
                    osp.setCod(oc.getId());
                    osp.setType(value[1]);
                    osp.setCurrency(value[2]);
                    osp.setKind(value[3]);
                    osp.setNc("-");
                    osp.setPos("-");
                    osp.setNote(value[6]);
                    osp.setTotal_diff(value[7]);
                    osp.setRate(value[8]);
                    osp.setTill(oc.getTill());
                    osp.setQuantityUser(value[11]);
                    osp.setQuantitySystem(value[13]);
                    osp.setAmountuser(value[11]);
                    osp.setAmountsystem(value[13]);
                    String diff = getValueDiff_R(value[11], value[13], value[7], value[8], dividi);
                    osp.setDiffContr(diff);
                    osp.setDiffAmount(diff);
                    osp.setQuantitydiff(diff);
                    osp.setLocalamount(value[11]);
                    osp.setOperazione(oc.getId());
                    temp.add(osp);
                    finalbalance = finalbalance + fd(osp.getDiffContr());
                    break;
                }
                case "NC": {
                    Openclose_Error_value osp = new Openclose_Error_value();
                    if (allbr != null) {
                        osp.setId_filiale(oc.getFiliale());
                        osp.setDe_filiale(get_Branch(oc.getFiliale(), allbr).getDe_branch());
                    }
                    osp.setId_filiale(oc.getFiliale());
                    osp.setDe_filiale(formatBankBranchReport(oc.getFiliale(), "BR", null, allbr));
                    osp.setUser(oc.getUser());
                    osp.setData(formatStringtoStringDate(oc.getData(), patternsqldate, patternnormdate));
                    osp.setTipo(oc.getFg_tipo());
                    osp.setCod(oc.getId());
                    osp.setType(value[1]);
                    osp.setCurrency("-");
                    osp.setKind("-");
                    NC_category nc = getNC_category(li, value[4]);
                    osp.setNc(nc.getGruppo_nc() + " " + nc.getDe_gruppo_nc());
                    osp.setPos("-");
                    osp.setNote(value[6]);
                    osp.setTotal_diff(formatDoubleforMysql(value[7]));
                    osp.setRate("-");
                    osp.setTill(oc.getTill());
                    osp.setQuantityUser(value[10]);
                    osp.setQuantitySystem(value[12]);
                    osp.setLocalamount(roundDoubleandFormat(fd(nc.getIp_prezzo_nc()) * (fd(value[10]) - fd(value[12])), 2));
                    osp.setNcprice(nc.getIp_prezzo_nc());
//                    osp.setLocalamount(value[10]);
                    osp.setDiffContr("0.00");
                    osp.setDiffAmount(value[7]);
                    osp.setOperazione(oc.getId());
                    osp.setAmountuser(value[10]);
                    osp.setAmountsystem(value[12]);
                    osp.setQuantitydiff(value[7]);
//out.add(osp);
                    temp.add(osp);
                    finalbalance = finalbalance + fd(osp.getLocalamount());
                    break;
                }
                case "PO": {
                    Openclose_Error_value osp = new Openclose_Error_value();
                    if (allbr != null) {
                        osp.setId_filiale(oc.getFiliale());
                        osp.setDe_filiale(get_Branch(oc.getFiliale(), allbr).getDe_branch());
                    }
                    osp.setId_filiale(oc.getFiliale());
                    osp.setDe_filiale(formatBankBranchReport(oc.getFiliale(), "BR", null, allbr));
                    osp.setUser(oc.getUser());
                    osp.setData(formatStringtoStringDate(oc.getData(), patternsqldate, patternnormdate));
                    osp.setTipo(oc.getFg_tipo());
                    osp.setCod(oc.getId());
                    osp.setType(value[1]);
                    osp.setCurrency(value[2]);
                    osp.setKind(value[3]);
                    osp.setNc("-");
                    String po = formatAL(value[5], list_cc, 1);
                    if (po.equals("-")) {
                        po = formatAL(value[5], ba, 1);
                    }
                    osp.setPos(value[5] + " - " + po);
                    osp.setNote(value[6]);
                    osp.setTotal_diff(formatDoubleforMysql(value[7]));
                    osp.setRate(value[8]);
                    osp.setTill(oc.getTill());
                    osp.setQuantityUser(value[10]);
                    osp.setQuantitySystem(value[12]);
                    osp.setLocalamount(formatDoubleforMysql(value[10]));
                    String diff = getValueDiff_R(value[11], value[13], value[7], value[8], dividi);
                    //                System.out.println("rc.so.db.Db_Master.list_openclose_errors_report(R) "+diff);
                    osp.setDiffContr(diff);
                    osp.setDiffAmount((value[7]));
                    osp.setAmountuser(value[11]);
                    osp.setAmountsystem(value[13]);
                    osp.setQuantitydiff(roundDoubleandFormat(fd(value[10]) - fd(value[12]), 0));
                    osp.setOperazione(oc.getId());
                    temp.add(osp);
                    finalbalance = finalbalance + fd(osp.getDiffAmount());
                    break;
                }
                default:
                    break;
            }
        }
        if (soglia == null) {
            out.addAll(temp);
        } else if (parseDoubleR(roundDoubleandFormat(finalbalance, 2)) >= parseDoubleR(soglia)) {
            out.addAll(temp);
        }
        return out;
    }

    /**
     *
     * @param filiale
     * @param datad1
     * @param datad2
     * @return
     */
    public ArrayList<RegisterBuyMonthly_value> list_RegisterBuyMonthly_value(String filiale, String datad1, String datad2) {
        
        ArrayList<CustomerKind> list_customerKind = list_customerKind();
        String oper = get_national_office().getChangetype();
        boolean dividi = oper.equals("/");
        
        ArrayList<RegisterBuyMonthly_value> out = new ArrayList<>();
        
        ArrayList<String> listvalue = new ArrayList<>();
        ArrayList<String[]> list_valuta = new ArrayList<>();
        ArrayList<String[]> list_frombranch = new ArrayList<>();
        ArrayList<String[]> list_frombank = new ArrayList<>();
        
        try {
            String sql = "SELECT cod,tipocliente FROM ch_transaction WHERE tipotr='B' AND del_fg ='0' AND filiale = '" + filiale + "' ";
            
            if (datad1 != null) {
                sql = sql + "AND data >= '" + datad1 + " 00:00:00' ";
            }
            if (datad2 != null) {
                sql = sql + "AND data <= '" + datad2 + " 23:59:59' ";
            }
            sql = sql + " ORDER BY data";
            
            ResultSet rs = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql);
            
            while (rs.next()) {
                String sql2 = "SELECT total,valuta,quantita FROM ch_transaction_valori WHERE cod_tr='" + rs.getString("cod") + "'";
                ResultSet rs2 = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql2);
                while (rs2.next()) {

//                    String controv = formatDoubleforMysql(getValueDiff_NEW("1.00", "0.00", rs2.getString("total"), rs2.getString("rate"), dividi));
                    String[] li = {Engine.get_customerKind(list_customerKind, rs.getString("tipocliente")).getFg_nazionalita(),
                        rs2.getString("valuta"), rs2.getString("quantita"), rs2.getString("total")};
                    list_valuta.add(li);
                    listvalue.add(rs2.getString("valuta"));
                }
            }
            
            String sql3 = "SELECT cod,fg_brba FROM et_change where fg_annullato='0' AND fg_tofrom='F' AND filiale = '" + filiale + "' ";
            
            if (datad1 != null) {
                sql3 = sql3 + "AND dt_it >= '" + datad1 + " 00:00:00' ";
            }
            if (datad2 != null) {
                sql3 = sql3 + "AND dt_it <= '" + datad2 + " 23:59:59' ";
            }
            sql3 = sql3 + " ORDER BY dt_it";
            
            ResultSet rs3 = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql3);
            
            while (rs3.next()) {
                String sql4 = "SELECT ip_total,currency,ip_quantity FROM et_change_valori  where cod='" + rs3.getString("cod") + "'";
                ResultSet rs4 = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql4);
                while (rs4.next()) {
//                    String controv = formatDoubleforMysql(getValueDiff_NEW("1", "0.00", rs4.getString("ip_total"), rs4.getString("ip_rate"), dividi));
                    String[] li = {rs4.getString("currency"),
                        rs4.getString("ip_quantity"), rs4.getString("ip_total")};
                    if (rs3.getString("fg_brba").equals("BR")) {
                        list_frombranch.add(li);
                    } else {
                        list_frombank.add(li);
                    }
                    listvalue.add(rs4.getString("currency"));
                }
            }
            
            removeDuplicatesAL(listvalue);
            
            for (String va  : listvalue) {
                double res_1 = 0.0;
                double res_2 = 0.0;
                double notres_1 = 0.0;
                double notres_2 = 0.0;
                
                for (int i = 0; i < list_valuta.size(); i++) {
                    if (list_valuta.get(i)[1].equals(va)) {
                        if (list_valuta.get(i)[0].equals("1")) { //resident
                            res_1 = res_1 + fd(list_valuta.get(i)[2]);
                            res_2 = res_2 + fd(list_valuta.get(i)[3]);
                        } else {// non resident
                            notres_1 = notres_1 + fd(list_valuta.get(i)[2]);
                            notres_2 = notres_2 + fd(list_valuta.get(i)[3]);
                        }
                    }
                }
                
                double branch_1 = 0.0;
                double branch_2 = 0.0;
                double bank_1 = 0.0;
                double bank_2 = 0.0;
                for (int i = 0; i < list_frombranch.size(); i++) {
                    
                    if (list_frombranch.get(i)[0].equals(va)) {
                        branch_1 = branch_1 + fd(list_frombranch.get(i)[1]);
                        branch_2 = branch_2 + fd(list_frombranch.get(i)[2]);
                    }
                    
                }
                for (int i = 0; i < list_frombank.size(); i++) {
                    if (list_frombank.get(i)[0].equals(va)) {
                        bank_1 = bank_1 + fd(list_frombank.get(i)[1]);
                        bank_2 = bank_2 + fd(list_frombank.get(i)[2]);
                    }
                }
                
                RegisterBuyMonthly_value rbmv1 = new RegisterBuyMonthly_value();
                rbmv1.setTipocliente("Client Resident");
                rbmv1.setValuta(va);
                rbmv1.setTrasfdaban1((roundDoubleandFormat(bank_1, 2) + ""));
                rbmv1.setTrasfdaban2((roundDoubleandFormat(bank_2, 2) + ""));
                rbmv1.setTrasfdadip1((roundDoubleandFormat(branch_1, 2) + ""));
                rbmv1.setTrasfdadip2((roundDoubleandFormat(branch_2, 2) + ""));
                rbmv1.setAcqclienti((roundDoubleandFormat(res_1, 2) + ""));
                rbmv1.setControvalore((roundDoubleandFormat(res_2, 2) + ""));
                rbmv1.setSaldovaluta((roundDoubleandFormat(res_1, 2) + ""));
                out.add(rbmv1);
                
                rbmv1 = new RegisterBuyMonthly_value();
                rbmv1.setTipocliente("Client Non-Resident");
                rbmv1.setValuta(va);
                rbmv1.setTrasfdaban1((roundDoubleandFormat(bank_1, 2) + ""));
                rbmv1.setTrasfdaban2((roundDoubleandFormat(bank_2, 2) + ""));
                rbmv1.setTrasfdadip1((roundDoubleandFormat(branch_1, 2) + ""));
                rbmv1.setTrasfdadip2((roundDoubleandFormat(branch_2, 2) + ""));
                rbmv1.setAcqclienti((roundDoubleandFormat(notres_1, 2) + ""));
                rbmv1.setControvalore((roundDoubleandFormat(notres_2, 2) + ""));
                rbmv1.setSaldovaluta((roundDoubleandFormat(notres_1, 2) + ""));
                out.add(rbmv1);
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @param filiale
     * @param datad1
     * @param datad2
     * @return
     */
    public ArrayList<RegisterMonthly_value> list_RegisterMonthly_value(String filiale, String datad1, String datad2) {
        
        ArrayList<RegisterMonthly_value> out = new ArrayList<>();
        
        ArrayList<RegisterSellMonthly_value> sell = list_RegisterSellMonthly_value(filiale, datad1, datad2);
        ArrayList<RegisterBuyMonthly_value> buy = list_RegisterBuyMonthly_value(filiale, datad1, datad2);
        ArrayList<String> listvalue = new ArrayList<>();
        for (int i = 0; i < sell.size(); i++) {
            listvalue.add(sell.get(i).getValuta());
        }
        for (int i = 0; i < buy.size(); i++) {
            listvalue.add(buy.get(i).getValuta());
        }
        removeDuplicatesAL(listvalue);
        for (int i = 0; i < listvalue.size(); i++) {
            
            String valuta = listvalue.get(i);
            
            double res_Acqdaclienti = 0.0;
            double res_Venditaaclienti = 0.0;
            double res_Trasfdadip = 0.0;
            double res_Trasfadip = 0.0;
            double res_Trasfdabanche = 0.0;
            double res_Trasfabanche = 0.0;
            
            double Acqdaclienti = 0.0;
            double Venditaaclienti = 0.0;
            double Trasfdadip = 0.0;
            double Trasfadip = 0.0;
            double Trasfdabanche = 0.0;
            double Trasfabanche = 0.0;
            
            for (int j = 0; j < sell.size(); j++) {
                RegisterSellMonthly_value sel1 = sell.get(j);
                if (sel1.getValuta().equalsIgnoreCase(valuta)) {
                    
                    if (sel1.getTipocliente().equalsIgnoreCase("Client Resident")) {
                        res_Venditaaclienti = res_Venditaaclienti + fd((sel1.getVenditaclienti()));
                        res_Trasfadip = res_Trasfadip + fd((sel1.getTrasfadip1()));
                        res_Trasfabanche = res_Trasfabanche + fd((sel1.getTrasfabache1()));
                    } else {
                        Venditaaclienti = Venditaaclienti + fd((sel1.getVenditaclienti()));
                        Trasfadip = Trasfadip + fd((sel1.getTrasfadip1()));
                        Trasfabanche = Trasfabanche + fd((sel1.getTrasfabache1()));
                    }
                    
                }
                
            }
            
            for (int j = 0; j < buy.size(); j++) {
                RegisterBuyMonthly_value buy1 = buy.get(j);
                if (buy1.getValuta().equalsIgnoreCase(valuta)) {
                    if (buy1.getTipocliente().equalsIgnoreCase("Client Resident")) {
                        res_Acqdaclienti = res_Acqdaclienti + fd((buy1.getAcqclienti()));
                        res_Trasfdadip = res_Trasfdadip + fd((buy1.getTrasfdadip1()));
                        res_Trasfdabanche = res_Trasfdabanche + fd((buy1.getTrasfdaban1()));
                    } else {
                        Acqdaclienti = Acqdaclienti + fd((buy1.getAcqclienti()));
                        Trasfdadip = Trasfdadip + fd((buy1.getTrasfdadip1()));
                        Trasfdabanche = Trasfdabanche + fd((buy1.getTrasfdaban1()));
                    }
                }
                
            }
            
            double unico_Controvalore = res_Acqdaclienti - res_Venditaaclienti + res_Trasfdadip - res_Trasfadip + res_Trasfdabanche - res_Trasfabanche
                    + Acqdaclienti - Venditaaclienti;
            
            RegisterMonthly_value rmres = new RegisterMonthly_value();
            rmres.setTipocliente("Client Resident");
            rmres.setValuta(valuta);
            rmres.setAcqdaclienti((roundDoubleandFormat(res_Acqdaclienti, 2) + ""));
            rmres.setVenditaaclienti((roundDoubleandFormat(res_Venditaaclienti, 2) + ""));
            rmres.setTrasfdadip((roundDoubleandFormat(res_Trasfdadip, 2) + ""));
            rmres.setTrasfadip((roundDoubleandFormat(res_Trasfadip, 2) + ""));
            rmres.setTrasfdabanche((roundDoubleandFormat(res_Trasfdabanche, 2) + ""));
            rmres.setTrasfabanche((roundDoubleandFormat(res_Trasfabanche, 2) + ""));
            rmres.setControvalore((roundDoubleandFormat(unico_Controvalore, 2) + ""));
            out.add(rmres);
            
            RegisterMonthly_value rm = new RegisterMonthly_value();
            rm.setTipocliente("Client Non-Resident");
            rm.setValuta(valuta);
            rm.setAcqdaclienti((roundDoubleandFormat(Acqdaclienti, 2) + ""));
            rm.setVenditaaclienti((roundDoubleandFormat(Venditaaclienti, 2) + ""));
            rm.setTrasfdadip((roundDoubleandFormat(Trasfdadip, 2) + ""));
            rm.setTrasfadip((roundDoubleandFormat(Trasfadip, 2) + ""));
            rm.setTrasfdabanche((roundDoubleandFormat(Trasfdabanche, 2) + ""));
            rm.setTrasfabanche((roundDoubleandFormat(Trasfabanche, 2) + ""));
            rm.setControvalore((roundDoubleandFormat(unico_Controvalore, 2) + ""));
            out.add(rm);
        }
        return out;
    }

    /**
     *
     * @param filiale
     * @param datad1
     * @param datad2
     * @return
     */
    public ArrayList<RegisterSellMonthly_value> list_RegisterSellMonthly_value(String filiale, String datad1, String datad2) {
        
        ArrayList<CustomerKind> list_customerKind = list_customerKind();
        String oper = get_national_office().getChangetype();
        boolean dividi = oper.equals("/");
        
        ArrayList<RegisterSellMonthly_value> out = new ArrayList<>();
        
        ArrayList<String> listvalue = new ArrayList<>();
        ArrayList<String[]> list_valuta = new ArrayList<>();
        ArrayList<String[]> list_frombranch = new ArrayList<>();
        ArrayList<String[]> list_frombank = new ArrayList<>();
        
        try {
            String sql = "SELECT cod,tipocliente FROM ch_transaction WHERE tipotr='S' AND del_fg ='0' AND filiale = '" + filiale + "' ";
            
            if (datad1 != null) {
                sql = sql + "AND data >= '" + datad1 + " 00:00:00' ";
            }
            if (datad2 != null) {
                sql = sql + "AND data <= '" + datad2 + " 23:59:59' ";
            }
            sql = sql + " ORDER BY data";
            ResultSet rs = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql);
            while (rs.next()) {
                String sql2 = "SELECT valuta,quantita,total FROM ch_transaction_valori WHERE cod_tr='" + rs.getString("cod") + "'";
                ResultSet rs2 = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql2);
                while (rs2.next()) {
//                    String controv = formatDoubleforMysql(getValueDiff("1.00", "0.00", rs2.getString("total"), rs2.getString("rate"), dividi));

                    String[] li = {Engine.get_customerKind(list_customerKind, rs.getString("tipocliente")).getFg_nazionalita(),
                        rs2.getString("valuta"), rs2.getString("quantita"), rs2.getString("total")};
                    list_valuta.add(li);
                    listvalue.add(rs2.getString("valuta"));
                }
            }
            
            String sql3 = "SELECT cod,fg_brba FROM et_change where fg_annullato='0' AND fg_tofrom='T' AND filiale = '" + filiale + "' ";
            
            if (datad1 != null) {
                sql3 = sql3 + "AND dt_it >= '" + datad1 + " 00:00:00' ";
            }
            if (datad2 != null) {
                sql3 = sql3 + "AND dt_it <= '" + datad2 + " 23:59:59' ";
            }
            sql3 = sql3 + " ORDER BY dt_it";
            
            ResultSet rs3 = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql3);
            
            while (rs3.next()) {
                String sql4 = "SELECT currency,ip_total,ip_quantity FROM et_change_valori  where cod='" + rs3.getString("cod") + "'";
                ResultSet rs4 = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql4);
                while (rs4.next()) {
//                    String controv = formatDoubleforMysql(getValueDiff("1", "0.00", rs4.getString("ip_total"), rs4.getString("ip_rate"), dividi));
                    String[] li = {rs4.getString("currency"), rs4.getString("ip_quantity"), rs4.getString("ip_total")};
                    if (rs3.getString("fg_brba").equals("BR")) {
                        list_frombranch.add(li);
                    } else {
                        list_frombank.add(li);
                    }
                    listvalue.add(rs4.getString("currency"));
                }
            }
            
            removeDuplicatesAL(listvalue);
            
            for (String va  : listvalue) {
                double res_1 = 0.0;
                double res_2 = 0.0;
                double notres_1 = 0.0;
                double notres_2 = 0.0;
                for (int i = 0; i < list_valuta.size(); i++) {
                    if (list_valuta.get(i)[1].equals(va)) {
                        if (list_valuta.get(i)[0].equals("1")) { //resident
                            res_1 = res_1 + fd(list_valuta.get(i)[2]);
                            res_2 = res_2 + fd(list_valuta.get(i)[3]);
                        } else {// non resident
                            notres_1 = notres_1 + fd(list_valuta.get(i)[2]);
                            notres_2 = notres_2 + fd(list_valuta.get(i)[3]);
                        }
                    }
                }
                double branch_1 = 0.0;
                double branch_2 = 0.0;
                double bank_1 = 0.0;
                double bank_2 = 0.0;
                for (int i = 0; i < list_frombranch.size(); i++) {
                    
                    if (list_frombranch.get(i)[0].equals(va)) {
                        branch_1 = branch_1 + fd(list_frombranch.get(i)[1]);
                        branch_2 = branch_2 + fd(list_frombranch.get(i)[2]);
                    }
                    
                }
                for (int i = 0; i < list_frombank.size(); i++) {
                    if (list_frombank.get(i)[0].equals(va)) {
                        bank_1 = bank_1 + fd(list_frombank.get(i)[1]);
                        bank_2 = bank_2 + fd(list_frombank.get(i)[2]);
                    }
                }
                RegisterSellMonthly_value rbmv1 = new RegisterSellMonthly_value();
                rbmv1.setTipocliente("Client Resident");
                rbmv1.setValuta(va);
                rbmv1.setTrasfabache1(roundDoubleandFormat(bank_1, 2));
                rbmv1.setTrasfabacnhe2(roundDoubleandFormat(bank_2, 2));
                rbmv1.setTrasfadip1(roundDoubleandFormat(branch_1, 2));
                rbmv1.setTrasfadip2(roundDoubleandFormat(branch_2, 2));
                rbmv1.setVenditaclienti(roundDoubleandFormat(res_1, 2));
                rbmv1.setControvalore(roundDoubleandFormat(res_2, 2));
                rbmv1.setSaldovaluta(roundDoubleandFormat(res_1, 2));
                out.add(rbmv1);
                rbmv1 = new RegisterSellMonthly_value();
                rbmv1.setTipocliente("Client Non-Resident");
                rbmv1.setValuta(va);
                rbmv1.setTrasfabache1(roundDoubleandFormat(bank_1, 2));
                rbmv1.setTrasfabacnhe2(roundDoubleandFormat(bank_2, 2));
                rbmv1.setTrasfadip1(roundDoubleandFormat(branch_1, 2));
                rbmv1.setTrasfadip2(roundDoubleandFormat(branch_2, 2));
                rbmv1.setVenditaclienti(roundDoubleandFormat(notres_1, 2));
                rbmv1.setControvalore(roundDoubleandFormat(notres_2, 2));
                rbmv1.setSaldovaluta(roundDoubleandFormat(notres_1, 2));
                out.add(rbmv1);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @param et
     * @return
     */
    public ArrayList<ToBranchingSheet_value> list_ToBranchingSheet_value(ET_change et) {
        ArrayList<ToBranchingSheet_value> out = new ArrayList<>();
        ArrayList<ET_change> etc = get_ET_change_value(et.getCod());
        ArrayList<String> listvalue = new ArrayList<>();
        for (int i = 0; i < etc.size(); i++) {
            listvalue.add(etc.get(i).getValuta());
        }
        removeDuplicatesAL(listvalue);
        for (int j = 0; j < listvalue.size(); j++) {
            
            String va  = listvalue.get(j);
            double am_notes = 0.0;
            double am_notesrate = 0.0;
            double am_etc = 0.0;
            double am_etcrate = 0.0;
            double am_total = 0.0;
            double am_spread = 0.0;
            ToBranchingSheet_value bsi1 = new ToBranchingSheet_value();
            for (int i = 0; i < etc.size(); i++) {
                ET_change val = etc.get(i);
                if (val.getValuta().equalsIgnoreCase(va)) {
                    if (val.getSupporto().equals("01")) {
                        am_notes = am_notes + fd(val.getIp_quantity());
                        am_notesrate = am_notesrate + fd(val.getIp_rate());
                    } else {
                        am_etc = am_etc + fd(val.getIp_quantity());
                        am_etcrate = am_etcrate + fd(val.getIp_rate());
                    }
                    am_spread = am_spread + fd(val.getIp_spread());
                    am_total = am_total + fd(val.getIp_total());
                }
            }
            
            double am_percent = 0.00;
            
            if (am_total > 0) {
                am_percent = roundDouble(((am_spread / am_total) * 100), 2);
            }
            
            bsi1.setAuto(et.getAuto());
            
            bsi1.setCurrency(va);
            ArrayList<String> data = new ArrayList<>();
            data.add(va);
            data.add((roundDoubleandFormat(am_notes, 2)));
            data.add((roundDoubleandFormat(am_notesrate, 8)));
            data.add((roundDoubleandFormat(am_etc, 2)));
            data.add((roundDoubleandFormat(am_etcrate, 8)));
            data.add((roundDoubleandFormat(am_total, 2)));
            data.add((roundDoubleandFormat(am_spread, 2)));
            data.add((roundDoubleandFormat(am_percent, 2)));
            bsi1.setDati_string(data);
            out.add(bsi1);
        }
        return out;
    }

    /**
     *
     * @param et
     * @return
     */
    public ArrayList<FromBranchingSheet_value> list_FromBranchingSheet_value(ET_change et) {
        ArrayList<FromBranchingSheet_value> out = new ArrayList<>();
        ArrayList<ET_change> etc = get_ET_change_value(et.getCod());
        ArrayList<String> listvalue = new ArrayList<>();
        for (int i = 0; i < etc.size(); i++) {
            listvalue.add(etc.get(i).getValuta());
        }
        removeDuplicatesAL(listvalue);
        
        for (int j = 0; j < listvalue.size(); j++) {
            
            String va  = listvalue.get(j);
            double am_notes = 0.0;
            double am_notesrate = 0.0;
            double am_etc = 0.0;
            double am_etcrate = 0.0;
            double am_total = 0.0;
            double am_spread = 0.0;
            FromBranchingSheet_value bsi1 = new FromBranchingSheet_value();
            for (int i = 0; i < etc.size(); i++) {
                ET_change val = etc.get(i);
                if (val.getValuta().equalsIgnoreCase(va)) {
                    if (val.getSupporto().equals("01")) {
                        am_notes = am_notes + fd(val.getIp_quantity());
                        am_notesrate = am_notesrate + fd(val.getIp_rate());
                    } else {
                        am_etc = am_etc + fd(val.getIp_quantity());
                        am_etcrate = am_etcrate + fd(val.getIp_rate());
                    }
                    am_spread = am_spread + fd(val.getIp_spread());
                    am_total = am_total + fd(val.getIp_total());
                }
            }
            
            bsi1.setAuto(et.getAuto());
            bsi1.setCurrency(va);
            ArrayList<String> data = new ArrayList<>();
            data.add(va);
            data.add(roundDoubleandFormat(am_notes, 2));
            data.add(roundDoubleandFormat(am_notesrate, 8));
            data.add(roundDoubleandFormat(am_etc, 2));
            data.add(roundDoubleandFormat(am_etcrate, 8));
            data.add(roundDoubleandFormat(am_total, 2));
            bsi1.setDati_string(data);
            out.add(bsi1);
        }
        
        return out;
    }

    /**
     *
     * @param et
     * @return
     */
    public ArrayList<NoChangeFromBranchingSheet_value> list_FromBranchingSheet_valueNC(ET_change et) {
        ArrayList<NoChangeFromBranchingSheet_value> out = new ArrayList<>();
        
        ArrayList<NC_category> nc_cat = query_nc_category_filial(et.getFiliale(), null);
        ArrayList<ET_change> etc = get_ET_nochange_value(et.getCod());
        for (int i = 0; i < etc.size(); i++) {
            ET_change val = etc.get(i);
            NC_category nc1 = getNC_category(nc_cat, val.getNc_causal());
            NoChangeFromBranchingSheet_value bsi1 = new NoChangeFromBranchingSheet_value();
            bsi1.setCategory(nc1.getGruppo_nc() + " " + nc1.getDe_gruppo_nc());
            bsi1.setQuantity(val.getIp_quantity());
            bsi1.setAmount(nc1.getIp_prezzo_nc());
            bsi1.setAuto(et.getAuto());
            out.add(bsi1);
        }
        return out;
    }

    /**
     *
     * @param et
     * @return
     */
    public ArrayList<NoChangeToBranchingSheet_value> list_ToBranchingSheet_valueNC(ET_change et) {
        ArrayList<NoChangeToBranchingSheet_value> out = new ArrayList<>();
        ArrayList<NC_category> nc_cat = query_nc_category_filial(et.getFiliale(), null);
        ArrayList<ET_change> etc = get_ET_nochange_value(et.getCod());
        for (int i = 0; i < etc.size(); i++) {
            ET_change val = etc.get(i);
            NC_category nc1 = getNC_category(nc_cat, val.getNc_causal());
            NoChangeToBranchingSheet_value bsi1 = new NoChangeToBranchingSheet_value();
            bsi1.setCategory(nc1.getGruppo_nc() + " " + nc1.getDe_gruppo_nc());
            bsi1.setQuantity((val.getIp_quantity()));
            bsi1.setAmount(nc1.getIp_prezzo_nc());
            out.add(bsi1);
        }
        return out;
    }

    /**
     *
     * @param data1
     * @param data2
     * @param branch
     * @param typeft
     * @param typedest
     * @return
     */
    public ArrayList<ET_change> list_ET_change_report(String data1, String data2, ArrayList<String> branch, String typeft, String typedest) {
        ArrayList<ET_change> out = new ArrayList<>();
        try {
            
            String sql = "SELECT * FROM et_change WHERE fg_annullato='0' ";
            
            String filwhere = "";
            
            for (int i = 0; i < branch.size(); i++) {
                filwhere = filwhere + "filiale='" + branch.get(i) + "' OR ";
            }
            
            if (filwhere.length() > 3) {
                sql = sql + " AND (" + filwhere.substring(0, filwhere.length() - 3).trim() + ") ";
            }
            
            if (data1 != null) {
                sql = sql + "AND dt_it >= '" + data1 + " 00:00:00' ";
            }
            
            if (data2 != null) {
                sql = sql + "AND dt_it <= '" + data2 + " 23:59:59' ";
            }
            
            if (!typeft.equals("ALL")) {
                sql = sql + "AND fg_tofrom = '" + typeft + "' ";
            }
            
            if (!typedest.equals("ALL")) {
                
                switch (typedest) {
                    case "BA":
                        sql = sql + " AND cod_dest IN (SELECT cod FROM bank where fg_annullato = '0' AND cod NOT IN"
                                + " (select distinct(carta_credito) from carte_credito WHERE fg_annullato = '0'))";
                        break;
                    case "BR":
                        sql = sql + "AND fg_brba = '" + typedest + "' ";
                        break;
                    case "PO":
                        sql = sql + " AND cod_dest IN (SELECT cod FROM bank where fg_annullato = '0' "
                                + "AND (bank_account = 'Y' OR cod in (select distinct(carta_credito) from carte_credito)))";
                        break;
                    default:
                        break;
                }
                
            }
            
            ResultSet rs = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql);
            while (rs.next()) {
                ET_change et = new ET_change();
                et.setCod(rs.getString(1));
                et.setId(leftPad(rs.getString(2), 10, "0"));
                et.setFiliale(rs.getString(3));
                et.setUser(rs.getString(4));
                et.setTill_from(rs.getString(5));
                et.setFg_tofrom(rs.getString(6));
                et.setFg_brba(rs.getString(7));
                et.setCod_dest(rs.getString(8));
                et.setIdopen_from(rs.getString(9));
                et.setDt_it(rs.getString(10));
                et.setFg_annullato(rs.getString(11));
                et.setDel_dt(rs.getString(12));
                et.setDel_user(rs.getString(13));
                et.setDel_motiv(rs.getString(14));
                et.setNote(rs.getString(15));
                et.setIp_oneri(rs.getString(16));
                et.setFiliale_in(rs.getString(17));
                et.setId_in(rs.getString(18));
                et.setCod_in(rs.getString(19));
                et.setAuto(rs.getString(20));
                out.add(et);
            }
            
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @param data1
     * @param data2
     * @param filiale
     * @param dest
     * @param branch
     * @param bank
     * @param type
     * @param ba_pos
     * @param chnc
     * @return
     */
    public ArrayList<ET_change> list_ET_change_report(String data1, String data2, String filiale, String dest, boolean branch, boolean bank, String type,
            String ba_pos, String chnc) {
        ArrayList<ET_change> out = new ArrayList<>();
        try {
            
            if (filiale == null || filiale.equals("")) {
                filiale = getCodLocal(true)[0];
            }
            
            String sql = "";
            
            if (dest != null) {
                if (branch) {
                    sql = "SELECT * FROM et_change where fg_brba='BR' and fg_annullato='0' AND filiale = '" + filiale + "' and cod_dest='" + dest + "' ";
                } else if (bank) {
                    sql = "SELECT * FROM et_change where fg_brba='BA' and fg_annullato='0' AND filiale = '" + filiale + "' and cod_dest='" + dest + "' ";
                }
            } else if (branch) {
                sql = "SELECT * FROM et_change where fg_brba='BR' and fg_annullato='0' AND filiale = '" + filiale + "'";
            } else if (bank) {
                
                if (ba_pos.toLowerCase().contains("pos")) {
                    
                    if (is_CZ || is_UK) {
                        sql = "SELECT * FROM et_change where fg_brba='BA' and fg_annullato='0' AND filiale = '" + filiale
                                + "' AND (cod_dest IN (SELECT DISTINCT(cod) FROM bank where fg_annullato = '0' AND bank_account = 'Y') "
                                + "OR cod_dest IN (SELECT DISTINCT(carta_credito) from carte_credito WHERE fg_annullato='0')) ";
                    } else {
                        sql = "SELECT * FROM et_change where fg_brba='BA' and fg_annullato='0' AND filiale = '" + filiale
                                + "' AND cod_dest IN (SELECT cod FROM bank where fg_annullato = '0' "
                                + "AND (bank_account = 'Y' OR cod in (select distinct(carta_credito) from carte_credito)))";
                    }

//                    SELECT cod FROM bank WHERE fg_annullato = '0' AND (bank_account = 'Y' OR cod in (select distinct(carta_credito) from carte_credito)) ORDER BY de_bank
                } else if (ba_pos.equalsIgnoreCase("bank")) {
                    sql = "SELECT * FROM et_change where fg_brba='BA' and fg_annullato='0' AND filiale = '" + filiale
                            + "' AND cod_dest IN (SELECT cod FROM bank where fg_annullato = '0' AND cod NOT IN"
                            + " (select distinct(carta_credito) from carte_credito WHERE fg_annullato = '0'))";
                }
            }
            
            if (type != null) {
                sql = sql + "AND fg_tofrom = '" + type + "' ";
            }
            
            if (data1 != null) {
                sql = sql + "AND dt_it >= '" + data1 + " 00:00:00' ";
            }
            if (data2 != null) {
                sql = sql + "AND dt_it <= '" + data2 + " 23:59:59' ";
            }
            
            if (chnc.equals("CH")) {
                sql = sql + "AND cod IN (SELECT distinct(cod) FROM et_change_valori)";
            } else if (chnc.equals("NC")) {
                sql = sql + "AND cod IN (SELECT distinct(cod) FROM et_nochange_valori)";
            }
            sql = sql + " ORDER BY dt_it";
            ResultSet rs = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql);
            while (rs.next()) {
                ET_change et = new ET_change();
                et.setCod(rs.getString(1));
                et.setId(leftPad(rs.getString(2), 10, "0"));
                et.setFiliale(rs.getString(3));
                et.setUser(rs.getString(4));
                et.setTill_from(rs.getString(5));
                et.setFg_tofrom(rs.getString(6));
                et.setFg_brba(rs.getString(7));
                et.setCod_dest(rs.getString(8));
                et.setIdopen_from(rs.getString(9));
                et.setDt_it(rs.getString(10));
                et.setFg_annullato(rs.getString(11));
                et.setDel_dt(rs.getString(12));
                et.setDel_user(rs.getString(13));
                et.setDel_motiv(rs.getString(14));
                et.setNote(rs.getString(15));
                et.setIp_oneri(rs.getString(16));
                et.setFiliale_in(rs.getString(17));
                et.setId_in(rs.getString(18));
                et.setCod_in(rs.getString(19));
                et.setAuto(rs.getString(20));
                out.add(et);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @param filiale
     * @param datad1
     * @param datad2
     * @return
     */
    public ArrayList<InternalTransferList_value> list_InternalTransferList_value(String filiale, String datad1, String datad2) {
        ArrayList<InternalTransferList_value> out = new ArrayList<>();
        try {
            String sql = "SELECT * FROM it_change where filiale='" + filiale + "' ";
            
            if (datad1 != null) {
                sql = sql + "AND dt_it >= '" + datad1 + " 00:00:00' ";
            }
            if (datad2 != null) {
                sql = sql + "AND dt_it <= '" + datad2 + " 23:59:59' ";
            }
            sql = sql + " ORDER BY dt_it";
            
            ResultSet rs = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql);
            
            while (rs.next()) {
                
                String sql2 = "SELECT * FROM it_change_valori where cod = '" + rs.getString("cod") + "'";
                ResultSet rs2 = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql2);
                
                ArrayList<String> listValue = new ArrayList<>();
                while (rs2.next()) {
                    listValue.add(rs2.getString("currency"));
                }
                removeDuplicatesAL(listValue);
                for (int i = 0; i < listValue.size(); i++) {
                    rs2.beforeFirst();
                    String va  = listValue.get(i);
                    double tot_note = 0.00;
                    double tot_etc = 0.00;
                    
                    while (rs2.next()) {
                        if (rs2.getString("currency").equalsIgnoreCase(va)) {
                            if (rs2.getString("kind").equals("01")) {
                                tot_note = tot_note + fd(rs2.getString("total"));
                            } else {
                                tot_etc = tot_etc + fd(rs2.getString("total"));
                            }
                        }
                    }
                    ArrayList<String> data = new ArrayList<>();
                    InternalTransferList_value bsi1 = new InternalTransferList_value();
                    data.add(rs.getString("till_from"));
                    data.add(rs.getString("till_to"));
                    data.add(rs.getString("id"));
                    data.add(formatStringtoStringDate(rs.getString("dt_it"), patternsqldate, patternnormdate));
                    data.add(va);
                    data.add((roundDoubleandFormat(tot_note, 2) + ""));
                    data.add((roundDoubleandFormat(tot_etc, 2) + ""));
                    data.add(rs.getString("user"));
                    
                    if (rs.getString("fg_annullato").equals("0")) {
                        data.add("-");
                    } else {
                        data.add(formatStringtoStringDate(rs.getString("del_dt"), patternsqldate, patternnormdate) + " - " + rs.getString("del_user"));
                    }
                    
                    bsi1.setDati_string(data);
                    out.add(bsi1);
                }
                
            }
            
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        
        return out;
    }

    /**
     *
     * @param filiale
     * @param datad1
     * @param datad2
     * @param list_nc_cat
     * @return
     */
    public ArrayList<NoChangeTransactionList_value> list_NoChangeTransactionList_value(String filiale, String datad1, String datad2, String list_nc_cat) {
        
        ArrayList<NoChangeTransactionList_value> out = new ArrayList<>();
        try {
            String sql = "SELECT data,gruppo_nc,causale_nc,till,data,id,note,fg_tipo_transazione_nc,ricevuta,quantita,total,user,fg_inout,del_fg,cod "
                    + "FROM nc_transaction where filiale = '" + filiale + "' ";
            
            if (datad1 != null) {
                sql = sql + "AND data >= '" + datad1 + " 00:00:00' ";
            }
            if (datad2 != null) {
                sql = sql + "AND data <= '" + datad2 + " 23:59:59' ";
            }
            
            Iterable<String> ite = onPattern(";").split(list_nc_cat);
            Iterator it = ite.iterator();
            String nccatwhere = "";
            while (it.hasNext()) {
                String nccat = it.next().toString().trim();
                if (!nccat.equals("") && !nccat.equals("...")) {
                    nccatwhere = nccatwhere + "gruppo_nc ='" + nccat + "' OR ";
                }
            }
            if (nccatwhere.length() > 3) {
                sql = sql + " AND (" + nccatwhere.substring(0, nccatwhere.length() - 3).trim() + ")";
            }
            
            sql = sql + " ORDER BY data";
            
            ArrayList<NC_category> nc_cat = query_nc_category_filial(filiale, null);
            ArrayList<NC_causal> nc_caus = query_nc_causal_filial(filiale, null);
            
            ResultSet rs = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql);
            while (rs.next()) {
                NoChangeTransactionList_value nctl = new NoChangeTransactionList_value();
                NC_category nc1 = getNC_category(nc_cat, rs.getString("gruppo_nc"));
                NC_causal nc2 = getNC_causal(nc_caus, rs.getString("causale_nc"), rs.getString("gruppo_nc"));
                nctl.setCod(rs.getString("cod"));
                nctl.setTill(rs.getString("till"));
                nctl.setDateTime(formatStringtoStringDate(rs.getString("data"), patternsqldate, patternnormdate));
                if (nc1 != null) {
                    nctl.setCategoryTrans(nc1.getGruppo_nc() + " " + nc1.getDe_gruppo_nc());
                } else {
                    nctl.setCategoryTrans("NOT FOUND");
                }
                if (nc2 != null) {
                    nctl.setKindTrans(nc2.getCausale_nc() + " " + nc2.getDe_causale_nc());
                } else {
                    nctl.setKindTrans("NOT FOUND");
                }
                
                nctl.setIdop(rs.getString("id"));
                nctl.setNote(rs.getString("note"));
                
                switch (rs.getString("fg_tipo_transazione_nc")) {
                    case "1":
                        nctl.setQuantity("1");
                        break;
                    case "3":
                        nctl.setQuantity(formatMysqltoDisplay(roundDoubleandFormat(fd(rs.getString("ricevuta")), 0)));
                        break;
                    default:
                        nctl.setQuantity(formatMysqltoDisplay(roundDoubleandFormat(fd(rs.getString("quantita")), 0)));
                        break;
                }
                
                nctl.setTotal(formatMysqltoDisplay(rs.getString("total")));
                nctl.setUser(rs.getString("user"));
                nctl.setInout(rs.getString("fg_inout"));
                nctl.setAnnullato(rs.getString("del_fg"));
                out.add(nctl);
                
            }
            
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @param filiale
     * @param datad1
     * @param datad2
     * @param list_nc_cat
     * @return
     */
    public ArrayList<TaxFree_value> list_TaxFree_value(String filiale, String datad1, String datad2, String list_nc_cat) {
        ArrayList<TaxFree_value> out = new ArrayList<>();
        
        try {
            
            String sql = "SELECT SUBSTRING(data, 1,10) as raf,total,quantita,fg_dogana,gruppo_nc,ricevuta FROM nc_transaction"
                    + " WHERE filiale = '" + filiale + "' AND del_fg='0' ";
            ArrayList<String> cat = new ArrayList<>();
            Iterable<String> ite = onPattern(";").split(list_nc_cat);
            Iterator it = ite.iterator();
            String nccatwhere = "";
            while (it.hasNext()) {
                
                String nccat = it.next().toString().trim();
                if (!nccat.equals("") && !nccat.equals("...")) {
                    nccatwhere = nccatwhere + " gruppo_nc ='" + nccat + "' OR ";
                    cat.add(nccat);
                }
            }
            if (nccatwhere.length() > 3) {
                sql = sql + " AND (" + nccatwhere.substring(0, nccatwhere.length() - 3).trim() + ")";
            }
            if (datad1 != null) {
                sql = sql + "AND data >= '" + datad1 + " 00:00:00' ";
            }
            if (datad2 != null) {
                sql = sql + "AND data <= '" + datad2 + " 23:59:59' ";
            }
            sql = sql + " ORDER BY gruppo_nc,data";
            ResultSet rs = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql);
            
            ArrayList<String> dateValue = new ArrayList<>();
            
            while (rs.next()) {
                dateValue.add(rs.getString("raf"));
            }
            rs.beforeFirst();
            
            removeDuplicatesAL(dateValue);
            
            ArrayList<NC_category> def = query_nc_category_enabled("3");
            for (int i = 0; i < dateValue.size(); i++) {
                String date = dateValue.get(i);
                TaxFree_value tf = new TaxFree_value();
                ArrayList<String[]> listcategory = new ArrayList<>();
                
                for (int j = 0; j < cat.size(); j++) {
                    NC_category nc1 = getNC_category(def, cat.get(j));
                    double totrimb = 0.0;
                    double totmoduli = 0.0;
                    int countSIdog = 0;
                    int countNOdog = 0;
                    String[] test2 = new String[5];
                    test2[0] = nc1.getDe_gruppo_nc();
                    while (rs.next()) {
                        if (rs.getString("raf").equals(date)) {
                            if (rs.getString("gruppo_nc").equals(nc1.getGruppo_nc())) {
                                totrimb = totrimb + fd(rs.getString("total"));
                                totmoduli = totmoduli + fd(rs.getString("ricevuta"));
                                if (rs.getString("fg_dogana").equals("00")) {
                                    countSIdog++;
                                } else {
                                    countNOdog++;
                                }
                            }
                        }
                    }
                    rs.beforeFirst();
                    test2[1] = formatMysqltoDisplay(roundDoubleandFormat(totrimb, 2) + "");
                    test2[2] = formatMysqltoDisplay(valueOf(countSIdog));
                    test2[3] = formatMysqltoDisplay(valueOf(countNOdog));
                    test2[4] = formatMysqltoDisplay(roundDoubleandFormat(totmoduli, 0) + "");
                    listcategory.add(test2);
                }
                tf.setData(formatStringtoStringDate(date, patternsql, patternnormdate_filter));
                tf.setCategoryList(listcategory);
                out.add(tf);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @param filiale
     * @param datad1
     * @param datad2
     * @param list_nc_cat
     * @return
     */
    public ArrayList<NoChangeTransactionListForUser_value> list_NoChangeTransactionListForUser_value(String filiale, String datad1, String datad2, String list_nc_cat) {
        ArrayList<NoChangeTransactionListForUser_value> out = new ArrayList<>();
        try {
            String sql = "SELECT data,gruppo_nc,causale_nc,till,data,id,note,fg_tipo_transazione_nc,ricevuta,quantita,total,user,fg_inout,del_fg FROM nc_transaction WHERE filiale = '" + filiale + "' ";
            
            Iterable<String> ite = onPattern(";").split(list_nc_cat);
            Iterator it = ite.iterator();
            String nccatwhere = "";
            while (it.hasNext()) {
                
                String nccat = it.next().toString().trim();
                if (!nccat.equals("") && !nccat.equals("...")) {
                    nccatwhere = nccatwhere + "gruppo_nc ='" + nccat + "' OR ";
                }
            }
            if (nccatwhere.length() > 3) {
                sql = sql + " AND (" + nccatwhere.substring(0, nccatwhere.length() - 3).trim() + ")";
            }
            if (datad1 != null) {
                sql = sql + "AND data >= '" + datad1 + " 00:00:00' ";
            }
            if (datad2 != null) {
                sql = sql + "AND data <= '" + datad2 + " 23:59:59' ";
            }
            sql = sql + " ORDER BY gruppo_nc,data";
            
            ResultSet rs = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql);
            ArrayList<NC_category> nc_cat = query_nc_category_filial(filiale, null);
            ArrayList<NC_causal> nc_caus = query_nc_causal_filial(filiale, null);
            
            while (rs.next()) {
                NoChangeTransactionListForUser_value nctl = new NoChangeTransactionListForUser_value();
                nctl.setTill(rs.getString("till"));
                nctl.setDateTime(formatStringtoStringDate(rs.getString("data"), patternsqldate, patternnormdate));
                NC_category nc1 = getNC_category(nc_cat, rs.getString("gruppo_nc"));
                NC_causal nc2 = getNC_causal(nc_caus, rs.getString("causale_nc"), rs.getString("gruppo_nc"));
                if (nc1 != null) {
                    nctl.setCategoryTrans(nc1.getGruppo_nc() + " " + nc1.getDe_gruppo_nc());
                } else {
                    nctl.setCategoryTrans("NOT FOUND");
                }
                if (nc2 != null) {
                    nctl.setKindTrans(nc2.getCausale_nc() + " " + nc2.getDe_causale_nc());
                } else {
                    nctl.setKindTrans("NOT FOUND");
                }
                
                nctl.setNote(rs.getString("note"));
                switch (rs.getString("fg_tipo_transazione_nc")) {
                    case "1":
                        nctl.setQuantity("1");
                        break;
                    case "3":
                        nctl.setQuantity(formatMysqltoDisplay(roundDoubleandFormat(fd(rs.getString("ricevuta")), 0)));
                        break;
                    default:
                        nctl.setQuantity(formatMysqltoDisplay(roundDoubleandFormat(fd(rs.getString("quantita")), 0)));
                        break;
                }
                
                nctl.setTotal(formatMysqltoDisplay(rs.getString("total")));
                nctl.setUser(rs.getString("user"));
                
                nctl.setInout(rs.getString("fg_inout"));
                nctl.setAnnullato(rs.getString("del_fg"));
                out.add(nctl);
                
            }
            
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @param filiale
     * @param datad1
     * @param datad2
     * @param list_nc_cat
     * @return
     */
    public ArrayList<InsuranceTransactionList_value> list_InsuranceTransactionList_value(String filiale, String datad1, String datad2, String list_nc_cat) {
        ArrayList<InsuranceTransactionList_value> out = new ArrayList<>();
        try {
            String sql = "SELECT ass_idcode,cl_cognome,cl_nome,cl_indirizzo,cl_cap,cl_citta,cl_provincia,ass_startdate,ass_enddate,"
                    + "data,gruppo_nc,causale_nc,till,data,id,note,fg_tipo_transazione_nc,ricevuta,quantita,total,user,fg_inout,del_fg"
                    + " FROM nc_transaction WHERE filiale = '" + filiale + "' ";
            Iterable<String> ite = onPattern(";").split(list_nc_cat);
            Iterator it = ite.iterator();
            String nccatwhere = "";
            while (it.hasNext()) {
                
                String nccat = it.next().toString().trim();
                if (!nccat.equals("") && !nccat.equals("...")) {
                    nccatwhere = nccatwhere + "gruppo_nc ='" + nccat + "' OR ";
                }
            }
            if (nccatwhere.length() > 3) {
                sql = sql + " AND (" + nccatwhere.substring(0, nccatwhere.length() - 3).trim() + ")";
            }
            if (datad1 != null) {
                sql = sql + "AND data >= '" + datad1 + " 00:00:00' ";
            }
            if (datad2 != null) {
                sql = sql + "AND data <= '" + datad2 + " 23:59:59' ";
            }
            sql = sql + " ORDER BY gruppo_nc,data";
            ResultSet rs = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql);
            ArrayList<NC_causal> nc_caus = query_nc_causal_filial(filiale, null);
            
            while (rs.next()) {
                
                InsuranceTransactionList_value itl = new InsuranceTransactionList_value();
                itl.setTill(rs.getString("till"));
                itl.setDateTime(formatStringtoStringDate(rs.getString("data"), patternsqldate, patternnormdate));
                NC_causal nc2 = getNC_causal(nc_caus, rs.getString("causale_nc"), rs.getString("gruppo_nc"));
                if (nc2 != null) {
                    itl.setCategoryOfTransaction(nc2.getCausale_nc() + " " + nc2.getDe_causale_nc());
                } else {
                    itl.setCategoryOfTransaction("NOT FOUND");
                }
                itl.setUser(rs.getString("user"));
                itl.setInout(rs.getString("fg_inout"));
                itl.setAnnullato(rs.getString("del_fg"));
                
                itl.setInsuranceNumber(rs.getString("ass_idcode"));
                itl.setDescr1(rs.getString("cl_cognome") + " " + rs.getString("cl_nome"));
                itl.setDescr2(rs.getString("cl_indirizzo"));
                itl.setDescr3(rs.getString("cl_cap") + " " + rs.getString("cl_citta") + " " + rs.getString("cl_provincia"));
                itl.setStartDate(rs.getString("ass_startdate"));
                itl.setEndDate(rs.getString("ass_enddate"));
                
                itl.setTotal(formatMysqltoDisplay(rs.getString("total")));
                
                out.add(itl);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
        
    }

    /**
     *
     * @param filiale
     * @param datad1
     * @param datad2
     * @param list_nc_cat
     * @return
     */
    public ArrayList<WesternUnionService_value> list_WesternUnionService_value(String filiale, String datad1, String datad2, String list_nc_cat) {
        ArrayList<WesternUnionService_value> out = new ArrayList<>();
        try {
            String sql = "SELECT causale_nc,till,data,total,netto,commissione,user,fg_inout,del_fg,gruppo_nc FROM nc_transaction WHERE filiale = '" + filiale + "' ";
            
            Iterable<String> ite = onPattern(";").split(list_nc_cat);
            Iterator it = ite.iterator();
            String nccatwhere = "";
            while (it.hasNext()) {
                String nccat = it.next().toString().trim();
                if (!nccat.equals("") && !nccat.equals("...")) {
                    nccatwhere = nccatwhere + "gruppo_nc ='" + nccat + "' OR ";
                }
            }
            if (nccatwhere.length() > 3) {
                sql = sql + " AND (" + nccatwhere.substring(0, nccatwhere.length() - 3).trim() + ")";
            }
            if (datad1 != null) {
                sql = sql + "AND data >= '" + datad1 + " 00:00:00' ";
            }
            if (datad2 != null) {
                sql = sql + "AND data <= '" + datad2 + " 23:59:59' ";
            }
            sql = sql + " ORDER BY gruppo_nc,data";
            
            ResultSet rs = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql);
            ArrayList<NC_causal> nc_caus = query_nc_causal_filial(filiale, null);
            
            while (rs.next()) {
                
                NC_causal nc2 = getNC_causal(nc_caus, rs.getString("causale_nc"), rs.getString("gruppo_nc"));
                
                WesternUnionService_value wu = new WesternUnionService_value();
                wu.setTill(rs.getString("till"));
                wu.setDateTime(formatStringtoStringDate(rs.getString("data"), patternsqldate, patternnormdate));
                wu.setNoControl("");
                wu.setNoInvoice("");
                
                if (nc2.getNc_de().equals("01")) {
                    //receive
                    wu.setNetInOutSend("0.00");
                    wu.setSend("0.00");
                    wu.setNetInOutReceive((rs.getString("total")));
                    wu.setReceive((rs.getString("total")));
                    wu.setCoomWUSend("0.00");
                } else {
                    //send
                    wu.setNetInOutSend((rs.getString("netto")));
                    wu.setSend((rs.getString("total")));
                    wu.setNetInOutReceive("0.00");
                    wu.setReceive("0.00");
                    wu.setCoomWUSend((rs.getString("commissione")));
                }
                
                wu.setUser(rs.getString("user"));
                wu.setInout(rs.getString("fg_inout"));
                wu.setAnnullato(rs.getString("del_fg"));
                
                out.add(wu);
                
            }
            
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @param fil
     * @param datad1
     * @param datad2
     * @param libr
     * @return
     */
    public ArrayList<C_ChangeInternetBookingForBranches_value> list_C_ChangeInternetBookingForBranches_value(String fil, String datad1, String datad2, ArrayList<Branch> libr) {
        ArrayList<C_ChangeInternetBookingForBranches_value> out = new ArrayList<>();
        try {
            
            String sql = "SELECT * FROM internetbooking_ch ib, ch_transaction tr1 "
                    + "WHERE ib.cod=tr1.cod AND tr1.del_fg='0' AND tr1.tipotr='S' and tr1.intbook = '1' "
                    + "AND tr1.filiale = '" + fil + "' AND tr1.data >= '" + datad1 + " 00:00:00' AND tr1.data <= '" + datad2 + " 23:59:59' "
                    + "ORDER BY tr1.data";
            ResultSet rs = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql);
            ArrayList<Figures> fi = list_all_figures();
            ArrayList<CustomerKind> ck = list_customerKind();
            ArrayList<String[]> ib = list_internetbooking();
            while (rs.next()) {
                ArrayList<Ch_transaction_value> val = query_transaction_value(rs.getString("tr1.cod"));
                for (int i = 0; i < val.size(); i++) {
                    C_ChangeInternetBookingForBranches_value cibfb = new C_ChangeInternetBookingForBranches_value();
                    cibfb.setDe_filiale(formatBankBranch(fil, "BR", null, libr, null));
                    cibfb.setTransaction("Sell " + fil + rs.getString("tr1.id"));
                    cibfb.setDate(formatStringtoStringDate(rs.getString("tr1.data"), patternsqldate, patternnormdate));
                    cibfb.setUser(rs.getString("tr1.user"));
                    cibfb.setCurrency(val.get(i).getValuta());
                    cibfb.setSupport(rs.getString("tr1.localfigures") + " "
                            + Engine.get_figures(fi, rs.getString("tr1.localfigures")).getDe_supporto());
                    cibfb.setQty(val.get(i).getQuantita());
                    cibfb.setTotalCurrency(val.get(i).getTotal());
                    cibfb.setPercCom(val.get(i).getCom_perc());
                    cibfb.setTotalCom(val.get(i).getCom_perc_tot());
                    cibfb.setTotalNet(val.get(i).getNet());
                    cibfb.setTotalBuy(roundDoubleandFormat(fd(val.get(i).getNet()) - fd(val.get(i).getSpread()), 2));
                    cibfb.setTotalSpread(val.get(i).getSpread());
                    cibfb.setTotalComFix(val.get(i).getTot_com());
                    cibfb.setKindClient(Engine.get_customerKind(ck, rs.getString("tr1.tipocliente")).getDe_tipologia_clienti());
                    
                    cibfb.setCode(rs.getString("ib.codiceprenotazione"));
                    cibfb.setDescription(formatAL(rs.getString("ib.canale"), ib, 1));
                    out.add(cibfb);

//                    System.out.println("A) "+fil+" - "+fil+" -- "+formatAL(rs.getString("ib.canale"), ib, 1)+" - "+rs.getString("ib.canale"));
                }
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @param b1
     * @param datad1
     * @param datad2
     * @param deleted
     * @return
     */
    public ArrayList<DailyChange_CG> list_DailyChange_CG(Branch b1, String datad1, String datad2, boolean deleted) {
        ArrayList<DailyChange_CG> out = new ArrayList<>();
        try {
            DateTime inizionuovospreadCZ = new DateTime(2021, 10, 1, 0, 0).withMillisOfDay(0);
            ArrayList<Figures> fig = list_all_figures();
            ArrayList<String[]> list_group = list_branch_group();
            ArrayList<Users> list_users = list_all_users();
            ArrayList<String[]> nazioni = country();
            ArrayList<String[]> array_undermincommjustify = undermincommjustify();
            ArrayList<String[]> array_kindcommissionefissa = kindcommissionefissa();
            ArrayList<String[]> array_unlockrate = unlockratejustify();
            ArrayList<String[]> bank = list_bank_pos_enabled();
            ArrayList<String[]> bank2 = list_bank();
            ArrayList<String[]> history_BB = history_BB();
            ArrayList<NC_category> listcat = list_nc_category_enabled();
            ArrayList<NC_causal> listcaus = list_nc_causal_enabled_freetax();
            
            String sqlet = "SELECT * FROM et_change e, et_change_valori ev WHERE ev.cod=e.cod and e.filiale='" + b1.getCod() + "' ";
            if (datad1 != null) {
                sqlet = sqlet + "AND e.dt_it >= '" + datad1 + " 00:00:00' ";
            }
            if (datad2 != null) {
                sqlet = sqlet + "AND e.dt_it <= '" + datad2 + " 23:59:59' ";
            }
            
            if (!deleted) {
                sqlet = sqlet + "AND e.fg_annullato = '0' ";
            }
            
            sqlet = sqlet + " ORDER BY e.dt_it";
            
            ResultSet rset = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sqlet);
            
            while (rset.next()) {
                
                DailyChange_CG d1 = new DailyChange_CG();
                DateTime dt_it = getDT(rset.getString("e.dt_it"), patternsqldate);
                Users g = Engine.get_user(rset.getString("e.user"), list_users);
                Figures f = Engine.get_figures(fig, rset.getString("ev.kind"));
                d1.setCDC(b1.getCod());
                d1.setSPORTELLO(b1.getDe_branch().toUpperCase());
                d1.setID(rset.getString("e.id"));
                if (rset.getString("e.fg_annullato").equals("1")) {
                    d1.setDELETE("SI");
                } else {
                    d1.setDELETE("");
                }
                
                d1.setAREA(formatAL(b1.getBrgr_01(), list_group, 1));
                d1.setCITTA(formatAL(b1.getBrgr_04(), list_group, 1));
                d1.setUBICAZIONE(formatAL(b1.getBrgr_02(), list_group, 1));
                d1.setGRUPPO(formatAL(b1.getBrgr_03(), list_group, 1));
                d1.setDATA(dt_it.toString(patternnormdate_filter));
                d1.setORA(dt_it.toString(patternhours_d));
                d1.setMESE(dt_it.monthOfYear().getAsText(ITALY).toUpperCase());
                d1.setANNO(dt_it.year().getAsText());
                d1.setCODUSER(g.getCod());
                d1.setUSERNOME(g.getDe_nome().toUpperCase());
                d1.setUSERCOGNOME(g.getDe_cognome().toUpperCase());
                d1.setMETODOPAGAMENTO("");
                d1.setRESIDENZACLIENTE("");
                d1.setNAZIONALITACLIENTE("");
                d1.setCOMMENTI(rset.getString("e.note"));
                d1.setACQUISTOVENDITA(format_tofrom_brba_new(rset.getString("e.fg_tofrom"),
                        rset.getString("e.fg_brba"), rset.getString("e.cod_dest"),
                        bank, bank2));
                d1.setTIPOLOGIAACQOVEND(f.getDe_supporto());
                d1.setVALUTA(rset.getString("ev.currency"));
                d1.setQUANTITA((rset.getString("ev.ip_quantity")));
                d1.setTASSODICAMBIO((rset.getString("ev.ip_rate")));
                d1.setCONTROVALORE((rset.getString("ev.ip_total")));
                d1.setCOMMVARIABILE("");
                d1.setCOMMFISSA("");
                
                String SPREADBANK = "";
                
                if (rset.getString("e.fg_brba").equals("BR")) {
//                    SPREADBRANCH = (rset.getString("ev.ip_spread"));
                } else {
                    SPREADBANK = (rset.getString("ev.ip_spread"));
                }

//                if (Constant.is_IT) {
                d1.setSPREADBRANCH("");
//                } else {
//                    if (dt_it.isBefore(inizionuovospreadCZ)) {
//                        d1.setSPREADBRANCH(SPREADBRANCH);
//                    } else {
//                        d1.setSPREADBRANCH("");
//                    }
//                }

                d1.setSPREADBANK(SPREADBANK);
                
                d1.setSPREADVEND("");
                
                double totgm = fd(rset.getString("ev.ip_spread"));
                
                if (rset.getString("e.fg_brba").equals("BR")) {
                    
                    if (is_IT) {
                        if (newpread) {
                            d1.setTOTGM("0.00");
                        } else {
                            d1.setTOTGM((roundDoubleandFormat(totgm, 2)));
                        }
                    } else {
                        if (dt_it.isBefore(inizionuovospreadCZ)) {
                            d1.setTOTGM((roundDoubleandFormat(totgm, 2)));
                        } else {
                            d1.setTOTGM("0.00");
                        }
                    }
                } else {
                    d1.setTOTGM((roundDoubleandFormat(totgm, 2)));
                }
                
                d1.setPERCCOMM("");
                d1.setPERCSPREADVENDITA("");
                d1.setVENDITABUYBACK("");
                d1.setVENDITASELLBACK("");
                d1.setCODICEINTERNETBOOKING("");
                d1.setMOTIVOPERRIDUZIONEDELLACOMM("");
                d1.setMOTIVOPERRIDUZIONEDELLACOMMFISSA("");
                
                d1.setCODICESBLOCCO("");
                out.add(d1);
                
            }
            
            String sql = "SELECT * FROM ch_transaction tr1, ch_transaction_valori tr2 WHERE tr1.cod=tr2.cod_tr AND tr1.filiale = '" + b1.getCod() + "' ";
            if (datad1 != null) {
                sql = sql + "AND tr1.data >= '" + datad1 + " 00:00:00' ";
            }
            if (datad2 != null) {
                sql = sql + "AND tr1.data <= '" + datad2 + " 23:59:59' ";
            }
            
            if (!deleted) {
                sql = sql + "AND tr1.del_fg <= '0' ";
            }
            
            sql = sql + " ORDER BY tr1.data";
            
            ResultSet rs = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql);
            
            while (rs.next()) {
                DailyChange_CG d1 = new DailyChange_CG();
                
                DateTime dt_tr = getDT(rs.getString("tr1.data"), patternsqldate);
                Users g = Engine.get_user(rs.getString("tr1.user"), list_users);
                Figures f = Engine.get_figures(fig, rs.getString("tr2.supporto"));
                Figures p = Engine.get_figures(fig, rs.getString("tr1.localfigures"));
                
                d1.setCDC(b1.getCod());
                d1.setSPORTELLO(b1.getDe_branch().toUpperCase());
                d1.setID(rs.getString("tr1.id"));
                if (rs.getString("tr1.del_fg").equals("1")) {
                    d1.setDELETE("SI");
                } else {
                    d1.setDELETE("");
                }
                
                d1.setAREA(formatAL(b1.getBrgr_01(), list_group, 1));
                d1.setCITTA(formatAL(b1.getBrgr_04(), list_group, 1));
                d1.setUBICAZIONE(formatAL(b1.getBrgr_02(), list_group, 1));
                d1.setGRUPPO(formatAL(b1.getBrgr_03(), list_group, 1));
                d1.setDATA(dt_tr.toString(patternnormdate_filter));
                d1.setORA(dt_tr.toString(patternhours_d));
                d1.setMESE(dt_tr.monthOfYear().getAsText(ITALY).toUpperCase());
                d1.setANNO(dt_tr.year().getAsText());
                d1.setCODUSER(g.getCod());
                d1.setUSERNOME(g.getDe_nome().toUpperCase());
                d1.setUSERCOGNOME(g.getDe_cognome().toUpperCase());
                
                if (rs.getString("tr1.tipotr").equals("B")) {
                    d1.setMETODOPAGAMENTO(f.getDe_supporto());
                } else {
                    d1.setMETODOPAGAMENTO(p.getDe_supporto());
                }
                
                Client c0 = query_Client_transaction(rs.getString("tr1.cod"), rs.getString("tr1.cl_cod"));
                d1.setRESIDENZACLIENTE(formatALN(c0.getNazione(), nazioni, 1));
                d1.setNAZIONALITACLIENTE(formatALN(c0.getNazione_nascita(), nazioni, 1));
                
                d1.setCOMMENTI(rs.getString("tr1.note"));
                
                d1.setACQUISTOVENDITA(
                        formatType_new(rs.getString("tr1.tipotr"),
                                rs.getString("tr1.intbook"),
                                rs.getString("tr1.intbook_type"),
                                rs.getString("tr1.intbook_1_tf"),
                                rs.getString("tr1.intbook_2_tf"),
                                rs.getString("tr1.intbook_3_tf"), listcat, listcaus));
                
                d1.setTIPOLOGIAACQOVEND(f.getDe_supporto());
                
                d1.setVALUTA(rs.getString("tr2.valuta"));
                d1.setQUANTITA((rs.getString("tr2.quantita")));
                d1.setTASSODICAMBIO((rs.getString("tr2.rate")));
                d1.setCONTROVALORE((rs.getString("tr2.total")));
                d1.setCOMMVARIABILE((rs.getString("tr2.com_perc_tot")));
                d1.setCOMMFISSA((rs.getString("tr2.fx_com")));
                
                String SPREADBRANCH = "", SPREADBANK = "";
                d1.setSPREADBRANCH(SPREADBRANCH);
                d1.setSPREADBANK(SPREADBANK);
                d1.setSPREADVEND((rs.getString("tr2.spread")));
                
                double totgm = fd(rs.getString("tr2.spread"))
                        + fd(rs.getString("tr2.tot_com"))
                        + parseDoubleR(rs.getString("tr2.roundvalue"));
                
                if (is_CZ) {
                    double rv = parseDoubleR_CZ(rs.getString("tr2.roundvalue"), rs.getString("tr1.tipotr").equals("B"));
                    totgm = fd(rs.getString("tr2.spread"))
                            + fd(rs.getString("tr2.tot_com"))
                            + rv;
                }
                
                d1.setTOTGM((roundDoubleandFormat(totgm, 2)));
                
                d1.setPERCCOMM(rs.getString("tr2.com_perc"));
                double perc_spread = 0.0;
                if (totgm != 0.0) {
                    perc_spread = fd(rs.getString("tr2.spread")) * 100.0 / totgm;
                }
                
                d1.setPERCSPREADVENDITA((roundDoubleandFormat(perc_spread, 2)));
                
                String bb_status = "N";
                String sb_status = "N";
                
                if (rs.getString("tr1.tipotr").equals("S")) {
                    
                    if (rs.getString("tr1.bb").equals("1") || rs.getString("tr1.bb").equals("2")) {
                        if (rs.getString("tr2.bb").equals("Y") || rs.getString("tr2.bb").equals("F")) {
                            bb_status = rs.getString("tr2.bb");
                        }
                    }
                    if (rs.getString("tr1.bb").equals("3") || rs.getString("tr1.bb").equals("4")) {
                        if (rs.getString("tr2.bb").equals("Y") || rs.getString("tr2.bb").equals("F")) {
                            sb_status = rs.getString("tr2.bb");
                        }
                    }
                    
                    switch (bb_status) {
                        case "Y":
                            d1.setVENDITABUYBACK(get_Value_history_BB(history_BB, dt_tr, f));
                            break;
                        case "F":
                            d1.setVENDITABUYBACK("FREE");
                            break;
                        default:
                            d1.setVENDITABUYBACK("");
                            break;
                    }
                    d1.setVENDITASELLBACK("");
                } else {
                    
                    if (rs.getString("tr1.bb").equals("1")) {
                        if (rs.getString("tr2.bb").equals("Y") || rs.getString("tr2.bb").equals("F")) {
                            bb_status = rs.getString("tr2.bb");
                        }
                    }
                    if (rs.getString("tr1.bb").equals("3") || rs.getString("tr1.bb").equals("4")) {
                        if (rs.getString("tr2.bb").equals("Y") || rs.getString("tr2.bb").equals("F")) {
                            sb_status = rs.getString("tr2.bb");
                        }
                    }
                    
                    switch (sb_status) {
                        case "Y":
                            d1.setVENDITASELLBACK(get_Value_history_BB(history_BB, dt_tr, f));
                            break;
                        case "F":
                            d1.setVENDITASELLBACK("FREE");
                            break;
                        default:
                            d1.setVENDITASELLBACK("");
                            break;
                    }
                    d1.setVENDITABUYBACK("");
                }
                
                if (rs.getString("tr1.intbook").equals("1")) {
                    String[] ib = internetbooking_ch(rs.getString("tr1.cod"));
                    if (ib != null) {
                        d1.setCODICEINTERNETBOOKING(ib[1].toUpperCase());
                    } else {
                        d1.setCODICEINTERNETBOOKING("");
                    }
                    d1.setMOTIVOPERRIDUZIONEDELLACOMM("Internet Booking");
                    d1.setMOTIVOPERRIDUZIONEDELLACOMMFISSA("Internet Booking");
                } else {
                    d1.setCODICEINTERNETBOOKING("");
                    d1.setMOTIVOPERRIDUZIONEDELLACOMM(formatAL(rs.getString("tr2.low_com_ju"), array_undermincommjustify, 1));
                    d1.setMOTIVOPERRIDUZIONEDELLACOMMFISSA(formatAL(rs.getString("tr2.kind_fix_comm"), array_kindcommissionefissa, 1));
                }
                
                Codici_sblocco cs1 = getCod_tr(rs.getString("tr1.cod"), "01");
                String cs = "";
                if (cs1 != null) {
                    cs = cs1.getCodice();
                    if (cs1.getCodice().contains("###")) {
                        cs = formatAL(on("###").splitToList(cs1.getCodice()).get(1), array_unlockrate, 1).toUpperCase();
                    }
                }
                d1.setCODICESBLOCCO(cs);

//                String loy = Engine.query_LOY_transaction(rs.getString("tr1.cod"), null, "000");
                String loy = query_LOY_transaction(rs.getString("tr1.cod"));
                
                if (loy == null) {
                    loy = "";
                }
                d1.setLOYALTYCODE(loy);
                
                out.add(d1);
                
            }
            
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @param fil
     * @param datad1
     * @param datad2
     * @return
     */
    public TillTransactionList_value list_SanctionAttempts(String[] fil, String datad1, String datad2) {
        
        try {
            
            String sql = "SELECT * FROM ch_transaction tr1, ch_transaction_valori tr2 "
                    + " WHERE tr1.cod=tr2.cod_tr AND tr1.filiale = '" + fil[0] + "' AND del_motiv='TRANSACTION NOT SAVED - INTERNATIONAL SANCTIONS YES' ";
            
            if (datad1 != null) {
                sql = sql + "AND tr1.data >= '" + datad1 + " 00:00:00' ";
            }
            if (datad2 != null) {
                sql = sql + "AND tr1.data <= '" + datad2 + " 23:59:59' ";
            }
            sql = sql + " ORDER BY tr1.data";
            ResultSet rs = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql);
            
            ArrayList<Figures> fig = list_all_figures();
            ArrayList<CustomerKind> list_customerKind = list_customerKind();
            ArrayList<TillTransactionList_value> dati = new ArrayList<>();
            List<String> listmodify = list_transaction_modify_ch();
            
            while (rs.next()) {
                TillTransactionList_value rm = new TillTransactionList_value();
                
                rm.setType(formatTilltr(rs.getString("tr1.del_fg"), rs.getString("tr1.bb"),
                        rs.getString("tr1.fa_number"), rs.getString("tr2.supporto"),
                        rs.getString("tr2.bb"), listmodify.contains(rs.getString("tr1.cod")), this,
                        rs.getString("tr1.refund"), rs.getString("tr1.cod")));
                
                rm.setTill(rs.getString("tr1.till"));
                rm.setUser(rs.getString("tr1.user"));
                rm.setNotr(rs.getString("tr1.id"));
                rm.setTime(rs.getString("tr1.data"));
                rm.setCur(rs.getString("tr2.valuta"));
                rm.setKind(formatType(rs.getString("tr1.tipotr")) + " " + Engine.get_figures(fig, rs.getString("tr2.supporto")).getDe_supporto());
                rm.setAmount(rs.getString("tr2.quantita"));
                rm.setRate(rs.getString("tr2.rate"));
                rm.setTotal(rs.getString("tr2.total"));
                rm.setPerc(rs.getString("tr2.com_perc"));
                rm.setComfree(rs.getString("tr2.tot_com"));
                rm.setPayinpayout(rs.getString("tr2.net"));
                rm.setCustomer(query_Client_transactionCN(rs.getString("tr1.cod"), rs.getString("tr1.cl_cod")));
                rm.setSpread(rs.getString("tr2.spread"));
                String lfig = rs.getString("tr1.localfigures");
                if (rs.getString("tr1.localfigures").equals("-")) {
                    lfig = "01";
                }
                rm.setFig(lfig);
                
                if (rs.getString("tr2.supporto").equals("04")) {
                    rm.setPos(rs.getString("tr2.pos"));
                } else {
                    rm.setPos(rs.getString("tr1.pos"));
                }

//                rm.setFig(Engine.get_figures(fig, rs.getString("tr2.supporto")).getDe_supporto());
                rm.setRound(rs.getString("tr2.roundvalue").replaceAll("-", ""));
                if (Engine.get_customerKind(list_customerKind, rs.getString("tr1.tipocliente")).getFg_nazionalita().equals("1")) {
                    rm.setResidentnonresident("Resident");
                } else {
                    rm.setResidentnonresident("Non Resident");
                }
                rm.setInternetbooking(rs.getString("tr1.intbook"));
                dati.add(rm);
            }
            if (dati.size() > 0) {
                TillTransactionList_value pdf = new TillTransactionList_value();
                pdf.setId_filiale(fil[0]);
                pdf.setDe_filiale(fil[1]);
                pdf.setDati(dati);
                
                double setTransvalueresidentbuy = 0.0;
                double setTransvaluenonresidentbuy = 0.0;
                double setTransvalueresidentsell = 0.0;
                double setTransvaluenonresidentsell = 0.0;
                double setCommisionvaluetresidentbuy = 0.0;
                double setCommisionvaluenonresidentbuy = 0.0;
                double setCommisionvaluetresidentsell = 0.0;
                double setCommisionvaluenonresidentsell = 0.0;
                
                int setTransactionnumberresidentbuy = 0;
                int setTransactionnumbernonresidentbuy = 0;
                int setTransactionnumberresidentsell = 0;
                int setTransactionnumbernonresidentsell = 0;
                
                double setInternetbookingamountyes = 0.0;
                int setInternetbookingnumberyes = 0;
                double setInternetbookingamountno = 0.0;
                int setInternetbookingnumberno = 0;
                
                double setPosbuyamount = 0.0;
                int setPosbuynumber = 0;
                double setPossellamount = 0.0;
                int setPossellnumber = 0;
                double setBanksellamount = 0.0;
                int setBanksellnumber = 0;
                
                for (int i = 0; i < dati.size(); i++) {
                    TillTransactionList_value rm = dati.get(i);
                    if (rm.getResidentnonresident().equals("Resident") && rm.getKind().toUpperCase().startsWith("BUY") && !rm.getType().contains("D")) {
                        setTransvalueresidentbuy = setTransvalueresidentbuy + fd(rm.getTotal());
                        setCommisionvaluetresidentbuy = setCommisionvaluetresidentbuy + fd(rm.getComfree()) + parseDoubleR(rm.getRound());
                        setTransactionnumberresidentbuy++;
                    }
                    if (rm.getResidentnonresident().equals("Non Resident") && rm.getKind().toUpperCase().startsWith("BUY") && !rm.getType().contains("D")) {
                        setTransvaluenonresidentbuy = setTransvaluenonresidentbuy + fd(rm.getTotal());
                        setCommisionvaluenonresidentbuy = setCommisionvaluenonresidentbuy + fd(rm.getComfree()) + parseDoubleR(rm.getRound());
                        setTransactionnumbernonresidentbuy++;
                    }
                    
                    if (rm.getResidentnonresident().equals("Resident") && rm.getKind().toUpperCase().startsWith("SELL") && !rm.getType().contains("D")) {
                        setTransvalueresidentsell = setTransvalueresidentsell + fd(rm.getAmount());
                        setCommisionvaluetresidentsell = setCommisionvaluetresidentsell + fd(rm.getComfree()) + parseDoubleR(rm.getRound());
                        setTransactionnumberresidentsell++;
                    }
                    if (rm.getResidentnonresident().equals("Non Resident") && rm.getKind().toUpperCase().startsWith("SELL") && !rm.getType().contains("D")) {
                        setTransvaluenonresidentsell = setTransvaluenonresidentsell + fd(rm.getAmount());
                        setCommisionvaluenonresidentsell = setCommisionvaluenonresidentsell + fd(rm.getComfree()) + parseDoubleR(rm.getRound());
                        setTransactionnumbernonresidentsell++;
                    }
                    
                    boolean ca = false;
                    if (rm.getKind().toUpperCase().startsWith("SELL") && !rm.getType().contains("D")) {
                        if (!rm.getInternetbooking().equals("0")) {
                            setInternetbookingamountyes = setInternetbookingamountyes + fd(rm.getPayinpayout());
                            setInternetbookingnumberyes++;
                        } else {
                            setInternetbookingamountno = setInternetbookingamountno + fd(rm.getPayinpayout());
                            setInternetbookingnumberno++;
                        }
                    } else if (rm.getKind().toUpperCase().contains("CASH ADVANCE") && !rm.getType().contains("D")) {
                        setPosbuyamount = setPosbuyamount + fd(rm.getAmount());
                        setPosbuynumber++;
                        ca = true;
                    }
                    
                    if (!rm.getPos().equals("-") && !rm.getType().contains("D")) {
                        if (rm.getKind().toUpperCase().startsWith("SELL")) {
                            if (rm.getFig().equals("06") || rm.getFig().equals("07")) {
                                setPossellamount = setPossellamount + fd(rm.getPayinpayout());
                                setPossellnumber++;
                            } else {
                                setBanksellamount = setBanksellamount + fd(rm.getPayinpayout());
                                setBanksellnumber++;
                            }
                        } else {
                            if (!ca) {
                                setPosbuyamount = setPosbuyamount + fd(rm.getTotal());
                                setPosbuynumber++;
                            }
                        }
                    }
                }
                
                pdf.setTransvalueresidentbuy(roundDoubleandFormat(setTransvalueresidentbuy, 2));
                pdf.setTransvaluenonresidentbuy(roundDoubleandFormat(setTransvaluenonresidentbuy, 2));
                pdf.setTransvalueresidentsell(roundDoubleandFormat(setTransvalueresidentsell, 2));
                pdf.setTransvaluenonresidentsell(roundDoubleandFormat(setTransvaluenonresidentsell, 2));
                pdf.setCommisionvaluetresidentbuy(roundDoubleandFormat(setCommisionvaluetresidentbuy, 2));
                pdf.setCommisionvaluenonresidentbuy(roundDoubleandFormat(setCommisionvaluenonresidentbuy, 2));
                pdf.setCommisionvaluetresidentsell(roundDoubleandFormat(setCommisionvaluetresidentsell, 2));
                pdf.setCommisionvaluenonresidentsell(roundDoubleandFormat(setCommisionvaluenonresidentsell, 2));
                pdf.setTransactionnumberresidentbuy(roundDoubleandFormat(setTransactionnumberresidentbuy, 0) + "");
                pdf.setTransactionnumbernonresidentbuy(roundDoubleandFormat(setTransactionnumbernonresidentbuy, 0) + "");
                pdf.setTransactionnumberresidentsell(roundDoubleandFormat(setTransactionnumberresidentsell, 0) + "");
                pdf.setTransactionnumbernonresidentsell(roundDoubleandFormat(setTransactionnumbernonresidentsell, 0) + "");
                pdf.setInternetbookingamountyes(roundDoubleandFormat(setInternetbookingamountyes, 2));
                pdf.setInternetbookingnumberyes(roundDoubleandFormat(setInternetbookingnumberyes, 0));
                pdf.setInternetbookingamountno(roundDoubleandFormat(setInternetbookingamountno, 2) + "");
                pdf.setInternetbookingnumberno(roundDoubleandFormat(setInternetbookingnumberno, 0) + "");
                pdf.setPosbuyamount(roundDoubleandFormat(setPosbuyamount, 2));
                pdf.setPosbuynumber(roundDoubleandFormat(setPosbuynumber, 0) + "");
                pdf.setPossellamount(roundDoubleandFormat(setPossellamount, 2));
                pdf.setPossellnumber(roundDoubleandFormat(setPossellnumber, 0) + "");
                
                pdf.setBankbuyamount("0.00");
                pdf.setBankbuynumber("0");
                pdf.setBanksellamount(roundDoubleandFormat(setBanksellamount, 2));
                pdf.setBanksellnumber(roundDoubleandFormat(setBanksellnumber, 0) + "");
                
                return pdf;
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return null;
    }

    /**
     *
     * @param fil
     * @param datad1
     * @param datad2
     * @return
     */
    public TillTransactionListCurrency_value list_TillTransactionList_TOBANK_CACZ(String[] fil, String datad1, String datad2) {
        try {
            
            String sql = "select * from et_change tr1, et_change_valori tr2 where tr1.fg_brba='BA'"
                    + " AND tr1.fg_tofrom='T' AND  tr1.cod=tr2.cod AND tr2.kind='04' AND tr1.filiale='" + fil[0] + "' ";
            
            if (datad1 != null) {
                sql = sql + "AND tr1.dt_it >= '" + datad1 + " 00:00:00' ";
            }
            if (datad2 != null) {
                sql = sql + "AND tr1.dt_it <= '" + datad2 + " 23:59:59' ";
            }
            sql = sql + " ORDER BY tr2.currency,tr1.dt_it";
            
            ResultSet rs = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql);
            
            ArrayList<TillTransactionListCurrency_value> dati = new ArrayList<>();
            while (rs.next()) {
                TillTransactionListCurrency_value rm = new TillTransactionListCurrency_value();
                rm.setType("ET CHANGE");
                rm.setTill(rs.getString("tr1.till_from"));
                rm.setUser(rs.getString("tr1.user"));
                rm.setNotr(rs.getString("tr1.id"));
                rm.setTime(rs.getString("tr1.dt_it"));
                rm.setCur(rs.getString("tr2.currency"));
                rm.setKind("TO BANK - CASH ADVANCE");
                rm.setAmount(rs.getString("tr2.ip_quantity"));
                rm.setRate(rs.getString("tr2.ip_rate"));
                rm.setTotal(rs.getString("tr2.ip_total"));
                rm.setPerc("0.00");
                rm.setComfree("0.00");
                rm.setPayinpayout(rs.getString("tr2.ip_buyvalue"));
                rm.setCustomer("");
                rm.setSpread(rs.getString("tr2.ip_spread"));
                rm.setPos(rs.getString("tr1.cod_dest"));
                rm.setRound("0.00");
                rm.setResidentnonresident("");
                rm.setInternetbooking("");
                dati.add(rm);
            }
            
            if (dati.size() > 0) {
                TillTransactionListCurrency_value pdf = new TillTransactionListCurrency_value();
                pdf.setId_filiale(fil[0]);
                pdf.setDe_filiale(fil[1]);
                pdf.setDati(dati);
                return pdf;
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return null;
    }

    /**
     *
     * @param fil
     * @param datad1
     * @param datad2
     * @return
     */
    public TillTransactionListCurrency_value list_TillTransactionList_value_CACZ(String[] fil, String datad1, String datad2) {
        try {
            
            String sql = "SELECT * FROM ch_transaction tr1, ch_transaction_valori tr2 "
                    + " WHERE tr1.cod=tr2.cod_tr AND tr1.filiale = '" + fil[0] + "' AND tr2.supporto='04' ";
            
            if (datad1 != null) {
                sql = sql + "AND tr1.data >= '" + datad1 + " 00:00:00' ";
            }
            if (datad2 != null) {
                sql = sql + "AND tr1.data <= '" + datad2 + " 23:59:59' ";
            }
            sql = sql + " ORDER BY tr2.valuta,tr1.data";
            
            ResultSet rs = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql);
            
            ArrayList<Figures> fig = list_all_figures();
            List<String> listmodify = list_transaction_modify_ch();
            ArrayList<TillTransactionListCurrency_value> dati = new ArrayList<>();
            while (rs.next()) {
                TillTransactionListCurrency_value rm = new TillTransactionListCurrency_value();
                rm.setType(formatTilltr(rs.getString("tr1.del_fg"), rs.getString("tr1.bb"),
                        rs.getString("tr1.fa_number"), rs.getString("tr2.supporto"),
                        rs.getString("tr2.bb"), listmodify.contains(rs.getString("tr1.cod")), this,
                        rs.getString("tr1.refund"), rs.getString("tr1.cod")));
                rm.setTill(rs.getString("tr1.till"));
                rm.setUser(rs.getString("tr1.user"));
                rm.setNotr(rs.getString("tr1.id"));
                rm.setTime(rs.getString("tr1.data"));
                rm.setCur(rs.getString("tr2.valuta"));
                rm.setKind(formatType(rs.getString("tr1.tipotr")) + " " + Engine.get_figures(fig, rs.getString("tr2.supporto")).getDe_supporto());
                rm.setAmount(rs.getString("tr2.quantita"));
                rm.setRate(rs.getString("tr2.rate"));
                rm.setTotal(rs.getString("tr2.total"));
                rm.setPerc(rs.getString("tr2.com_perc"));
                rm.setComfree(rs.getString("tr2.tot_com"));
                rm.setPayinpayout(rs.getString("tr2.net"));
                rm.setCustomer(query_Client_transactionCN(rs.getString("tr1.cod"), rs.getString("tr1.cl_cod")));
                rm.setSpread(rs.getString("tr2.spread"));
                rm.setPos(rs.getString("tr2.pos"));
                rm.setRound(rs.getString("tr2.roundvalue"));
                rm.setResidentnonresident("");
                rm.setInternetbooking(rs.getString("tr1.intbook"));
                dati.add(rm);
            }
            
            if (dati.size() > 0) {
                TillTransactionListCurrency_value pdf = new TillTransactionListCurrency_value();
                pdf.setId_filiale(fil[0]);
                pdf.setDe_filiale(fil[1]);
                pdf.setDati(dati);
                return pdf;
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return null;
    }

    /**
     *
     * @param fil
     * @param datad1
     * @param datad2
     * @return
     */
    public TillTransactionList_value list_TillTransactionList_value(String[] fil, String datad1, String datad2) {
        
        try {
            
            String sql = "SELECT * FROM ch_transaction tr1, ch_transaction_valori tr2 "
                    + " WHERE tr1.cod=tr2.cod_tr AND tr1.filiale = '" + fil[0] + "' ";
//                    + " WHERE tr1.cod=tr2.cod_tr AND tr1.cod = cl.codtr AND tr1.filiale = '" + fil[0] + "' ";

            if (datad1 != null) {
                sql = sql + "AND tr1.data >= '" + datad1 + " 00:00:00' ";
            }
            if (datad2 != null) {
                sql = sql + "AND tr1.data <= '" + datad2 + " 23:59:59' ";
            }
            sql = sql + " ORDER BY tr1.data";
            ResultSet rs = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql);
            
            ArrayList<Figures> fig = list_all_figures();
            ArrayList<CustomerKind> list_customerKind = list_customerKind();
            ArrayList<TillTransactionList_value> dati = new ArrayList<>();
            List<String> listmodify = list_transaction_modify_ch();
            while (rs.next()) {
                TillTransactionList_value rm = new TillTransactionList_value();
                
                rm.setType(formatTilltr(rs.getString("tr1.del_fg"), rs.getString("tr1.bb"),
                        rs.getString("tr1.fa_number"), rs.getString("tr2.supporto"),
                        rs.getString("tr2.bb"), listmodify.contains(rs.getString("tr1.cod")),
                        this,
                        rs.getString("tr1.refund"), rs.getString("tr1.cod")));
                
                rm.setTill(rs.getString("tr1.till"));
                rm.setUser(rs.getString("tr1.user"));
                rm.setNotr(rs.getString("tr1.id"));
                rm.setTime(rs.getString("tr1.data"));
                rm.setCur(rs.getString("tr2.valuta"));
                rm.setKind(formatType(rs.getString("tr1.tipotr")) + " " + Engine.get_figures(fig, rs.getString("tr2.supporto")).getDe_supporto());
                rm.setAmount(rs.getString("tr2.quantita"));
                rm.setRate(rs.getString("tr2.rate"));
                rm.setTotal(rs.getString("tr2.total"));
                rm.setPerc(rs.getString("tr2.com_perc"));
                rm.setComfree(rs.getString("tr2.tot_com"));
                rm.setPayinpayout(rs.getString("tr2.net"));
                rm.setCustomer(query_Client_transactionCN(rs.getString("tr1.cod"), rs.getString("tr1.cl_cod")));
                rm.setSpread(rs.getString("tr2.spread"));
                String lfig = rs.getString("tr1.localfigures");
                if (rs.getString("tr1.localfigures").equals("-")) {
                    lfig = "01";
                }
                rm.setFig(lfig);
                
                if (rs.getString("tr2.supporto").equals("04")) {
                    rm.setPos(rs.getString("tr2.pos"));
                } else {
                    rm.setPos(rs.getString("tr1.pos"));
                }

//                rm.setFig(Engine.get_figures(fig, rs.getString("tr2.supporto")).getDe_supporto());
                rm.setRound(rs.getString("tr2.roundvalue").replaceAll("-", ""));
                if (is_CZ) {
                    rm.setRound(rs.getString("tr2.roundvalue"));
                }
                
                if (Engine.get_customerKind(list_customerKind, rs.getString("tr1.tipocliente")).getFg_nazionalita().equals("1")) {
                    rm.setResidentnonresident("Resident");
                } else {
                    rm.setResidentnonresident("Non Resident");
                }
                rm.setInternetbooking(rs.getString("tr1.intbook"));
                dati.add(rm);
            }
            if (dati.size() > 0) {
                TillTransactionList_value pdf = new TillTransactionList_value();
                pdf.setId_filiale(fil[0]);
                pdf.setDe_filiale(fil[1]);
                pdf.setDati(dati);
                
                double setTransvalueresidentbuy = 0.0;
                double setTransvaluenonresidentbuy = 0.0;
                double setTransvalueresidentsell = 0.0;
                double setTransvaluenonresidentsell = 0.0;
                double setCommisionvaluetresidentbuy = 0.0;
                double setCommisionvaluenonresidentbuy = 0.0;
                double setCommisionvaluetresidentsell = 0.0;
                double setCommisionvaluenonresidentsell = 0.0;
                
                int setTransactionnumberresidentbuy = 0;
                int setTransactionnumbernonresidentbuy = 0;
                int setTransactionnumberresidentsell = 0;
                int setTransactionnumbernonresidentsell = 0;
                
                double setInternetbookingamountyes = 0.0;
                int setInternetbookingnumberyes = 0;
                double setInternetbookingamountno = 0.0;
                int setInternetbookingnumberno = 0;
                
                double setPosbuyamount = 0.0;
                int setPosbuynumber = 0;
                double setPossellamount = 0.0;
                int setPossellnumber = 0;
                double setBanksellamount = 0.0;
                int setBanksellnumber = 0;
                
                for (int i = 0; i < dati.size(); i++) {
                    TillTransactionList_value rm = dati.get(i);
                    if (rm.getResidentnonresident().equals("Resident") && rm.getKind().toUpperCase().startsWith("BUY") && !rm.getType().contains("D")) {
                        setTransvalueresidentbuy = setTransvalueresidentbuy + fd(rm.getTotal());
                        setCommisionvaluetresidentbuy = setCommisionvaluetresidentbuy + fd(rm.getComfree()) + parseDoubleR(rm.getRound());
                        setTransactionnumberresidentbuy++;
                    }
                    if (rm.getResidentnonresident().equals("Non Resident") && rm.getKind().toUpperCase().startsWith("BUY") && !rm.getType().contains("D")) {
                        setTransvaluenonresidentbuy = setTransvaluenonresidentbuy + fd(rm.getTotal());
                        setCommisionvaluenonresidentbuy = setCommisionvaluenonresidentbuy + fd(rm.getComfree()) + parseDoubleR(rm.getRound());
                        setTransactionnumbernonresidentbuy++;
                    }
                    
                    if (rm.getResidentnonresident().equals("Resident") && rm.getKind().toUpperCase().startsWith("SELL") && !rm.getType().contains("D")) {
                        setTransvalueresidentsell = setTransvalueresidentsell + fd(rm.getAmount());
                        setCommisionvaluetresidentsell = setCommisionvaluetresidentsell + fd(rm.getComfree()) + parseDoubleR(rm.getRound());
                        setTransactionnumberresidentsell++;
                    }
                    if (rm.getResidentnonresident().equals("Non Resident") && rm.getKind().toUpperCase().startsWith("SELL") && !rm.getType().contains("D")) {
                        setTransvaluenonresidentsell = setTransvaluenonresidentsell + fd(rm.getAmount());
                        setCommisionvaluenonresidentsell = setCommisionvaluenonresidentsell + fd(rm.getComfree()) + parseDoubleR(rm.getRound());
                        setTransactionnumbernonresidentsell++;
                    }
                    
                    boolean ca = false;
                    if (rm.getKind().toUpperCase().startsWith("SELL") && !rm.getType().contains("D")) {
                        if (!rm.getInternetbooking().equals("0")) {
                            setInternetbookingamountyes = setInternetbookingamountyes + fd(rm.getPayinpayout());
                            setInternetbookingnumberyes++;
                        } else {
                            setInternetbookingamountno = setInternetbookingamountno + fd(rm.getPayinpayout());
                            setInternetbookingnumberno++;
                        }
                    } else if (rm.getKind().toUpperCase().contains("CASH ADVANCE") && !rm.getType().contains("D")) {
                        
                        setPosbuyamount = setPosbuyamount + fd(rm.getTotal());
//                        setPosbuyamount = setPosbuyamount + fd(rm.getAmount());

                        setPosbuynumber++;
                        ca = true;
                    }
                    
                    if (!rm.getPos().equals("-") && !rm.getType().contains("D")) {
                        if (rm.getKind().toUpperCase().startsWith("SELL")) {
                            if (rm.getFig().equals("06") || rm.getFig().equals("07")) {
                                setPossellamount = setPossellamount + fd(rm.getPayinpayout());
                                setPossellnumber++;
                            } else {
                                setBanksellamount = setBanksellamount + fd(rm.getPayinpayout());
                                setBanksellnumber++;
                            }
                        } else {
                            if (!ca) {
                                setPosbuyamount = setPosbuyamount + fd(rm.getTotal());
                                setPosbuynumber++;
                            }
                        }
                    }
                }
                
                pdf.setTransvalueresidentbuy(roundDoubleandFormat(setTransvalueresidentbuy, 2));
                pdf.setTransvaluenonresidentbuy(roundDoubleandFormat(setTransvaluenonresidentbuy, 2));
                pdf.setTransvalueresidentsell(roundDoubleandFormat(setTransvalueresidentsell, 2));
                pdf.setTransvaluenonresidentsell(roundDoubleandFormat(setTransvaluenonresidentsell, 2));
                pdf.setCommisionvaluetresidentbuy(roundDoubleandFormat(setCommisionvaluetresidentbuy, 2));
                pdf.setCommisionvaluenonresidentbuy(roundDoubleandFormat(setCommisionvaluenonresidentbuy, 2));
                pdf.setCommisionvaluetresidentsell(roundDoubleandFormat(setCommisionvaluetresidentsell, 2));
                pdf.setCommisionvaluenonresidentsell(roundDoubleandFormat(setCommisionvaluenonresidentsell, 2));
                pdf.setTransactionnumberresidentbuy(roundDoubleandFormat(setTransactionnumberresidentbuy, 0) + "");
                pdf.setTransactionnumbernonresidentbuy(roundDoubleandFormat(setTransactionnumbernonresidentbuy, 0) + "");
                pdf.setTransactionnumberresidentsell(roundDoubleandFormat(setTransactionnumberresidentsell, 0) + "");
                pdf.setTransactionnumbernonresidentsell(roundDoubleandFormat(setTransactionnumbernonresidentsell, 0) + "");
                pdf.setInternetbookingamountyes(roundDoubleandFormat(setInternetbookingamountyes, 2));
                pdf.setInternetbookingnumberyes(roundDoubleandFormat(setInternetbookingnumberyes, 0));
                pdf.setInternetbookingamountno(roundDoubleandFormat(setInternetbookingamountno, 2) + "");
                pdf.setInternetbookingnumberno(roundDoubleandFormat(setInternetbookingnumberno, 0) + "");
                
                pdf.setPosbuyamount(roundDoubleandFormat(setPosbuyamount, 2));
                pdf.setPosbuynumber(roundDoubleandFormat(setPosbuynumber, 0) + "");
                pdf.setPossellamount(roundDoubleandFormat(setPossellamount, 2));
                pdf.setPossellnumber(roundDoubleandFormat(setPossellnumber, 0) + "");
                
                pdf.setBankbuyamount("0.00");
                pdf.setBankbuynumber("0");
                pdf.setBanksellamount(roundDoubleandFormat(setBanksellamount, 2));
                pdf.setBanksellnumber(roundDoubleandFormat(setBanksellnumber, 0) + "");
                
                return pdf;
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return null;
    }

    /**
     *
     * @param fil
     * @param datad1
     * @param datad2
     * @param valutalocale
     * @return
     */
    public double[] list_dettagliotransazioni(String[] fil, String datad1, String datad2, String valutalocale) {
        double[] d = new double[2];
        double lo = 0.00;
        double fx = 0.00;
        try {
            String sql0 = "SELECT * FROM ch_transaction_refund where status = '1' and method = 'BR' and branch_cod = '" + fil[0] + "'"
                    + " AND dt_refund >= '" + datad1 + "' AND dt_refund <= '" + datad2 + "'";
            ResultSet rs0 = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql0);
            while (rs0.next()) {
                lo = lo - fd(rs0.getString("value"));
            }
            
            String sql = "SELECT * FROM ch_transaction tr1 WHERE tr1.del_fg='0' AND tr1.filiale = '" + fil[0] + "' "
                    + "AND tr1.data >= '" + datad1 + "' AND tr1.data <= '" + datad2 + "' ";
            
            ResultSet rs = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql);
            while (rs.next()) {
                if (rs.getString("tr1.tipotr").equals("B")) {
                    ResultSet rsval = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery("SELECT * FROM ch_transaction_valori WHERE cod_tr = '" + rs.getString("cod") + "'");
                    while (rsval.next()) {
                        if (rsval.getString("supporto").equals("01") || rsval.getString("supporto").equals("02") || rsval.getString("supporto").equals("03")) {
                            if (rsval.getString("supporto").equals("01") && rsval.getString("valuta").equals(valutalocale)) {
                                lo = lo + fd(rsval.getString("total"));
                            } else {
                                fx = fx + fd(rsval.getString("total"));
                            }
                        }
                        lo = lo - fd(rsval.getString("net"));
                    }
                } else {
                    ResultSet rsval = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery("SELECT * FROM ch_transaction_valori WHERE cod_tr = '" + rs.getString("cod") + "'");
                    while (rsval.next()) {
                        if (rsval.getString("valuta").equals(valutalocale)) {
                            lo = lo - fd(rsval.getString("total"));
                        } else {
                            fx = fx - fd(rsval.getString("total"));
                        }
                    }
                    if (rs.getString("tr1.localfigures").equals("01")) {
                        lo = lo + fd(rs.getString("pay"));
                    }
                }
            }

            //NO CHANGE
            String sql1 = "SELECT supporto,fg_inout,total FROM nc_transaction WHERE del_fg='0' AND filiale = '" + fil[0] + "' "
                    + "AND data >= '" + datad1 + "' "
                    + "AND data <= '" + datad2 + "' ";
            
            ResultSet rs1 = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql1);
            while (rs1.next()) {
                String supporto = rs1.getString("supporto");
                if (rs1.getString("fg_inout").equals("1") || rs1.getString("fg_inout").equals("3")) {
                    if (supporto.equals("01")) {
                        lo = lo + fd(rs1.getString("total"));
                    }
                } else if (supporto.equals("01")) {
                    lo = lo - fd(rs1.getString("total"));
                }
            }

            //EXTERNAL TRANSFER
            String sql2 = "SELECT * FROM et_change WHERE fg_annullato = '0' AND filiale = '" + fil[0] + "' ";
            sql2 = sql2 + "AND dt_it >= '" + datad1 + "' AND dt_it <= '" + datad2 + "' ";
            ResultSet rs2 = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql2);
            while (rs2.next()) {
                ResultSet rs2val = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery("SELECT * FROM et_change_valori WHERE cod = '" + rs2.getString("cod") + "'");
                if (rs2.getString("fg_tofrom").equals("T")) { //sales
                    while (rs2val.next()) {
                        if (rs2val.getString("kind").equals("01")) {
                            if (rs2val.getString("currency").equals(valutalocale)) {
                                lo = lo - fd(rs2val.getString("ip_total"));
                            } else {
                                fx = fx - fd(rs2val.getString("ip_total"));
                            }
                        } else {
                            fx = fx - fd(rs2val.getString("ip_total"));
                        }
                    }
                } else { //buy
                    while (rs2val.next()) {
                        if (rs2val.getString("kind").equals("01")) {
                            if (rs2val.getString("currency").equals(valutalocale)) {
                                lo = lo + fd(rs2val.getString("ip_total"));
                            } else {
                                fx = fx + fd(rs2val.getString("ip_total"));
                            }
                        } else {
                            fx = fx + fd(rs2val.getString("ip_total"));
                        }
                    }
                }
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        d[0] = lo;
        d[1] = fx;
        return d;
    }

//    public static void main(String[] args) {
//        
//        
//        
//        Db_Master db = new Db_Master();
//        String fil[] = {"155","155"};
//        
//        db.list_Daily_value(fil, "2020-01-14 00:00", "2020-01-14 23:59", false, false);
//        db.closeDB();
//    }
    /**
     *
     * @param fil
     * @param datad1
     * @param datad2
     * @param now
     * @param contuk
     * @return
     */
    public Daily_value list_Daily_value(String[] fil, String datad1, String datad2, boolean now, boolean contuk) {
        
        if (datad1 != null && datad2 != null) {
            
            try {
                
                String valutalocale = get_local_currency()[0];
                
                Daily_value d = new Daily_value();
                
                double setPurchTotal = 0.0;
                double setPurchComm = 0.0;
                double setPurchGrossTot;
                double setPurchSpread = 0.0;
                double setPurchProfit;
                double setSalesTotal = 0.0;
                double setSalesComm = 0.0;
                double setSalesGrossTot = 0.0;
                double setSalesSpread = 0.0;
                double setSalesProfit;
                double setCashAdNetTot = 0.0;
                double setCashAdComm = 0.0;
                double setCashAdGrossTot;
                double setCashAdSpread = 0.0;
                double setCashAdProfit;
                
                double refund = 0.0;
                double refundshow = 0.0;

                //refund
                String sql0 = "SELECT value FROM ch_transaction_refund where status = '1' and method = 'BR' and branch_cod = '" + fil[0] + "'";
                
                sql0 = sql0 + "AND dt_refund >= '" + datad1 + ":00' ";
                
                sql0 = sql0 + "AND dt_refund <= '" + datad2 + ":59' ";
                
                sql0 = sql0 + " ORDER BY dt_refund";
                
                ResultSet rs0 = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql0);
                while (rs0.next()) {
                    refund = refund + fd(rs0.getString("value"));
                    refundshow = refundshow + parseDoubleR(rs0.getString("value"));
                }

                //TRANSACTION
                String sql = "SELECT * FROM ch_transaction tr1 WHERE tr1.del_fg='0' AND tr1.filiale = '" + fil[0] + "' ";
                
                sql = sql + "AND tr1.data >= '" + datad1 + ":00' ";
                
                sql = sql + "AND tr1.data <= '" + datad2 + ":59' ";
                
                sql = sql + " ORDER BY tr1.data";
                
                ResultSet rs = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql);
                
                int setNoTransPurch = 0;
                int setNoTransCC = 0;
                int setNoTransSales = 0;
                int setTotal = 0;
                int setTotPos = 0;
                int setTotAcc = 0;
                
                double poamount = 0.00;
                
                ArrayList<String[]> cc = credit_card_enabled();
                
                ArrayList<String[]> bc = list_bankAccount();
                
                ArrayList<DailyCOP> dclist = new ArrayList<>();
                
                for (int x = 0; x < cc.size(); x++) {
                    DailyCOP dc = new DailyCOP(cc.get(x)[1], cc.get(x)[0]);
                    dclist.add(dc);
                }
                
                ArrayList<DailyBank> listdb = new ArrayList<>();
                
                for (int x = 0; x < bc.size(); x++) {
                    DailyBank dc = new DailyBank(bc.get(x)[1], bc.get(x)[0]);
                    listdb.add(dc);
                }
                int ij = 1;
                while (rs.next()) {
                    setTotal++;
                    if (rs.getString("tr1.tipotr").equals("B")) {
                        setNoTransPurch++;
                        
                        ResultSet rsval = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery("SELECT * FROM ch_transaction_valori WHERE cod_tr = '" + rs.getString("cod") + "'");
                        
                        while (rsval.next()) {
                            switch (rsval.getString("supporto")) {
                                case "04": {
                                    //CASH ADVANCE
                                    setNoTransCC++;
                                    setCashAdNetTot = setCashAdNetTot + fd(rsval.getString("net"));
                                    if (is_CZ) {
                                        setCashAdComm = setCashAdComm + fd(rsval.getString("tot_com")) + parseDoubleR_CZ(rsval.getString("roundvalue"), true);
                                    } else {
                                        setCashAdComm = setCashAdComm + fd(rsval.getString("tot_com")) + fd(rsval.getString("roundvalue"));
                                    }
                                    setCashAdSpread = setCashAdSpread + fd(rsval.getString("spread"));
                                    setNoTransPurch--;
                                    DailyCOP dc = get_obj(dclist, rsval.getString("pos"));
                                    if (dc != null) {
                                        double start = fd(dc.getCashAdNtrans());
                                        
                                        start++;
                                        dc.setCashAdNtrans(roundDoubleandFormat(start, 0));
                                        double d1 = fd(dc.getCashAdAmount());
                                        d1 = d1 + fd(rsval.getString("total"));
                                        dc.setCashAdAmount(roundDoubleandFormat(d1, 2));
                                    }
                                    break;
                                }
                                case "06": {
                                    //CREDIT CARD
                                    DailyCOP dc = get_obj(dclist, rsval.getString("pos"));
                                    if (dc != null) {
                                        double start = fd(dc.getCcNtrans());
                                        start++;
                                        dc.setCcNtrans(roundDoubleandFormat(start, 0));
                                        double d1 = fd(dc.getCcAmount());
                                        d1 = d1 + fd(rsval.getString("net"));
                                        dc.setCcAmount(roundDoubleandFormat(d1, 2));
                                        poamount = poamount + fd(rsval.getString("net"));
                                    }
                                    break;
                                }
                                case "07": {
                                    // bancomat
                                    DailyCOP dc = get_obj(dclist, rsval.getString("pos"));
                                    if (dc != null) {
                                        double start = fd(dc.getBankNtrans());
                                        start++;
                                        dc.setBankNtrans(roundDoubleandFormat(start, 0));
                                        double d1 = fd(dc.getBankAmount());
                                        d1 = d1 + fd(rsval.getString("net"));
                                        dc.setBankAmount(roundDoubleandFormat(d1, 2));
                                        poamount = poamount + fd(rsval.getString("net"));
                                    }
                                    break;
                                }
                                case "08": {
                                    DailyBank dc = get_obj(listdb, rsval.getString("pos"));
                                    if (dc != null) {
                                        double start = fd(dc.getNtrans());
                                        start++;
                                        dc.setNtrans(roundDoubleandFormat(start, 0));
                                        double d1 = fd(dc.getAmount());
                                        d1 = d1 + fd(rsval.getString("net"));
                                        dc.setAmount(roundDoubleandFormat(d1, 2));
                                        poamount = poamount + fd(rsval.getString("net"));
                                    }
                                    break;
                                }
                                default:
                                    setPurchSpread = setPurchSpread + fd(rsval.getString("spread"));
                                    setPurchTotal = setPurchTotal + fd(rsval.getString("net"));
                                    if (is_CZ) {
                                        setPurchComm = setPurchComm + fd(rsval.getString("tot_com")) + parseDoubleR_CZ(rsval.getString("roundvalue"), true);
                                    } else {
                                        setPurchComm = setPurchComm + fd(rsval.getString("tot_com")) + fd(rsval.getString("roundvalue"));
                                    }
                                    break;
                            }
                        }
                        
                    } else {
                        setNoTransSales++;
                        setSalesTotal = setSalesTotal + fd(rs.getString("tr1.pay"));
                        setSalesGrossTot = setSalesGrossTot + fd(rs.getString("tr1.total"));
                        //26012018
                        //setSalesTotal = setSalesTotal + fd(rs.getString("tr1.pay"));

                        setSalesComm = setSalesComm + fd(rs.getString("tr1.commission")) + fd(rs.getString("tr1.round"));
                        ij++;
                        setSalesSpread = setSalesSpread + fd(rs.getString("tr1.spread_total"));
                        
                        if (rs.getString("tr1.localfigures").equals("06")) {//CREDIT CARD
                            DailyCOP dc = get_obj(dclist, rs.getString("tr1.pos"));
                            if (dc != null) {
                                double start = fd(dc.getCcNtrans());
                                start++;
                                dc.setCcNtrans(roundDoubleandFormat(start, 0));
                                double d1 = fd(dc.getCcAmount());
                                d1 = d1 + fd(rs.getString("tr1.pay"));
                                dc.setCcAmount(roundDoubleandFormat(d1, 2));
                                poamount = poamount + fd(rs.getString("tr1.pay"));
                            }
                            setTotPos++;
                        } else if (rs.getString("tr1.localfigures").equals("07")) {// bancomat

                            DailyCOP dc = get_obj(dclist, rs.getString("tr1.pos"));
                            if (dc != null) {
                                double start = fd(dc.getBankNtrans());
                                start++;
                                dc.setBankNtrans(roundDoubleandFormat(start, 0));
                                double d1 = fd(dc.getBankAmount());
                                d1 = d1 + fd(rs.getString("tr1.pay"));
                                dc.setBankAmount(roundDoubleandFormat(d1, 2));
                                poamount = poamount + fd(rs.getString("tr1.pay"));
                            }
                            setTotPos++;
                        } else if (rs.getString("localfigures").equals("08")) {
                            
                            DailyBank dc = get_obj(listdb, rs.getString("tr1.pos"));
                            if (dc != null) {
                                double start = fd(dc.getNtrans());
                                start++;
                                dc.setNtrans(roundDoubleandFormat(start, 0));
                                double d1 = fd(dc.getAmount());
                                d1 = d1 + fd(rs.getString("tr1.pay"));
                                dc.setAmount(roundDoubleandFormat(d1, 2));
                                poamount = poamount + fd(rs.getString("tr1.pay"));
                            }
                            
                            setTotAcc++;
                        }
                        
                        ResultSet rsval = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery("SELECT * FROM ch_transaction_valori WHERE cod_tr = '" + rs.getString("cod") + "'");
                        while (rsval.next()) {
                            if (rsval.getString("supporto").equals("04")) {//CASH ADVANCE
                                setCashAdNetTot = setCashAdNetTot + fd(rsval.getString("total"));
                                
                                if (is_CZ) {
                                    setCashAdComm = setCashAdComm + fd(rsval.getString("tot_com")) + parseDoubleR_CZ(rsval.getString("roundvalue"), true);
                                } else {
                                    setCashAdComm = setCashAdComm + fd(rsval.getString("tot_com")) + fd(rsval.getString("roundvalue"));
                                }
                                
                                DailyCOP dc = get_obj(dclist, rsval.getString("pos"));
                                if (dc != null) {
                                    double start = fd(dc.getCashAdNtrans());
                                    start++;
                                    dc.setCashAdNtrans(roundDoubleandFormat(start, 0));
                                    double d1 = fd(dc.getCashAdAmount());
                                    d1 = d1 + fd(rsval.getString("total"));
                                    dc.setCashAdAmount(roundDoubleandFormat(d1, 2));
                                }
                                
                            }
                            
                        }
                    }
                    
                }
                
                setPurchGrossTot = setPurchTotal + setPurchComm;
                //setSalesGrossTot = setSalesTotal - setSalesComm;
                setCashAdGrossTot = setCashAdNetTot + setCashAdComm;
                
                setPurchProfit = setPurchComm + setPurchSpread;
                setSalesProfit = setSalesComm + setSalesSpread;
                setCashAdProfit = setCashAdComm + setCashAdSpread;

                //NO CHANGE
                String sql1 = "SELECT causale_nc,supporto,total,pos,fg_inout,quantita,gruppo_nc FROM nc_transaction WHERE del_fg='0' AND filiale = '" + fil[0] + "' ";
                
                if (is_UK) {
                    sql1 = sql1 + "AND gruppo_nc <> 'DEPOS' ";
                }

//                String sql1 = "SELECT * FROM nc_transaction WHERE del_fg='0' AND filiale = '" + fil[0] + "' ";
                sql1 = sql1 + "AND data >= '" + datad1 + ":00' ";
                
                sql1 = sql1 + "AND data <= '" + datad2 + ":59' ";
                
                sql1 = sql1 + " ORDER BY data";
                
                ArrayList<NC_causal> nc_caus = query_nc_causal_filial(fil[0], null);
                
                ResultSet rs1 = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql1);
                double totalnotesnochange = 0.00;
                
                ArrayList<String[]> listkind = nc_kind_order();

                //ArrayList<String[]> list_nc_descr = list_nc_descr();
                ArrayList<DailyKind> dklist = new ArrayList<>();
                ArrayList<DailyKind> dkATL = new ArrayList<>();
                
                for (int i = 0; i < listkind.size(); i++) {
                    rs1.beforeFirst();
                    
                    String kind = listkind.get(i)[0];
                    int setToNrTran = 0;
                    double setToTotal = 0.00;
                    double setToLocalCurr = 0.00;
                    double setToCC = 0.00;
                    double setToB = 0.00;
                    int setFromNrTran = 0;
                    double setFromTotal = 0.00;
                    double setFromLocalCurr = 0.00;
                    double setFromCC = 0.00;
                    double setFromB = 0.00;
                    while (rs1.next()) {
                        NC_causal nc2 = getNC_causal(nc_caus, rs1.getString("causale_nc"), rs1.getString("gruppo_nc"));
                        if (nc2 == null) {
                            continue;
                        }
                        String kindrs = nc2.getFg_tipo_transazione_nc();
                        if (kind.equals(kindrs)) {
                            String supporto = rs1.getString("supporto");
                            if (kindrs.equals("8")) {
                                if (rs1.getString("fg_inout").equals("1") || rs1.getString("fg_inout").equals("3")) {
                                    
                                    setFromNrTran = setFromNrTran + parseIntR(rs1.getString("quantita"));
                                    setFromTotal = setFromTotal + fd(rs1.getString("total"));
                                    switch (supporto) {
                                        case "01":
                                        case "...":
                                            setFromLocalCurr = setFromLocalCurr + fd(rs1.getString("total"));
                                            break;
                                        case "04":
                                        case "06":
                                        case "07":
                                            if (supporto.equals("06")) {
                                                setFromCC = setFromCC + fd(rs1.getString("total"));
                                                DailyCOP dc = get_obj(dclist, rs1.getString("pos"));
                                                if (dc != null) {
                                                    double start = fd(dc.getNC_ccNtrans());
                                                    start++;
                                                    dc.setNC_ccNtrans(roundDoubleandFormat(start, 0));
                                                    double d1 = fd(dc.getNC_ccAmount());
                                                    d1 = d1 + fd(rs1.getString("total"));
                                                    dc.setNC_ccAmount(roundDoubleandFormat(d1, 2));
//                                                poamount = poamount + fd(rs1.getString("total"));
                                                }
                                            } else if (supporto.equals("07")) {
                                                setFromB = setFromB + +fd(rs1.getString("total"));
                                                DailyCOP dc = get_obj(dclist, rs1.getString("pos"));
                                                if (dc != null) {
                                                    double start = fd(dc.getNC_bankNtrans());
                                                    start++;
                                                    dc.setNC_bankNtrans(roundDoubleandFormat(start, 0));
                                                    double d1 = fd(dc.getNC_bankAmount());
                                                    d1 = d1 + fd(rs1.getString("total"));
                                                    dc.setNC_bankAmount(roundDoubleandFormat(d1, 2));
//                                                poamount = poamount + fd(rs1.getString("total"));
                                                }
                                            }
                                            break;
                                        case "08":
                                            DailyCOP dc = get_obj(dclist, rs1.getString("pos"));
                                            if (dc != null) {
                                                double start = fd(dc.getNC_bankNtrans());
                                                start++;
                                                dc.setNC_bankNtrans(roundDoubleandFormat(start, 0));
                                                double d1 = fd(dc.getNC_bankAmount());
                                                d1 = d1 + fd(rs1.getString("total"));
                                                dc.setNC_bankAmount(roundDoubleandFormat(d1, 2));
//                                            poamount = poamount + fd(rs1.getString("total"));
                                            }
                                            break;
                                        default:
                                            break;
                                    }
                                } else {
                                    if (!nc2.getNc_de().equals("14")) {
                                        setToNrTran = setToNrTran + parseIntR(rs1.getString("quantita"));
                                        setToTotal = setToTotal + fd(rs1.getString("total"));
                                        if (supporto.equals("01") || supporto.equals("...")) {
                                            setToLocalCurr = setToLocalCurr + fd(rs1.getString("total"));
                                        } else if (supporto.equals("04") || supporto.equals("06") || supporto.equals("07")) {
                                            if (supporto.equals("06")) {
                                                setToCC = setToCC + fd(rs1.getString("total"));
                                            } else if (supporto.equals("07")) {
                                                setToB = setToB + fd(rs1.getString("total"));
                                            }
                                        }
                                    }
                                }
                            } else {
                                
                                if (rs1.getString("fg_inout").equals("1") || rs1.getString("fg_inout").equals("3")) {
                                    
                                    setFromNrTran++;
                                    setFromTotal = setFromTotal + fd(rs1.getString("total"));
                                    switch (supporto) {
                                        case "01":
                                        case "...":
                                            setFromLocalCurr = setFromLocalCurr + fd(rs1.getString("total"));
                                            break;
                                        case "04":
                                        case "06":
                                        case "07":
                                            if (supporto.equals("06")) {
                                                setFromCC = setFromCC + fd(rs1.getString("total"));
                                                DailyCOP dc = get_obj(dclist, rs1.getString("pos"));
                                                if (dc != null) {
                                                    double start = fd(dc.getNC_ccNtrans());
                                                    start++;
                                                    dc.setNC_ccNtrans(roundDoubleandFormat(start, 0));
                                                    double d1 = fd(dc.getNC_ccAmount());
                                                    d1 = d1 + fd(rs1.getString("total"));
                                                    dc.setNC_ccAmount(roundDoubleandFormat(d1, 2));
//                                                poamount = poamount + fd(rs1.getString("total"));
                                                }
                                            } else if (supporto.equals("07")) {
                                                setFromB = setFromB + +fd(rs1.getString("total"));
                                                DailyCOP dc = get_obj(dclist, rs1.getString("pos"));
                                                if (dc != null) {
                                                    double start = fd(dc.getNC_bankNtrans());
                                                    start++;
                                                    dc.setNC_bankNtrans(roundDoubleandFormat(start, 0));
                                                    double d1 = fd(dc.getNC_bankAmount());
                                                    d1 = d1 + fd(rs1.getString("total"));
                                                    dc.setNC_bankAmount(roundDoubleandFormat(d1, 2));
//                                                poamount = poamount + fd(rs1.getString("total"));
                                                }
                                            }
                                            break;
                                        case "08":
                                            //poamount = poamount + fd(rs1.getString("total"));
                                            DailyCOP dc = get_obj(dclist, rs1.getString("pos"));
                                            if (dc != null) {
                                                double start = fd(dc.getNC_bankNtrans());
                                                start++;
                                                dc.setNC_bankNtrans(roundDoubleandFormat(start, 0));
                                                double d1 = fd(dc.getNC_bankAmount());
                                                d1 = d1 + fd(rs1.getString("total"));
                                                dc.setNC_bankAmount(roundDoubleandFormat(d1, 2));
//                                            poamount = poamount + fd(rs1.getString("total"));
                                            }
                                            break;
                                        default:
                                            break;
                                    }
                                } else {
                                    
                                    if (!nc2.getNc_de().equals("14")) { //solo gli acquisti non vengono considerati
                                        setToNrTran++;
                                        setToTotal = setToTotal + fd(rs1.getString("total"));
                                        if (supporto.equals("01") || supporto.equals("...")) {
                                            setToLocalCurr = setToLocalCurr + fd(rs1.getString("total"));
                                        } else if (supporto.equals("04") || supporto.equals("06") || supporto.equals("07")) {
                                            if (supporto.equals("06")) {
                                                setToCC = setToCC + fd(rs1.getString("total"));
                                            } else if (supporto.equals("07")) {
                                                setToB = setToB + fd(rs1.getString("total"));
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        
                    }
                    
                    DailyKind dk = new DailyKind();
                    dk.setKind(listkind.get(i)[1]);
                    
                    dk.setTo(true);
                    
                    if (kind.equals("3") || kind.equals("8")) {
                        dk.setFrom(false);
                    } else {
                        dk.setFrom(true);
                    }
                    dk.setToNrTran(setToNrTran + "");
                    dk.setToTotal(roundDoubleandFormat(setToTotal, 2));
                    dk.setToLocalCurr(roundDoubleandFormat(setToLocalCurr, 2));
                    dk.setToCC(roundDoubleandFormat(setToCC, 2));
                    dk.setToB(roundDoubleandFormat(setToB, 2));
                    dk.setFromNrTran(setFromNrTran + "");
                    dk.setFromTotal(roundDoubleandFormat(setFromTotal, 2));
                    dk.setFromLocalCurr(roundDoubleandFormat(setFromLocalCurr, 2));
                    dk.setFromCC(roundDoubleandFormat(setFromCC, 2));
                    dk.setFromB(roundDoubleandFormat(setFromB, 2));
                    dk.setEtichetta1(listkind.get(i)[2]);
                    dk.setEtichetta2(listkind.get(i)[3]);
                    
                    if (kind.equals("8")) {
                        dkATL.add(dk);
                    } else {
                        dklist.add(dk);
                        totalnotesnochange = totalnotesnochange + setToLocalCurr + setFromLocalCurr;
                    }
                }
                
                d.setDati(dklist);
                d.setDatiatl(dkATL);
                
                double setBaPurchTotal = 0.00;
                double setBaPurchSpread = 0.00;
                double setBaPurchCreditCard = 0.00;
                double setBaPurchTransfNotes = 0.00;
                double setBaPurchTransfOther = 0.00;
                double setBaSalesTotal = 0.00;
                double setBaSalesSpread = 0.00;
                double setBaSalesCreditCard = 0.00;
                double setBaSalesTransfNotes = 0.00;
                double setBaSalesTransfOther = 0.00;
                double setBraPurchTotal = 0.00;
                double setBraPurchSpread = 0.00;
                double setBraPurchLocalCurr = 0.00;
                double setBraSalesTotal = 0.00;
                double setBraSalesSpread = 0.00;
                double setBraSalesLocalCurr = 0.00;

                //EXTERNAL TRANSFER
                String sql2 = "SELECT * FROM et_change WHERE fg_annullato = '0' AND filiale = '" + fil[0] + "' ";
                
                if (contuk) {
                    sql2 = sql2 + "AND cod_dest <> '000' ";
                }
                
                sql2 = sql2 + "AND dt_it >= '" + datad1 + ":00' ";
                
                sql2 = sql2 + "AND dt_it <= '" + datad2 + ":59' ";
                
                sql2 = sql2 + " ORDER BY dt_it";
                ResultSet rs2 = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql2);
                
                while (rs2.next()) {
                    
                    ResultSet rs2val = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery("SELECT * FROM et_change_valori WHERE cod = '" + rs2.getString("cod") + "'");
                    
                    if (rs2.getString("fg_tofrom").equals("T")) { //sales

                        if (rs2.getString("fg_brba").equals("BA")) { //BANK
                            while (rs2val.next()) {
                                setBaSalesSpread = setBaSalesSpread + fd(rs2val.getString("ip_spread"));
                                switch (rs2val.getString("kind")) {
                                    case "01":
                                        if (rs2val.getString("currency").equals(valutalocale)) {
                                            setBaSalesTransfNotes = setBaSalesTransfNotes + fd(rs2val.getString("ip_total"));
                                        } else {
                                            setBaSalesTotal = setBaSalesTotal + fd(rs2val.getString("ip_total"));
                                        }
                                        break;
                                    case "02":
                                    case "03":
                                        setBaSalesTotal = setBaSalesTotal + fd(rs2val.getString("ip_total"));
                                        break;
                                    case "04":
                                        setBaSalesCreditCard = setBaSalesCreditCard + fd(rs2val.getString("ip_total"));
                                        break;
                                    default:
                                        setBaSalesTransfOther = setBaSalesTransfOther + fd(rs2val.getString("ip_total"));
                                        break;
                                }
                            }
                        } else {//BRANCH
                            while (rs2val.next()) {
                                setBraSalesSpread = setBraSalesSpread + fd(rs2val.getString("ip_spread"));
                                
                                if (rs2val.getString("currency").equals(valutalocale) && rs2val.getString("kind").equals("01")) {
                                    setBraSalesLocalCurr = setBraSalesLocalCurr + fd(rs2val.getString("ip_total"));
                                } else {
                                    setBraSalesTotal = setBraSalesTotal + fd(rs2val.getString("ip_total"));
                                }
                            }
                            
                        }
                    } else if (rs2.getString("fg_brba").equals("BA")) { //BANK
                        while (rs2val.next()) {
                            
                            setBaPurchSpread = setBaPurchSpread + fd(rs2val.getString("ip_spread"));
                            
                            switch (rs2val.getString("kind")) {
                                case "01":
                                    if (rs2val.getString("currency").equals(valutalocale)) {
                                        setBaPurchTransfNotes = setBaPurchTransfNotes + fd(rs2val.getString("ip_total"));
                                    } else {
                                        setBaPurchTotal = setBaPurchTotal + fd(rs2val.getString("ip_total"));
                                    }
                                    break;
                                case "02":
                                case "03":
                                    setBaPurchTotal = setBaPurchTotal + fd(rs2val.getString("ip_total"));
                                    break;
                                case "04":
                                    setBaPurchCreditCard = setBaPurchCreditCard + fd(rs2val.getString("ip_total"));
                                    break;
                                default:
                                    setBaPurchTransfOther = setBaPurchTransfOther + fd(rs2val.getString("ip_total"));
                                    break;
                            }
                            
                        }
                    } else {//BRANCH
                        while (rs2val.next()) {
                            setBraPurchSpread = setBraPurchSpread + fd(rs2val.getString("ip_spread"));
                            if (rs2val.getString("currency").equals(valutalocale) && rs2val.getString("kind").equals("01")) {
                                setBraPurchLocalCurr = setBraPurchLocalCurr + fd(rs2val.getString("ip_total"));
                            } else {
                                setBraPurchTotal = setBraPurchTotal + fd(rs2val.getString("ip_total"));
                            }
                        }
                        
                    }
                }
                
                d.setPurchTotal(roundDoubleandFormat(setPurchTotal, 2));
                d.setPurchComm(roundDoubleandFormat(setPurchComm, 2));
                d.setPurchGrossTot(roundDoubleandFormat(setPurchGrossTot, 2));
                d.setPurchSpread(roundDoubleandFormat(setPurchSpread, 2));
                d.setPurchProfit(roundDoubleandFormat(setPurchProfit, 2));
                
                d.setSalesTotal(roundDoubleandFormat(setSalesTotal, 2));
                d.setSalesComm(roundDoubleandFormat(setSalesComm, 2));
                d.setSalesGrossTot(roundDoubleandFormat(setSalesGrossTot, 2));
                d.setSalesSpread(roundDoubleandFormat(setSalesSpread, 2));
                d.setSalesProfit(roundDoubleandFormat(setSalesProfit, 2));
                
                d.setCashAdNetTot(roundDoubleandFormat(setCashAdNetTot, 2));
                d.setCashAdComm(roundDoubleandFormat(setCashAdComm, 2));
                d.setCashAdGrossTot(roundDoubleandFormat(setCashAdGrossTot, 2));
                d.setCashAdSpread(roundDoubleandFormat(setCashAdSpread, 2));
                d.setCashAdProfit(roundDoubleandFormat(setCashAdProfit, 2));
                
                d.setDatiCOP(dclist);
                
                d.setBaPurchTotal(roundDoubleandFormat(setBaPurchTotal, 2));
                d.setBaPurchSpread(roundDoubleandFormat(setBaPurchSpread, 2));
                d.setBaPurchCreditCard(roundDoubleandFormat(setBaPurchCreditCard, 2));
                d.setBaPurchTransfNotes(roundDoubleandFormat(setBaPurchTransfNotes, 2));
                d.setBaPurchTransfOther(roundDoubleandFormat(setBaPurchTransfOther, 2));
                d.setBaSalesTotal(roundDoubleandFormat(setBaSalesTotal, 2));
                d.setBaSalesSpread(roundDoubleandFormat(setBaSalesSpread, 2));
                d.setBaSalesCreditCard(roundDoubleandFormat(setBaSalesCreditCard, 2));
                d.setBaSalesTransfNotes(roundDoubleandFormat(setBaSalesTransfNotes, 2));
                d.setBaSalesTransfOther(roundDoubleandFormat(setBaSalesTransfOther, 2));
                
                d.setBraPurchTotal(roundDoubleandFormat(setBraPurchTotal, 2));
                d.setBraPurchLocalCurr(roundDoubleandFormat(setBraPurchLocalCurr, 2));
                d.setBraSalesTotal(roundDoubleandFormat(setBraSalesTotal, 2));
                
                if (newpread) {
                    setBraSalesSpread = 0.0;
                    setBraPurchSpread = 0.0;
                }
                
                d.setBraSalesSpread(roundDoubleandFormat(setBraSalesSpread, 2));
                d.setBraPurchSpread(roundDoubleandFormat(setBraPurchSpread, 2));
                
                d.setBraSalesLocalCurr(roundDoubleandFormat(setBraSalesLocalCurr, 2));
                d.setRefund(roundDoubleandFormat(refundshow, 2));
                
                double setGroffTurnover = setPurchTotal + setSalesTotal + setCashAdNetTot;
                double setGrossProfit = setPurchComm + setSalesComm + setCashAdComm + setSalesSpread + setBaSalesSpread + setBraSalesSpread;
                if (newpread) {
                    setGrossProfit = setPurchProfit + setCashAdProfit + setSalesProfit + setBaSalesSpread + setBaPurchSpread;
                }
                
                double setLastCashOnPrem = 0.0;
                double setFx = 0.0;
                ArrayList<Office_sp> li = list_query_officesp2(fil[0], subDays(datad1.substring(0, 10), patternsql, 1));
                if (!li.isEmpty()) {
                    Office_sp o = li.get(0);
                    d.setOfficesp(o.getCodice());
                    setLastCashOnPrem = fd(o.getTotal_cod());
                } else {
                    d.setOfficesp(null);
                }
                if (now) {
                    ArrayList<OfficeStockPrice_value> dati = list_OfficeStockPrice_value(fil[0]);
                    for (int x = 0; x < dati.size(); x++) {
                        OfficeStockPrice_value t = dati.get(x);
                        if (t.getCurrency().equals(valutalocale) && t.getSupporto().contains("01")) {
                        } else {
                            setFx = setFx + fd(t.getControvaloreSenzaFormattazione());
                        }
                    }
                } else {
                    Office_sp o = list_query_last_officesp(fil[0], datad2);
                    if (o != null) {
                        double[] d1 = list_dettagliotransazioni(fil, o.getData(), datad2, valutalocale);
                        
                        System.out.println("rc.so.db.Db_Master.list_Daily_value() " + o.getData());
                        System.out.println("rc.so.db.Db_Master.list_Daily_value() " + datad2);
                        System.out.println("rc.so.db.Db_Master.list_Daily_value() " + d1[1]);
                        System.out.println("rc.so.db.Db_Master.list_Daily_value() " + fd(o.getTotal_fx()));
                        
                        setFx = fd(o.getTotal_fx()) + d1[1];
                    }
                }
                
                String oper = get_national_office().getChangetype();
                boolean dividi = oper.equals("/");
                
                double setCashOnPremFromTrans
                        = setSalesTotal
                        - setPurchTotal
                        + setBaPurchTransfNotes
                        - setBaSalesTransfNotes
                        + setBraPurchLocalCurr
                        - setBraSalesLocalCurr
                        + totalnotesnochange
                        + setLastCashOnPrem
                        - refund
                        - setCashAdNetTot
                        - poamount;
                double setFxClosureErrorDeclared = 0.0;
                double setCashOnPremError = 0.0;
                ResultSet rs10 = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery("SELECT * FROM oc_errors where filiale = '" + fil[0] + "' AND cod IN (SELECT cod FROM oc_lista where data like '" + datad1.substring(0, 10) + "%' AND errors='Y') AND tipo='CH' AND (kind='01' OR kind='02' OR kind='03')");
                while (rs10.next()) {
                    if (rs10.getString("valuta").equals(valutalocale) && rs10.getString("kind").equals("01")) {
                        //calcolare
                        double eurerr = fd(rs10.getString("total_user")) - fd(rs10.getString("total_system"));
                        setCashOnPremError = setCashOnPremError + eurerr;
                    } else {
                        double fxerr = fd(rs10.getString("total_user")) - fd(rs10.getString("total_system"));
                        setFxClosureErrorDeclared = setFxClosureErrorDeclared + getControvalore(fxerr, fd(rs10.getString("rate")), dividi);
                    }
                }
                
                double setCashOnPrem = setCashOnPremFromTrans + setCashOnPremError;
                d.setGroffTurnover(roundDoubleandFormat(setGroffTurnover, 2));
                d.setGrossProfit(roundDoubleandFormat(setGrossProfit, 2));
                d.setLastCashOnPrem(roundDoubleandFormat(setLastCashOnPrem, 2));
                d.setCashOnPrem(roundDoubleandFormat(setCashOnPrem, 2));
                d.setFx(roundDoubleandFormat(setFx, 2));
                d.setCashOnPremFromTrans(roundDoubleandFormat(setCashOnPremFromTrans, 2));
                
                if (setCashOnPremError == 0) {
                    d.setCashOnPremError(roundDoubleandFormat(setCashOnPremError, 2).replaceAll("-", ""));
                } else {
                    d.setCashOnPremError(roundDoubleandFormat(setCashOnPremError, 2));
                }
                
                d.setFxClosureErrorDeclared(roundDoubleandFormat(setFxClosureErrorDeclared, 2));
                d.setNoTransPurch(valueOf(setNoTransPurch));
                d.setNoTransCC(valueOf(setNoTransCC));
                d.setNoTransSales(valueOf(setNoTransSales));
                
                d.setTotal(valueOf(setNoTransPurch + setNoTransCC + setNoTransSales));
                
                d.setTotPos(valueOf(setTotPos));
                d.setTotAcc(valueOf(setTotAcc));
                d.setDatiBank(listdb);
                d.setId_filiale(fil[0]);
                d.setDe_filiale(fil[1]);
                d.setData(formatStringtoStringDate(datad1.substring(0, 10), patternsql, patternnormdate_filter));
                
                return d;
            } catch (SQLException | NumberFormatException ex) {
                ex.printStackTrace();
                insertTR("E", "System2", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
            }
        }
        return null;
    }

    /**
     *
     * @param branch
     * @param datad1
     * @param datad2
     * @param allb
     * @return
     */
    public TillTransactionListBB_value list_BBTransactionList_mod(ArrayList<String> branch, String datad1, String datad2, ArrayList<Branch> allb) {
        String sqlALL = "SELECT * FROM ch_transaction tr1, ch_transaction_valori tr2 WHERE tr1.del_fg='0' AND tr1.cod=tr2.cod_tr"
                + " AND tr1.tipotr = 'B' AND LENGTH(tr2.bb_fidcode) = '18' ";
        try {
            String sql = "SELECT * FROM ch_transaction tr1, ch_transaction_valori tr2 "
                    + " WHERE tr1.del_fg='0' AND tr1.cod=tr2.cod_tr AND tr1.tipotr"
                    + " AND (tr1.bb = '1' OR tr1.bb = '2') ";
            String filwhere = "";
            for (int i = 0; i < branch.size(); i++) {
                filwhere = filwhere + "tr1.filiale = '" + branch.get(i) + "' OR ";
            }
            
            if (filwhere.length() > 3) {
                sql = sql + " AND (" + filwhere.substring(0, filwhere.length() - 3).trim() + ") ";
            }
            
            if (datad1 != null) {
                sql = sql + "AND tr1.data >= '" + datad1 + " 00:00:00' ";
            }
            if (datad2 != null) {
                sql = sql + "AND tr1.data <= '" + datad2 + " 23:59:59' ";
            }
            sql = sql + " ORDER BY tr1.tipotr DESC,tr1.data ASC";
            
            ArrayList<String> giàinseriti = new ArrayList<>();
            
            ArrayList<TillTransactionListBB_value> dati = new ArrayList<>();
            ArrayList<CustomerKind> list_customerKind = list_customerKind();
            ArrayList<Figures> fig = list_all_figures();
            ResultSet rs = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql);
            ResultSet rsALL = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sqlALL);
            
            LinkedList<String> fidcode = new LinkedList<>();
            LinkedList<Ch_transaction> codb = new LinkedList<>();
            while (rsALL.next()) {
                fidcode.add(rsALL.getString("tr2.bb_fidcode"));
                Ch_transaction ch = new Ch_transaction();
                ch.setCod(rsALL.getString("tr1.cod"));
                ch.setId(leftPad(rsALL.getString("tr1.id"), 15, "0"));
                ch.setFiliale(rsALL.getString("tr1.filiale"));
                ch.setTipotr(rsALL.getString("tr1.tipotr"));
                ch.setUser(rsALL.getString("tr1.user"));
                ch.setTill(rsALL.getString("tr1.till"));
                ch.setData(rsALL.getString("tr1.data"));
                ch.setTipocliente(rsALL.getString("tr1.tipocliente"));
                ch.setId_open_till(rsALL.getString("tr1.id_open_till"));
                ch.setPay(rsALL.getString("tr1.pay"));
                ch.setTotal(rsALL.getString("tr1.total"));
                ch.setFix(rsALL.getString("tr1.fix"));
                ch.setCom(rsALL.getString("tr1.com"));
                ch.setRound(rsALL.getString("tr1.round"));
                ch.setCommission(rsALL.getString("tr1.commission"));
                ch.setSpread_total(rsALL.getString("tr1.spread_total"));
                ch.setNote(rsALL.getString("tr1.note"));
                ch.setAgency(rsALL.getString("tr1.agency"));
                ch.setAgency_cod(rsALL.getString("tr1.agency_cod"));
                ch.setLocalfigures(rsALL.getString("tr1.localfigures"));
                ch.setPos(rsALL.getString("tr1.pos"));
                ch.setIntbook(rsALL.getString("tr1.intbook"));
                ch.setIntbook_type(rsALL.getString("tr1.intbook_type"));
                ch.setIntbook_1_tf(rsALL.getString("tr1.intbook_1_tf"));
                ch.setIntbook_1_mod(rsALL.getString("tr1.intbook_1_mod"));
                ch.setIntbook_1_val(rsALL.getString("tr1.intbook_1_val"));
                ch.setIntbook_2_tf(rsALL.getString("tr1.intbook_2_tf"));
                ch.setIntbook_2_mod(rsALL.getString("tr1.intbook_2_mod"));
                ch.setIntbook_2_val(rsALL.getString("tr1.intbook_2_val"));
                ch.setIntbook_3_tf(rsALL.getString("tr1.intbook_3_tf"));
                ch.setIntbook_3_mod(rsALL.getString("tr1.intbook_3_mod"));
                ch.setIntbook_3_val(rsALL.getString("tr1.intbook_3_val"));
                ch.setIntbook_mac(rsALL.getString("tr1.intbook_mac"));
                ch.setIntbook_cli(rsALL.getString("tr1.intbook_cli"));
                ch.setCl_cf(rsALL.getString("tr1.cl_cf"));
                ch.setCl_cod(rsALL.getString("tr1.cl_cod"));
                ch.setDel_fg(rsALL.getString("tr1.del_fg"));
                ch.setDel_dt(rsALL.getString("tr1.del_dt"));
                ch.setDel_user(rsALL.getString("tr1.del_user"));
                ch.setDel_motiv(rsALL.getString("tr1.del_motiv"));
                ch.setRefund(rsALL.getString("tr1.refund"));
                ch.setFa_number(rsALL.getString("tr1.fa_number"));
                ch.setCn_number(rsALL.getString("tr1.cn_number"));
                codb.add(ch);
            }
            
            while (rs.next()) {
                boolean isbuy = rs.getString("tr1.tipotr").equals("B");
                String cod = rs.getString("tr1.cod");

//                if (isbuy) {
                if (giàinseriti.contains(cod)) {
                    continue;
                }
//                }

                giàinseriti.add(cod);
                Ch_transaction codbuy = null;
                boolean havebuy = false;
                if (fidcode.contains(rs.getString("tr1.filiale") + rs.getString("tr1.id"))) {
                    codbuy = codb.get(fidcode.indexOf(rs.getString("tr1.filiale") + rs.getString("tr1.id")));
                    havebuy = true;
                }

                //LISTA SELL
                ArrayList<Ch_transaction_value> list_value = query_transaction_value(rs.getString("tr1.cod"));
                for (int x = 0; x < list_value.size(); x++) {
                    Ch_transaction_value v1 = list_value.get(x);
                    if (v1.getBb().equals("Y") || v1.getBb().equals("F")) {
                        TillTransactionListBB_value rm = new TillTransactionListBB_value();
                        rm.setId_filiale(rs.getString("tr1.filiale"));
                        rm.setDe_filiale(formatBankBranchReport(rs.getString("tr1.filiale"), "BR", null, allb));
                        if (havebuy) {
                            rm.setType("OK");
                        } else {
                            rm.setType("  ");
                        }
                        rm.setTill(rs.getString("tr1.till"));
                        rm.setUser(rs.getString("tr1.user"));
                        rm.setNotr(rs.getString("tr1.id"));
                        rm.setTime(rs.getString("tr1.data"));
                        rm.setCur(v1.getValuta());
                        rm.setKind(formatType(rs.getString("tr1.tipotr")) + " " + Engine.get_figures(fig, v1.getSupporto()).getDe_supporto());
                        rm.setAmount(v1.getQuantita());
                        rm.setRate(v1.getRate());
                        rm.setTotal(v1.getTotal());
                        rm.setPerc(v1.getCom_perc());
                        rm.setComfree(v1.getFx_com());
                        rm.setPayinpayout(v1.getNet());
                        rm.setCustomer(query_Client_transactionCN(rs.getString("tr1.cod"), rs.getString("tr1.cl_cod")));
                        rm.setSpread(v1.getSpread());
                        rm.setRound(rs.getString("tr2.roundvalue").replaceAll("-", ""));
                        if (is_CZ) {
                            rm.setRound(rs.getString("tr2.roundvalue"));
                        }
                        if (rs.getString("tr2.supporto").equals("04")) {
                            rm.setPos(rs.getString("tr2.pos"));
                        } else {
                            rm.setPos(rs.getString("tr1.pos"));
                        }
                        rm.setInternetbooking(rs.getString("tr1.intbook"));
                        if (Engine.get_customerKind(list_customerKind, rs.getString("tr1.tipocliente")).getFg_nazionalita().equals("1")) {
                            rm.setResidentnonresident("Resident");
                        } else {
                            rm.setResidentnonresident("Non Resident");
                        }
                        String lfig = rs.getString("tr1.localfigures");
                        if (rs.getString("tr1.localfigures").equals("-")) {
                            lfig = "01";
                        }
                        rm.setFig(lfig);
                        dati.add(rm);
                    }
                }
                
                if (havebuy && codbuy != null) {
                    ArrayList<Ch_transaction_value> buy_value = query_transaction_value(codbuy.getCod());
                    for (int y = 0; y < buy_value.size(); y++) {
                        giàinseriti.add(codbuy.getCod());
                        TillTransactionListBB_value rm = new TillTransactionListBB_value();
                        rm.setId_filiale(codbuy.getFiliale());
                        rm.setDe_filiale(formatBankBranchReport(codbuy.getFiliale(), "BR", null, allb));
                        rm.setType(" ");
                        rm.setTill(codbuy.getTill());
                        rm.setUser(codbuy.getUser());
                        rm.setNotr(codbuy.getId());
                        rm.setTime(codbuy.getData());
                        rm.setCur(buy_value.get(y).getValuta());
                        rm.setKind(formatType(codbuy.getTipotr()) + " " + Engine.get_figures(fig, buy_value.get(y).getSupporto()).getDe_supporto());
                        rm.setAmount(buy_value.get(y).getQuantita());
                        rm.setRate(buy_value.get(y).getRate());
                        rm.setTotal(buy_value.get(y).getTotal());
                        rm.setPerc(buy_value.get(y).getCom_perc());
                        
                        rm.setComfree(buy_value.get(y).getTot_com());
                        rm.setPayinpayout(buy_value.get(y).getNet());
                        rm.setCustomer(" ");
                        rm.setSpread(buy_value.get(y).getSpread());
                        rm.setRound(buy_value.get(y).getRoundvalue().replaceAll("-", ""));
                        if (is_CZ) {
                            rm.setRound(buy_value.get(y).getRoundvalue());
                        }
                        
                        if (buy_value.get(y).getSupporto().equals("04")) {
                            rm.setPos(buy_value.get(y).getPos());
                        } else {
                            rm.setPos(codbuy.getPos());
                        }
                        rm.setInternetbooking(codbuy.getIntbook());
                        if (Engine.get_customerKind(list_customerKind, codbuy.getTipocliente()).getFg_nazionalita().equals("1")) {
                            rm.setResidentnonresident("Resident");
                        } else {
                            rm.setResidentnonresident("Non Resident");
                        }
                        String lfig = rs.getString("tr1.localfigures");
                        if (rs.getString("tr1.localfigures").equals("-")) {
                            lfig = "01";
                        }
                        rm.setFig(lfig);
                        dati.add(rm);
                    }
                    
                }
                
                TillTransactionListBB_value rm = new TillTransactionListBB_value();
                rm.setId_filiale("");
                rm.setDe_filiale("");
                rm.setType("");
                rm.setTill("");
                rm.setUser("");
                rm.setNotr("");
                rm.setTime("");
                rm.setCur("");
                rm.setKind("");
                rm.setAmount("");
                rm.setRate("");
                rm.setTotal("");
                rm.setPerc("");
                rm.setComfree("");
                rm.setPayinpayout("");
                rm.setCustomer("");
                rm.setSpread("");
                rm.setRound("");
                rm.setPos("");
                rm.setInternetbooking("");
                rm.setResidentnonresident("");
                rm.setFig("");
                dati.add(rm);
                
            }
            
            if (dati.size() > 0) {
                TillTransactionListBB_value pdf = new TillTransactionListBB_value();
                pdf.setId_filiale(branch.get(0));
                pdf.setDe_filiale(formatBankBranchReport(branch.get(0), "BR", null, Engine.list_branch_enabled()));
                pdf.setDati(dati);
                
                double setTransvalueresidentbuy = 0.0;
                double setTransvaluenonresidentbuy = 0.0;
                double setTransvalueresidentsell = 0.0;
                double setTransvaluenonresidentsell = 0.0;
                double setCommisionvaluetresidentbuy = 0.0;
                double setCommisionvaluenonresidentbuy = 0.0;
                double setCommisionvaluetresidentsell = 0.0;
                double setCommisionvaluenonresidentsell = 0.0;
                
                int setTransactionnumberresidentbuy = 0;
                int setTransactionnumbernonresidentbuy = 0;
                int setTransactionnumberresidentsell = 0;
                int setTransactionnumbernonresidentsell = 0;
                
                double setInternetbookingamountyes = 0.0;
                int setInternetbookingnumberyes = 0;
                double setInternetbookingamountno = 0.0;
                int setInternetbookingnumberno = 0;
                
                double setPosbuyamount = 0.0;
                int setPosbuynumber = 0;
                double setPossellamount = 0.0;
                int setPossellnumber = 0;
                double setBanksellamount = 0.0;
                int setBanksellnumber = 0;
                
                for (int i = 0; i < dati.size(); i++) {
                    
                    TillTransactionListBB_value rm = dati.get(i);
                    if (rm.getResidentnonresident().equals("Resident") && rm.getKind().toUpperCase().startsWith("BUY")) {
                        setTransvalueresidentbuy = setTransvalueresidentbuy + fd(rm.getTotal());
                        setCommisionvaluetresidentbuy = setCommisionvaluetresidentbuy + fd(rm.getComfree());
                        setTransactionnumberresidentbuy++;
                    }
                    if (rm.getResidentnonresident().equals("Non Resident") && rm.getKind().toUpperCase().startsWith("BUY")) {
                        setTransvaluenonresidentbuy = setTransvaluenonresidentbuy + fd(rm.getTotal());
                        setCommisionvaluenonresidentbuy = setCommisionvaluenonresidentbuy + fd(rm.getComfree());
                        setTransactionnumbernonresidentbuy++;
                    }
                    
                    if (rm.getResidentnonresident().equals("Resident") && rm.getKind().toUpperCase().startsWith("SELL")) {
                        setTransvalueresidentsell = setTransvalueresidentsell + fd(rm.getAmount());
                        setCommisionvaluetresidentsell = setCommisionvaluetresidentsell + fd(rm.getComfree());
                        setTransactionnumberresidentsell++;
                    }
                    if (rm.getResidentnonresident().equals("Non Resident") && rm.getKind().toUpperCase().startsWith("SELL")) {
                        setTransvaluenonresidentsell = setTransvaluenonresidentsell + fd(rm.getAmount());
                        setCommisionvaluenonresidentsell = setCommisionvaluenonresidentsell + fd(rm.getComfree());
                        setTransactionnumbernonresidentsell++;
                    }
                    
                    boolean ca = false;
                    if (rm.getKind().toUpperCase().startsWith("SELL") && !rm.getType().contains("D")) {
                        if (!rm.getInternetbooking().equals("0")) {
                            setInternetbookingamountyes = setInternetbookingamountyes + fd(rm.getPayinpayout());
                            setInternetbookingnumberyes++;
                        } else {
                            setInternetbookingamountno = setInternetbookingamountno + fd(rm.getPayinpayout());
                            setInternetbookingnumberno++;
                        }
                    } else if (rm.getKind().toUpperCase().contains("CASH ADVANCE") && !rm.getType().contains("D")) {
                        setPosbuyamount = setPosbuyamount + fd(rm.getAmount());
                        setPosbuynumber++;
                        ca = true;
                    }
                    
                    if (!rm.getPos().equals("-") && !rm.getType().contains("D")) {
                        if (rm.getKind().toUpperCase().startsWith("SELL")) {
                            if (rm.getFig().equals("06") || rm.getFig().equals("07")) {
                                setPossellamount = setPossellamount + fd(rm.getPayinpayout());
                                setPossellnumber++;
                            } else {
                                setBanksellamount = setBanksellamount + fd(rm.getPayinpayout());
                                setBanksellnumber++;
                            }
                        } else {
                            if (!ca) {
                                setPosbuyamount = setPosbuyamount + fd(rm.getTotal());
                                setPosbuynumber++;
                            }
                        }
                    }
                    
                }
                pdf.setTransvalueresidentbuy(roundDoubleandFormat(setTransvalueresidentbuy, 2));
                pdf.setTransvaluenonresidentbuy(roundDoubleandFormat(setTransvaluenonresidentbuy, 2));
                pdf.setTransvalueresidentsell(roundDoubleandFormat(setTransvalueresidentsell, 2));
                pdf.setTransvaluenonresidentsell(roundDoubleandFormat(setTransvaluenonresidentsell, 2));
                pdf.setCommisionvaluetresidentbuy(roundDoubleandFormat(setCommisionvaluetresidentbuy, 2));
                pdf.setCommisionvaluenonresidentbuy(roundDoubleandFormat(setCommisionvaluenonresidentbuy, 2));
                pdf.setCommisionvaluetresidentsell(roundDoubleandFormat(setCommisionvaluetresidentsell, 2));
                pdf.setCommisionvaluenonresidentsell(roundDoubleandFormat(setCommisionvaluenonresidentsell, 2));
                pdf.setTransactionnumberresidentbuy(roundDoubleandFormat(setTransactionnumberresidentbuy, 0));
                pdf.setTransactionnumbernonresidentbuy(roundDoubleandFormat(setTransactionnumbernonresidentbuy, 0) + "");
                pdf.setTransactionnumberresidentsell(roundDoubleandFormat(setTransactionnumberresidentsell, 0) + "");
                pdf.setTransactionnumbernonresidentsell(roundDoubleandFormat(setTransactionnumbernonresidentsell, 0) + "");
                pdf.setInternetbookingamountyes(roundDoubleandFormat(setInternetbookingamountyes, 2));
                pdf.setInternetbookingnumberyes(roundDoubleandFormat(setInternetbookingnumberyes, 0));
                pdf.setInternetbookingamountno(roundDoubleandFormat(setInternetbookingamountno, 2) + "");
                pdf.setInternetbookingnumberno(roundDoubleandFormat(setInternetbookingnumberno, 0) + "");
                pdf.setPosbuyamount(roundDoubleandFormat(setPosbuyamount, 2));
                pdf.setPosbuynumber(roundDoubleandFormat(setPosbuynumber, 0) + "");
                pdf.setPossellamount(roundDoubleandFormat(setPossellamount, 2));
                pdf.setPossellnumber(roundDoubleandFormat(setPossellnumber, 0) + "");
                
                pdf.setBankbuyamount("0.00");
                pdf.setBankbuynumber("0");
                pdf.setBanksellamount(roundDoubleandFormat(setBanksellamount, 2));
                pdf.setBanksellnumber(roundDoubleandFormat(setBanksellnumber, 0) + "");
                
                return pdf;
            }
            
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return null;
        
    }

    /**
     *
     * @param branch
     * @param datad1
     * @param datad2
     * @param tipo
     * @param allb
     * @return
     */
    public TillTransactionList_value list_BBTransactionList_value(ArrayList<String> branch, String datad1, String datad2,
            String tipo, ArrayList<Branch> allb) {
        
        try {
            String sql = "SELECT * FROM ch_transaction tr1, ch_transaction_valori tr2"
                    + " WHERE tr1.cod=tr2.cod_tr AND tr1.del_fg='0'"
                    //+ " AND tr1.bb <> '0' AND tr2.bb='Y' ";
                    + " AND (tr1.bb = '1' OR tr1.bb = '2') AND (tr2.bb='Y' OR tr2.bb='F') ";
            
            String filwhere = "";
            for (int i = 0; i < branch.size(); i++) {
                filwhere = filwhere + "tr1.filiale = '" + branch.get(i) + "' OR ";
            }
            
            if (filwhere.length() > 3) {
                sql = sql + " AND (" + filwhere.substring(0, filwhere.length() - 3).trim() + ") ";
            }
            
            if (datad1 != null) {
                sql = sql + "AND tr1.data >= '" + datad1 + " 00:00:00' ";
            }
            if (datad2 != null) {
                sql = sql + "AND tr1.data <= '" + datad2 + " 23:59:59' ";
            }
            if (tipo == null) {
                sql = sql + " ORDER BY tr1.data";
            } else {
                sql = sql + " ORDER BY tr1.tipotr DESC,tr1.data ASC";
            }
            
            ArrayList<TillTransactionList_value> dati = new ArrayList<>();
            ArrayList<CustomerKind> list_customerKind = list_customerKind();
            ArrayList<Figures> fig = list_all_figures();
            ResultSet rs = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql);
            
            while (rs.next()) {
                TillTransactionList_value rm = new TillTransactionList_value();
                rm.setId_filiale(rs.getString("tr1.filiale"));
                rm.setDe_filiale(formatBankBranchReport(rs.getString("tr1.filiale"), "BR", null, allb));
                rm.setType(rs.getString("tr2.bb_fidcode"));
                rm.setTill(rs.getString("tr1.till"));
                rm.setUser(rs.getString("tr1.user"));
                rm.setNotr(rs.getString("tr1.id"));
                rm.setTime(rs.getString("tr1.data"));
                rm.setCur(rs.getString("tr2.valuta"));
                rm.setKind(formatType(rs.getString("tr1.tipotr")) + " " + Engine.get_figures(fig, rs.getString("tr2.supporto")).getDe_supporto());
                rm.setAmount(rs.getString("tr2.quantita"));
                rm.setRate(rs.getString("tr2.rate"));
                rm.setTotal(rs.getString("tr2.total"));
                rm.setPerc(rs.getString("tr2.com_perc"));
                rm.setComfree(rs.getString("tr2.tot_com"));
                rm.setPayinpayout(rs.getString("tr2.net"));
                rm.setCustomer(query_Client_transactionCN(rs.getString("tr1.cod"), rs.getString("tr1.cl_cod")));
                rm.setSpread(rs.getString("tr2.spread"));
                rm.setRound(rs.getString("tr2.roundvalue").replaceAll("-", filwhere));
                if (is_CZ) {
                    rm.setRound(rs.getString("tr2.roundvalue"));
                }
                
                if (rs.getString("tr2.supporto").equals("04")) {
                    rm.setPos(rs.getString("tr2.pos"));
                } else {
                    rm.setPos(rs.getString("tr1.pos"));
                }
                rm.setInternetbooking(rs.getString("tr1.intbook"));
                if (Engine.get_customerKind(list_customerKind, rs.getString("tr1.tipocliente")).getFg_nazionalita().equals("1")) {
                    rm.setResidentnonresident("Resident");
                } else {
                    rm.setResidentnonresident("Non Resident");
                }
                
                String lfig = rs.getString("tr1.localfigures");
                if (rs.getString("tr1.localfigures").equals("-")) {
                    lfig = "01";
                }
                rm.setFig(lfig);
                
                if (tipo == null) {
                    dati.add(rm);
                } else if (rs.getString("tr1.tipotr").equals(tipo)) {
                    dati.add(rm);
                }
            }
            
            if (dati.size() > 0) {
                TillTransactionList_value pdf = new TillTransactionList_value();
                pdf.setId_filiale(branch.get(0));
                pdf.setDe_filiale(formatBankBranchReport(branch.get(0), "BR", null, Engine.list_branch_enabled()));
                pdf.setDati(dati);
                
                double setTransvalueresidentbuy = 0.0;
                double setTransvaluenonresidentbuy = 0.0;
                double setTransvalueresidentsell = 0.0;
                double setTransvaluenonresidentsell = 0.0;
                double setCommisionvaluetresidentbuy = 0.0;
                double setCommisionvaluenonresidentbuy = 0.0;
                double setCommisionvaluetresidentsell = 0.0;
                double setCommisionvaluenonresidentsell = 0.0;
                
                int setTransactionnumberresidentbuy = 0;
                int setTransactionnumbernonresidentbuy = 0;
                int setTransactionnumberresidentsell = 0;
                int setTransactionnumbernonresidentsell = 0;
                
                double setInternetbookingamountyes = 0.0;
                int setInternetbookingnumberyes = 0;
                double setInternetbookingamountno = 0.0;
                int setInternetbookingnumberno = 0;
                
                double setPosbuyamount = 0.0;
                int setPosbuynumber = 0;
                double setPossellamount = 0.0;
                int setPossellnumber = 0;
                double setBanksellamount = 0.0;
                int setBanksellnumber = 0;
                
                for (int i = 0; i < dati.size(); i++) {
                    
                    TillTransactionList_value rm = dati.get(i);
                    if (rm.getResidentnonresident().equals("Resident") && rm.getKind().toUpperCase().startsWith("BUY")) {
                        setTransvalueresidentbuy = setTransvalueresidentbuy + fd(rm.getTotal());
                        setCommisionvaluetresidentbuy = setCommisionvaluetresidentbuy + fd(rm.getComfree());
                        setTransactionnumberresidentbuy++;
                    }
                    if (rm.getResidentnonresident().equals("Non Resident") && rm.getKind().toUpperCase().startsWith("BUY")) {
                        setTransvaluenonresidentbuy = setTransvaluenonresidentbuy + fd(rm.getTotal());
                        setCommisionvaluenonresidentbuy = setCommisionvaluenonresidentbuy + fd(rm.getComfree());
                        setTransactionnumbernonresidentbuy++;
                    }
                    
                    if (rm.getResidentnonresident().equals("Resident") && rm.getKind().toUpperCase().startsWith("SELL")) {
                        setTransvalueresidentsell = setTransvalueresidentsell + fd(rm.getAmount());
                        setCommisionvaluetresidentsell = setCommisionvaluetresidentsell + fd(rm.getComfree());
                        setTransactionnumberresidentsell++;
                    }
                    if (rm.getResidentnonresident().equals("Non Resident") && rm.getKind().toUpperCase().startsWith("SELL")) {
                        setTransvaluenonresidentsell = setTransvaluenonresidentsell + fd(rm.getAmount());
                        setCommisionvaluenonresidentsell = setCommisionvaluenonresidentsell + fd(rm.getComfree());
                        setTransactionnumbernonresidentsell++;
                    }
                    
                    boolean ca = false;
                    if (rm.getKind().toUpperCase().startsWith("SELL") && !rm.getType().contains("D")) {
                        if (!rm.getInternetbooking().equals("0")) {
                            setInternetbookingamountyes = setInternetbookingamountyes + fd(rm.getPayinpayout());
                            setInternetbookingnumberyes++;
                        } else {
                            setInternetbookingamountno = setInternetbookingamountno + fd(rm.getPayinpayout());
                            setInternetbookingnumberno++;
                        }
                    } else if (rm.getKind().toUpperCase().contains("CASH ADVANCE") && !rm.getType().contains("D")) {
                        setPosbuyamount = setPosbuyamount + fd(rm.getAmount());
                        setPosbuynumber++;
                        ca = true;
                    }
                    
                    if (!rm.getPos().equals("-") && !rm.getType().contains("D")) {
                        if (rm.getKind().toUpperCase().startsWith("SELL")) {
                            if (rm.getFig().equals("06") || rm.getFig().equals("07")) {
                                setPossellamount = setPossellamount + fd(rm.getPayinpayout());
                                setPossellnumber++;
                            } else {
                                setBanksellamount = setBanksellamount + fd(rm.getPayinpayout());
                                setBanksellnumber++;
                            }
                        } else {
                            if (!ca) {
                                setPosbuyamount = setPosbuyamount + fd(rm.getTotal());
                                setPosbuynumber++;
                            }
                        }
                    }
                    
                }
                pdf.setTransvalueresidentbuy(roundDoubleandFormat(setTransvalueresidentbuy, 2));
                pdf.setTransvaluenonresidentbuy(roundDoubleandFormat(setTransvaluenonresidentbuy, 2));
                pdf.setTransvalueresidentsell(roundDoubleandFormat(setTransvalueresidentsell, 2));
                pdf.setTransvaluenonresidentsell(roundDoubleandFormat(setTransvaluenonresidentsell, 2));
                pdf.setCommisionvaluetresidentbuy(roundDoubleandFormat(setCommisionvaluetresidentbuy, 2));
                pdf.setCommisionvaluenonresidentbuy(roundDoubleandFormat(setCommisionvaluenonresidentbuy, 2));
                pdf.setCommisionvaluetresidentsell(roundDoubleandFormat(setCommisionvaluetresidentsell, 2));
                pdf.setCommisionvaluenonresidentsell(roundDoubleandFormat(setCommisionvaluenonresidentsell, 2));
                pdf.setTransactionnumberresidentbuy(roundDoubleandFormat(setTransactionnumberresidentbuy, 0));
                pdf.setTransactionnumbernonresidentbuy(roundDoubleandFormat(setTransactionnumbernonresidentbuy, 0) + "");
                pdf.setTransactionnumberresidentsell(roundDoubleandFormat(setTransactionnumberresidentsell, 0) + "");
                pdf.setTransactionnumbernonresidentsell(roundDoubleandFormat(setTransactionnumbernonresidentsell, 0) + "");
                pdf.setInternetbookingamountyes(roundDoubleandFormat(setInternetbookingamountyes, 2));
                pdf.setInternetbookingnumberyes(roundDoubleandFormat(setInternetbookingnumberyes, 0));
                pdf.setInternetbookingamountno(roundDoubleandFormat(setInternetbookingamountno, 2) + "");
                pdf.setInternetbookingnumberno(roundDoubleandFormat(setInternetbookingnumberno, 0) + "");
                pdf.setPosbuyamount(roundDoubleandFormat(setPosbuyamount, 2));
                pdf.setPosbuynumber(roundDoubleandFormat(setPosbuynumber, 0) + "");
                pdf.setPossellamount(roundDoubleandFormat(setPossellamount, 2));
                pdf.setPossellnumber(roundDoubleandFormat(setPossellnumber, 0) + "");
                
                pdf.setBankbuyamount("0.00");
                pdf.setBankbuynumber("0");
                pdf.setBanksellamount(roundDoubleandFormat(setBanksellamount, 2));
                pdf.setBanksellnumber(roundDoubleandFormat(setBanksellnumber, 0) + "");
                
                return pdf;
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        ArrayList<TillTransactionList_value> dati = new ArrayList<>();
        TillTransactionList_value pdf = new TillTransactionList_value();
        pdf.setId_filiale(branch.get(0));
        pdf.setDe_filiale(formatBankBranchReport(branch.get(0), "BR", null, Engine.list_branch_enabled()));
        pdf.setDati(dati);
        pdf.setTransvalueresidentbuy("0.00");
        pdf.setTransvaluenonresidentbuy("0.00");
        pdf.setTransvalueresidentsell("0.00");
        pdf.setTransvaluenonresidentsell("0.00");
        pdf.setCommisionvaluetresidentbuy("0.00");
        pdf.setCommisionvaluenonresidentbuy("0.00");
        pdf.setCommisionvaluetresidentsell("0.00");
        pdf.setCommisionvaluenonresidentsell("0.00");
        pdf.setTransactionnumberresidentbuy("0");
        pdf.setTransactionnumbernonresidentbuy("0");
        pdf.setTransactionnumberresidentsell("0");
        pdf.setTransactionnumbernonresidentsell("0");
        pdf.setInternetbookingamountyes("0.00");
        pdf.setInternetbookingnumberyes("0");
        pdf.setInternetbookingamountno("0.00");
        pdf.setInternetbookingnumberno("0");
        pdf.setPosbuyamount("0.00");
        pdf.setPosbuynumber("0");
        pdf.setPossellamount("0.00");
        pdf.setPossellnumber("0");
        
        pdf.setBankbuyamount("0.00");
        pdf.setBankbuynumber("0");
        pdf.setBanksellamount("0.00");
        pdf.setBanksellnumber("0");
        
        return pdf;
        
    }

    /**
     *
     * @param fil
     * @param datad1
     * @param datad2
     * @return
     */
    public TillTransactionList_value list_DeleteTransactionList_value(String[] fil, String datad1, String datad2) {
        
        try {
            String sql = "SELECT * FROM ch_transaction tr1, ch_transaction_valori tr2"
                    + " WHERE tr1.cod=tr2.cod_tr "
                    + "AND tr1.del_fg='1' AND tr1.filiale = '" + fil[0] + "' ";
            if (datad1 != null) {
                sql = sql + "AND tr1.data >= '" + datad1 + " 00:00:00' ";
            }
            if (datad2 != null) {
                sql = sql + "AND tr1.data <= '" + datad2 + " 23:59:59' ";
            }
            sql = sql + " ORDER BY tr1.data";
            ArrayList<TillTransactionList_value> dati = new ArrayList<>();
            ArrayList<CustomerKind> list_customerKind = list_customerKind();
            ArrayList<Figures> fig = list_all_figures();
            ResultSet rs = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql);
            List<String> listmodify = list_transaction_modify_ch();
            ArrayList<String[]> listacc = credit_card_enabled();
            
            while (rs.next()) {
                TillTransactionList_value rm = new TillTransactionList_value();
                rm.setType(formatTilltr(rs.getString("tr1.del_fg"),
                        rs.getString("tr1.bb"), rs.getString("tr1.fa_number"),
                        rs.getString("tr2.supporto"), rs.getString("tr2.bb"), listmodify.contains(rs.getString("tr1.cod")), this,
                        rs.getString("tr1.refund"), rs.getString("tr1.cod")));
                rm.setTill(rs.getString("tr1.till"));
                rm.setUser(rs.getString("tr1.user"));
                rm.setNotr(rs.getString("tr1.id"));
                rm.setTime(rs.getString("tr1.data"));
                rm.setCur(rs.getString("tr2.valuta"));
                rm.setKind(formatType(rs.getString("tr1.tipotr")) + " " + Engine.get_figures(fig, rs.getString("tr2.supporto")).getDe_supporto());
                rm.setAmount(rs.getString("tr2.quantita"));
                rm.setRate(rs.getString("tr2.rate"));
                rm.setTotal(rs.getString("tr2.total"));
                rm.setPerc(rs.getString("tr2.com_perc"));
                rm.setComfree(rs.getString("tr2.tot_com"));
                rm.setPayinpayout(rs.getString("tr2.net"));
                rm.setCustomer(query_Client_transactionCN(rs.getString("tr1.cod"), rs.getString("tr1.cl_cod")));
                rm.setSpread(rs.getString("tr2.spread"));
                rm.setPos(formatAL(rs.getString("tr2.pos"), listacc, 1));
                rm.setRound(rs.getString("tr2.roundvalue").replaceAll("-", ""));
                if (is_CZ) {
                    rm.setRound(rs.getString("tr2.roundvalue"));
                }
                rm.setDelete1(formatStringtoStringDate(rs.getString("tr1.del_dt"), patternsqldate, patternnormdate));
                rm.setDelete2(rs.getString("tr1.del_motiv"));
                if (Engine.get_customerKind(list_customerKind, rs.getString("tr1.tipocliente")).getFg_nazionalita().equals("1")) {
                    rm.setResidentnonresident("Resident");
                } else {
                    rm.setResidentnonresident("Non Resident");
                }
                rm.setFig(Engine.get_figures(fig, rs.getString("tr2.supporto")).getDe_supporto());
                rm.setInternetbooking(rs.getString("tr1.intbook"));
                dati.add(rm);
            }
            
            if (dati.size() > 0) {
                TillTransactionList_value pdf = new TillTransactionList_value();
                pdf.setId_filiale(fil[0]);
                pdf.setDe_filiale(fil[1]);
                pdf.setDati(dati);
                
                double setTransvalueresidentbuy = 0.0;
                double setTransvaluenonresidentbuy = 0.0;
                double setTransvalueresidentsell = 0.0;
                double setTransvaluenonresidentsell = 0.0;
                double setCommisionvaluetresidentbuy = 0.0;
                double setCommisionvaluenonresidentbuy = 0.0;
                double setCommisionvaluetresidentsell = 0.0;
                double setCommisionvaluenonresidentsell = 0.0;
                
                int setTransactionnumberresidentbuy = 0;
                int setTransactionnumbernonresidentbuy = 0;
                int setTransactionnumberresidentsell = 0;
                int setTransactionnumbernonresidentsell = 0;
                
                double setInternetbookingamountyes = 0.0;
                int setInternetbookingnumberyes = 0;
                double setInternetbookingamountno = 0.0;
                int setInternetbookingnumberno = 0;
                
                double setPosbuyamount = 0.0;
                int setPosbuynumber = 0;
                double setPossellamount = 0.0;
                int setPossellnumber = 0;
                double setBanksellamount = 0.0;
                int setBanksellnumber = 0;
                for (int i = 0; i < dati.size(); i++) {
                    TillTransactionList_value rm = dati.get(i);
                    if (rm.getResidentnonresident().equals("Resident") && rm.getKind().toUpperCase().startsWith("BUY")) {
                        setTransvalueresidentbuy = setTransvalueresidentbuy + fd(rm.getTotal());
                        setCommisionvaluetresidentbuy = setCommisionvaluetresidentbuy + fd(rm.getComfree()) + parseDoubleR(rm.getRound());
                        setTransactionnumberresidentbuy++;
                    }
                    if (rm.getResidentnonresident().equals("Non Resident") && rm.getKind().toUpperCase().startsWith("BUY")) {
                        setTransvaluenonresidentbuy = setTransvaluenonresidentbuy + fd(rm.getTotal());
                        setCommisionvaluenonresidentbuy = setCommisionvaluenonresidentbuy + fd(rm.getComfree()) + parseDoubleR(rm.getRound());
                        setTransactionnumbernonresidentbuy++;
                    }
                    
                    if (rm.getResidentnonresident().equals("Resident") && rm.getKind().toUpperCase().startsWith("SELL")) {
                        setTransvalueresidentsell = setTransvalueresidentsell + fd(rm.getAmount());
                        setCommisionvaluetresidentsell = setCommisionvaluetresidentsell + fd(rm.getComfree()) + parseDoubleR(rm.getRound());
                        setTransactionnumberresidentsell++;
                    }
                    if (rm.getResidentnonresident().equals("Non Resident") && rm.getKind().toUpperCase().startsWith("SELL")) {
                        setTransvaluenonresidentsell = setTransvaluenonresidentsell + fd(rm.getAmount());
                        setCommisionvaluenonresidentsell = setCommisionvaluenonresidentsell + fd(rm.getComfree()) + parseDoubleR(rm.getRound());
                        setTransactionnumbernonresidentsell++;
                    }
                    if (rm.getKind().toUpperCase().startsWith("SELL")) {
                        if (!rm.getInternetbooking().equals("0")) {
                            setInternetbookingamountyes = setInternetbookingamountyes + fd(rm.getAmount());
                            setInternetbookingnumberyes++;
                        } else {
                            setInternetbookingamountno = setInternetbookingamountno + fd(rm.getAmount());
                            setInternetbookingnumberno++;
                        }
                    }
                    if (!rm.getPos().equals("-")) {
                        if (rm.getKind().toUpperCase().startsWith("SELL")) {
                            if (rm.getKind().toUpperCase().contains("BANK")) {
                                setBanksellamount = setPossellamount + fd(rm.getAmount());
                                setBanksellnumber++;
                            } else {
                                setPossellamount = setPossellamount + fd(rm.getAmount());
                                setPossellnumber++;
                            }
                        } else {
                            setPosbuyamount = setPosbuyamount + fd(rm.getTotal());
                            setPosbuynumber++;
                        }
                    }
                }
                
                pdf.setTransvalueresidentbuy(roundDoubleandFormat(setTransvalueresidentbuy, 2));
                pdf.setTransvaluenonresidentbuy(roundDoubleandFormat(setTransvaluenonresidentbuy, 2));
                pdf.setTransvalueresidentsell(roundDoubleandFormat(setTransvalueresidentsell, 2));
                pdf.setTransvaluenonresidentsell(roundDoubleandFormat(setTransvaluenonresidentsell, 2));
                pdf.setCommisionvaluetresidentbuy(roundDoubleandFormat(setCommisionvaluetresidentbuy, 2));
                pdf.setCommisionvaluenonresidentbuy(roundDoubleandFormat(setCommisionvaluenonresidentbuy, 2));
                pdf.setCommisionvaluetresidentsell(roundDoubleandFormat(setCommisionvaluetresidentsell, 2));
                pdf.setCommisionvaluenonresidentsell(roundDoubleandFormat(setCommisionvaluenonresidentsell, 2));
                pdf.setTransactionnumberresidentbuy(roundDoubleandFormat(setTransactionnumberresidentbuy, 0) + "");
                pdf.setTransactionnumbernonresidentbuy(roundDoubleandFormat(setTransactionnumbernonresidentbuy, 0) + "");
                pdf.setTransactionnumberresidentsell(roundDoubleandFormat(setTransactionnumberresidentsell, 0) + "");
                pdf.setTransactionnumbernonresidentsell(roundDoubleandFormat(setTransactionnumbernonresidentsell, 0) + "");
                pdf.setInternetbookingamountyes(roundDoubleandFormat(setInternetbookingamountyes, 2));
                pdf.setInternetbookingnumberyes(roundDoubleandFormat(setInternetbookingnumberyes, 0) + "");
                pdf.setInternetbookingamountno(roundDoubleandFormat(setInternetbookingamountno, 2));
                pdf.setInternetbookingnumberno(roundDoubleandFormat(setInternetbookingnumberno, 0) + "");
                pdf.setPosbuyamount(roundDoubleandFormat(setPosbuyamount, 2));
                pdf.setPosbuynumber(roundDoubleandFormat(setPosbuynumber, 0) + "");
                pdf.setPossellamount(roundDoubleandFormat(setPossellamount, 2));
                pdf.setPossellnumber(roundDoubleandFormat(setPossellnumber, 0) + "");
                
                pdf.setBankbuyamount("0.00");
                pdf.setBankbuynumber("0");
                pdf.setBanksellamount(roundDoubleandFormat(setBanksellamount, 2));
                pdf.setBanksellnumber(roundDoubleandFormat(setBanksellnumber, 0) + "");
                
                return pdf;
                
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return null;
    }

    /**
     *
     * @param fil
     * @param datad1
     * @param datad2
     * @return
     */
    public ArrayList<HeavyTransactionList_value> list_HeavyTransactionList_value(String[] fil, String datad1, String datad2) {
        ArrayList<HeavyTransactionList_value> out = new ArrayList<>();
        try {
            String sql = "SELECT * FROM ch_transaction tr1, ch_transaction_valori tr2"
                    + " WHERE tr1.cod=tr2.cod_tr AND tr1.del_fg='0' AND tr1.filiale = '" + fil[0] + "' ";
            
            if (datad1 != null) {
                sql = sql + "AND tr1.data >= '" + datad1 + " 00:00:00' ";
            }
            if (datad2 != null) {
                sql = sql + "AND tr1.data <= '" + datad2 + " 23:59:59' ";
            }
            sql = sql + " AND tr1.cl_cod <> '---' ORDER BY tr1.cl_cod,tr1.data";
            ArrayList<String> userlist = new ArrayList<>();
            ResultSet rs = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql);
            while (rs.next()) {
                userlist.add(rs.getString("tr1.cl_cod"));
            }
            rs.beforeFirst();
            removeDuplicatesAL(userlist);
            ArrayList<CustomerKind> list_customerKind = list_customerKind();
            ArrayList<String[]> nazioni = country();
            ArrayList<String[]> city = city_Italy_APM();
            String[] loc = get_local_currency();
            for (int i = 0; i < userlist.size(); i++) {
                ArrayList<TransactionforHeavyTransactionList> translist = new ArrayList<>();
                String coduser = userlist.get(i);
                HeavyTransactionList_value rm = new HeavyTransactionList_value();
                boolean first = false;
                while (rs.next()) {
                    if (rs.getString("tr1.cl_cod").equals(coduser)) {
                        Client c0 = query_Client_transaction(rs.getString("tr1.cod"), rs.getString("tr1.cl_cod"));
                        rm.setClinetname(c0.getCognome() + " " + c0.getNome());
                        
                        rm.setAddress(c0.getIndirizzo() + " " + c0.getCap() + " " + formatAL_city(c0.getCitta(), city)
                                + " " + c0.getProvincia() + " " + formatAL(c0.getNazione(), nazioni, 1));
                        
                        String sesso = "";
                        if (c0.getSesso().equalsIgnoreCase("F")) {
                            sesso = "Female";
                        } else if (c0.getSesso().equalsIgnoreCase("M")) {
                            sesso = "Male";
                        } else if (c0.getSesso().equalsIgnoreCase("O")) {
                            sesso = "Other";
                        }
                        
                        rm.setBirthplaceday(c0.getCitta_nascita() + " " + formatAL(c0.getNazione_nascita(), nazioni, 1) + " " + c0.getDt_nascita() + " " + sesso);
                        
                        rm.setTaxcode(c0.getCodfisc());
                        rm.setDocumentnumber(c0.getTipo_documento() + " Nr. " + c0.getNumero_documento());
                        
                        String document = "Date "
                                + c0.getDt_rilascio_documento() + " - "
                                + c0.getDt_scadenza_documento() + " "
                                + c0.getRilasciato_da_documento() + " - " + c0.getLuogo_rilascio_documento();
                        
                        if (!is_IT) {
                            try {
                                if (c0.getRepceca() != null) {
                                    document = document + " " + formatAL(c0.getRepceca().getHeavy_cz_issuingcountry(), nazioni, 1);
                                }
                            } catch (Exception e) {
                            }
                        }
                        
                        rm.setDocumentdataente(document);
                        
                        if (!first) {
                            first = true;
                        }
                        TransactionforHeavyTransactionList trans = new TransactionforHeavyTransactionList();
                        trans.setDate(rs.getString("tr1.id") + " " + formatStringtoStringDate(rs.getString("tr1.data"), patternsqldate, patternnormdate));
                        
                        if (Engine.get_customerKind(list_customerKind, rs.getString("tr1.tipocliente")).getFg_nazionalita().equals("1")) {
                            trans.setRs("RS");
                        } else {
                            trans.setRs("NR");
                        }
                        
                        trans.setBuysell(formatType(rs.getString("tr1.tipotr")));
                        trans.setB(rs.getString("tr2.supporto"));
                        trans.setCurrency(rs.getString("tr2.valuta"));
                        trans.setQuantity(rs.getString("tr2.quantita"));
                        trans.setAmount(rs.getString("tr2.total"));
                        trans.setCurrencylocal(loc[0]);

                        //BLOCCO PEP
                        trans.setSanction("No"); //esempio
                        trans.setClientpep(c0.getPep());
                        trans.setMoneysource("");
                        trans.setTransactionreason("");
                        
                        translist.add(trans);
                        
                    }
                }
                rm.setTransactionlist(translist);
                rm.setCodicenazione(codnaz);
                rm.setCurrencylocale(loc[0]);
                out.add(rm);
                rs.beforeFirst();
            }
            
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        
        return out;
    }

    /**
     *
     * @param fil
     * @param datad1
     * @param datad2
     * @return
     */
    public TillTransactionListCurrency_value list_TillTransactionListCurrency_value(String[] fil, String datad1, String datad2) {
        try {
            
            String sql = "SELECT * FROM ch_transaction tr1, ch_transaction_valori tr2 "
                    + " WHERE tr1.cod=tr2.cod_tr AND tr1.filiale = '" + fil[0] + "' ";
            
            if (datad1 != null) {
                sql = sql + "AND tr1.data >= '" + datad1 + " 00:00:00' ";
            }
            if (datad2 != null) {
                sql = sql + "AND tr1.data <= '" + datad2 + " 23:59:59' ";
            }
            sql = sql + " ORDER BY tr2.valuta,tr1.data";
            
            ResultSet rs = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql);
            
            ArrayList<Figures> fig = list_all_figures();
            ArrayList<CustomerKind> list_customerKind = list_customerKind();
            ArrayList<TillTransactionListCurrency_value> dati = new ArrayList<>();
            List<String> listmodify = list_transaction_modify_ch();
            while (rs.next()) {
                TillTransactionListCurrency_value rm = new TillTransactionListCurrency_value();
                rm.setType(formatTilltr(rs.getString("tr1.del_fg"), rs.getString("tr1.bb"),
                        rs.getString("tr1.fa_number"), rs.getString("tr2.supporto"), rs.getString("tr2.bb"),
                        listmodify.contains(rs.getString("tr1.cod")), this,
                        rs.getString("tr1.refund"), rs.getString("tr1.cod")));
                rm.setTill(rs.getString("tr1.till"));
                rm.setUser(rs.getString("tr1.user"));
                rm.setNotr(rs.getString("tr1.id"));
                rm.setTime(rs.getString("tr1.data"));
                rm.setCur(rs.getString("tr2.valuta"));
                rm.setKind(formatType(rs.getString("tr1.tipotr")) + " " + Engine.get_figures(fig, rs.getString("tr2.supporto")).getDe_supporto());
                rm.setAmount(rs.getString("tr2.quantita"));
                rm.setRate(rs.getString("tr2.rate"));
                rm.setTotal(rs.getString("tr2.total"));
                rm.setPerc(rs.getString("tr2.com_perc"));
                rm.setComfree(rs.getString("tr2.tot_com"));
                rm.setPayinpayout(rs.getString("tr2.net"));
                rm.setCustomer(query_Client_transactionCN(rs.getString("tr1.cod"), rs.getString("tr1.cl_cod")));
                rm.setSpread(rs.getString("tr2.spread"));
                if (rs.getString("tr2.supporto").equals("04")) {
                    rm.setPos(rs.getString("tr2.pos"));
                } else {
                    rm.setPos(rs.getString("tr1.pos"));
                }
                rm.setRound(rs.getString("tr2.roundvalue").replaceAll("-", ""));
                if (is_CZ) {
                    rm.setRound(rs.getString("tr2.roundvalue"));
                }
                if (Engine.get_customerKind(list_customerKind, rs.getString("tr1.tipocliente")).getFg_nazionalita().equals("1")) {
                    rm.setResidentnonresident("Resident");
                } else {
                    rm.setResidentnonresident("Non Resident");
                }
                
                rm.setInternetbooking(rs.getString("tr1.intbook"));
                
                dati.add(rm);
            }
            if (dati.size() > 0) {
                
                TillTransactionListCurrency_value pdf = new TillTransactionListCurrency_value();
                pdf.setId_filiale(fil[0]);
                pdf.setDe_filiale(fil[1]);
                pdf.setDati(dati);
                
                double setTransvalueresidentbuy = 0.0;
                double setTransvaluenonresidentbuy = 0.0;
                double setTransvalueresidentsell = 0.0;
                double setTransvaluenonresidentsell = 0.0;
                double setCommisionvaluetresidentbuy = 0.0;
                double setCommisionvaluenonresidentbuy = 0.0;
                double setCommisionvaluetresidentsell = 0.0;
                double setCommisionvaluenonresidentsell = 0.0;
                
                int setTransactionnumberresidentbuy = 0;
                int setTransactionnumbernonresidentbuy = 0;
                int setTransactionnumberresidentsell = 0;
                int setTransactionnumbernonresidentsell = 0;
                
                double setInternetbookingamountyes = 0.0;
                int setInternetbookingnumberyes = 0;
                double setInternetbookingamountno = 0.0;
                int setInternetbookingnumberno = 0;
                
                double setPosbuyamount = 0.0;
                int setPosbuynumber = 0;
                double setPossellamount = 0.0;
                int setPossellnumber = 0;
                double setBanksellamount = 0.0;
                int setBanksellnumber = 0;
                
                for (int i = 0; i < dati.size(); i++) {
                    
                    TillTransactionListCurrency_value rm = dati.get(i);
                    if (rm.getResidentnonresident().equals("Resident") && rm.getKind().toUpperCase().startsWith("BUY") && !rm.getType().contains("D")) {
                        setTransvalueresidentbuy = setTransvalueresidentbuy + fd(rm.getTotal());
                        setCommisionvaluetresidentbuy = setCommisionvaluetresidentbuy + fd(rm.getComfree());
                        setTransactionnumberresidentbuy++;
                    }
                    if (rm.getResidentnonresident().equals("Non Resident") && rm.getKind().toUpperCase().startsWith("BUY") && !rm.getType().contains("D")) {
                        setTransvaluenonresidentbuy = setTransvaluenonresidentbuy + fd(rm.getTotal());
                        setCommisionvaluenonresidentbuy = setCommisionvaluenonresidentbuy + fd(rm.getComfree());
                        setTransactionnumbernonresidentbuy++;
                    }
                    
                    if (rm.getResidentnonresident().equals("Resident") && rm.getKind().toUpperCase().startsWith("SELL") && !rm.getType().contains("D")) {
                        setTransvalueresidentsell = setTransvalueresidentsell + fd(rm.getAmount());
                        setCommisionvaluetresidentsell = setCommisionvaluetresidentsell + fd(rm.getComfree());
                        setTransactionnumberresidentsell++;
                    }
                    if (rm.getResidentnonresident().equals("Non Resident") && rm.getKind().toUpperCase().startsWith("SELL") && !rm.getType().contains("D")) {
                        setTransvaluenonresidentsell = setTransvaluenonresidentsell + fd(rm.getAmount());
                        setCommisionvaluenonresidentsell = setCommisionvaluenonresidentsell + fd(rm.getComfree());
                        setTransactionnumbernonresidentsell++;
                    }
                    if (rm.getKind().toUpperCase().startsWith("SELL") && !rm.getType().contains("D")) {
                        if (!rm.getInternetbooking().equals("0")) {
                            setInternetbookingamountyes = setInternetbookingamountyes + fd(rm.getAmount());
                            setInternetbookingnumberyes++;
                        } else {
                            setInternetbookingamountno = setInternetbookingamountno + fd(rm.getAmount());
                            setInternetbookingnumberno++;
                        }
                    }
                    if (!rm.getPos().equals("-") && !rm.getType().contains("D")) {
                        if (rm.getKind().toUpperCase().startsWith("SELL")) {
                            
                            if (rm.getKind().toUpperCase().contains("BANK")) {
                                setBanksellamount = setPossellamount + fd(rm.getAmount());
                                setBanksellnumber++;
                            } else {
                                setPossellamount = setPossellamount + fd(rm.getAmount());
                                setPossellnumber++;
                            }
                            
                        } else {
                            setPosbuyamount = setPosbuyamount + fd(rm.getTotal());
                            setPosbuynumber++;
                        }
                    }
                }
                
                pdf.setTransvalueresidentbuy(roundDoubleandFormat(setTransvalueresidentbuy, 2));
                pdf.setTransvaluenonresidentbuy(roundDoubleandFormat(setTransvaluenonresidentbuy, 2));
                pdf.setTransvalueresidentsell(roundDoubleandFormat(setTransvalueresidentsell, 2));
                pdf.setTransvaluenonresidentsell(roundDoubleandFormat(setTransvaluenonresidentsell, 2));
                pdf.setCommisionvaluetresidentbuy(roundDoubleandFormat(setCommisionvaluetresidentbuy, 2));
                pdf.setCommisionvaluenonresidentbuy(roundDoubleandFormat(setCommisionvaluenonresidentbuy, 2));
                pdf.setCommisionvaluetresidentsell(roundDoubleandFormat(setCommisionvaluetresidentsell, 2));
                pdf.setCommisionvaluenonresidentsell(roundDoubleandFormat(setCommisionvaluenonresidentsell, 2));
                pdf.setTransactionnumberresidentbuy(roundDoubleandFormat(setTransactionnumberresidentbuy, 0) + "");
                pdf.setTransactionnumbernonresidentbuy(roundDoubleandFormat(setTransactionnumbernonresidentbuy, 0) + "");
                pdf.setTransactionnumberresidentsell(roundDoubleandFormat(setTransactionnumberresidentsell, 0) + "");
                pdf.setTransactionnumbernonresidentsell(roundDoubleandFormat(setTransactionnumbernonresidentsell, 0) + "");
                pdf.setInternetbookingamountyes(roundDoubleandFormat(setInternetbookingamountyes, 2));
                pdf.setInternetbookingnumberyes((roundDoubleandFormat(setInternetbookingnumberyes, 0) + ""));
                pdf.setInternetbookingamountno(roundDoubleandFormat(setInternetbookingamountno, 2));
                pdf.setInternetbookingnumberno(roundDoubleandFormat(setInternetbookingnumberno, 0) + "");
                pdf.setPosbuyamount(roundDoubleandFormat(setPosbuyamount, 2));
                pdf.setPosbuynumber(roundDoubleandFormat(setPosbuynumber, 0) + "");
                pdf.setPossellamount(roundDoubleandFormat(setPossellamount, 2));
                pdf.setPossellnumber(roundDoubleandFormat(setPossellnumber, 0) + "");
                
                pdf.setBankbuyamount("0.00");
                pdf.setBankbuynumber("0");
                pdf.setBanksellamount(roundDoubleandFormat(setBanksellamount, 2));
                pdf.setBanksellnumber(roundDoubleandFormat(setBanksellnumber, 0) + "");
                
                return pdf;
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return null;
    }

    /**
     *
     * @param filiale
     * @param datad1
     * @param datad2
     * @param list_nc_cat
     * @return
     */
    public ArrayList<NoChangeCategoryTransactionList_value> list_NoChangeCategoryTransactionList_value(String filiale, String datad1, String datad2, String list_nc_cat) {
        ArrayList<NoChangeCategoryTransactionList_value> out = new ArrayList<>();
        try {
            
            String sql = "SELECT * FROM nc_transaction WHERE filiale = '" + filiale + "' ";
            
            Iterable<String> ite = onPattern(";").split(list_nc_cat);
            Iterator it = ite.iterator();
            String nccatwhere = "";
            while (it.hasNext()) {
                String nccat = it.next().toString().trim();
                if (!nccat.equals("") && !nccat.equals("...")) {
                    nccatwhere = nccatwhere + "gruppo_nc ='" + nccat + "' OR ";
                }
            }
            if (nccatwhere.length() > 3) {
                sql = sql + " AND (" + nccatwhere.substring(0, nccatwhere.length() - 3).trim() + ")";
            }
            if (datad1 != null) {
                sql = sql + "AND data >= '" + datad1 + " 00:00:00' ";
            }
            if (datad2 != null) {
                sql = sql + "AND data <= '" + datad2 + " 23:59:59' ";
            }
            sql = sql + " ORDER BY gruppo_nc,data";
            
            ResultSet rs = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql);
            ArrayList<NC_category> nc_cat = query_nc_category_filial(filiale, null);
            ArrayList<NC_causal> nc_caus = query_nc_causal_filial(filiale, null);

//            it = ite.iterator();
//            while (it.hasNext()) {
//                String nccat = it.next().toString().trim();
//                if (!nccat.equals("") && !nccat.equals("...")) {
            while (rs.next()) {
                NoChangeCategoryTransactionList_value nctl = new NoChangeCategoryTransactionList_value();
                nctl.setTill(rs.getString("till"));
                nctl.setDateTime(formatStringtoStringDate(rs.getString("data"), patternsqldate, patternnormdate));
                NC_category nc1 = getNC_category(nc_cat, rs.getString("gruppo_nc"));
                NC_causal nc2 = getNC_causal(nc_caus, rs.getString("causale_nc"), rs.getString("gruppo_nc"));
                if (nc1 != null) {
                    nctl.setCategoryTrans(nc1.getGruppo_nc() + " " + nc1.getDe_gruppo_nc());
                } else {
                    nctl.setCategoryTrans("NOT FOUND");
                }
                if (nc2 != null) {
                    nctl.setKindTrans(nc2.getCausale_nc() + " " + nc2.getDe_causale_nc());
                } else {
                    nctl.setKindTrans("NOT FOUND");
                }
                
                nctl.setNote(rs.getString("note"));
                
                switch (rs.getString("fg_tipo_transazione_nc")) {
                    case "1":
                        nctl.setQuantity("1");
                        break;
                    case "3":
                        nctl.setQuantity(formatMysqltoDisplay(roundDoubleandFormat(fd(rs.getString("ricevuta")), 0)));
                        break;
                    default:
                        nctl.setQuantity(formatMysqltoDisplay(roundDoubleandFormat(fd(rs.getString("quantita")), 0)));
                        break;
                }
                
                if (rs.getString("fg_tipo_transazione_nc").equals("3")) {
                    if (rs.getString("fg_dogana").equals("00")) {
                        nctl.setDetails("Customs");
                    } else if (rs.getString("fg_dogana").equals("01")) {
                        nctl.setDetails("No Customs");
                    }
                }
                
                nctl.setTotal(formatMysqltoDisplay(rs.getString("total")));
                nctl.setUser(rs.getString("user"));
                nctl.setInout(rs.getString("fg_inout"));
                nctl.setAnnullato(rs.getString("del_fg"));
                nctl.setDetails("");
                
                nctl.setFee("");
                
                if (rs.getString("fg_tipo_transazione_nc").equals("1")) {
                    nctl.setFee(formatMysqltoDisplay(rs.getString("commissione")));
                } else if (rs.getString("fg_tipo_transazione_nc").equals("21")) {
                    String comm;
                    if (fd(rs.getString("commissione")) > 0) {
                        comm = rs.getString("commissione");
                    } else {
                        comm = rs.getString("ti_ticket_fee");
                    }
                    if (nctl.getTotal().contains("-")) {
                        nctl.setFee("-" + formatMysqltoDisplay(comm));
                    } else {
                        nctl.setFee(formatMysqltoDisplay(comm));
                    }
                }
                
                out.add(nctl);
            }
            
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @param type
     * @param data
     * @param filiale
     * @param minmax
     * @return
     */
    public ArrayList<Till> list_till_daily_report(String type, String data, String filiale, String minmax) {
        ArrayList<Till> out = new ArrayList<>();
        ArrayList<Till> all = list_ALLtill();
        try {
            String sql = "SELECT f.filiale,f.cod,f.data,f.id,f.user,f.fg_tipo,f.till FROM "
                    + "(SELECT till," + minmax + "(data) AS maxd FROM oc_lista WHERE data like '" + data + "%' GROUP BY till) "
                    + "AS x INNER JOIN oc_lista AS f ON f.till = x.till"
                    + " AND f.data = x.maxd AND f.filiale = '" + filiale + "' ";
            if (type != null) {
                sql = "SELECT f.filiale,f.cod,f.data,f.id,f.user,f.fg_tipo,f.till FROM "
                        + "(SELECT till," + minmax + "(data) AS maxd FROM oc_lista WHERE data like '" + data + "%' AND fg_tipo = '" + type + "' GROUP BY till) "
                        + "AS x INNER JOIN oc_lista AS f ON f.till = x.till"
                        + " AND f.data = x.maxd AND f.filiale = '" + filiale + "' AND f.fg_tipo = '" + type + "'";
            }
            if (data != null && !data.equals("")) {
                sql = sql + " AND f.data like '" + data + "%'";
            }
            sql = sql + " ORDER BY f.till";
            ResultSet rs = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql);
            
            while (rs.next()) {
                Till t = new Till(rs.getString(1), rs.getString(2), rs.getString(3),
                        format("%015d", new Object[]{rs.getInt(4)}), rs.getString(5), rs.getString(6), rs.getString(7),
                        formatDescTill(all, rs.getString(7)), isSafeTill(all, rs.getString(7)));
                out.add(t);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @param roc
     * @return
     */
    public boolean update_real_oc_pos(Real_oc_pos roc) {
        try {
            String dtoper = getNow();
            String dt_val = formatStringtoStringDate(dtoper, patternsqldate, patternnormdate);
            String sql = "SELECT data FROM real_oc_pos WHERE filiale = ? AND cod_oc = ? AND carta_credito = ? AND kind = ? AND valuta = ?";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, roc.getFiliale());
            ps.setString(2, roc.getCod_oc());
            ps.setString(3, roc.getCarta_credito());
            ps.setString(4, roc.getKind());
            ps.setString(5, roc.getValuta());
            if (ps.executeQuery().next()) {
                String del3 = "DELETE FROM real_oc_pos_temp WHERE filiale = ? AND cod_oc = ?";
                PreparedStatement ps03 = this.c.prepareStatement(del3, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
                ps03.setString(1, roc.getFiliale());
                ps03.setString(2, roc.getCod_oc());
                ps03.execute();
                
                insert_aggiornamenti_mod(new Aggiornamenti_mod(
                        generaId(50), "000", dt_val, "0",
                        "PS", ps03.toString(), "service", dtoper));
                
                String ins = "INSERT INTO real_oc_pos_temp (SELECT * FROM real_oc_pos WHERE filiale = ? AND cod_oc = ?)";
                PreparedStatement ps1 = this.c.prepareStatement(ins, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
                ps1.setString(1, roc.getFiliale());
                ps1.setString(2, roc.getCod_oc());
                ps1.execute();
                
                insert_aggiornamenti_mod(new Aggiornamenti_mod(
                        generaId(50), "000", dt_val, "0",
                        "PS", ps1.toString(), "service", dtoper));
                
                String upd = "UPDATE real_oc_pos SET ip_quantity = ?, ip_value = ?, data = ? "
                        + "WHERE filiale = ? AND cod_oc = ? AND carta_credito = ? AND kind = ? AND valuta = ?";
                PreparedStatement ps2 = this.c.prepareStatement(upd, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
                ps2.setString(1, roc.getIp_quantity());
                ps2.setString(2, roc.getIp_value());
                ps2.setString(3, roc.getData());
                ps2.setString(4, roc.getFiliale());
                ps2.setString(5, roc.getCod_oc());
                ps2.setString(6, roc.getCarta_credito());
                ps2.setString(7, roc.getKind());
                ps2.setString(8, roc.getValuta());
                int x = ps2.executeUpdate();
                if (x > 0) {
                    insert_aggiornamenti_mod(new Aggiornamenti_mod(
                            generaId(50), "000", dt_val, "0",
                            "PS", ps2.toString(), "service", dtoper));
                }
                return x > 0;
            } else {
                String ins = "INSERT INTO real_oc_pos VALUES (?,?,?,?,?,?,?,?)";
                PreparedStatement ps2 = this.c.prepareStatement(ins, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
                ps2.setString(1, roc.getFiliale());
                ps2.setString(2, roc.getCod_oc());
                ps2.setString(3, roc.getValuta());
                ps2.setString(4, roc.getKind());
                ps2.setString(5, roc.getCarta_credito());
                ps2.setString(6, roc.getIp_quantity());
                ps2.setString(7, roc.getIp_value());
                ps2.setString(8, roc.getData());
                ps2.execute();
                insert_aggiornamenti_mod(new Aggiornamenti_mod(
                        generaId(50), "000", dt_val, "0",
                        "PS", ps2.toString(), "service", dtoper));
                return true;
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return false;
    }

    /**
     *
     * @param et
     * @return
     */
    public ArrayList<ToBankingSheet_value> list_POSBASheet_value(ET_change et) {
        ArrayList<ToBankingSheet_value> out = new ArrayList<>();
        ArrayList<ET_change> etc = get_ET_change_value(et.getCod());
        ArrayList<String> listvalue = new ArrayList<>();
        for (int i = 0; i < etc.size(); i++) {
            listvalue.add(etc.get(i).getValuta());
        }
        removeDuplicatesAL(listvalue);
        for (int j = 0; j < listvalue.size(); j++) {
            String va  = listvalue.get(j);
            double am_04 = 0.0;
            double am_06 = 0.0;
            double am_07 = 0.0;
            double am_08 = 0.0;
            double am_total = 0.0;
            
            ToBankingSheet_value bsi1 = new ToBankingSheet_value();
            for (int i = 0; i < etc.size(); i++) {
                ET_change val = etc.get(i);
                if (val.getValuta().equalsIgnoreCase(va)) {
                    switch (val.getSupporto()) {
                        case "04":
                            am_04 = am_04 + fd(val.getIp_quantity());
                            break;
                        case "06":
                            am_06 = am_06 + fd(val.getIp_quantity());
                            break;
                        case "07":
                            am_07 = am_07 + fd(val.getIp_quantity());
                            break;
                        case "08":
                            am_08 = am_08 + fd(val.getIp_quantity());
                            break;
                        default:
                            break;
                    }
                    am_total = am_total + fd(val.getIp_total());
                }
            }
            
            bsi1.setCurrency(va);
            ArrayList<String> data = new ArrayList<>();
            data.add(va);
            data.add(roundDoubleandFormat(am_04, 2));
            data.add(roundDoubleandFormat(am_06, 2));
            data.add(roundDoubleandFormat(am_07, 2));
            data.add(roundDoubleandFormat(am_08, 2));
            data.add(roundDoubleandFormat(am_total, 2));
            bsi1.setDati_string(data);
            out.add(bsi1);
        }
        return out;
    }

    /**
     *
     * @param et
     * @return
     */
    public ArrayList<ToBankingSheet_value> list_ToBankingSheet_value(ET_change et) {
        ArrayList<ToBankingSheet_value> out = new ArrayList<>();
        
        ArrayList<ET_change> etc = get_ET_change_value(et.getCod());
        ArrayList<String> listvalue = new ArrayList<>();
        for (int i = 0; i < etc.size(); i++) {
            listvalue.add(etc.get(i).getValuta());
        }
        removeDuplicatesAL(listvalue);
        
        for (int j = 0; j < listvalue.size(); j++) {
            
            String va  = listvalue.get(j);
            double am_notes = 0.0;
            double am_notesrate = 0.0;
            double am_etc = 0.0;
            double am_etcrate = 0.0;
            double am_total = 0.0;
            double am_spread = 0.0;
            
            for (int i = 0; i < etc.size(); i++) {
                ET_change val = etc.get(i);
                if (val.getValuta().equalsIgnoreCase(va)) {
                    if (val.getSupporto().equals("01")) {
                        am_notes = am_notes + fd(val.getIp_quantity());
                        am_notesrate = am_notesrate + fd(val.getIp_rate());
                    } else {
                        am_etc = am_etc + fd(val.getIp_quantity());
                        am_etcrate = am_etcrate + fd(val.getIp_rate());
                    }
                    am_spread = am_spread + fd(val.getIp_spread());
                    am_total = am_total + fd(val.getIp_total());
                }
            }
            
            double am_percent = (am_spread / am_total) * 100;
            ToBankingSheet_value bsi1 = new ToBankingSheet_value();
            bsi1.setCurrency(va);
            ArrayList<String> data = new ArrayList<>();
            data.add(va);
            data.add(roundDoubleandFormat(am_notes, 2));
            data.add(roundDoubleandFormat(am_notesrate, 8));
            data.add(roundDoubleandFormat(am_etc, 2));
            data.add(roundDoubleandFormat(am_etcrate, 8));
            data.add(roundDoubleandFormat(am_total, 2));
            data.add(roundDoubleandFormat(am_spread, 2));
            data.add(roundDoubleandFormat(am_percent, 2));
            bsi1.setDati_string(data);
            out.add(bsi1);
            
        }
        
        return out;
    }

    /**
     *
     * @param filiale
     * @param datad1
     * @param datad2
     * @param list_nc_cat
     * @param d3
     * @param d4
     * @return
     */
    public ArrayList<StockReport_value> list_StockReport_value(String[] filiale, String datad1, String datad2, String list_nc_cat, String d3, String d4) {
        ArrayList<StockReport_value> out = new ArrayList<>();
        try {
            
            ArrayList<String> listNCcat = parseString(list_nc_cat, ";");
            
            String sql = "SELECT f.filiale,f.cod,f.data,f.id,f.user,f.fg_tipo,f.till FROM (SELECT till,"
                    + " MAX(data) AS maxd FROM oc_lista WHERE data <= '" + datad1 + " 00:00:00' AND filiale = '" + filiale[0] + "' GROUP BY till) AS x INNER JOIN oc_lista AS f ON f.till = x.till"
                    + " AND f.data = x.maxd AND f.filiale = '" + filiale[0] + "' AND f.data <= '" + datad1 + " 00:00:00'";
            ResultSet rs = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql);
            ArrayList<String> listamappepresenti = new ArrayList<>();
            ArrayList<String[]> listamappepresenti_valori = new ArrayList<>();
            while (rs.next()) {
                String codopen = rs.getString("cod");
                ArrayList<String[]> list_oc_nochange = list_oc_nochange(codopen);
                
                for (int i = 0; i < list_oc_nochange.size(); i++) {
                    String[] val = list_oc_nochange.get(i);
                    listamappepresenti.add(val[1]);
                    String[] val2 = {val[1], val[2]};
                    listamappepresenti_valori.add(val2);
                }
            }
            removeDuplicatesAL(listamappepresenti);
            
            String sql3 = "SELECT * FROM oc_lista WHERE errors = 'Y' AND filiale = '" + filiale[0] + "' AND cod in (SELECT cod from oc_errors WHERE tipo='NC') ";
            
            if (datad1 != null) {
                sql3 = sql3 + "AND data >= '" + datad1 + " 00:00:00' ";
            }
            if (datad2 != null) {
                sql3 = sql3 + "AND data <= '" + datad2 + " 23:59:59' ";
            }
            
            ResultSet rs3 = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql3);

            // external
            String sql2 = "SELECT * FROM et_change where cod in (select cod from et_nochange_valori) AND filiale='" + filiale[0] + "' ";
            
            if (datad1 != null) {
                sql2 = sql2 + "AND dt_it >= '" + datad1 + " 00:00:00' ";
            }
            if (datad2 != null) {
                sql2 = sql2 + "AND dt_it <= '" + datad2 + " 23:59:59' ";
            }
            
            ResultSet rs22 = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql2);

            //TRANSAZIONI NO CHANGE
            String sql1 = "SELECT prezzo,data,gruppo_nc,causale_nc,till,data,id,note,fg_tipo_transazione_nc,ricevuta,quantita,total,user,fg_inout,del_fg FROM nc_transaction where filiale = '" + filiale[0] + "' ";
            
            if (datad1 != null) {
                sql1 = sql1 + "AND data >= '" + datad1 + " 00:00:00' ";
            }
            if (datad2 != null) {
                sql1 = sql1 + "AND data <= '" + datad2 + " 23:59:59' ";
            }
            sql1 = sql1 + " ORDER BY data";
            
            ArrayList<NC_category> nc_cat = query_nc_category_filial(filiale[0], null);
            ArrayList<NC_causal> nc_caus = query_nc_causal_filial(filiale[0], null);
            ResultSet rs2 = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql1);
            for (int i = 0; i < listNCcat.size(); i++) {
                
                String cat = listNCcat.get(i);
                double initvalue = 0.00;
                if (listamappepresenti.contains(cat)) {
                    for (int j = 0; j < listamappepresenti_valori.size(); j++) {
                        String[] val2 = listamappepresenti_valori.get(j);
                        if (val2[0].equals(cat)) {
                            initvalue = initvalue + fd(val2[1]);
                        }
                    }
                }
                StockReport_value nctl = new StockReport_value();
                nctl.setId_filiale(filiale[0]);
                nctl.setDe_filiale(filiale[1]);
                nctl.setDataDa(d3);
                nctl.setDataA(d4);
                nctl.setInitialStock(formatMysqltoDisplay(initvalue + ""));
                NC_category nc1 = getNC_category(nc_cat, cat);
                
                if (nc1 != null) {
                    nctl.setCategoryTrans(cat + " " + formatALNC_category(cat, nc_cat));
                } else {
                    nctl.setCategoryTrans("NOT FOUND");
                }
                ArrayList<StockReport_value> dati = new ArrayList<>();
                
                if (rs2.next()) {
                    rs2.beforeFirst();
                    while (rs2.next()) {
                        if (rs2.getString("gruppo_nc").equals(cat)) {
                            StockReport_value val = new StockReport_value();
                            val.setTill(rs2.getString("till"));
                            val.setDateTime(formatStringtoStringDate(rs2.getString("data"), patternsqldate, patternnormdate));
                            val.setCategoryTrans(nctl.getCategoryTrans());
                            NC_causal nc2 = getNC_causal(nc_caus, rs2.getString("causale_nc"), rs2.getString("gruppo_nc"));
                            if (nc2 != null) {
                                val.setKindTrans(nc2.getCausale_nc() + " " + nc2.getDe_causale_nc());
                            } else {
                                val.setKindTrans("NOT FOUND");
                            }
                            
                            if (rs2.getString("fg_inout").equals("1") || rs2.getString("fg_inout").equals("3")) {
                                val.setQuantity("-" + formatMysqltoDisplay(rs2.getString("quantita")));
                            } else {
                                val.setQuantity(formatMysqltoDisplay(rs2.getString("quantita")));
                            }
                            
                            val.setPrice(formatMysqltoDisplay(rs2.getString("prezzo")));
                            val.setTotal(formatMysqltoDisplay(rs2.getString("total")));
                            val.setUser(rs2.getString("user"));
                            val.setInout(rs2.getString("fg_inout"));
                            val.setAnnullato(rs2.getString("del_fg"));
                            dati.add(val);
                        }
                    }
                }
                rs2.beforeFirst();
                
                if (rs22.next()) {
                    rs22.beforeFirst();
                    while (rs22.next()) {
                        ArrayList<ET_change> va  = get_ET_nochange_value(rs22.getString("cod"));
                        for (int g = 0; g < va.size(); g++) {
                            ET_change value1 = va.get(g);
                            if (value1.getNc_causal().equals(cat)) {
                                if (nc1 != null) {
                                    StockReport_value val = new StockReport_value();
                                    val.setTill(rs22.getString("till_from"));
                                    val.setDateTime(formatStringtoStringDate(rs22.getString("dt_it"), patternsqldate, patternnormdate));
                                    val.setCategoryTrans(nctl.getCategoryTrans());
                                    val.setKindTrans("EXT. TRANSFER " + value1.format_tofrom_brba(rs22.getString("fg_tofrom"), rs22.getString("fg_brba")) + " " + rs22.getString("cod_dest"));
                                    
                                    if (rs22.getString("fg_tofrom").equals("T")) {
                                        val.setQuantity("-" + formatMysqltoDisplay(value1.getIp_quantity()));
                                    } else {
                                        val.setQuantity(formatMysqltoDisplay(value1.getIp_quantity()));
                                    }
                                    
                                    val.setPrice(formatMysqltoDisplay(nc1.getIp_prezzo_nc()));
                                    
                                    String tot1 = formatMysqltoDisplay(roundDoubleandFormat((fd(nc1.getIp_prezzo_nc()) * fd(value1.getIp_quantity())), 2));
                                    if (rs22.getString("fg_tofrom").equals("T")) {
                                        val.setTotal("-" + tot1);
                                    } else {
                                        val.setTotal(tot1);
                                    }
                                    val.setUser(rs22.getString("user"));
                                    if (rs22.getString("fg_tofrom").equals("T")) {
                                        val.setInout("1");
                                    } else {
                                        val.setInout("2");
                                    }
                                    
                                    val.setAnnullato(rs22.getString("fg_annullato"));
                                    dati.add(val);
                                }
                            }
                        }
                    }
                    
                }
                rs22.beforeFirst();
                
                if (rs3.next()) {
                    rs3.beforeFirst();
                    while (rs3.next()) {
                        
                        ArrayList<String[]> list_oc_err = list_oc_errors(rs3.getString("cod"));
                        for (int l = 0; l < list_oc_err.size(); l++) {
                            if (list_oc_err.get(l)[4].equals(cat)) {
                                if (nc1 != null) {
                                    
                                    StockReport_value val = new StockReport_value();
                                    val.setTill(rs3.getString("till"));
                                    val.setDateTime(formatStringtoStringDate(rs3.getString("data"), patternsqldate, patternnormdate));
                                    val.setCategoryTrans(nctl.getCategoryTrans());
                                    val.setKindTrans(formatType_r(rs3.getString("fg_tipo")) + " ERROR");
                                    
                                    String qv = (list_oc_err.get(l)[7]);
                                    
                                    if (fd(list_oc_err.get(l)[10]) < fd(list_oc_err.get(l)[12])) {
                                        qv = "-" + qv;
                                    }
                                    val.setQuantity(formatMysqltoDisplay(qv));
                                    
                                    val.setPrice(formatMysqltoDisplay(nc1.getIp_prezzo_nc()));
                                    String tot1 = formatMysqltoDisplay(roundDoubleandFormat((fd(nc1.getIp_prezzo_nc()) * fd(qv)), 2));
                                    val.setTotal(tot1);
                                    val.setUser(rs3.getString("user"));
                                    if (qv.contains("-")) {
                                        val.setInout("1");
                                    } else {
                                        val.setInout("2");
                                    }
                                    
                                    val.setAnnullato("0");
                                    dati.add(val);
                                }
                            }
                        }
                    }
                }
                rs3.beforeFirst();
                dati = (ArrayList<StockReport_value>) dati.stream().sorted().collect(toList());
                nctl.setDati(dati);
                out.add(nctl);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @param filiale
     * @param datad1
     * @param tipo
     * @return
     */
    public ArrayList<StockInquiry_value> list_StockInquiry_value(String[] filiale, String datad1, String tipo) {
        
        ArrayList<StockInquiry_value> out = new ArrayList<>();
        try {
            if (datad1 == null) {
                datad1 = new DateTime().toString(patternsql_f);
            }
            
            ArrayList<String[]> va  = new ArrayList<>();
            ArrayList<String[]> va_dati = new ArrayList<>();
            
            String sql = "SELECT f.cod,f.data,f.id,f.user,f.fg_tipo,f.till "
                    + "FROM (SELECT till, MAX(data) AS maxd FROM oc_lista WHERE data<'" + datad1 + "' AND filiale='" + filiale[0] + "' GROUP BY till) "
                    + "AS x INNER JOIN oc_lista AS f ON f.till = x.till AND f.data = x.maxd "
                    + "AND f.filiale = '" + filiale[0] + "' AND f.data<'" + datad1 + "' ORDER BY f.till";
            ResultSet rs = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql);
            while (rs.next()) {
                String sql2 = "SELECT * FROM stock_report where filiale='" + filiale[0] + "' "
                        + "AND data < '" + datad1 + "' AND tipo='" + tipo + "' "
                        + "AND (codiceopenclose = '" + rs.getString("f.cod") + "' "
                        + "OR codtr = '" + rs.getString("f.cod") + "'"
                        + ") "
                        + "AND till='" + rs.getString("f.till") + "' ORDER BY cod_value,kind";
                ResultSet rs2 = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql2);
                while (rs2.next()) {
                    String[] va_dara = {rs2.getString("cod_value"), rs2.getString("till")};
                    va.add(va_dara);
                    String[] val = {rs2.getString("cod_value"), rs2.getString("till"),
                        rs2.getString("kind"), rs2.getString("total")};
                    va_dati.add(val);
                    
                }
            }
            
            removeDuplicatesALAr(va);
            for (int i = 0; i < va.size(); i++) {
                String[] da = va.get(i);
                ArrayList<String> mydata = new ArrayList<>();
                StockInquiry_value pdf = new StockInquiry_value();
                pdf.setId_filiale(filiale[0]);
                pdf.setDe_filiale(filiale[1]);
                pdf.setCurrency(da[0]);
                pdf.setTill(da[1]);
                
                double my01 = 0.00;
                double my02 = 0.00;
                double my03 = 0.00;
                
                for (int k = 0; k < va_dati.size(); k++) {
                    String[] da1 = va_dati.get(k);
                    if (da1[0].equals(da[0]) && da1[1].equals(da[1])) {
                        switch (da1[2]) {
                            case "01":
                                my01 = my01 + fd(da1[3]);
                                break;
                            case "02":
                                my02 = my02 + fd(da1[3]);
                                break;
                            case "03":
                                my03 = my03 + fd(da1[3]);
                                break;
                            default:
                                break;
                        }
                    }
                }
                mydata.add(roundDoubleandFormat(my01, 2));
                mydata.add(roundDoubleandFormat(my02, 2));
                mydata.add(roundDoubleandFormat(my03, 2));
                pdf.setDati_string(mydata);
                
                if (my01 > 0 || my02 > 0 || my03 > 0) {
                    out.add(pdf);
                }
            }
            
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        
        if (out.size() > 0) {
            out = (ArrayList<StockInquiry_value>) out.stream().sorted().collect(toList());
        }
        
        return out;
    }

    /**
     *
     * @param filiale
     * @param datad1
     * @param listNCcat
     * @param list_allcat
     * @return
     */
    public ArrayList<TotalStockReport_value> list_TotalStockReport_value_smart(String[] filiale, String datad1, ArrayList<String> listNCcat,
            ArrayList<NC_category> list_allcat) {
        ArrayList<TotalStockReport_value> out = new ArrayList<>();
        try {
            if (datad1 == null) {
                datad1 = new DateTime().toString(patternsql_f);
            }
            ArrayList<Till> list_Till = list_ALLtill(filiale[0]);
            String sql = "SELECT f.cod,f.data,f.id,f.user,f.fg_tipo,f.till "
                    + "FROM (SELECT till, MAX(data) AS maxd FROM oc_lista WHERE data<'" + datad1 + ":59' AND filiale = '" + filiale[0] + "' GROUP BY till) "
                    + "AS x INNER JOIN oc_lista AS f ON f.till = x.till AND f.data = x.maxd AND f.filiale = '" + filiale[0] + "' AND f.data<'" + datad1 + ":59'";
            ResultSet rs = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql);
            String mindata = datad1 + ":59";
            List<TotalStockReport_Res_fase1> rs_1 = new ArrayList<>();
            while (rs.next()) {
                mindata = getMinTimestamp(mindata, rs.getString(2));
                rs_1.add(new TotalStockReport_Res_fase1(rs.getString(1), rs.getString(2), rs.getString(3), rs.getString(4), rs.getString(5), rs.getString(6)));
            }
            
            String sql3 = "SELECT quantity,cod_value,codiceopenclose,codtr,till FROM stock_report "
                    + "where filiale='" + filiale[0] + "' AND data>='" + mindata + "' AND tipo='NC' ";
            
            sql3 += " AND data <= '" + datad1 + ":59'"; //NUOVA CONDIZIONE 11/11

            if (listNCcat.size() > 0) {
                String filwhere = "";
                for (int i = 0; i < listNCcat.size(); i++) {
                    filwhere = filwhere + "cod_value = '" + listNCcat.get(i) + "' OR ";
                }
                if (filwhere.length() > 3) {
                    sql3 = sql3 + " AND (" + filwhere.substring(0, filwhere.length() - 3).trim() + ") ";
                }
            }
            ResultSet rs3 = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql3);
            List<TotalStockReport_Res_fase2> rs_3 = new ArrayList<>();
            while (rs3.next()) {
                rs_3.add(new TotalStockReport_Res_fase2(rs3.getString(1), rs3.getString(2), rs3.getString(3), rs3.getString(4), rs3.getString(5)));
            }
            
            listNCcat.forEach(nccat -> {
                
                ArrayList<TotalStockReport_value> par = new ArrayList<>();
                NC_category nc1 = getNC_category(list_allcat, nccat);
                AtomicDouble t1 = new AtomicDouble(0.0);
                
                rs_1.forEach(result1 -> {
                    TotalStockReport_value tsr = new TotalStockReport_value();
                    tsr.setTill(result1.getF_till() + " " + formatAL_Till(result1.getF_till(), list_Till));
                    if (nc1 != null) {
                        tsr.setCategoryTrans(nc1.getGruppo_nc() + " " + nc1.getDe_gruppo_nc());
                    } else {
                        tsr.setCategoryTrans("NOT FOUND");
                    }
                    AtomicDouble qu = new AtomicDouble(0.0);
                    
                    String cod = result1.getF_cod();
                    String ti1 = result1.getF_till();
                    
                    List<TotalStockReport_Res_fase2> rs_3_concat = rs_3.stream()
                            .filter(result2
                                    -> result2.getCod_value().equalsIgnoreCase(nccat)
                            && (cod.equals(result2.getCodiceopenclose())
                            || cod.equals(result2.getCodtr()))
                            && ti1.equals(result2.getTill()))
                            .collect(toList());
                    
                    rs_3_concat.forEach(result2 -> {
                        qu.addAndGet(fd(result2.getQuantity()));
                    });
                    
                    t1.addAndGet(qu.get());
                    
                    tsr.setStock(formatMysqltoDisplay(roundDoubleandFormat(qu.get(), 0)));
                    par.add(tsr);
                    
                });
                
                if (t1.get() > 0) {
                    out.addAll(par);
                }
            });
            
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }
    
    private String getMinTimestamp(String data1, String data2) {
        try {
            if (data1.length() == 21) {
                data1 = substring(data1, 0, 19);
            }
            if (data2.length() == 21) {
                data2 = substring(data2, 0, 19);
            }
            DateTimeFormatter formatter = forPattern(patternsqldate);
            if (formatter.parseDateTime(data2).isBefore(formatter.parseDateTime(data1))) {
                return data2;
            }
        } catch (Exception ex) {
            
        }
        return data1;
    }

    /**
     *
     * @param filiale
     * @param datad1
     * @param listNCcat
     * @param list_allcat
     * @return
     */
    public ArrayList<TotalStockReport_value> list_TotalStockReport_value_new(String[] filiale, String datad1, ArrayList<String> listNCcat,
            ArrayList<NC_category> list_allcat) {
        ArrayList<TotalStockReport_value> out = new ArrayList<>();
        try {
            if (datad1 == null) {
                datad1 = new DateTime().toString(patternsql_f);
            }
            ArrayList<Till> list_Till = list_ALLtill(filiale[0]);
            
            String sql = "SELECT f.cod,f.data,f.id,f.user,f.fg_tipo,f.till "
                    + "FROM (SELECT till, MAX(data) AS maxd FROM oc_lista WHERE data<'" + datad1 + ":59' AND filiale = '" + filiale[0] + "' GROUP BY till) "
                    + "AS x INNER JOIN oc_lista AS f ON f.till = x.till AND f.data = x.maxd AND f.filiale = '" + filiale[0] + "' AND f.data<'" + datad1 + ":59'";
            
            String sql3 = "SELECT quantity,cod_value,codiceopenclose,codtr,till FROM stock_report "
                    + "where filiale='" + filiale[0] + "' AND data<'" + datad1 + ":59' AND tipo='NC' ";
            
            if (listNCcat.size() > 0) {
                String filwhere = "";
                for (int i = 0; i < listNCcat.size(); i++) {
                    filwhere = filwhere + "cod_value = '" + listNCcat.get(i) + "' OR ";
                }
                if (filwhere.length() > 3) {
                    sql3 = sql3 + " AND (" + filwhere.substring(0, filwhere.length() - 3).trim() + ") ";
                }
            }
            
            ResultSet rs = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql);
            ResultSet rs3 = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql3);
            
            List<TotalStockReport_Res_fase1> rs_1 = new ArrayList<>();
            while (rs.next()) {
                rs_1.add(new TotalStockReport_Res_fase1(rs.getString(1), rs.getString(2), rs.getString(3), rs.getString(4), rs.getString(5), rs.getString(6)));
            }
            
            List<TotalStockReport_Res_fase2> rs_3 = new ArrayList<>();
            
            while (rs3.next()) {
                rs_3.add(new TotalStockReport_Res_fase2(rs3.getString(1), rs3.getString(2), rs3.getString(3), rs3.getString(4), rs3.getString(5)));
            }
            
            listNCcat.forEach(nccat -> {
                
                ArrayList<TotalStockReport_value> par = new ArrayList<>();
                NC_category nc1 = getNC_category(list_allcat, nccat);
                AtomicDouble t1 = new AtomicDouble(0.0);
                
                rs_1.forEach(result1 -> {
                    TotalStockReport_value tsr = new TotalStockReport_value();
                    tsr.setTill(result1.getF_till() + " " + formatAL_Till(result1.getF_till(), list_Till));
                    if (nc1 != null) {
                        tsr.setCategoryTrans(nc1.getGruppo_nc() + " " + nc1.getDe_gruppo_nc());
                    } else {
                        tsr.setCategoryTrans("NOT FOUND");
                    }
                    AtomicDouble qu = new AtomicDouble(0.0);
                    
                    String cod = result1.getF_cod();
                    String ti1 = result1.getF_till();
                    
                    List<TotalStockReport_Res_fase2> rs_3_concat = rs_3.stream()
                            .filter(result2
                                    -> result2.getCod_value().equalsIgnoreCase(nccat)
                            && (cod.equals(result2.getCodiceopenclose())
                            || cod.equals(result2.getCodtr()))
                            && ti1.equals(result2.getTill())).collect(toList());
                    
                    rs_3_concat.forEach(result2 -> {
                        qu.addAndGet(fd(result2.getQuantity()));
                    });
                    
                    t1.addAndGet(qu.get());
                    
                    tsr.setStock(formatMysqltoDisplay(roundDoubleandFormat(qu.get(), 0)));
                    par.add(tsr);
                    
                });
                
                if (t1.get() > 0) {
                    out.addAll(par);
                }
                
            });
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @param filiale
     * @param datad1
     * @param listNCcat
     * @param list_allcat
     * @return
     */
    public ArrayList<TotalStockReport_value> list_TotalStockReport_value(String[] filiale, String datad1, ArrayList<String> listNCcat,
            ArrayList<NC_category> list_allcat) {
        ArrayList<TotalStockReport_value> out = new ArrayList<>();
        try {
            if (datad1 == null) {
                datad1 = new DateTime().toString(patternsql_f);
            }
            ArrayList<Till> list_Till = list_ALLtill(filiale[0]);
            
            String sql = "SELECT f.cod,f.data,f.id,f.user,f.fg_tipo,f.till "
                    + "FROM (SELECT till, MAX(data) AS maxd FROM oc_lista WHERE data<'" + datad1 + ":59' AND filiale = '" + filiale[0] + "' GROUP BY till) "
                    + "AS x INNER JOIN oc_lista AS f ON f.till = x.till AND f.data = x.maxd AND f.filiale = '" + filiale[0] + "' AND f.data<'" + datad1 + ":59' ORDER BY f.till";
            ResultSet rs = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql);
            
            for (int i = 0; i < listNCcat.size(); i++) {
                String nccat = listNCcat.get(i);
                NC_category nc1 = getNC_category(list_allcat, nccat);
                
                double t1 = 0.0;
                
                ArrayList<TotalStockReport_value> par = new ArrayList<>();
                while (rs.next()) {
                    String sql2 = "SELECT quantity FROM stock_report where filiale='" + filiale[0] + "' "
                            + "AND data<'" + datad1 + ":59' AND tipo='NC' AND cod_value='" + nccat + "' "
                            + "AND (codiceopenclose = '" + rs.getString("f.cod") + "' OR codtr ='" + rs.getString("f.cod") + "') AND till='" + rs.getString("f.till") + "' ORDER BY data DESC";
                    
                    TotalStockReport_value tsr = new TotalStockReport_value();
                    tsr.setTill(rs.getString("f.till") + " " + formatAL_Till(rs.getString("f.till"), list_Till));
                    if (nc1 != null) {
                        tsr.setCategoryTrans(nc1.getGruppo_nc() + " " + nc1.getDe_gruppo_nc());
                    } else {
                        tsr.setCategoryTrans("NOT FOUND");
                    }
                    ResultSet rs2 = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql2);
                    
                    double qu = 0.00;
                    while (rs2.next()) {
                        qu = qu + fd(rs2.getString("quantity"));
                    }
                    t1 += qu;
                    tsr.setStock(formatMysqltoDisplay(roundDoubleandFormat(qu, 0)));
//                    
//                    if (rs2.next()) {
//                        tsr.setStock(formatMysqltoDisplay(rs2.getString("quantity")));
//                    } else {
//                        tsr.setStock("0");
//                    }
                    par.add(tsr);
                }
                
                if (t1 > 0) {
                    out.addAll(par);
                }
                
                rs.beforeFirst();
            }
            
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @param filiale
     * @param datad1
     * @param tipo
     * @return
     */
    public ArrayList<BranchStockInquiry_value> list_BranchStockInquiry_value(String[] filiale, String datad1, String tipo) {
        ArrayList<BranchStockInquiry_value> out = new ArrayList<>();
        try {
            if (datad1 == null) {
                datad1 = new DateTime().toString(patternsql_f);
            }
            
            DateTimeFormatter sqldate = forPattern(patternsql_f);
            List<Currency> licur;
            Db_Master db1 = new Db_Master(true);
            if (db1.getC() != null) {
                licur = db1.get_BCE(sqldate.parseDateTime(substring(datad1, 0, 16)));
                db1.closeDB();
            } else {
                licur = get_BCE(sqldate.parseDateTime(substring(datad1, 0, 16)));
                if (licur == null) {
                    licur = list_figures_query_edit(filiale[0]);
                }
            }
            
            boolean dividi = get_national_office().getChangetype().equals("/");
            String loccur = get_local_currency()[0];
            String sql = "SELECT f.cod,f.data,f.id,f.user,f.fg_tipo,f.till "
                    + "FROM (SELECT till, MAX(data) AS maxd FROM oc_lista WHERE data<'" + datad1 + "'  AND filiale = '" + filiale[0] + "' GROUP BY till) "
                    + "AS x INNER JOIN oc_lista AS f ON f.till = x.till AND f.data = x.maxd AND f.filiale = '" + filiale[0] + "' AND f.data<'" + datad1 + "' ORDER BY f.till";
            ResultSet rs = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql);
            ArrayList<String> listval = new ArrayList<>();
            ArrayList<String[]> listdati = new ArrayList<>();
            while (rs.next()) {
                String sql2 = "SELECT * FROM stock_report where filiale='" + filiale[0] + "' "
                        + "AND data<'" + datad1 + "' AND tipo='" + tipo + "' "
                        + "AND (codiceopenclose = '" + rs.getString("f.cod") + "' OR codtr = '" + rs.getString("f.cod") + "') "
                        + "AND till='" + rs.getString("f.till") + "' ORDER BY cod_value";
                
                ResultSet rs2 = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql2);
                while (rs2.next()) {
                    String sp1 = rs2.getString("cod_value");
                    
                    if (sp1.equalsIgnoreCase(loccur)) {
                        listval.add(rs2.getString("cod_value"));
                        String[] dat = {
                            rs2.getString("cod_value"),
                            rs2.getString("kind"),
                            rs2.getString("total"),
                            "1.00000000",
                            rs2.getString("total")
                        };
                        listdati.add(dat);
                    } else if (licur.stream().filter(c1 -> c1.getCode().equals(sp1)).findAny().orElse(null) != null) {
                        
                        listval.add(rs2.getString("cod_value"));
                        
                        double rateattuale = fd(licur.stream().filter(c1 -> c1.getCode()
                                .equals(sp1)).findAny().get().getCambio_bce());
                        
                        double cv = getControvalore(fd(rs2.getString("total")), rateattuale, dividi);
                        String[] dat = {
                            rs2.getString("cod_value"),
                            rs2.getString("kind"),
                            rs2.getString("total"),
                            roundDoubleandFormat(rateattuale, 8),
                            roundDoubleandFormat(cv, 2)
                        };
                        listdati.add(dat);
                        
                    }
                    
                }
            }
            removeDuplicatesAL(listval);
            for (int i = 0; i < listval.size(); i++) {
                ArrayList<String> data = new ArrayList<>();
                BranchStockInquiry_value bsi1 = new BranchStockInquiry_value();
                String valuta = listval.get(i);
                
                bsi1.setCurrency(valuta);
                double v1 = 0.00;
                double v2 = 0.00;
                double v3 = 0.00;
                double v4 = 0.00;
                double v5 = 0.00;
                
                for (int j = 0; j < listdati.size(); j++) {
                    String[] va  = listdati.get(j);
                    if (valuta.equals(va[0])) {
                        switch (va[1]) {
                            case "01":
                                v1 = v1 + fd(va[2]);
                                break;
                            case "02":
                                v2 = v2 + fd(va[2]);
                                break;
                            case "03":
                                v3 = v3 + fd(va[2]);
                                break;
                            default:
                                break;
                        }
                        v4 = fd(va[3]);
                        v5 += fd(va[4]);
                    }
                }
                data.add(roundDoubleandFormat(v1, 2));
                data.add(roundDoubleandFormat(v2, 2));
                data.add(roundDoubleandFormat(v3, 2));
                data.add(roundDoubleandFormat(v4, 8));
                data.add(roundDoubleandFormat(v5, 2));
                bsi1.setDati_string(data);
                
                if (v1 > 0 || v2 > 0 || v3 > 0) {
                    out.add(bsi1);
                }
            }
            
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @param filiale
     * @param datestart
     * @param data
     * @return
     */
    public String getLastCod_officesp(String filiale, String datestart, String data) {
        try {
            String sql = "SELECT codice FROM office_sp WHERE filiale = '" + filiale + "'"
                    + " AND data <= '" + data + "' AND data like '"
                    + formatStringtoStringDate(datestart, patternnormdate_filter, patternsql) + "%' ORDER BY data DESC LIMIT 1";
            ResultSet rs = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql);
            if (rs.next()) {
                return rs.getString(1);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return null;
    }

    /**
     *
     * @param spres
     * @param filiale
     * @return
     */
    public ArrayList<OfficeStockPrice_value> list_OfficeStockPrice_value(String spres, String filiale) {
        ArrayList<OfficeStockPrice_value> out = new ArrayList<>();
        ArrayList<Currency> licur = list_figures_query_edit(filiale);
        ArrayList<Figures> lifg = list_figures(filiale);
//        String oper = get_national_office().getChangetype();
//        boolean dividi = oper.equals("/");
        try {
            String sql = "SELECT * FROM office_sp_valori WHERE cod = '" + spres + "' order by currency,kind";
            ResultSet rs = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql);
            while (rs.next()) {
                OfficeStockPrice_value osp01 = new OfficeStockPrice_value();
                osp01.setData(formatStringtoStringDate(rs.getString(7), patternsqldate, patternnormdate));
                osp01.setCurrency(rs.getString(2));
                osp01.setDecurrency(formatALCurrency(rs.getString(2), licur));
                osp01.setSupporto(rs.getString(3) + " " + Engine.get_figures(lifg, rs.getString(3)).getDe_supporto());
                osp01.setQta(rs.getString(4));
                osp01.setMedioacq(rs.getString(5));
                osp01.setControvalore(rs.getString(6));
                
                out.add(osp01);
            }
            
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @param filiale
     * @return
     */
    public ArrayList<StockPrice_value> list_StockPrice_value(String[] filiale) {
        ArrayList<StockPrice_value> out = new ArrayList<>();
        boolean dividi = get_national_office().getChangetype().equals("/");
        ArrayList<Currency> licur = list_figures_query_edit(filiale[0]);
        ArrayList<Figures> lifg = list_figures(filiale[0]);
        String loccur = get_local_currency()[0];
        DateTimeFormatter formatter = forPattern(patternsqldate);
        DateTime inizioanno = new DateTime().withDayOfYear(1).withMillisOfDay(0);
        DateTime today = new DateTime().withMillisOfDay(0);
        List<BCE> present = new ArrayList<>();
        
        try {
            
            String sql = "SELECT * FROM stock WHERE filiale = '" + filiale[0] + "' AND total <>'0.00' "
                    + "AND tipostock = 'CH' AND (kind ='01' OR kind = '02' OR kind = '03') "
                    + "AND codice NOT IN (SELECT codice FROM stock WHERE cod_value='" + loccur + "' AND kind ='01') "
                    + "ORDER BY cod_value,kind,date";
//            System.out.println("rc.so.db.Db_Master.list_StockPrice_value() " + sql);

            ResultSet rs = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql);
            
            String dateactual = getNowDT().toString(patternnormdate_filter);
            
            while (rs.next()) {
                StockPrice_value sp1 = new StockPrice_value();
                
                sp1.setDateactual(dateactual + " (Actual)");
                
                sp1.setCurrency(rs.getString("cod_value"));
                sp1.setDe_currency(formatALCurrency(rs.getString("cod_value"), licur));
                sp1.setSupportocod(rs.getString("kind"));
                sp1.setSupportodesc(Engine.get_figures(lifg, rs.getString("kind")).getDe_supporto());
                sp1.setBcanconote1(formatTypeTransaction_stockprice(rs.getString("tipo")));
                sp1.setSupportovalue(rs.getString("id_op"));
                sp1.setBanconote2(formatStringtoStringDate(rs.getString("date"), patternsqldate, patternnormdate));
                sp1.setQuantita((rs.getString("total")));
                sp1.setControvalore((rs.getString("controval")));
                sp1.setCambio(roundDoubleandFormat(fd(rs.getString("rate")), 8));

                //RICORDARSI DI FAR ENTRARE I FROM BANK con il BCE
                if (newpread) {
                    
                    if (licur.stream().filter(c1 -> c1.getCode().equals(sp1.getCurrency())).findAny().get() != null) {
                        
                        double rateattuale = fd(licur.stream().filter(c1
                                -> c1.getCode().equals(sp1.getCurrency())).findAny().get().getCambio_bce());
                        String valuta = rs.getString("cod_value");
                        String datarif = substring(rs.getString("date"), 0, 10);
                        DateTime dt = formatter.parseDateTime(substring(rs.getString("date"), 0, 19));
//                        if (sp1.getCurrency().equals("AUD")) {
//                            out.println(dt.withMillisOfDay(0) + " )" + today);
//                        }
                        boolean annoprecedente = dt.isBefore(inizioanno);
                        double oldrate = 1.00;
                        
                        if (!valuta.equals(loccur)) {
                            
                            if (annoprecedente) {
                                DateTime data_riferimento = inizioanno.minusDays(1);
                                oldrate = fd(Engine.get_BCE(data_riferimento, valuta));
                            } else {
                                
                                boolean checkET = rs.getString("tipo").equals("ET");
                                if (checkET) {
                                    checkET = is_ET_FROMBRANCH(rs.getString("idoperation"));
                                }
                                
                                if (checkET) {
                                    oldrate = fd(roundDoubleandFormat(fd(rs.getString("rate")), 8));
                                    sp1.setBcanconote1("Ext. Transfert BR");
                                } else {
//                                sp1.setBcanconote1(Engine.formatTypeTransaction_stockprice(rs.getString("tipo")));
                                    boolean ratefromlist = false;
                                    
                                    if (dt.withMillisOfDay(0).equals(today)) {
                                        oldrate = rateattuale;
                                        present.add(new BCE(datarif, valuta, rateattuale));
                                    } else {
                                        if (!present.isEmpty()) {
                                            ratefromlist = present.stream().filter(c1 -> c1.getData().equalsIgnoreCase(datarif) && c1.getValuta().equalsIgnoreCase(valuta)).findAny().orElse(null) != null;
                                        }
                                        
                                        if (ratefromlist) {
                                            oldrate = present.stream().filter(c1 -> c1.getData().equalsIgnoreCase(datarif) && c1.getValuta().equalsIgnoreCase(valuta)).findAny().get().getRif_bce();
                                        } else {
                                            //RIMUOVERE
//                                oldrate = fd(Engine.get_BCE(dt, valuta));
//                              System.out.println(valuta + " () " + dt + " () " + oldrate);
//                              INSERIRE
                                            oldrate = fd(get_BCE(dt, valuta));
                                            if (oldrate == 0) {
                                                oldrate = fd(Engine.get_BCE(dt, valuta));
                                            }
                                            if (oldrate == 0) {
                                                oldrate = fd(Engine.get_BCE_central(dt, valuta));
                                            }
                                            if (oldrate == 0) {
                                                oldrate = fd(rs.getString("rate"));
                                            }
                                            
                                            present.add(new BCE(datarif, valuta, oldrate));
                                            
                                        }
                                    }
                                    
                                }
                            }
                        }
                        
                        double oldcv = getControvalore(fd(rs.getString("total")), oldrate, dividi);
                        double actualcv = getControvalore(fd(rs.getString("total")), rateattuale, dividi);

//                        if (!rs.getString("tipo").equals("ET")) {
                        sp1.setCambio(roundDoubleandFormat(oldrate, 8));
                        sp1.setControvalore(roundDoubleandFormat(oldcv, 2));
                        sp1.setHistoricalBCE(roundDoubleandFormat(rateattuale, 8));
                        sp1.setDeltaEquivalent(roundDoubleandFormat(actualcv - oldcv, 2));
//                        } else {
//                            sp1.setHistoricalBCE(roundDoubleandFormat(fd(rs.getString("rate")), 8));
//                            sp1.setDeltaEquivalent("0.00");
//                        }
                    }
                }
                
                if (fd(rs.getString("total")) > 0) {
                    if (rs.getString("cod_value").equals(loccur) && rs.getString("kind").equals("01")) {
                        
                    } else {
                        out.add(sp1);
                    }
                }
            }
            
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }
    
    public boolean is_ET_FROMBRANCH(String cod) {
        try {
            String sql = "SELECT cod FROM et_change WHERE cod='" + cod + "' AND fg_tofrom = 'F' AND fg_brba = 'BR'";
            ResultSet rs = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql);
            return rs.next();
        } catch (Exception e) {
            e.printStackTrace();
        }
        return false;
        
    }

    /**
     *
     * @param branch
     * @param datad1
     * @param datareport
     * @param list_nc_categ
     * @return
     */
    public NoChangeBonus_value list_NoChangeBonus_value(ArrayList<String> branch, String datad1, String datareport, String list_nc_categ) {
        NoChangeBonus_value out = new NoChangeBonus_value();
//        out.setId_filiale(filiale[0]);
//        out.setDe_filiale(filiale[1]);
        out.setPeriodo(datareport);
        
        ArrayList<NC_category> nc_cat = query_nc_category_filial(branch.get(0), null);
        
        ArrayList<String> listNCcateg = parseString(list_nc_categ, ";");
        ArrayList<String> alcolonne = new ArrayList<>();
        alcolonne.add("User");
        for (int i = 0; i < listNCcateg.size(); i++) {
            NC_category nc1 = getNC_category(nc_cat, listNCcateg.get(i));
            if (nc1 != null) {
                alcolonne.add("N. Trans. " + nc1.getDe_gruppo_nc());
            } else {
                alcolonne.add("N. Trans. NOT FOUND");
            }
        }
        out.setAlcolonne(alcolonne);
        try {
            
            String sql = "SELECT data,gruppo_nc,causale_nc,till,data,id,note,fg_tipo_transazione_nc,ricevuta,quantita,total,user,fg_inout,del_fg FROM nc_transaction where del_fg='0' AND bonus = '1'  ";
            
            String filwhere = "";
            for (int i = 0; i < branch.size(); i++) {
                filwhere = filwhere + "filiale = '" + branch.get(i) + "' OR ";
            }
            
            if (filwhere.length() > 3) {
                sql = sql + " AND (" + filwhere.substring(0, filwhere.length() - 3).trim() + ") ";
            }
            
            Iterable<String> ite = onPattern(";").split(list_nc_categ);
            Iterator it = ite.iterator();
            String nccatwhere = "";
            while (it.hasNext()) {
                String nccat = it.next().toString().trim();
                if (!nccat.equals("") && !nccat.equals("...")) {
                    nccatwhere = nccatwhere + "gruppo_nc ='" + nccat + "' OR ";
                }
            }
            if (nccatwhere.length() > 3) {
                sql = sql + " AND (" + nccatwhere.substring(0, nccatwhere.length() - 3).trim() + ")";
            }
            
            if (datad1 != null) {
                sql = sql + "AND data like'" + datad1 + "%' ";
            }
            
            sql = sql + " ORDER BY user,data";
            
            ResultSet rs = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql);
            ArrayList<NoChangeBonus_value> dati = new ArrayList<>();
            
            ArrayList<String> lista_User = new ArrayList<>();
            
            while (rs.next()) {
                lista_User.add(rs.getString("user"));
            }
            removeDuplicatesAL(lista_User);
            for (int i = 0; i < lista_User.size(); i++) {
                String userval = lista_User.get(i);
                Users us = get_user(userval);
                NoChangeBonus_value ncb = new NoChangeBonus_value();
                ArrayList<String> datiu = new ArrayList<>();
                ncb.setUser(us.getCod() + " " + us.getDe_cognome() + " " + us.getDe_nome());
                for (int j = 0; j < listNCcateg.size(); j++) {
                    int quantity = 0;
                    rs.beforeFirst();
                    while (rs.next()) {
                        if (rs.getString("user").equals(userval) && rs.getString("gruppo_nc").equals(listNCcateg.get(j))) {
                            quantity++;
                        }
                    }
                    datiu.add(valueOf(quantity));
                }
                ncb.setDati_string(datiu);
                dati.add(ncb);
            }
            out.setDati(dati);
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        
        return out;
    }

    /**
     *
     * @param filiale
     * @param datad1
     * @param datad2
     * @return
     */
    public ArrayList<NoChangeInternalTransferList_value> list_InternalTransferList_valueNC(String filiale, String datad1, String datad2) {
        ArrayList<NoChangeInternalTransferList_value> out = new ArrayList<>();
        try {
            
            String sql = "SELECT * FROM it_change where filiale='" + filiale + "' ";
            if (datad1 != null) {
                sql = sql + "AND dt_it >= '" + datad1 + " 00:00:00' ";
            }
            if (datad2 != null) {
                sql = sql + "AND dt_it <= '" + datad2 + " 23:59:59' ";
            }
            sql = sql + " ORDER BY dt_it";
            
            ResultSet rs = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql);
            ArrayList<NC_category> nc_cat = query_nc_category_filial(filiale, null);
            while (rs.next()) {
                String sql2 = "SELECT * FROM it_nochange_valori where cod = '" + rs.getString("cod") + "'";
                ResultSet rs2 = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql2);
                while (rs2.next()) {
                    ArrayList<String> data = new ArrayList<>();
                    NoChangeInternalTransferList_value bsi1 = new NoChangeInternalTransferList_value();
                    data.add(rs.getString("till_from"));
                    data.add(rs.getString("till_to"));
                    data.add(rs.getString("id"));
                    data.add(formatStringtoStringDate(rs.getString("dt_it"), patternsqldate, patternnormdate));
                    NC_category nc1 = getNC_category(nc_cat, rs2.getString("causale_nc"));
                    data.add(nc1.getGruppo_nc() + " " + nc1.getDe_gruppo_nc());
                    data.add(formatMysqltoDisplay(rs2.getString("ip_quantity")));
                    data.add(rs.getString("user"));
                    data.add("-");
                    bsi1.setDati_string(data);
                    out.add(bsi1);
                }
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        
        return out;
    }

//    public boolean updateMacro(String cod, String descr){
//        
//        String upd = "UPDATE nc_macro";
//        
//    }
    /**
     *
     * @return
     */
    public ArrayList<String[]> list_ncmacro() {
        ArrayList<String[]> out = new ArrayList<>();
        try {
            String sql = "SELECT codice,descrizione FROM nc_macro where fg_annullato = ?";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, "0");
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                String[] o1 = {rs.getString(1), rs.getString(2)};
                out.add(o1);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @return
     */
    public ArrayList<String[]> list_department() {
        ArrayList<String[]> out = new ArrayList<>();
        try {
            String sql = "SELECT codice,descrizione FROM department ORDER BY codice";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                String[] o1 = {rs.getString(1), rs.getString(2)};
                out.add(o1);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @return
     */
    public ArrayList<String[]> list_department_NC() {
        ArrayList<String[]> out = new ArrayList<>();
        ArrayList<NC_category> nc1 = list_ALL_nc_category();
        try {
            String sql = "SELECT codice,gruppo_nc FROM department_nc ORDER BY codice,gruppo_nc";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                String[] o1 = {rs.getString(1), rs.getString(2), formatALNC_category(rs.getString(2), nc1)};
                out.add(o1);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @return
     */
    public ArrayList<String[]> list_bankAccount() {
        ArrayList<String[]> out = new ArrayList<>();
        try {
            String sql = "SELECT cod,de_bank,conto FROM bank where fg_annullato = ? AND bank_account = ?";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, "0");
            ps.setString(2, "Y");
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                String[] o1 = {rs.getString(1), rs.getString(2), rs.getString(3)};
                out.add(o1);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @param filiale
     * @param id
     * @return
     */
    public ArrayList<String[]> list_SB_waiting(String filiale, String id) {
        ArrayList<String[]> out = new ArrayList<>();
        try {
            String sql = "SELECT cod,id,filiale,total,cl_cod,tipocliente FROM ch_transaction WHERE tipotr = ? "
                    + "and data >= date_sub(curtime(),interval ? day) AND bb = ? AND id = ? AND filiale = ?  AND del_fg = ?";
            
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, "B");
            ps.setString(2, get_national_office().getScadenza_bb());
            ps.setString(3, "3");
            ps.setString(4, id);
            ps.setString(5, filiale);
            ps.setString(6, "0");
            
            ResultSet rs = ps.executeQuery();
            
            while (rs.next()) {
                String[] o1 = {rs.getString(1),
                    leftPad(rs.getString(2), 15, "0"),
                    leftPad(rs.getString(3), 3, "0"),
                    rs.getString(4), rs.getString(5), rs.getString(6)};
                out.add(o1);
            }
        } catch (SQLException | NumberFormatException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        
        return out;
    }

    /**
     *
     * @param filiale
     * @param id
     * @return
     */
    public ArrayList<String[]> list_BB_waiting(String filiale, String id) {
        ArrayList<String[]> out = new ArrayList<>();
        try {
            String sql = "SELECT cod,id,filiale,total,cl_cod,tipocliente FROM ch_transaction WHERE tipotr = ? "
                    + "and data >= date_sub(curtime(),interval ? day) AND bb = ? AND id = ? AND filiale = ? AND del_fg = ?";
            
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, "S");
            ps.setString(2, get_national_office().getScadenza_bb());
            ps.setString(3, "1");
            ps.setString(4, id);
            ps.setString(5, filiale);
            ps.setString(6, "0");
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                String[] o1 = {rs.getString(1),
                    leftPad(rs.getString(2), 15, "0"),
                    leftPad(rs.getString(3), 3, "0"),
                    rs.getString(4), rs.getString(5), rs.getString(6)};
                out.add(o1);
            }
        } catch (SQLException | NumberFormatException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        
        return out;
    }

    /**
     *
     * @return
     */
    public ArrayList<String[]> list_BB_waiting() {
        ArrayList<String[]> out = new ArrayList<>();
        try {
            String sql = "SELECT cod,id,filiale,total,cl_cod FROM ch_transaction WHERE tipotr = ? and data >= date_sub(curtime(),interval ? day) AND bb = ? AND del_fg= ?";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, "S");
            ps.setString(2, get_national_office().getScadenza_bb());
            ps.setString(3, "1");
            ps.setString(4, "0");
            
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                String[] o1 = {rs.getString(1),
                    leftPad(rs.getString(2), 15, "0"),
                    leftPad(rs.getString(3), 3, "0"),
                    rs.getString(4), rs.getString(5)};
                out.add(o1);
            }
        } catch (SQLException | NumberFormatException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @param st1
     * @return
     */
    public boolean insertStock(Stock st1) {
        try {
            String ins = "INSERT INTO stock VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
            PreparedStatement ps = this.c.prepareStatement(ins, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, st1.getCodice());
            ps.setString(2, st1.getFiliale());
            ps.setString(3, st1.getTipo());
            ps.setString(4, st1.getTill());
            ps.setString(5, st1.getIdoperation());
            ps.setString(6, st1.getCodiceopenclose());
            ps.setString(7, st1.getTipostock());
            ps.setString(8, st1.getCod_value());
            ps.setString(9, st1.getKind());
            ps.setString(10, st1.getTotal());
            ps.setString(11, st1.getControval());
            ps.setString(12, st1.getRate());
            ps.setString(13, st1.getUser());
            ps.setString(14, st1.getDate());
            ps.setString(15, st1.getId_op());
            ps.execute();
            String dtoper = getNow();
            String dt_val = formatStringtoStringDate(dtoper, patternsqldate, patternnormdate);
            insert_aggiornamenti_mod(new Aggiornamenti_mod(
                    generaId(50), "000", dt_val, "0",
                    "PS", ps.toString(), "service", dtoper));
            return true;
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return false;
    }

    /**
     *
     * @return
     */
    public ArrayList<Till> list_ALL_till_enabled() {
        ArrayList<Till> out = new ArrayList<>();
        try {
            String sql = "SELECT cod,de_till,fg_tipo FROM till WHERE filiale = ? AND fg_annullato = ? ORDER BY fg_tipo,de_till";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, getCodLocal(true)[0]);
            ps.setString(2, "0");
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                Till t = new Till(rs.getString(1), rs.getString(2), rs.getString(2).equals("0"), false);
                out.add(t);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @param clcode
     * @param tra
     * @return
     */
    public Kyc_parameter list_transaction_kyc(String clcode, Ch_transaction tra) {
        Kyc_parameter output = null;
        try {
            String sql = "SELECT tipotr,total,pay,data FROM ch_transaction where del_fg = ? AND cl_cod = ? AND data > DATE_SUB(curdate(), INTERVAL 3 MONTH)";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, "0");
            ps.setString(2, clcode);
            ResultSet rs = ps.executeQuery();
            int op_giorn = 0, op_sett = 0, op_mensili = 0;
            double vol_weekly = 0.0, vol_mensile = 0.0, vol_trimest = 0.0;
            String today = new DateTime().toString(patternsql);
            String weekly = new DateTime().minusDays(7).toString(patternsql);
            String monthly = new DateTime().minusDays(30).toString(patternsql);
            DateTimeFormatter formatter = forPattern(patternsql);
            
            DateTime weeklyLIMIT = formatter.parseDateTime(weekly);
            DateTime monthlyLIMIT = formatter.parseDateTime(monthly);
            
            while (rs.next()) {
                String date = rs.getString("data").substring(0, 10);
                boolean buy = rs.getString("tipotr").equals("B");
                DateTime dt = formatter.parseDateTime(date);
                
                if (date.equals(today)) {
                    op_giorn++;
                }
                
                if (dt.isAfter(weeklyLIMIT) || dt.isEqual(weeklyLIMIT)) {
                    op_sett++;
                    if (buy) {
                        vol_weekly = vol_weekly + fd(rs.getString("total"));
                    } else {
                        vol_weekly = vol_weekly + fd(rs.getString("pay"));
                    }
                }
                
                if (dt.isAfter(monthlyLIMIT) || dt.isEqual(monthlyLIMIT)) {
                    op_mensili++;
                    if (buy) {
                        vol_mensile = vol_mensile + fd(rs.getString("total"));
                    } else {
                        vol_mensile = vol_mensile + fd(rs.getString("pay"));
                    }
                }
                
                if (buy) {
                    vol_trimest = vol_trimest + fd(rs.getString("total"));
                } else {
                    vol_trimest = vol_trimest + fd(rs.getString("pay"));
                }
            }
            
            if (tra != null) {
                op_giorn++;
                op_sett++;
                op_mensili++;
                boolean buy = tra.getTipotr().equals("B");
                if (buy) {
                    vol_weekly = vol_weekly + fd(tra.getTotal());
                    vol_mensile = vol_mensile + fd(tra.getTotal());
                    vol_trimest = vol_trimest + fd(tra.getTotal());
                    
                } else {
                    vol_weekly = vol_weekly + fd(tra.getPay());
                    vol_mensile = vol_mensile + fd(tra.getPay());
                    vol_trimest = vol_trimest + fd(tra.getPay());
                }
            }
            
            output = new Kyc_parameter(op_giorn, op_sett, op_mensili, vol_weekly, vol_mensile, vol_trimest);
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return output;
    }

    /**
     *
     * @param cl
     * @param of
     * @param it
     * @return
     */
    public boolean checkSogliaValueofTransaction_client(Client cl, Office of, Ch_transaction it) {
        try {
            
            String sql = "SELECT tipotr,total,pay,commission,round FROM ch_transaction where del_fg = ? AND cl_cod = ? AND data > DATE_SUB(curdate(), INTERVAL ? DAY)";
//                    + "AND data >= DATE_SUB(curdate(), INTERVAL ? MONTH)";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, "0");
            ps.setString(2, cl.getCode());
            ps.setInt(3, parseIntR(of.getKyc_mesi()));
            
            double total = 0.00;
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                if (rs.getString("tipotr").equals("B")) {
                    total = total + fd(rs.getString("total"));
//                    total = total + fd(rs.getString("pay"));
                } else if (rs.getString("tipotr").equals("S")) {
                    total = total + fd(rs.getString("pay"));
                    /*                    total = 
                    total + 
                    fd(rs.getString("pay")) + 
                    fd(rs.getString("commission")) + 
                    fd(rs.getString("round")); 
                     */
                }
            }
            if (it.getTipotr().equals("B")) {
                total = total + fd(it.getTotal());
//                total = total + fd(it.getPay());
            } else if (it.getTipotr().equals("S")) {
                total = total + fd(it.getPay());
            }
            boolean check = total > fd(of.getRisk_soglia());
            return check;
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return false;
    }

    /**
     *
     * @param cod
     * @param tipocliente
     * @param nome
     * @param cognome
     * @param datanascita
     * @param nazionenascita
     * @return
     */
    public String get_codice_client(String cod, String tipocliente,
            String nome, String cognome,
            String datanascita, String nazionenascita) {
        try {
            if (tipocliente.equals("002")) {
                String sql = "SELECT codcl FROM ch_transaction_client WHERE codfisc = ? ORDER BY timestamp DESC LIMIT 1";
                PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
                ps.setString(1, cod.trim());
                ResultSet rs = ps.executeQuery();
                if (rs.next()) {
                    return rs.getString(1);
                }
            } else {
                String sql = "SELECT codcl FROM ch_transaction_client WHERE cognome = ? AND nome = ?"
                        + " AND nazione_nascita = ? AND dt_nascita = ? ORDER BY timestamp DESC LIMIT 1";
                PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
                ps.setString(1, cognome);
                ps.setString(2, nome);
                ps.setString(3, nazionenascita);
                ps.setString(4, datanascita);
                ResultSet rs = ps.executeQuery();
                if (rs.next()) {
                    return rs.getString(1);
                }
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return null;
    }

    /**
     *
     * @param oc
     * @return
     */
    public ArrayList<Openclose_Anal_value_stock> list_Openclose_Anal_value_stockpos(Openclose oc) {
        ArrayList<Openclose_Anal_value_stock> out = new ArrayList<>();
        try {
            ArrayList<String[]> cc = credit_card_enabled();
            ArrayList<Currency> array_all_currency = list_figures();
            String sql = "SELECT * FROM oc_pos where cod_oc='" + oc.getCod() + "' AND kind <> '08'";
            ResultSet rs = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql);
            while (rs.next()) {
                Openclose_Anal_value_stock osp = new Openclose_Anal_value_stock();
                if (rs.getString("kind").equals("04") && is_CZ) {
                    String ba1 = rs.getString("carta_credito").split("-")[0];
                    String ba2 = rs.getString("carta_credito").split("-")[1];
                    osp.setCategory(ba1 + " " + formatAL(ba1, cc, 1) + " - " + ba2 + " " + formatALCurrency(ba2, array_all_currency));
                } else {
                    osp.setCategory(rs.getString("carta_credito") + " " + formatAL(rs.getString("carta_credito"), cc, 1));
                }
                osp.setQuantity(formatMysqltoDisplay(rs.getString("ip_quantity_op")));
                osp.setAmount(formatMysqltoDisplay(rs.getString("ip_value_op")));
                
                out.add(osp);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @param oc
     * @return
     */
    public ArrayList<Openclose_Anal_value_stock> list_Openclose_Anal_value_stockbank(Openclose oc) {
        ArrayList<Openclose_Anal_value_stock> out = new ArrayList<>();
        try {
            ArrayList<String[]> ba = list_bankAccount();
            String sql = "SELECT * FROM oc_pos where cod_oc='" + oc.getCod() + "' AND kind = '08'";
            ResultSet rs = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql);
            while (rs.next()) {
                Openclose_Anal_value_stock osp = new Openclose_Anal_value_stock();
                osp.setCategory(rs.getString("carta_credito") + " " + formatAL(rs.getString("carta_credito"), ba, 1));
                osp.setQuantity(formatMysqltoDisplay(rs.getString("ip_quantity_op")));
                osp.setAmount(formatMysqltoDisplay(rs.getString("ip_value_op")));
                out.add(osp);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @return
     */
    public ArrayList<Agency> list_agency_docvalidi() {
        ArrayList<Agency> out = new ArrayList<>();
        try {
            String sql = "SELECT agenzia,de_agenzia,indirizzo,cap,citta,telefono,fax,email,fg_annullato FROM agenzie ORDER BY de_agenzia";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                Agency ag = new Agency();
                
                ag.setAgenzia(rs.getString("agenzia"));
                ag.setDe_agenzia(rs.getString("de_agenzia"));
                ag.setIndirizzo(visualizzaStringaMySQL(rs.getString("indirizzo")));
                ag.setCap(rs.getString("cap"));
                ag.setCitta(rs.getString("citta"));
                ag.setTelefono(rs.getString("telefono"));
                ag.setFax(rs.getString("fax"));
                ag.setEmail(rs.getString("email"));
                ag.setFg_annullato(rs.getString("fg_annullato"));
                
                out.add(ag);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @param cod_cl
     * @return
     */
    public double weekly_transaction(String cod_cl) {
        double tot = 0.0;
        
        if (cod_cl == null || cod_cl.equals("---")) {
            return tot;
        }
        try {
            String sql = "SELECT * FROM ch_transaction WHERE cl_cod = ? AND data > date_sub(curdate(), interval 7 day) AND del_fg='0'";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, cod_cl);
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                if (rs.getString("tipotr").equals("B")) {
                    tot = tot + fd(rs.getString("total"));
                } else if (rs.getString("tipotr").equals("S")) {
                    tot = tot + fd(rs.getString("pay"));
                }
            }
            
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return tot;
    }

    /**
     *
     * @param cod_cl
     * @param filiale
     * @return
     */
    public double weekly_transaction_nofiliale(String cod_cl, String filiale) {
        double tot = 0.0;
        if (cod_cl == null || cod_cl.equals("---")) {
            return tot;
        }
        try {
            String sql = "SELECT * FROM ch_transaction WHERE cl_cod = ? AND data > date_sub(curdate(), interval 7 day) AND del_fg = '0' AND filiale <> ?";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, cod_cl);
            ps.setString(2, filiale);
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                if (rs.getString("tipotr").equals("B")) {
                    tot = tot + fd(rs.getString("total"));
                } else if (rs.getString("tipotr").equals("S")) {
                    tot = tot + fd(rs.getString("pay"));
                }
            }
            
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return tot;
    }

    /**
     *
     * @param cod_cl
     * @return
     */
    public ArrayList<String> weekly_transaction_string(String cod_cl) {
        ArrayList<String> out = new ArrayList<>();
        try {
            String sql = "SELECT * FROM ch_transaction WHERE cl_cod = ? AND data > date_sub(curdate(), interval 7 day) AND del_fg='0'";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, cod_cl);
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                
                String valore;
                if (rs.getString("tipotr").equals("B")) {
                    valore = "<tr><td>" + rs.getString("filiale") + "</td>"
                            + "<td>" + formatStringtoStringDate(rs.getString("data"), patternsqldate, patternnormdate) + "</td>"
                            + "<td>" + formatType(rs.getString("tipotr")) + "</td>"
                            + "<td>" + formatMysqltoDisplay(rs.getString("total")) + "</td></tr>";
                } else {
                    valore = "<tr><td>" + rs.getString("filiale") + "</td>"
                            + "<td>" + formatStringtoStringDate(rs.getString("data"), patternsqldate, patternnormdate) + "</td>"
                            + "<td>" + formatType(rs.getString("tipotr")) + "</td>"
                            + "<td>" + formatMysqltoDisplay(rs.getString("pay")) + "</td></tr>";
                }
                
                out.add(valore);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @param cod_cl
     * @param filiale
     * @return
     */
    public ArrayList<String> weekly_transaction_string_nofiliale(String cod_cl, String filiale) {
        ArrayList<String> out = new ArrayList<>();
        try {
            String sql = "SELECT * FROM ch_transaction WHERE cl_cod = ? AND data > date_sub(curdate(), interval 7 day) AND del_fg='0' AND filiale <> ?";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, cod_cl);
            ps.setString(2, filiale);
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                
                String valore;
                if (rs.getString("tipotr").equals("B")) {
                    valore = "<tr><td>" + rs.getString("filiale") + "</td>"
                            + "<td>" + formatStringtoStringDate(rs.getString("data"), patternsqldate, patternnormdate) + "</td>"
                            + "<td>" + formatType(rs.getString("tipotr")) + "</td>"
                            + "<td>" + formatMysqltoDisplay(rs.getString("total")) + "</td></tr>";
                } else {
                    valore = "<tr><td>" + rs.getString("filiale") + "</td>"
                            + "<td>" + formatStringtoStringDate(rs.getString("data"), patternsqldate, patternnormdate) + "</td>"
                            + "<td>" + formatType(rs.getString("tipotr")) + "</td>"
                            + "<td>" + formatMysqltoDisplay(rs.getString("pay")) + "</td></tr>";
                }
                
                out.add(valore);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @param cod_cl
     * @param mesi
     * @return
     */
    public double kyc_transaction(String cod_cl, int mesi) {
        double tot = 0.0;
        try {
            String sql = "SELECT * FROM ch_transaction WHERE cl_cod = ? AND data > date_sub(curdate(), interval ? month) AND del_fg='0'";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, cod_cl);
            ps.setInt(2, mesi);
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                if (rs.getString("tipotr").equals("B")) {
                    tot = tot + fd(rs.getString("pay"));
                } else if (rs.getString("tipotr").equals("S")) {
                    tot = tot + fd(rs.getString("pay"));
                }
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return tot;
    }

    /**
     *
     * @param filiale
     * @param idtrans
     * @return
     */
    public ArrayList<Ch_transaction_value> fidelity_cod_value(String filiale, String idtrans) {
        ArrayList<Ch_transaction_value> out = new ArrayList<>();
        try {
            String sql = "SELECT * FROM ch_transaction_valori WHERE cod_tr IN (SELECT cod FROM ch_transaction WHERE filiale = ? AND id = ? AND bb = ?  AND del_fg='0')";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, filiale);
            ps.setString(2, idtrans);
            ps.setString(3, "0");
            ResultSet rs = ps.executeQuery();
            if (rs.next()) {
                Ch_transaction_value chv = new Ch_transaction_value();
                chv.setId(rs.getString(1));
                chv.setCod_tr(rs.getString(2));
                chv.setNumeroriga(rs.getString(3));
                chv.setSupporto(rs.getString(4));
                chv.setPos(rs.getString(5));
                chv.setValuta(rs.getString(6));
                chv.setQuantita(rs.getString(7));
                chv.setRate(rs.getString(8));
                chv.setCom_perc(rs.getString(9));
                chv.setCom_perc_tot(rs.getString(10));
                chv.setFx_com(rs.getString(11));
                chv.setTot_com(rs.getString(12));
                chv.setNet(rs.getString(13));
                chv.setSpread(rs.getString(14));
                chv.setTotal(rs.getString(15));
                chv.setKind_fix_comm(rs.getString(16));
                chv.setLow_com_ju(rs.getString(17));
                chv.setBb(rs.getString(18));
                chv.setBb_fidcode(rs.getString(19));
                chv.setDt_tr(rs.getString(20));
                chv.setContr_valuta(rs.getString(21));
                chv.setContr_supporto(rs.getString(22));
                chv.setContr_quantita(rs.getString(23));
                chv.setDel_fg(rs.getString(24));
                chv.setDel_dt(rs.getString(25));
                chv.setPosnum(rs.getString(26));
                chv.setRoundvalue(rs.getString(27));
                out.add(chv);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @param st
     * @return
     */
    public boolean insert_Stockreport(Stock_report st) {
        try {
            String ins = "INSERT INTO stock_report VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
            PreparedStatement ps = this.c.prepareStatement(ins, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, st.getCodice());
            ps.setString(2, st.getFiliale());
            ps.setString(3, st.getTill());
            ps.setString(4, st.getCodiceopenclose());
            ps.setString(5, st.getTipo());
            ps.setString(6, st.getCod_value());
            ps.setString(7, st.getKind());
            ps.setString(8, st.getQuantity());
            ps.setString(9, st.getTotal());
            ps.setString(10, st.getRate());
            ps.setString(11, st.getSpread());
            ps.setString(12, st.getUser());
            ps.setString(13, st.getData());
            ps.setString(14, st.getCodtr());
            ps.execute();
            String dtoper = getNow();
            String dt_val = formatStringtoStringDate(dtoper, patternsqldate, patternnormdate);
            insert_aggiornamenti_mod(new Aggiornamenti_mod(
                    generaId(50), "000", dt_val, "0",
                    "PS", ps.toString(), "service", dtoper));
            return true;
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return false;
    }

    /**
     *
     * @param cod_openclose
     * @param cod_value
     * @param kind
     * @param tipo
     * @param filiale
     * @param till
     * @return
     */
    public Stock_report get_Stock_report(String cod_openclose, String cod_value, String kind, String tipo, String filiale, String till) {
        try {
            String sql = "SELECT * FROM stock_report where codiceopenclose = ? AND cod_value = ? AND kind = ? and data in (SELECT max(data) FROM stock_report where codiceopenclose = ?)";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, cod_openclose);
            ps.setString(2, cod_value);
            ps.setString(3, kind);
            ps.setString(4, cod_openclose);
            ResultSet rs = ps.executeQuery();
            
            if (rs.next()) {
                Stock_report sr = new Stock_report(rs.getString(1), rs.getString(2), rs.getString(3), rs.getString(4),
                        rs.getString(5), rs.getString(6), rs.getString(7), rs.getString(8), rs.getString(9),
                        rs.getString(10), rs.getString(11), rs.getString(12), rs.getString(13), rs.getString(14));
                return sr;
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        Stock_report sr = new Stock_report("", filiale, till, cod_openclose,
                tipo, cod_value, kind, "0.00", "0.00", "1.00",
                "0.00", "", "", "-");
        return sr;
    }

    /**
     *
     * @param data1
     * @param data2
     * @param branch
     * @return
     */
    public ArrayList<C_AnalysisReprintNoChange_value> list_C_AnalysisReprintNoChange_value(String data1, String data2, ArrayList<String> branch) {
        ArrayList<C_AnalysisReprintNoChange_value> out = new ArrayList<>();
        try {
            String sql = "SELECT * FROM transaction_reprint re, nc_transaction tr WHERE type='NC' AND tr.cod=re.codtr ";
            if (data1 != null) {
                sql = sql + "AND re.date >= '" + data1 + " 00:00:00' ";
            }
            if (data2 != null) {
                sql = sql + "AND re.date <= '" + data2 + " 23:59:59' ";
            }
            sql = sql + " ORDER BY re.user,re.date";
            ArrayList<Users> us = list_all_users();
            ArrayList<Figures> fi = list_all_figures();
            ArrayList<NC_causal> ca = list_nc_causal_enabled();
            ResultSet rs = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql);
            while (rs.next()) {
                
                String su = rs.getString("tr.supporto");
                if (su.equals("...")) {
                    su = "01";
                }
                
                Figures fi1 = Engine.get_figures(fi, su);
                
                NC_causal cau = getNC_causal(ca, rs.getString("tr.causale_nc"), rs.getString("tr.gruppo_nc"));
                Users u_tr = Engine.get_user(rs.getString("tr.user"), us);
                Users u_re = Engine.get_user(rs.getString("re.user"), us);
                C_AnalysisReprintNoChange_value ar = new C_AnalysisReprintNoChange_value();
                ar.setDate(formatStringtoStringDate(rs.getString("re.date"), patternsqldate, patternnormdate));
                ar.setUserCod(rs.getString("tr.user"));
                ar.setUser(u_tr.getDe_cognome() + " " + u_tr.getDe_nome());
                ar.setReprintusercode(rs.getString("re.user"));
                ar.setReprintuser(u_re.getDe_cognome() + " " + u_re.getDe_nome());
                ar.setDateOperation(formatStringtoStringDate(rs.getString("tr.data"), patternsqldate, patternnormdate));
                ar.setTransaction(rs.getString("tr.filiale") + rs.getString("tr.id"));
                ar.setBranch(rs.getString("tr.filiale"));
                ar.setQty(rs.getString("tr.quantita"));
                ar.setPrice(rs.getString("tr.prezzo"));
                ar.setTotal(rs.getString("tr.total"));
                ar.setSupport(fi1.getSupporto() + " " + fi1.getDe_supporto());
                ar.setTypeTransaction(rs.getString("tr.till"));
                ar.setCausal(cau.getCausale_nc() + " " + cau.getDe_causale_nc());
                out.add(ar);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @param data1
     * @param data2
     * @param branch
     * @return
     */
    public ArrayList<C_AnalysisReprint_value> list_C_AnalysisReprint_value(String data1, String data2, ArrayList<String> branch) {
        ArrayList<C_AnalysisReprint_value> out = new ArrayList<>();
        try {
            String sql = "SELECT * FROM transaction_reprint re, ch_transaction tr WHERE type='CH' AND tr.cod=re.codtr ";
            if (data1 != null) {
                sql = sql + "AND re.date >= '" + data1 + " 00:00:00' ";
            }
            
            if (data2 != null) {
                sql = sql + "AND re.date <= '" + data2 + " 23:59:59' ";
            }
            
            sql = sql + " ORDER BY re.user,re.date";
            
            ArrayList<Users> us = list_all_users();
            ResultSet rs = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql);
            while (rs.next()) {
                Users u_tr = Engine.get_user(rs.getString("tr.user"), us);
                Users u_re = Engine.get_user(rs.getString("re.user"), us);
                C_AnalysisReprint_value ar = new C_AnalysisReprint_value();
                ar.setDate(formatStringtoStringDate(rs.getString("re.date"), patternsqldate, patternnormdate));
                ar.setUserCod(rs.getString("tr.user"));
                ar.setUser(u_tr.getDe_cognome() + " " + u_tr.getDe_nome());
                ar.setReprintusercode(rs.getString("re.user"));
                ar.setReprintuser(u_re.getDe_cognome() + " " + u_re.getDe_nome());
                ar.setDateOperation(formatStringtoStringDate(rs.getString("tr.data"), patternsqldate, patternnormdate));
                ar.setBranch(rs.getString("tr.filiale"));
                ar.setFidelityCode(rs.getString("tr.filiale") + rs.getString("tr.id"));
                ar.setTill(rs.getString("tr.till"));
                ar.setTypeOperation(formatType(rs.getString("tr.tipotr")));
                ar.setAmount(rs.getString("tr.pay"));
                ar.setCommission(rs.getString("tr.commission"));
                ar.setNote(rs.getString("tr.del_motiv"));
                out.add(ar);
            }
            
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @param data1
     * @param data2
     * @param branch
     * @param br
     * @return
     */
    public ArrayList<C_CustomerCareRefund_value> list_C_CustomerCareRefund_value(String data1, String data2, ArrayList<String> branch, ArrayList<Branch> br) {
        ArrayList<C_CustomerCareRefund_value> out = new ArrayList<>();
        try {
            String sql = "SELECT * FROM ch_transaction_refund r,ch_transaction t WHERE r.status='1' AND r.cod_tr = t.cod ";
            sql = sql + "AND r.dt_refund >= '" + data1 + " 00:00:00' ";
            sql = sql + "AND r.dt_refund <= '" + data2 + " 23:59:59' ";
            
            String filwhere = "";
            for (int i = 0; i < branch.size(); i++) {
                filwhere = filwhere + "t.filiale = '" + branch.get(i) + "' OR ";
            }
            
            if (filwhere.length() > 3) {
                sql = sql + " AND (" + filwhere.substring(0, filwhere.length() - 3).trim() + ") ";
            }
            sql = sql + " ORDER BY t.filiale,r.dt_refund";
            
            ResultSet rs = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql);
            while (rs.next()) {
                C_CustomerCareRefund_value ar = new C_CustomerCareRefund_value();
                ar.setRefunddate(formatStringtoStringDate(rs.getString("r.dt_refund"), patternsqldate, patternnormdate));
                ar.setTransactiondate(formatStringtoStringDate(rs.getString("t.data"), patternsqldate, patternnormdate));
                ar.setUsercode(rs.getString("t.user"));
                ar.setRefundusercode(rs.getString("r.user_refund"));
                ar.setBranch(formatBankBranch(rs.getString("t.filiale"), "BR", null, br, null));
                ar.setTransaction(rs.getString("t.filiale") + rs.getString("t.id"));
                ar.setTypeoperation(formatType(rs.getString("t.tipotr")));
                ar.setAmount(rs.getString("t.pay"));
                ar.setCommission(rs.getString("t.commission"));
                ar.setTyperefund(ar.format_tipo(rs.getString("r.type")));
                ar.setRefundmethod(ar.format_transf(rs.getString("r.method")));
                ar.setRefundamount(rs.getString("r.value"));
                ar.setAuthcode(rs.getString("r.cod_usaegetta"));
                ar.setNote("");
                out.add(ar);
            }
            
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @param data1
     * @param data2
     * @param branch
     * @param list_nc_cat
     * @return
     */
    public ArrayList<C_WesternUnion_value> list_C_WesternUnion_value(String data1, String data2, ArrayList<String> branch, String list_nc_cat) {
        ArrayList<C_WesternUnion_value> out = new ArrayList<>();
        try {
            String sql = "SELECT * FROM nc_transaction WHERE del_fg = '0' ";
            
            Iterable<String> ite = onPattern(";").split(list_nc_cat);
            Iterator it = ite.iterator();
            String nccatwhere = "";
            while (it.hasNext()) {
                String nccat = it.next().toString().trim();
                if (!nccat.equals("") && !nccat.equals("...")) {
                    nccatwhere = nccatwhere + "gruppo_nc ='" + nccat + "' OR ";
                }
            }
            
            if (nccatwhere.length() > 3) {
                sql = sql + " AND (" + nccatwhere.substring(0, nccatwhere.length() - 3).trim() + ") ";
            }
            
            String filwhere = "";
            for (int i = 0; i < branch.size(); i++) {
                filwhere = filwhere + "filiale = '" + branch.get(i) + "' OR ";
            }
            
            if (filwhere.length() > 3) {
                sql = sql + " AND (" + filwhere.substring(0, filwhere.length() - 3).trim() + ") ";
            }
            
            if (data1 != null) {
                sql = sql + "AND data >= '" + data1 + " 00:00:00' ";
            }
            
            if (data2 != null) {
                sql = sql + "AND data <= '" + data2 + " 23:59:59' ";
            }
            
            sql = sql + " ORDER BY data";
            ResultSet rs = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql);
            ArrayList<String> datelist = new ArrayList<>();
            while (rs.next()) {
                datelist.add(rs.getString("data").substring(0, 10));
            }
            rs.beforeFirst();
            removeDuplicatesAL(datelist);
            
            for (int i = 0; i < datelist.size(); i++) {
                String datavalue = datelist.get(i);
                C_WesternUnion_value wu = new C_WesternUnion_value();
                wu.setData(formatStringtoStringDate(datavalue, patternsql, patternnormdate_filter));
                
                double setToSend = 0.0;
                double setToReceive = 0.0;
                int setnTransSend = 0;
                int setnTransReceive = 0;
                
                while (rs.next()) {
                    if (rs.getString("data").startsWith(datavalue)) {
                        if (rs.getString("fg_inout").equals("2")) {
                            setToReceive = setToReceive + fd(rs.getString("total").replace("-", "").trim());
                            setnTransReceive++;
                        } else if (rs.getString("fg_inout").equals("1")) {
                            setToSend = setToSend + fd(rs.getString("total").replace("-", "").trim());
                            setnTransSend++;
                        }
                        
                    }
                }
                
                double setTotal = setToSend - setToReceive;
                
                rs.beforeFirst();
                wu.setToSend(roundDoubleandFormat(setToSend, 2) + "");
                wu.setnTransSend(setnTransSend + "");
                wu.setToReceive(roundDoubleandFormat(setToReceive, 2) + "");
                wu.setnTransReceive(setnTransReceive + "");
                wu.setTotal(roundDoubleandFormat(setTotal, 2) + "");
                
                out.add(wu);
                
            }
            
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @param data1
     * @param branch
     * @return
     */
    public ArrayList<StockInquiry_value> list_C_StockInquiry_value(String data1, String[] branch) {
        ArrayList<StockInquiry_value> dati = new ArrayList<>();
        ArrayList<StockInquiry_value> val = list_StockInquiry_value(branch, data1, "CH");
        for (int i = 0; i < val.size(); i++) {
            StockInquiry_value bv = val.get(i);
            StockInquiry_value si = new StockInquiry_value();
            si.setCurrency(bv.getCurrency());
            si.setTill(bv.getTill());
            si.setData(bv.getData());
            si.setDati_string(bv.getDati_string());
            dati.add(si);
        }
        return dati;
    }

    /**
     *
     * @param user
     * @return
     */
    public String getLastLink(String user) {
        try {
            String sql = "SELECT link FROM link WHERE utente = ? AND priorita = ? ORDER BY data DESC LIMIT 1";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, user);
            ps.setString(2, "0");
            ResultSet rs = ps.executeQuery();
            if (rs.next()) {
                return rs.getString(1);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return null;
    }

    /**
     *
     * @param user
     * @param link
     * @param codtr
     * @param priorita
     */
    public void insertLink(String user, String link, String codtr, int priorita) {
        try {
            String ins = "INSERT INTO link (utente,link,codtr,priorita) VALUES (?,?,?,?)";
            PreparedStatement ps = this.c.prepareStatement(ins, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, user);
            ps.setString(2, link);
            ps.setString(3, codtr);
            ps.setInt(4, priorita);
            ps.execute();
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
    }

    /**
     *
     * @param user
     * @param codtr
     */
    public void deleteLinktransaction(String user, String codtr) {
        try {
            String sql = "DELETE FROM link WHERE utente = ? AND codtr = ?";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, user);
            ps.setString(2, codtr);
            ps.execute();
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
    }

    /**
     *
     * @param user
     */
    public void deleteLinktransaction(String user) {
        try {
            String sql = "DELETE FROM link WHERE utente = ?";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, user);
            ps.execute();
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
    }

    /**
     *
     * @param data1
     * @param data2
     * @param filiale
     * @param allb
     * @return
     */
    public ArrayList<C_ChangeVolumeAffairCashAdvance_value> getC_ChangeVolumeAffairCashAdvance(String data1, String data2, String filiale, ArrayList<Branch> allb) {
        
        ArrayList<C_ChangeVolumeAffairCashAdvance_value> out = new ArrayList<>();
        try {
            String sql = "SELECT * FROM ch_transaction WHERE del_fg = '0' AND filiale = '" + filiale + "' ";
            
            if (data1 != null) {
                sql = sql + "AND data >= '" + data1 + " 00:00:00' ";
            }
            
            if (data2 != null) {
                sql = sql + "AND data <= '" + data2 + " 23:59:59' ";
            }
            
            sql = sql + " ORDER BY data";
            ResultSet rs = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql);
            ArrayList<String> datelist = new ArrayList<>();
            while (rs.next()) {
                datelist.add(rs.getString("data").substring(0, 10));
            }
            rs.beforeFirst();
            removeDuplicatesAL(datelist);
            
            for (int i = 0; i < datelist.size(); i++) {
                String datavalue = datelist.get(i);
                C_ChangeVolumeAffairCashAdvance_value cva = new C_ChangeVolumeAffairCashAdvance_value();
                cva.setDate(formatStringtoStringDate(datavalue, patternsql, patternnormdate_filter));
                cva.setBranch(formatBankBranch(filiale, "BR", null, allb, null));
                double setBuy = 0.00;
                double setSell = 0.00;
                double setCashAdv = 0.00;
                int setNoTrans = 0;
                while (rs.next()) {
                    if (rs.getString("data").startsWith(datavalue)) {
                        if (rs.getString("tipotr").equals("B")) {
                            ArrayList<Ch_transaction_value> list = query_transaction_value(rs.getString("cod"));
                            boolean considerare = true;
                            for (int j = 0; j < list.size(); j++) {
                                if (list.get(j).getSupporto().equals("04")) {
                                    if (is_CZ) {
                                        setCashAdv = setCashAdv + fd(list.get(j).getTot_com()) + fd(list.get(j).getRoundvalue());
                                    } else {
                                        setCashAdv = setCashAdv + fd(list.get(j).getTot_com()) + parseDoubleR(list.get(j).getRoundvalue());
                                    }
                                    considerare = false;
                                }
                            }
                            if (considerare) {
                                setBuy = setBuy + fd(rs.getString("total"));
                            }
                        } else if (rs.getString("tipotr").equals("S")) {
                            setSell = setSell + fd(rs.getString("total"));
                        }
                        setNoTrans++;
                    }
                }
                double setTotal = setBuy + setSell;
                cva.setBuy(roundDoubleandFormat(setBuy, 2) + "");
                cva.setSell(roundDoubleandFormat(setSell, 2) + "");
                cva.setTotal(roundDoubleandFormat(setTotal, 2) + "");
                cva.setCashAdv(roundDoubleandFormat(setCashAdv, 2) + "");
                cva.setNoTrans(setNoTrans + "");
                out.add(cva);
                rs.beforeFirst();
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
        
    }

    /**
     *
     * @param data1
     * @param data2
     * @param branch
     * @param allb
     * @return
     */
    public ArrayList<C_ChangeMovimentDetailForBranches_value> list_C_ChangeMovimentDetailForBranches_value(String data1,
            String data2, ArrayList<String> branch, ArrayList<Branch> allb) {
        
        ArrayList<C_ChangeMovimentDetailForBranches_value> out = new ArrayList<>();
        try {
            
            String sql = "SELECT * FROM ch_transaction where del_fg<>'2' ";
            
            String filwhere = "";
            for (int i = 0; i < branch.size(); i++) {
                filwhere = filwhere + "filiale = '" + branch.get(i) + "' OR ";
            }
            
            if (filwhere.length() > 3) {
                sql = sql + " and (" + filwhere.substring(0, filwhere.length() - 3).trim() + ") ";
            }
            
            if (data1 != null) {
                sql = sql + "AND data >= '" + data1 + " 00:00:00' ";
            }
            if (data2 != null) {
                sql = sql + "AND data <= '" + data2 + " 23:59:59' ";
            }
            sql = sql + " ORDER BY filiale,data";
            ArrayList<String[]> listkind = list_all_kind("000");
            ArrayList<CustomerKind> cklist = list_customerKind();
            ResultSet rs = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql);
            while (rs.next()) {
                
                Ch_transaction ch = new Ch_transaction();
                ch.setCod(rs.getString("cod"));
                ch.setId(leftPad(rs.getString("id"), 15, "0"));
                ch.setFiliale(rs.getString("filiale"));
                ch.setTipotr(rs.getString("tipotr"));
                ch.setUser(rs.getString("user"));
                ch.setTill(rs.getString("till"));
                ch.setData(rs.getString("data"));
                ch.setTipocliente(rs.getString("tipocliente"));
                ch.setId_open_till(rs.getString("id_open_till"));
                ch.setPay(rs.getString("pay"));
                ch.setTotal(rs.getString("total"));
                ch.setFix(rs.getString("fix"));
                ch.setCom(rs.getString("com"));
                ch.setRound(rs.getString("round"));
                ch.setCommission(rs.getString("commission"));
                ch.setSpread_total(rs.getString("spread_total"));
                ch.setNote(rs.getString("note"));
                ch.setAgency(rs.getString("agency"));
                ch.setAgency_cod(rs.getString("agency_cod"));
                ch.setLocalfigures(rs.getString("localfigures"));
                ch.setPos(rs.getString("pos"));
                ch.setIntbook(rs.getString("intbook"));
                ch.setIntbook_type(rs.getString("intbook_type"));
                ch.setIntbook_1_tf(rs.getString("intbook_1_tf"));
                ch.setIntbook_1_mod(rs.getString("intbook_1_mod"));
                ch.setIntbook_1_val(rs.getString("intbook_1_val"));
                ch.setIntbook_2_tf(rs.getString("intbook_2_tf"));
                ch.setIntbook_2_mod(rs.getString("intbook_2_mod"));
                ch.setIntbook_2_val(rs.getString("intbook_2_val"));
                ch.setIntbook_3_tf(rs.getString("intbook_3_tf"));
                ch.setIntbook_3_mod(rs.getString("intbook_3_mod"));
                ch.setIntbook_3_val(rs.getString("intbook_3_val"));
                ch.setIntbook_mac(rs.getString("intbook_mac"));
                ch.setIntbook_cli(rs.getString("intbook_cli"));
                ch.setCl_cf(rs.getString("cl_cf"));
                ch.setCl_cod(rs.getString("cl_cod"));
                ch.setDel_fg(rs.getString("del_fg"));
                ch.setDel_dt(rs.getString("del_dt"));
                ch.setDel_user(rs.getString("del_user"));
                ch.setDel_motiv(rs.getString("del_motiv"));
                ch.setRefund(rs.getString("refund"));
                ch.setFa_number(rs.getString("fa_number"));
                ch.setCn_number(rs.getString("cn_number"));
                
                ArrayList<Ch_transaction_value> values = query_transaction_value(ch.getCod());
                
                for (int j = 0; j < values.size(); j++) {
                    Ch_transaction_value val = values.get(j);
                    C_ChangeMovimentDetailForBranches_value cmdfb = new C_ChangeMovimentDetailForBranches_value();
                    cmdfb.setBranch(ch.getFiliale());
                    cmdfb.setTransaction(formatType(ch.getTipotr()) + " " + ch.getId());
                    cmdfb.setDate(formatStringtoStringDate(ch.getData(), patternsqldate, patternnormdate));
                    cmdfb.setUser(ch.getUser());
                    cmdfb.setCurrency(val.getValuta());
                    cmdfb.setKind(val.getSupporto() + " " + formatAL(val.getSupporto(), listkind, 1));
                    cmdfb.setQty(val.getQuantita());
                    cmdfb.setAmount(val.getTotal());
                    cmdfb.setPercCom(val.getCom_perc());
                    cmdfb.setCom(val.getCom_perc_tot());
                    cmdfb.setRate(val.getRate());
                    cmdfb.setNet(val.getNet());
                    cmdfb.setBuy(roundDoubleandFormat(fd(val.getTotal()) - fd(val.getSpread()), 2));
                    cmdfb.setSpread(roundDoubleandFormat(fd(val.getSpread()), 2));
                    cmdfb.setComFix(val.getFx_com());
                    cmdfb.setCustomer(Engine.get_customerKind(cklist, ch.getTipocliente()).getDe_tipologia_clienti());
                    if (ch.getDel_fg().equals("0")) {
                        cmdfb.setDelete("");
                    } else {
                        cmdfb.setDelete(formatStringtoStringDate(ch.getDel_dt(), patternsqldate, patternnormdate) + " " + ch.getDel_motiv());
                    }
                    if (ch.getIntbook().equals("0")) {
                        cmdfb.setIntBook("");
                    } else {
                        cmdfb.setIntBook(ch.getIntbook());
                    }
                    
                    out.add(cmdfb);
                }
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @param data1
     * @param data2
     * @param filiale
     * @param allb
     * @return
     */
    public ArrayList<C_ChangeMovimentForBranches_value> list_C_ChangeMovimentForBranches_value(String data1, String data2, String filiale, ArrayList<Branch> allb) {
        
        ArrayList<String[]> listvalue = new ArrayList<>();
        ArrayList<Ch_transaction_value> values = new ArrayList<>();
        ArrayList<C_ChangeMovimentForBranches_value> out = new ArrayList<>();
        
        try {
            String sql = "SELECT * FROM ch_transaction WHERE filiale = '" + filiale + "' AND del_fg ='0' ";
            
            if (data1 != null) {
                sql = sql + "AND data >= '" + data1 + " 00:00:00' ";
            }
            if (data2 != null) {
                sql = sql + "AND data <= '" + data2 + " 23:59:59' ";
            }
            sql = sql + " ORDER BY data";
            ArrayList<String[]> listkind = list_all_kind(filiale);
            ResultSet rs2 = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql);
            while (rs2.next()) {
                String sql2 = "SELECT * FROM ch_transaction_valori WHERE cod_tr='" + rs2.getString("cod") + "' ORDER BY valuta,supporto";
                ResultSet rs = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql2);
                while (rs.next()) {
                    Ch_transaction_value chv = new Ch_transaction_value();
                    chv.setId(rs.getString(1));
                    chv.setCod_tr(rs.getString(2));
                    chv.setNumeroriga(rs.getString(3));
                    chv.setSupporto(rs.getString(4));
                    chv.setPos(rs.getString(5));
                    chv.setValuta(rs.getString(6));
                    chv.setQuantita(rs.getString(7));
                    chv.setRate(rs.getString(8));
                    chv.setCom_perc(rs.getString(9));
                    chv.setCom_perc_tot(rs.getString(10));
                    chv.setFx_com(rs.getString(11));
                    chv.setTot_com(rs.getString(12));
                    chv.setNet(rs.getString(13));
                    chv.setSpread(rs.getString(14));
                    chv.setTotal(rs.getString(15));
                    chv.setKind_fix_comm(rs.getString(16));
                    chv.setLow_com_ju(rs.getString(17));
                    chv.setBb(rs.getString(18));
                    chv.setBb_fidcode(rs.getString(19));
                    chv.setDt_tr(rs.getString(20));
                    chv.setContr_valuta(rs.getString(21));
                    chv.setContr_supporto(rs.getString(22));
                    chv.setContr_quantita(rs.getString(23));
                    chv.setDel_fg(rs.getString(24));
                    chv.setDel_dt(rs.getString(25));
                    chv.setPosnum(rs.getString(26));
                    chv.setRoundvalue(rs.getString(27));
                    values.add(chv);
                    String[] v2 = {rs.getString("valuta"), rs.getString("supporto")};
                    listvalue.add(v2);
                }
            }
            
            removeDuplicatesALAr(listvalue);
            
            for (String[] va  : listvalue) {
                C_ChangeMovimentForBranches_value cmfb = new C_ChangeMovimentForBranches_value();
                cmfb.setCurrency(va[0]);
                cmfb.setKind(va[1] + " " + formatAL(va[1], listkind, 1));
                double setQt = 0.00;
                double setAmount = 0.00;
                double setPercComm;
                double setComm = 0.00;
                double setNet = 0.00;
                double setTotBuy;
                double setSpread = 0.00;
                double setCommFix = 0.00;
                for (int i = 0; i < values.size(); i++) {
                    Ch_transaction_value chv = values.get(i);
                    if (chv.getValuta().equals(va[0]) && chv.getSupporto().equals(va[1])) {
                        setQt = setQt + fd(chv.getQuantita());
                        setAmount = setAmount + fd(chv.getTotal());
                        setComm = setComm + fd(chv.getTot_com());
                        setNet = setNet + fd(chv.getNet());
                        setSpread = setSpread + fd(chv.getSpread());
                        setCommFix = setCommFix + fd(chv.getFx_com());
                    }
                }
                setPercComm = (setComm / setAmount) * 100;
                setTotBuy = setAmount - setSpread;
                cmfb.setQt(roundDoubleandFormat(setQt, 2));
                cmfb.setAmount(roundDoubleandFormat(setAmount, 2));
                cmfb.setPercComm(roundDoubleandFormat(setPercComm, 2));
                cmfb.setComm(roundDoubleandFormat(setComm, 2));
                cmfb.setNet(roundDoubleandFormat(setNet, 2));
                cmfb.setTotBuy(roundDoubleandFormat(setTotBuy, 2));
                cmfb.setSpread(roundDoubleandFormat(setSpread, 2));
                cmfb.setCommFix(roundDoubleandFormat(setCommFix, 2));
                out.add(cmfb);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @param data1
     * @param data2
     * @param filiale
     * @param allb
     * @return
     */
    public ArrayList<C_AnalysisCurrency_value> list_C_AnalysisCurrency_value(String data1, String data2, String filiale, ArrayList<Branch> allb) {
        ArrayList<C_AnalysisCurrency_value> out = new ArrayList<>();
//        try {

        boolean dividi = get_national_office().getChangetype().equals("/");
        
        ArrayList<String> listvalue = new ArrayList<>();
        ArrayList<String[]> list_valuta = new ArrayList<>();
        ArrayList<String[]> list_branch = new ArrayList<>();
        ArrayList<String[]> list_bank = new ArrayList<>();
        ArrayList<String[]> list_ocerr = new ArrayList<>();
        
        try {
            String sql = "SELECT * FROM ch_transaction WHERE filiale = '" + filiale + "' AND del_fg ='0' ";
            
            if (data1 != null) {
                sql = sql + "AND data >= '" + data1 + " 00:00:00' ";
            }
            if (data2 != null) {
                sql = sql + "AND data <= '" + data2 + " 23:59:59' ";
            }
            sql = sql + " ORDER BY data";
            ResultSet rs = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql);
            while (rs.next()) {
                String sql2 = "SELECT * FROM ch_transaction_valori WHERE cod_tr='" + rs.getString("cod") + "'";
                ResultSet rs2 = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql2);
                while (rs2.next()) {
                    String controv = formatDoubleforMysql(getValueDiff("1.00", "0.00", rs2.getString("total"), rs2.getString("rate"), dividi));
                    String[] li = {rs2.getString("valuta"), rs2.getString("total"), controv, rs.getString("tipotr")};
                    list_valuta.add(li);
                    listvalue.add(rs2.getString("valuta"));
                }
            }
            rs.beforeFirst();
            
            String sql3 = "SELECT * FROM et_change where filiale = '" + filiale + "' AND fg_annullato='0' ";
            
            if (data1 != null) {
                sql3 = sql3 + "AND dt_it >= '" + data1 + " 00:00:00' ";
            }
            if (data2 != null) {
                sql3 = sql3 + "AND dt_it <= '" + data2 + " 23:59:59' ";
            }
            sql3 = sql3 + " ORDER BY dt_it";
            
            ResultSet rs3 = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql3);
            
            while (rs3.next()) {
                String sql4 = "SELECT * FROM et_change_valori  WHERE cod='" + rs3.getString("cod") + "'";
                ResultSet rs4 = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql4);
                while (rs4.next()) {
                    String controv = formatDoubleforMysql(getValueDiff("1", "0.00", rs4.getString("ip_total"), rs4.getString("ip_rate"), dividi));
                    String[] li = {rs4.getString("currency"), rs4.getString("ip_total"), controv, rs3.getString("fg_tofrom")};
                    if (rs3.getString("fg_brba").equals("BR")) {
                        list_branch.add(li);
                    } else {
                        list_bank.add(li);
                    }
                    listvalue.add(rs4.getString("currency"));
                }
            }
            
            String sql5 = "SELECT * FROM oc_errors where tipo='CH' AND cod in (SELECT cod FROM oc_lista WHERE filiale = '" + filiale + "' AND fg_tipo='C' and filiale='000') ";
            if (data1 != null) {
                sql5 = sql5 + "AND data >= '" + data1 + " 00:00:00' ";
            }
            if (data2 != null) {
                sql5 = sql5 + "AND data <= '" + data2 + " 23:59:59' ";
            }
            sql5 = sql5 + " ORDER BY data";
            
            ResultSet rs5 = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql5);
            while (rs5.next()) {
                String controv = formatDoubleforMysql(getValueDiff("1", "0.00", rs5.getString("total_diff"), rs5.getString("rate"), dividi));
                String[] li = {rs5.getString("valuta"), rs5.getString("total_diff"), controv};
                list_ocerr.add(li);
                listvalue.add(rs5.getString("valuta"));
            }
            
            removeDuplicatesAL(listvalue);
            
            for (String va  : listvalue) {
                double setFromBranch_qty = 0.0;
                double setFromBranch_amount = 0.0;
                double setBuy_qty = 0.0;
                double setBuy_amount = 0.0;
                double setFromBank_qty = 0.0;
                double setFromBank_amount = 0.0;
                double setOpenCloseError_qty = 0.0;
                double setOpenCloseError_amount = 0.0;
                double setToBranch_qty = 0.0;
                double setToBranch_amount = 0.0;
                double setSell_qty = 0.0;
                double setSell_amount = 0.0;
                double setToBank_qty = 0.0;
                double setToBank_amount = 0.0;
                double setTotOut;
                double setTotAmountOut;
                double setTotalIn;
                double setTotalAmountIn;
                for (int j = 0; j < list_ocerr.size(); j++) {
                    String[] li = list_ocerr.get(j);
                    if (li[0].equals(va)) {
                        
                        setOpenCloseError_qty = setOpenCloseError_qty + roundDouble(fd(li[1]), 2);
                        setOpenCloseError_amount = setOpenCloseError_amount + roundDouble(fd(li[2]), 2);
                        
                    }
                }
                for (int j = 0; j < list_bank.size(); j++) {
                    String[] li = list_bank.get(j);
                    if (li[0].equals(va)) {
                        if (li[3].equals("T")) {
                            setToBank_qty = setToBank_qty + fd(li[1]);
                            setToBank_amount = setToBank_amount + fd(li[2]);
                        } else if (li[3].equals("F")) {
                            setFromBank_qty = setFromBank_qty + fd(li[1]);
                            setFromBank_amount = setFromBank_amount + fd(li[2]);
                        }
                    }
                }
                for (int j = 0; j < list_branch.size(); j++) {
                    String[] li = list_branch.get(j);
                    if (li[0].equals(va)) {
                        if (li[3].equals("T")) {
                            setToBranch_qty = setToBranch_qty + fd(li[1]);
                            setToBranch_amount = setToBranch_amount + fd(li[2]);
                        } else if (li[3].equals("F")) {
                            setFromBranch_qty = setFromBranch_qty + fd(li[1]);
                            setFromBranch_amount = setFromBranch_amount + fd(li[2]);
                        }
                    }
                }
                for (int j = 0; j < list_valuta.size(); j++) {
                    String[] li = list_valuta.get(j);
                    if (li[0].equals(va)) {
                        if (li[3].equals("B")) {
                            setBuy_qty = setBuy_qty + fd(li[1]);
                            setBuy_amount = setBuy_amount + fd(li[2]);
                        } else if (li[3].equals("S")) {
                            setSell_qty = setSell_qty + fd(li[1]);
                            setSell_amount = setSell_amount + fd(li[2]);
                        }
                    }
                }
                setTotalIn = setFromBank_qty + setBuy_qty + setFromBranch_qty + setOpenCloseError_qty;
                setTotalAmountIn = setFromBank_amount + setBuy_amount + setFromBranch_amount + setOpenCloseError_amount;
                setTotOut = setToBank_qty + setToBranch_qty + setSell_qty;
                setTotAmountOut = setToBank_amount + setToBranch_amount + setSell_amount;
                C_AnalysisCurrency_value ac = new C_AnalysisCurrency_value();
                String t = format("%.12f", setOpenCloseError_amount);
                ac.setOpenCloseError_amount((formatDoubleforMysql(t)));
                ac.setCurrency(va);
                ac.setFromBranch_qty(roundDoubleandFormat(setFromBranch_qty, 2) + "");
                ac.setFromBranch_amount(roundDoubleandFormat(setFromBranch_amount, 2) + "");
                ac.setBuy_qty(roundDoubleandFormat(setBuy_qty, 2) + "");
                ac.setBuy_amount(roundDoubleandFormat(setBuy_amount, 2) + "");
                ac.setFromBank_qty(roundDoubleandFormat(setFromBank_qty, 2) + "");
                ac.setFromBank_amount(roundDoubleandFormat(setFromBank_amount, 2) + "");
                ac.setOpenCloseError_qty((((roundDoubleandFormat(setOpenCloseError_qty, 2)))));
                ac.setOpenCloseError_amount((((roundDoubleandFormat(setOpenCloseError_amount, 2)))));
                ac.setTotalIn((((roundDoubleandFormat(setTotalIn, 2)))));
                ac.setTotalAmountIn(roundDoubleandFormat(setTotalAmountIn, 2) + "");
                ac.setTotalAmountIn((((roundDoubleandFormat(setTotalAmountIn, 2)))));
                ac.setToBranch_qty(roundDoubleandFormat(setToBranch_qty, 2) + "");
                ac.setToBranch_amount(roundDoubleandFormat(setToBranch_amount, 2) + "");
                ac.setSell_qty(roundDoubleandFormat(setSell_qty, 2) + "");
                ac.setSell_amount(roundDoubleandFormat(setSell_amount, 2) + "");
                ac.setToBank_qty(roundDoubleandFormat(setToBank_qty, 2) + "");
                ac.setToBank_amount(roundDoubleandFormat(setToBank_amount, 2) + "");
                ac.setTotOut(roundDoubleandFormat(setTotOut, 2) + "");
                ac.setTotAmountOut(roundDoubleandFormat(setTotAmountOut, 2) + "");
                out.add(ac);
            }
            
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
        
    }

    /**
     *
     * @param data1
     * @param data2
     * @param filiale
     * @param allb
     * @return
     */
    public ArrayList<C_NoChangeMovimentForBranches_value> list_C_NoChangeMovimentForBranches_value(String data1, String data2, String filiale, ArrayList<Branch> allb) {
        ArrayList<C_NoChangeMovimentForBranches_value> out = new ArrayList<>();
        try {
            
            String sql = "SELECT * FROM nc_transaction where filiale = '" + filiale + "' ";
            
            if (data1 != null) {
                sql = sql + "AND data >= '" + data1 + " 00:00:00' ";
            }
            if (data2 != null) {
                sql = sql + "AND data <= '" + data2 + " 23:59:59' ";
            }
            sql = sql + " ORDER BY fg_tipo_transazione_nc,gruppo_nc,causale_nc";
            ResultSet rs = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql);
            ArrayList<String> causlist = new ArrayList<>();
            while (rs.next()) {
                causlist.add(rs.getString("causale_nc"));
            }
            rs.beforeFirst();
            removeDuplicatesAL(causlist);
            ArrayList<NC_category> nc_cat = query_nc_category_filial(getCodLocal(true)[0], null);
            ArrayList<NC_causal> nc_caus = query_nc_causal_filial(getCodLocal(true)[0], null);
            ArrayList<String[]> nc_kin = nc_kind();
            
            for (int i = 0; i < causlist.size(); i++) {
                String caus = causlist.get(i);
                NC_causal nc1 = getNC_causal(nc_caus, caus, null);
                double setQt = 0.00;
                double setTotal = 0.00;
                int setnTrans = 0;
                if (nc1 != null) {
                    NC_category nc0 = getNC_category(nc_cat, nc1.getGruppo_nc());
                    C_NoChangeMovimentForBranches_value ncmfb = new C_NoChangeMovimentForBranches_value();
                    
                    ncmfb.setCategory(nc0.getDe_gruppo_nc());
                    ncmfb.setCausal(nc1.getDe_causale_nc());
                    ncmfb.setDe_filiale(formatBankBranchReport(filiale, "BR", null, allb));
                    ncmfb.setId_filiale(filiale);
                    ncmfb.setKind(formatAL(nc0.getFg_tipo_transazione_nc(), nc_kin, 1));
                    
                    while (rs.next()) {
                        if (rs.getString("causale_nc").equals(caus)) {
                            setnTrans++;
                            setQt = setQt + fd(rs.getString("quantita"));
                            setTotal = setTotal + fd(rs.getString("total"));
                        }
                    }
                    
                    ncmfb.setQt(roundDoubleandFormat(setQt, 2) + "");
                    ncmfb.setnTrans(setnTrans + "");
                    ncmfb.setTotal(roundDoubleandFormat(setTotal, 2) + "");
                    
                    out.add(ncmfb);
                    rs.beforeFirst();
                }
            }
            
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @param data1
     * @param data2
     * @param filiale
     * @param allb
     * @return
     */
    public ArrayList<C_ChangeVolumeAffair_value> list_C_ChangeVolumeAffair_value(String data1, String data2, String filiale, ArrayList<Branch> allb) {
        ArrayList<C_ChangeVolumeAffair_value> out = new ArrayList<>();
        try {
            String sql = "SELECT * FROM ch_transaction WHERE del_fg = '0' AND filiale = '" + filiale + "' ";
            
            if (data1 != null) {
                sql = sql + "AND data >= '" + data1 + " 00:00:00' ";
            }
            
            if (data2 != null) {
                sql = sql + "AND data <= '" + data2 + " 23:59:59' ";
            }
            
            sql = sql + " ORDER BY data";
            ResultSet rs = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql);
            ArrayList<String> datelist = new ArrayList<>();
            while (rs.next()) {
                datelist.add(rs.getString("data").substring(0, 10));
            }
            rs.beforeFirst();
            removeDuplicatesAL(datelist);
            for (int i = 0; i < datelist.size(); i++) {
                String datavalue = datelist.get(i);
                C_ChangeVolumeAffair_value cva = new C_ChangeVolumeAffair_value();
                cva.setDate(formatStringtoStringDate(datavalue, patternsql, patternnormdate_filter));
                cva.setBranch(formatBankBranch(filiale, "BR", null, allb, null));
                double setBuy = 0.00;
                double setSell = 0.00;
                int setNoTrans = 0;
                while (rs.next()) {
                    if (rs.getString("data").startsWith(datavalue)) {
                        if (rs.getString("tipotr").equals("B")) {
                            setBuy = setBuy + fd(rs.getString("total"));
                        } else if (rs.getString("tipotr").equals("S")) {
                            setSell = setSell + fd(rs.getString("total"));
                        }
                        setNoTrans++;
                    }
                }
                double setTotal = setBuy + setSell;
                cva.setBuy(roundDoubleandFormat(setBuy, 2));
                cva.setSell(roundDoubleandFormat(setSell, 2));
                cva.setTotal(roundDoubleandFormat(setTotal, 2));
                cva.setNoTrans(setNoTrans + "");
                out.add(cva);
                rs.beforeFirst();
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @param coddoc
     * @param codtr
     * @return
     */
    public boolean delete_doc_transaction(String coddoc, String codtr) {
        try {
            this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).execute("DELETE FROM ch_transaction_doc WHERE codtr = '" + coddoc + "' AND tipodoc = '" + codtr + "'");
            String dtoper = getNow();
            String dt_val = formatStringtoStringDate(dtoper, patternsqldate, patternnormdate);
            insert_aggiornamenti_mod(new Aggiornamenti_mod(
                    generaId(50), "000", dt_val, "0",
                    "ST", "DELETE FROM ch_transaction_doc WHERE codtr = '" + coddoc + "' AND tipodoc = '" + codtr + "'", "service", dtoper));
            return true;
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return false;
    }

    /**
     *
     * @param codice_documento
     * @return
     */
    public boolean delete_doc_transaction_cd(String codice_documento) {
        try {
            String de1 = "DELETE FROM ch_transaction_doc WHERE codice_documento = '" + codice_documento + "'";
            String de2 = "DELETE FROM ch_transaction_doc_story WHERE codice_documento = '" + codice_documento + "'";
            this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).execute(de1);
            this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).execute(de2);
            String dtoper = getNow();
            String dt_val = formatStringtoStringDate(dtoper, patternsqldate, patternnormdate);
            insert_aggiornamenti_mod(new Aggiornamenti_mod(generaId(50), "000", dt_val, "0", "ST", de1, "service", dtoper));
            insert_aggiornamenti_mod(new Aggiornamenti_mod(generaId(50), "000", dt_val, "0", "ST", de2, "service", dtoper));
            return true;
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return false;
    }

    /**
     *
     * @param codtr
     * @param codiceopenclose
     * @param valutalocale
     * @param newkind
     */
    public void delete_trans_stockreport(String codtr, String codiceopenclose, String valutalocale, String newkind) {
        try {
            String del1 = "DELETE FROM stock_report WHERE codtr = '" + codtr + "' AND codiceopenclose = '"
                    + codiceopenclose + "' AND cod_value = '" + valutalocale + "' AND kind = '" + newkind + "'";
            this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).execute(del1);
            String dtoper = getNow();
            String dt_val = formatStringtoStringDate(dtoper, patternsqldate, patternnormdate);
            insert_aggiornamenti_mod(new Aggiornamenti_mod(
                    generaId(50), "000", dt_val, "0",
                    "ST", del1, "service", dtoper));
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
    }

    /**
     *
     * @param codtr
     * @param codiceopenclose
     */
    public void delete_trans_stockreport(String codtr, String codiceopenclose) {
        try {
            this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).execute("DELETE FROM stock_report WHERE codtr = '" + codtr + "' AND codiceopenclose = '" + codiceopenclose + "'");
            
            String dtoper = getNow();
            String dt_val = formatStringtoStringDate(dtoper, patternsqldate, patternnormdate);
            insert_aggiornamenti_mod(new Aggiornamenti_mod(
                    generaId(50), "000", dt_val, "0",
                    "ST", "DELETE FROM stock_report WHERE codtr = '" + codtr + "' AND codiceopenclose = '" + codiceopenclose + "'", "service", dtoper));
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
    }

    /**
     *
     * @param idoperation
     * @param codiceopenclose
     */
    public void delete_trans_stock(String idoperation, String codiceopenclose) {
        try {
            this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).execute("DELETE FROM stock WHERE idoperation = '" + idoperation + "' AND codiceopenclose = '" + codiceopenclose + "'");
            String dtoper = getNow();
            String dt_val = formatStringtoStringDate(dtoper, patternsqldate, patternnormdate);
            insert_aggiornamenti_mod(new Aggiornamenti_mod(
                    generaId(50), "000", dt_val, "0",
                    "ST", "DELETE FROM stock WHERE idoperation = '" + idoperation + "' AND codiceopenclose = '" + codiceopenclose + "'", "service", dtoper));
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
    }

    /**
     *
     * @param idoperation
     * @param codiceopenclose
     * @param curvalue
     */
    public void delete_trans_stock_NOEURO(String idoperation, String codiceopenclose, String curvalue) {
        try {
            String del = "DELETE FROM stock WHERE idoperation = '" + idoperation + "' AND codiceopenclose = '" + codiceopenclose + "' AND cod_value<>'" + curvalue + "'";
            this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).execute(del);
            String dtoper = getNow();
            String dt_val = formatStringtoStringDate(dtoper, patternsqldate, patternnormdate);
            insert_aggiornamenti_mod(new Aggiornamenti_mod(
                    generaId(50), "000", dt_val, "0",
                    "ST", del, "service", dtoper));
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
    }

    /**
     *
     * @param codtr
     */
    public void delete_trans_value(String codtr) {
        try {
            this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).execute("DELETE FROM ch_transaction_valori WHERE cod_tr = '" + codtr + "'");
            String dtoper = getNow();
            String dt_val = formatStringtoStringDate(dtoper, patternsqldate, patternnormdate);
            insert_aggiornamenti_mod(new Aggiornamenti_mod(
                    generaId(50), "000", dt_val, "0",
                    "ST", "DELETE FROM ch_transaction_valori WHERE cod_tr = '" + codtr + "'", "service", dtoper));
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
    }

    /**
     *
     * @param codtr
     */
    public void delete_trans_docum(String codtr) {
        try {
            this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).execute("DELETE FROM ch_transaction_doc WHERE codtr = '" + codtr + "'");
            String dtoper = getNow();
            String dt_val = formatStringtoStringDate(dtoper, patternsqldate, patternnormdate);
            insert_aggiornamenti_mod(new Aggiornamenti_mod(
                    generaId(50), "000", dt_val, "0",
                    "ST", "DELETE FROM ch_transaction_doc WHERE codtr = '" + codtr + "'", "service", dtoper));
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
    }

    /**
     *
     * @param codtr
     */
    public void delete_trans_temp(String codtr) {
        try {
            this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).execute("DELETE FROM ch_transaction_temp WHERE cod = '" + codtr + "'");
            String dtoper = getNow();
            String dt_val = formatStringtoStringDate(dtoper, patternsqldate, patternnormdate);
            insert_aggiornamenti_mod(new Aggiornamenti_mod(
                    generaId(50), "000", dt_val, "0",
                    "ST", "DELETE FROM ch_transaction_temp WHERE cod = '" + codtr + "'", "service", dtoper));
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
    }

    /**
     *
     * @param data1
     * @param data2
     * @param branch
     * @param curr
     * @param state
     * @param diff
     * @return
     */
    public ArrayList<C_Interbranch_value> list_C_InterbranchDetails_value(String data1, String data2, ArrayList<String> branch, String curr, ArrayList<String> state, String diff) {
        ArrayList<C_Interbranch_value> out = new ArrayList<>();
        
        try {
            ArrayList<C_Interbranch_value> ing = list_C_Interbranch_value(data1, data2, branch, curr, state, diff);
            String local = get_local_currency()[0];
            
            for (int i = 0; i < ing.size(); i++) {
                C_Interbranch_value in = ing.get(i);
                ArrayList<C_InterbranchDetails_value> list = new ArrayList<>();
                ArrayList<String[]> to = new ArrayList<>();
                ArrayList<String[]> fr = new ArrayList<>();
                if (!in.getCode().equals("-")) {
                    ResultSet rs1 = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery("SELECT * FROM et_change_valori where cod = '" + in.getCode() + "'");
                    while (rs1.next()) {
                        String[] valori = {rs1.getString("currency"), rs1.getString("kind"), rs1.getString("ip_stock"),
                            rs1.getString("ip_quantity"), rs1.getString("ip_rate"), rs1.getString("ip_total")};
                        to.add(valori);
                    }
                    
                }
                if (!in.getCodefrom().equals("-")) {
                    ResultSet rs1 = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery("SELECT * FROM et_change_valori where cod = '" + in.getCodefrom() + "'");
                    while (rs1.next()) {
                        String[] valori = {rs1.getString("currency"), rs1.getString("kind"), rs1.getString("ip_stock"),
                            rs1.getString("ip_quantity"), rs1.getString("ip_rate"), rs1.getString("ip_total")};
                        fr.add(valori);
                    }
                }
                
                for (int j = 0; j < to.size(); j++) {
                    String[] valori = to.get(j);
                    C_InterbranchDetails_value details = new C_InterbranchDetails_value();
                    details.setCurrency(valori[0]);
                    details.setKind(valori[1]);
                    details.setNo(valori[2]);
                    details.setQty(valori[3]);
                    details.setRate(valori[4]);
                    details.setTotal(roundDoubleandFormat(fd(valori[5]), 2));
                    
                    String currencyfrom = "-", kindfrom = "-", nofrom = "-", qtyfrom = "-", ratefrom = "-", totalfrom = "-";
                    
                    for (int k = 0; k < fr.size(); k++) {
                        String[] valfr = fr.get(k);
                        if (valori[0].equals(valfr[0]) && valori[1].equals(valfr[1])) {
                            currencyfrom = valfr[0];
                            kindfrom = valfr[1];
                            nofrom = valfr[2];
                            qtyfrom = valfr[3];
                            ratefrom = valfr[4];
                            totalfrom = (roundDoubleandFormat(fd(valfr[5]), 2));
                            fr.remove(valfr);
                            break;
                        }
                    }
                    
                    details.setCurrencyfrom(currencyfrom);
                    details.setKindfrom(kindfrom);
                    details.setNofrom(nofrom);
                    details.setQtyfrom(qtyfrom);
                    details.setRatefrom(ratefrom);
                    details.setTotalfrom(totalfrom);
                    
                    switch (curr) {
                        case "...":
                            list.add(details);
                            break;
                        case "01":
                            if (details.getCurrency().equalsIgnoreCase(local) || details.getCurrencyfrom().equalsIgnoreCase(local)) {
                                list.add(details);
                            }
                            break;
                        case "02":
                            if (!details.getCurrency().equalsIgnoreCase(local) || !details.getCurrencyfrom().equalsIgnoreCase(local)) {
                                list.add(details);
                            }
                            break;
                        default:
                            break;
                    }
                    
                }
                
                for (int j = 0; j < fr.size(); j++) {
                    String[] valori = fr.get(j);
                    C_InterbranchDetails_value details = new C_InterbranchDetails_value();
                    details.setCurrency("-");
                    details.setKind("-");
                    details.setNo("-");
                    details.setQty("-");
                    details.setRate("-");
                    details.setTotal("-");
                    details.setCurrencyfrom(valori[0]);
                    details.setKindfrom(valori[1]);
                    details.setNofrom(valori[2]);
                    details.setQtyfrom(valori[3]);
                    details.setRatefrom(valori[4]);
                    details.setTotalfrom(valueOf(roundDouble(fd(valori[5]), 2)));
                    
                    switch (curr) {
                        case "...":
                            list.add(details);
                            break;
                        case "01":
                            if (details.getCurrencyfrom().equalsIgnoreCase(local)) {
                                list.add(details);
                            }
                            break;
                        case "02":
                            if (!details.getCurrencyfrom().equalsIgnoreCase(local)) {
                                list.add(details);
                            }
                            break;
                        default:
                            break;
                    }
                    
                    list.add(details);
                }
                in.setDati(list);
                out.add(in);
            }
            
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @param data1
     * @param data2
     * @param branch
     * @param allb
     * @return
     */
    public ArrayList<C_TransactionRegisterSummary_value> list_C_TransactionRegisterSummary_value(String data1, String data2, ArrayList<String> branch,
            ArrayList<Branch> allb) {
        ArrayList<C_TransactionRegisterSummary_value> out = new ArrayList<>();
        
        for (int i = 0; i < branch.size(); i++) {
            String[] fi = {branch.get(i), branch.get(i)};
            Daily_value dv = list_Daily_value(fi, data1 + " 00:00", data2 + " 23:59", false, false);
            ArrayList<DailyCOP> dc1 = dv.getDatiCOP();
            ArrayList<DailyKind> dk1 = dv.getDati();
            
            C_TransactionRegisterSummary_value ncmfb = new C_TransactionRegisterSummary_value();
            ncmfb.setId_filiale(branch.get(i));
            ncmfb.setDe_filiale(formatBankBranchReport(branch.get(i), "BR", null, allb));
            
            ncmfb.setPurchnum(dv.getNoTransPurch());
            ncmfb.setPurchtot(dv.getPurchTotal());
            ncmfb.setPurchcomm(dv.getPurchComm());
            ncmfb.setSalesnum(dv.getNoTransSales());
            ncmfb.setSalestotal(dv.getSalesTotal());
            ncmfb.setSalescomm(dv.getSalesComm());
            
            double setCashnum = 0;
            for (int o = 0; o < dc1.size(); o++) {
                setCashnum = setCashnum + fd(dc1.get(o).getCashAdNtrans());
            }
            
            ncmfb.setCashnum(roundDoubleandFormat(setCashnum, 0));
            ncmfb.setCashtot(dv.getCashAdNetTot());
            ncmfb.setCashcomm(dv.getCashAdComm());
            
            for (int o = 0; o < dk1.size(); o++) {
                
                DailyKind dkk = dk1.get(o);
                
                if (dkk.getKind().equalsIgnoreCase("Western Union")) {
                    ncmfb.setWusnum(dkk.getFromNrTran());
                    ncmfb.setWustot(dkk.getFromTotal());
                    ncmfb.setWurnum(dkk.getToNrTran());
                    ncmfb.setWurtot(dkk.getToTotal());
                } else if (dkk.getKind().equalsIgnoreCase("Stock Transaction")) {
                    
                    ncmfb.setStockbuynum(dkk.getFromNrTran());
                    ncmfb.setStockbuytot(dkk.getFromTotal());
                    ncmfb.setStocksellnum(dkk.getToNrTran());
                    ncmfb.setStockselltot(dkk.getToTotal());
                    
                } else if (dkk.getKind().equalsIgnoreCase("VAT Refund")) {
                    
                    ncmfb.setVatrefnum(dkk.getToNrTran());
                    ncmfb.setVatrefundtot(dkk.getToTotal());
                    
                } else if (dkk.getKind().equalsIgnoreCase("Other No stock transaction")) {
                    
                    ncmfb.setOnsinum(dkk.getFromNrTran());
                    ncmfb.setOnsitot(dkk.getFromTotal());
                    ncmfb.setOnsonum(dkk.getToNrTran());
                    ncmfb.setOnsotot(dkk.getToTotal());
                    
                } else if (dkk.getKind().equalsIgnoreCase("Tickets")) {
                    
                    ncmfb.setTikinnum(dkk.getFromNrTran());
                    ncmfb.setTikintot(dkk.getFromTotal());
                    ncmfb.setTikounum(dkk.getToNrTran());
                    ncmfb.setTikoutot(dkk.getToTotal());
                    
                } else if (dkk.getKind().equalsIgnoreCase("Insurance")) {
                    
                    ncmfb.setInsinnum(dkk.getFromNrTran());
                    ncmfb.setInsintot(dkk.getFromTotal());
                    ncmfb.setInsounum(dkk.getToNrTran());
                    ncmfb.setInsoutot(dkk.getToTotal());
                    
                }
                
            }
            out.add(ncmfb);
        }
        return out;
    }

    /**
     *
     * @param datainiz
     * @param branch
     * @param allb
     * @return
     */
    public ArrayList<C_CloseBranch_value> list_C_CloseBranch_value(String datainiz, ArrayList<String> branch, ArrayList<Branch> allb) {
        ArrayList<C_CloseBranch_value> out = new ArrayList<>();
        try {
            
            for (int i = 0; i < branch.size(); i++) {
                String fil = branch.get(i);
                
                String datachi = null;
                String sqlclosure = "SELECT data FROM oc_lista WHERE till='000' AND fg_tipo='C' AND filiale ='" + fil + "' AND data LIKE '" + datainiz
                        + "%' ORDER BY data DESC LIMIT 1";
                ResultSet rs = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sqlclosure);
                if (rs.next()) {
                    datachi = rs.getString(1);
                }
                if (datachi != null) {
                    String[] fi = {fil, fil};
                    Daily_value dv = list_Daily_value(fi, datainiz + " 00:00", datainiz + " 23:59", false, false);
                    if (dv != null) {
                        ArrayList<String> alcolonne = new ArrayList<>();
                        alcolonne.add("Branch");
                        alcolonne.add("");
                        alcolonne.add("Date");
                        alcolonne.add("Purchases");
                        alcolonne.add("Sales");
                        alcolonne.add("Cash Advance");
                        alcolonne.add("Cash On Prem");
                        alcolonne.add("Fx");
                        alcolonne.add("Pos");
                        alcolonne.add("Bank account");
                        
                        C_CloseBranch_value cb = new C_CloseBranch_value();
                        cb.setCodBranch(fil);
                        cb.setDescrBranch(formatBankBranchReport(fil, "BR", null, allb));
                        cb.sethClose(formatStringtoStringDate(datachi, patternsqldate, patternnormdate));
                        cb.setPurch(dv.getPurchTotal());
                        cb.setSales(dv.getSalesTotal());
                        cb.setCashadvance(dv.getCashAdNetTot());
                        cb.setCashonprem(dv.getCashOnPrem());
                        cb.setFx(dv.getFx());
                        
                        double dc1v = 0.00;
                        for (int x = 0; x < dv.getDatiCOP().size(); x++) {
                            dc1v = dc1v
                                    + fd(((DailyCOP) dv.getDatiCOP().get(x)).getCashAdAmount())
                                    + fd(((DailyCOP) dv.getDatiCOP().get(x)).getBankAmount())
                                    + fd(((DailyCOP) dv.getDatiCOP().get(x)).getCcAmount());
                        }
                        double db1v = 0.00;
                        for (int x = 0; x < dv.getDatiBank().size(); x++) {
                            db1v = db1v + fd(((DailyBank) dv.getDatiBank().get(x)).getAmount());
                        }
                        cb.setPos(roundDoubleandFormat(dc1v, 2));
                        cb.setAccCC(roundDoubleandFormat(db1v, 2));
                        ArrayList<String> data = new ArrayList<>();
                        ArrayList<DailyKind> dk1 = dv.getDati();
                        for (int j = 0; j < dk1.size(); j++) {
                            if (dk1.get(j).getKind().equals("Western Union")) {
                                alcolonne.add(dk1.get(j).getKind() + " Send");
                                alcolonne.add(dk1.get(j).getKind() + " Receive");
                                data.add(dk1.get(j).getFromTotal());
                                data.add(dk1.get(j).getToTotal());
                            } else {
                                alcolonne.add(dk1.get(j).getKind());
                                data.add(roundDoubleandFormat(parseDoubleR(dk1.get(j).getFromTotal()) - parseDoubleR(dk1.get(j).getToTotal()), 2));
                            }
                        }
                        cb.setDati_string(data);
                        cb.setAlcolonne(alcolonne);
                        out.add(cb);
                    }
                }
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @param d3
     * @param d4
     * @param data1
     * @param data2
     * @param branch
     * @return
     */
    public ArrayList<C_CashierDetails_value> list_C_CashierDetails_value(String d3, String d4, String data1, String data2, ArrayList<String> branch) {
        ArrayList<C_CashierDetails_value> out = new ArrayList<>();
        try {
            
            String oper = get_national_office().getChangetype();
            
            String sql = "SELECT * FROM ch_transaction where del_fg<>'2' ";
            
            String filwhere = "";
            
            for (int i = 0; i < branch.size(); i++) {
                filwhere = filwhere + "filiale='" + branch.get(i) + "' OR ";
            }
            
            if (filwhere.length() > 3) {
                sql = sql + " AND (" + filwhere.substring(0, filwhere.length() - 3).trim() + ") ";
            }
            
            if (data1 != null) {
                sql = sql + "AND data >= '" + data1 + " 00:00:00' ";
            }
            
            if (data2 != null) {
                sql = sql + "AND data <= '" + data2 + " 23:59:59' ";
            }
            
            sql = sql + " order by user,data";
            
            ResultSet rs = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql);
            ArrayList<String> usl = new ArrayList<>();
            while (rs.next()) {
                usl.add(rs.getString("user"));
            }
            
            String sql1 = "SELECT * FROM oc_lista where errors ='Y' ";
            
            if (filwhere.length() > 3) {
                sql1 = sql1 + " AND (" + filwhere.substring(0, filwhere.length() - 3).trim() + ") ";
            }
            
            if (data1 != null) {
                sql1 = sql1 + "AND data >= '" + data1 + " 00:00:00' ";
            }
            if (data2 != null) {
                sql1 = sql1 + "AND data <= '" + data2 + " 23:59:59' ";
            }
            sql1 = sql1 + " ORDER BY data";
            ResultSet rs1 = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql1);
            while (rs1.next()) {
                usl.add(rs1.getString("user"));
            }
            
            rs.beforeFirst();
            rs1.beforeFirst();
            
            removeDuplicatesAL(usl);
            
            ArrayList<Users> lius = list_all_users();
            
            for (int i = 0; i < usl.size(); i++) {
                String cl = usl.get(i);
                Users cls = Engine.get_user(cl, lius);
                if (cls == null) {
                    continue;
                }
                C_CashierDetails_value ccv = new C_CashierDetails_value();
                ArrayList<Ch_transaction> datitran = new ArrayList<>();
                ArrayList<Openclose> datiopenclose = new ArrayList<>();
                ccv.setDataDa(d3);
                ccv.setDataA(d4);
                ccv.setUser(visualizzaStringaMySQL(cls.getCod() + " - " + cls.getDe_cognome() + " " + cls.getDe_nome()));
                
                while (rs.next()) {
                    if (rs.getString("user").equals(cl)) {
                        Ch_transaction ch = new Ch_transaction();
                        ch.setCod(rs.getString("cod"));
                        ch.setId(leftPad(rs.getString("id"), 15, "0"));
                        ch.setFiliale(rs.getString("filiale"));
                        ch.setTipotr(rs.getString("tipotr"));
                        ch.setUser(rs.getString("user"));
                        ch.setTill(rs.getString("till"));
                        ch.setData(formatStringtoStringDate(rs.getString("data"), patternsqldate, patternnormdate));
                        ch.setTipocliente(rs.getString("tipocliente"));
                        ch.setId_open_till(rs.getString("id_open_till"));
                        ch.setPay(rs.getString("pay"));
                        ch.setTotal(rs.getString("total"));
                        ch.setFix(rs.getString("fix"));
                        ch.setCom(rs.getString("com"));
                        ch.setRound(rs.getString("round"));
                        ch.setCommission(rs.getString("commission"));
                        ch.setSpread_total(rs.getString("spread_total"));
                        ch.setNote(rs.getString("note"));
                        ch.setAgency(rs.getString("agency"));
                        ch.setAgency_cod(rs.getString("agency_cod"));
                        ch.setLocalfigures(rs.getString("localfigures"));
                        ch.setPos(rs.getString("pos"));
                        ch.setIntbook(rs.getString("intbook"));
                        ch.setIntbook_type(rs.getString("intbook_type"));
                        ch.setIntbook_1_tf(rs.getString("intbook_1_tf"));
                        ch.setIntbook_1_mod(rs.getString("intbook_1_mod"));
                        ch.setIntbook_1_val(rs.getString("intbook_1_val"));
                        ch.setIntbook_2_tf(rs.getString("intbook_2_tf"));
                        ch.setIntbook_2_mod(rs.getString("intbook_2_mod"));
                        ch.setIntbook_2_val(rs.getString("intbook_2_val"));
                        ch.setIntbook_3_tf(rs.getString("intbook_3_tf"));
                        ch.setIntbook_3_mod(rs.getString("intbook_3_mod"));
                        ch.setIntbook_3_val(rs.getString("intbook_3_val"));
                        ch.setIntbook_mac(rs.getString("intbook_mac"));
                        ch.setIntbook_cli(rs.getString("intbook_cli"));
                        ch.setCl_cf(rs.getString("cl_cf"));
                        if (rs.getString("tipocliente").equals("003")) {
                            Company co = get_Agent(rs.getString("cl_cod"));
                            if (co != null) {
                                ch.setCl_cod(co.getCognome() + " " + co.getNome());
                            } else {
                                ch.setCl_cod("");
                            }
                        } else {
                            Client cl1 = query_Client(rs.getString("cl_cod"));
                            if (cl1 != null) {
                                ch.setCl_cod(cl1.getCognome() + " " + cl1.getNome());
                            } else {
                                ch.setCl_cod("");
                            }
                            
                        }
                        
                        ch.setDel_fg(rs.getString("del_fg"));
                        ch.setDel_dt(formatStringtoStringDate(rs.getString("del_dt"), patternsqldate, patternnormdate));
                        ch.setDel_user(rs.getString("del_user"));
                        ch.setDel_motiv(rs.getString("del_motiv"));
                        ch.setBb(rs.getString("bb"));
                        ch.setRefund(rs.getString("refund"));
                        ch.setFa_number(rs.getString("fa_number"));
                        ch.setCn_number(rs.getString("cn_number"));
                        ch.setCredccard_number(rs.getString("credccard_number"));
                        datitran.add(ch);
                    }
                }
                rs.beforeFirst();
                
                while (rs1.next()) {
                    if (rs1.getString("user").equals(cl)) {
                        
                        Openclose oc = new Openclose(rs1.getString(1), rs1.getString(2), leftPad(rs1.getString(3), 15, "0"),
                                rs1.getString(4), rs1.getString(5), rs1.getString(6),
                                formatStringtoStringDate(rs1.getString(7), patternsqldate, patternnormdate),
                                rs1.getString(8));
                        oc.setCod_it(rs1.getString("cod_it"));
                        oc.setCod_itnc(rs1.getString("cod_itnc"));
                        oc.setForeign_tr(rs1.getString("foreign_tr"));
                        oc.setLocal_tr(rs1.getString("local_tr"));
                        oc.setStock_tr(rs1.getString("stock_tr"));
                        
                        double setTotErr = 0.00;
                        ArrayList<String[]> err_value = list_oc_errors(rs1.getString("cod"));
                        for (int y = 0; y < err_value.size(); y++) {
                            String[] errv = err_value.get(y);
                            if (errv[1].equals("CH")) {
                                if (fd(errv[8]) != 0) {
                                    if (oper.equals("*")) {
                                        setTotErr = setTotErr + (fd(errv[7]) * fd(errv[8]));
                                    } else {
                                        setTotErr = setTotErr + (fd(errv[7]) / fd(errv[8]));
                                    }
                                }
                            }
                        }
                        
                        oc.setTotal_diff(roundDoubleandFormat(setTotErr, 2) + "");
                        datiopenclose.add(oc);
                    }
                }
                
                rs1.beforeFirst();
                
                ccv.setDatitran(datitran);
                ccv.setDatierr(datiopenclose);
                out.add(ccv);
            }
            
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @param data1
     * @param data2
     * @param bss
     * @param branch
     * @param fasce
     * @return
     */
    public ArrayList<C_CashierPerformance_value> list_C_CashierPerformance_value(String data1, String data2,
            String bss, ArrayList<String> branch,
            ArrayList<String[]> fasce) {
        ArrayList<C_CashierPerformance_value> out = new ArrayList<>();
        try {
            
            String oper = get_national_office().getChangetype();
            String sql = "SELECT * FROM ch_transaction where del_fg<>'2' ";
            
            String filwhere = "";
            
            for (int i = 0; i < branch.size(); i++) {
                filwhere = filwhere + "filiale='" + branch.get(i) + "' OR ";
            }
            
            if (filwhere.length() > 3) {
                sql = sql + " AND (" + filwhere.substring(0, filwhere.length() - 3).trim() + ") ";
            }
            
            if (data1 != null) {
                sql = sql + "AND data >= '" + data1 + " 00:00:00' ";
            }
            
            if (data2 != null) {
                sql = sql + "AND data <= '" + data2 + " 23:59:59' ";
            }
            
            if (!bss.equals("BS")) {
                sql = sql + "AND tipotr = '" + bss + "' ";
            }
            
            sql = sql + " order by user,data";
            
            ResultSet rs = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql);
            ArrayList<String> usl = new ArrayList<>();
            while (rs.next()) {
                usl.add(rs.getString("user"));
            }
            
            String sql1 = "SELECT * FROM oc_lista where errors ='Y' ";
            
            if (filwhere.length() > 3) {
                sql1 = sql1 + " AND (" + filwhere.substring(0, filwhere.length() - 3).trim() + ") ";
            }
            
            if (data1 != null) {
                sql1 = sql1 + "AND data >= '" + data1 + " 00:00:00' ";
            }
            if (data2 != null) {
                sql1 = sql1 + "AND data <= '" + data2 + " 23:59:59' ";
            }
            sql1 = sql1 + " ORDER BY data";
            ResultSet rs1 = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql1);
            while (rs1.next()) {
                usl.add(rs1.getString("user"));
            }
            
            rs.beforeFirst();
            rs1.beforeFirst();
            removeDuplicatesAL(usl);
            
            ArrayList<Users> lius = list_all_users();
            ArrayList<Figures> lifi = list_all_figures();
            
            for (int i = 0; i < usl.size(); i++) {
                String cl = usl.get(i);
                Users cls = Engine.get_user(cl, lius);
                C_CashierPerformance_value cp = new C_CashierPerformance_value();
                cp.setUser(cls.getCod() + " " + cls.getDe_cognome() + " " + cls.getDe_nome());
                int setFull = 0;
                int set0 = 0;
                int setnTrans = 0;
                int setNff = 0;
                int setDel = 0;
                ArrayList<String> data = new ArrayList<>();
                ArrayList<Integer> val = new ArrayList<>();
                if (bss.equals("B") || bss.equals("S")) {
                    for (String[] fasce1 : fasce) {
                        val.add(0);
                    }
                } else {
                    val.add(0);
                }
                
                double setVolume = 0.00;
                double setComFix = 0.00;
                
                while (rs.next()) {
                    if (rs.getString("user").equals(cl)) {
                        if (rs.getString("del_fg").equals("1")) {
                            setDel++;
                        } else {
                            if (rs.getString("fix").equals("0.00")) {
                                setNff++;
                            }
                            setnTrans++;
                            setVolume = setVolume + fd(rs.getString("total"));
                            setComFix = setComFix + fd(rs.getString("commission"));
                            ResultSet rs2 = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery("SELECT * FROM ch_transaction_valori WHERE cod_tr = '" + rs.getString("cod") + "'");
                            
                            double fullvalue = 0.00;
                            double comvalue = 0.00;
                            int rowvalue = 0;
                            while (rs2.next()) {
                                rowvalue++;
                                String ki = rs2.getString("supporto");
                                Figures f1 = Engine.get_figures(lifi, ki);
                                if (rs.getString("tipotr").equals("B")) {
                                    fullvalue = fullvalue + fd(f1.getCommissione_acquisto());
                                } else {
                                    fullvalue = fullvalue + fd(f1.getCommissione_vendita());
                                }
                                comvalue = comvalue + fd(rs2.getString("com_perc"));
                            }
                            if (rowvalue > 0) {
                                fullvalue = fullvalue / rowvalue;
                                comvalue = comvalue / rowvalue;
                            }
                            
                            if (comvalue == 0.0) {
                                set0++;
                            } else if (comvalue == fullvalue) {
                                setFull++;
                            } else if (bss.equals("BS")) {
                                int neg = val.get(0);
                                neg++;
                                val.set(0, neg);
                            } else if (bss.equals("B") || bss.equals("S")) {
                                boolean found = false;
                                for (int x = 0; x < fasce.size(); x++) {
                                    String[] vx = fasce.get(x);
                                    if (comvalue >= fd(vx[1]) && comvalue <= fd(vx[2])) {
                                        found = true;
                                        int vv = val.get(x);
                                        vv++;
                                        val.set(x, vv);
                                        break;
                                    }
                                }
                                if (!found) {
                                    set0++;
                                }
                            }
                        }
                        
                    }
                }
                
                data.add(set0 + "");
                for (int x = 0; x < val.size(); x++) {
                    data.add(valueOf(val.get(x)));
                }
                
                rs.beforeFirst();
                
                int setErr = 0;
                double setTotErr = 0.00;
                while (rs1.next()) {
                    if (rs1.getString("user").equals(cl)) {
                        setErr++;
                        ArrayList<String[]> err_value = list_oc_errors(rs1.getString("cod"));
                        for (int y = 0; y < err_value.size(); y++) {
                            String[] errv = err_value.get(y);
                            if (errv[1].equals("CH")) {
                                if (oper.equals("*")) {
                                    setTotErr = setTotErr + roundDouble(fd(errv[7]) * fd(errv[8]), 2);
                                } else {
                                    setTotErr = setTotErr + roundDouble(fd(errv[7]) / fd(errv[8]), 2);
                                }
                            }
                        }
                    }
                }
                
                rs1.beforeFirst();
                
                cp.setFull(setFull + "");
                cp.setnTrans(setnTrans + "");
                cp.setNff(setNff + "");
                cp.setDel(setDel + "");
                cp.setVolume(roundDoubleandFormat(setVolume, 2) + "");
                cp.setComFix(roundDoubleandFormat(setComFix, 2) + "");
                cp.setErr(setErr + "");
                cp.setTotErr(roundDoubleandFormat(setTotErr, 2) + "");
                cp.setDati2(data);
                
                out.add(cp);
                
            }
            
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @param data1
     * @param filiale
     * @param curr
     * @return
     */
    public ArrayList<C_SizeAndQuantity_value> list_C_SizeAndQuantity_value(String data1, String filiale, String curr) {
        ArrayList<C_SizeAndQuantity_value> out = new ArrayList<>();
        try {
            String sql = "SELECT f.filiale,f.cod,f.data,f.id,f.user,f.fg_tipo,f.till FROM (SELECT till,"
                    + " MAX(data) AS maxd FROM oc_lista WHERE data like '" + data1 + "%'  AND filiale = '" + filiale + "' GROUP BY till) AS x INNER JOIN oc_lista AS f ON f.till = x.till"
                    + " AND f.data = x.maxd AND f.data like '" + data1 + "%' AND f.filiale = '" + filiale + "' AND f.fg_tipo = 'C' ORDER BY f.till";
            
            List<String> tagli = getfigures_sizecuts_enabled(curr, filiale).stream().map(t1 -> t1.getIp_taglio()).collect(toList());
            
            ResultSet rs = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql);
            for (int i = 0; i < tagli.size(); i++) {
                
                String tg = tagli.get(i);
                C_SizeAndQuantity_value saq = new C_SizeAndQuantity_value();
                
                saq.setCurrency(curr);
                saq.setKind("01");
                saq.setSize(tg);
                
                double setQty = 0;
                double setTotal = 0.00;
                
                while (rs.next()) {
                    
                    String sql1 = "SELECT ip_taglio,ip_quantity,ip_value FROM oc_change_tg WHERE valuta = '" + curr
                            + "' AND cod_oc = '" + rs.getString("f.cod") + "' ORDER BY cod_oc ASC,valuta ASC,CAST(ip_taglio AS DECIMAL(12,2)) DESC";
                    ResultSet rs1 = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql1);
                    
                    while (rs1.next()) {
                        if (rs1.getString(1).equals(tg)) {
                            setQty = setQty + fd(rs1.getString(2));
                            setTotal = setTotal + fd(rs1.getString(3));
                        }
                    }
                }
                rs.beforeFirst();
                
                saq.setQty(roundDoubleandFormat(setQty, 0));
                saq.setTotal(roundDoubleandFormat(setTotal, 2));
                out.add(saq);
            }
            
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @param data1
     * @param data2
     * @param branch
     * @return
     */
    public C_ChangeMovimentForAgency_value list_C_ChangeMovimentForAgency_value(String data1, String data2, ArrayList<String> branch) {
        try {
            String sql = "SELECT * FROM ch_transaction where agency='1' and del_fg='0' ";
            String filwhere = "";
            
            for (int i = 0; i < branch.size(); i++) {
                filwhere = filwhere + "filiale='" + branch.get(i) + "' OR ";
            }
            
            if (filwhere.length() > 3) {
                sql = sql + " AND (" + filwhere.substring(0, filwhere.length() - 3).trim() + ") ";
            }
            
            if (data1 != null) {
                sql = sql + "AND data >= '" + data1 + " 00:00:00' ";
            }
            
            if (data2 != null) {
                sql = sql + "AND data <= '" + data2 + " 23:59:59' ";
            }
            
            sql = sql + " order by agency_cod,filiale,data";
            ResultSet rs = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql);
            ArrayList<String> agl = new ArrayList<>();
            while (rs.next()) {
                agl.add(rs.getString("agency_cod"));
            }
            rs.beforeFirst();
            removeDuplicatesAL(agl);
            C_ChangeMovimentForAgency_value cb1 = new C_ChangeMovimentForAgency_value();
            ArrayList<C_Agency_value> d1 = new ArrayList<>();
            ArrayList<CustomerKind> lick = list_customerKind();
            ArrayList<Figures> lifi = list_all_figures();
            for (int i = 0; i < agl.size(); i++) {
                String ag = agl.get(i);
                Agency out = get_agency(ag);
                
                C_Agency_value cv = new C_Agency_value();
                cv.setId_ag(ag);
                cv.setDe_ag(out.getDe_agenzia());
                ArrayList<C_ChangeMovimentForAgency_value> dati = new ArrayList<>();
                while (rs.next()) {
                    if (rs.getString("agency_cod").equals(ag)) {
                        ResultSet rs1 = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery("SELECT * FROM ch_transaction_valori WHERE cod_tr = '" + rs.getString("cod") + "'");
                        while (rs1.next()) {
                            
                            C_ChangeMovimentForAgency_value cmdfb = new C_ChangeMovimentForAgency_value();
                            cmdfb.setBranch(rs.getString("filiale"));
                            cmdfb.setTransaction(rs.getString("id"));
                            cmdfb.setDate(formatStringtoStringDate(rs.getString("data"), patternsqldate, patternnormdate));
                            cmdfb.setUser(rs.getString("user"));
                            cmdfb.setCustomerKind(Engine.get_customerKind(lick, rs.getString("tipocliente")).getDe_tipologia_clienti());
                            cmdfb.setCurrency(rs1.getString("valuta"));
                            cmdfb.setKind(rs1.getString("supporto") + " " + Engine.get_figures(lifi, rs1.getString("supporto")).getDe_supporto());
                            cmdfb.setQty(rs1.getString("quantita"));
                            cmdfb.setAmount(rs1.getString("total"));
                            cmdfb.setPercCom(rs1.getString("com_perc_tot"));
                            cmdfb.setCom(rs1.getString("tot_com"));
                            cmdfb.setNt(rs1.getString("net"));
                            cmdfb.setBuy(roundDoubleandFormat(fd(rs1.getString("total")) - fd(rs1.getString("spread")), 2));
                            if (rs.getString("tipotr").equals("B")) {
                                if (newpread) {
                                    cmdfb.setSpread(rs1.getString("spread"));
                                } else {
                                    cmdfb.setSpread("0.00");
                                }
                            } else {
                                cmdfb.setSpread(rs1.getString("spread"));
                            }
                            
                            cmdfb.setComFix(rs1.getString("fx_com"));
                            if (rs.getString("del_fg").equals("0")) {
                                cmdfb.setDelete("");
                            } else {
                                cmdfb.setDelete(formatStringtoStringDate(rs.getString("del_dt"), patternsqldate, patternnormdate) + " " + rs.getString("del_motiv"));
                            }
                            dati.add(cmdfb);
                        }
                    }
                }
                cv.setDati(dati);
                rs.beforeFirst();
                d1.add(cv);
            }
            cb1.setDati(d1);
            return cb1;
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return new C_ChangeMovimentForAgency_value();
    }

    /**
     *
     * @param data1
     * @param data2
     * @param allbr
     * @return
     */
    public ArrayList<C_TransactionRegisterDetail_value> list_C_TransactionRegisterDetail_value(
            String data1, String data2, ArrayList<String> branch) {
        ArrayList<C_TransactionRegisterDetail_value> out = new ArrayList<>();
        try {
            
            ArrayList<String[]> nck = nc_kind();
            
            String loc[] = get_local_currency();
            
            branch.add("000");
            
            String sql = "SELECT * FROM ch_transaction where del_fg='0' ";
            
            String filwhere = "";
            for (int i = 0; i < branch.size(); i++) {
                filwhere = filwhere + "filiale='" + branch.get(i) + "' OR ";
            }
            
            if (filwhere.length() > 3) {
                sql = sql + " AND (" + filwhere.substring(0, filwhere.length() - 3).trim() + ") ";
            }
            
            if (data1 != null) {
                sql = sql + "AND data >= '" + data1 + " 00:00:00' ";
            }
            
            if (data2 != null) {
                sql = sql + "AND data <= '" + data2 + " 23:59:59' ";
            }
            
            ResultSet rs = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql);
            while (rs.next()) {
                
                String sql1 = "SELECT * FROM ch_transaction_valori WHERE cod_tr= '" + rs.getString("cod") + "' order by valuta,supporto";
                ResultSet rs1 = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql1);
                while (rs1.next()) {
                    C_TransactionRegisterDetail_value ncmfb = new C_TransactionRegisterDetail_value();
                    
                    String start = "";
                    
                    if (rs.getString("tipotr").equals("B")) {
                        start = "-";
                    }
                    
                    ncmfb.setFiliale(rs.getString("filiale"));
                    ncmfb.setTill(rs.getString("till"));
                    ncmfb.setUser(rs.getString("user"));
                    ncmfb.setDate(formatStringtoStringDate(rs.getString("data"), patternsqldate, patternnormdate));
                    ncmfb.setDt(parseStringDate(rs.getString("data"), patternsqldate));
                    ncmfb.setCur(rs1.getString("valuta"));
                    ncmfb.setKind(formatType(rs.getString("tipotr")));
                    ncmfb.setAmountqty(start + rs1.getString("quantita"));
                    ncmfb.setRate(rs1.getString("rate"));
                    ncmfb.setTotal(start + rs1.getString("total"));
                    ncmfb.setPerc(rs1.getString("com_perc_tot"));
                    ncmfb.setCommfee(rs1.getString("tot_com"));
                    ncmfb.setRefundoff(rs.getString("round"));
                    ncmfb.setPayinout(start + rs1.getString("net"));
                    out.add(ncmfb);
                }
            }
            
            sql = "SELECT * FROM nc_transaction where del_fg='0' ";
            filwhere = "";
            for (int i = 0; i < branch.size(); i++) {
                filwhere = filwhere + "filiale='" + branch.get(i) + "' OR ";
            }
            
            if (filwhere.length() > 3) {
                sql = sql + " AND (" + filwhere.substring(0, filwhere.length() - 3).trim() + ") ";
            }
            
            if (data1 != null) {
                sql = sql + "AND data >= '" + data1 + " 00:00:00' ";
            }
            
            if (data2 != null) {
                sql = sql + "AND data <= '" + data2 + " 23:59:59' ";
            }
            
            ResultSet rs1 = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql);
            
            while (rs1.next()) {
                C_TransactionRegisterDetail_value ncmfb = new C_TransactionRegisterDetail_value();
                
                if (rs1.getString("fg_tipo_transazione_nc").equals("1")) {
                    ncmfb.setTotal(rs1.getString("netto"));
                    ncmfb.setCommfee(rs1.getString("commissione"));
                    ncmfb.setPayinout(rs1.getString("total"));
                } else {
                    ncmfb.setTotal(rs1.getString("total"));
                    ncmfb.setCommfee(rs1.getString("commissione"));
                    ncmfb.setPayinout(rs1.getString("total"));
                }
                
                String start = "";
                
                if (ncmfb.getTotal().contains("-")) {
                    start = "-";
                }
                
                ncmfb.setFiliale(rs1.getString("filiale"));
                ncmfb.setTill(rs1.getString("till"));
                ncmfb.setUser(rs1.getString("user"));
                ncmfb.setDate(formatStringtoStringDate(rs1.getString("data"), patternsqldate, patternnormdate));
                ncmfb.setDt(parseStringDate(rs1.getString("data"), patternsqldate));
                ncmfb.setCur(loc[0]);
                ncmfb.setKind(formatAL(rs1.getString("fg_tipo_transazione_nc"), nck, 1));
                
                String q = rs1.getString("quantita");
                if (q.equals("0") || q.equals("0.00")) {
                    q = "1.00";
                }
                
                ncmfb.setAmountqty(start + q);
                
                ncmfb.setRate("-");
                ncmfb.setPerc("-");
                ncmfb.setRefundoff("-");
                out.add(ncmfb);
            }
            
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
        
        sort(out);
        
        return out;
    }

    /**
     *
     * @param data1
     * @param data2
     * @param branch
     * @param tipor
     * @param allbr
     * @return
     */
    public ArrayList<C_AnalysisDetailsTransactionCertificationExtraCEEforBranchAndPeriod_value>
            list_C_AnalysisDetailsTransactionCertificationExtraCEEforBranchAndPeriod_new(String data1, String data2,
                    ArrayList<String> branch, String tipor, ArrayList<Branch> allbr) {
        
        ArrayList<C_AnalysisDetailsTransactionCertificationExtraCEEforBranchAndPeriod_value> out = new ArrayList<>();
        try {
            String sql = "SELECT * FROM ch_transaction where del_fg='0' ";
            String filwhere = "";
            for (int i = 0; i < branch.size(); i++) {
                filwhere = filwhere + "filiale='" + branch.get(i) + "' OR ";
            }
            
            if (filwhere.length() > 3) {
                sql = sql + " AND (" + filwhere.substring(0, filwhere.length() - 3).trim() + ") ";
            }
            
            if (data1 != null) {
                sql = sql + "AND data >= '" + data1 + " 00:00:00' ";
            }
            
            if (data2 != null) {
                sql = sql + "AND data <= '" + data2 + " 23:59:59' ";
            }
            
            sql = sql + " ORDER BY cl_cod,filiale,tipotr,data";
            
            ArrayList<String> clientlist = new ArrayList<>();
            ArrayList<CustomerKind> listck = list_customerKind();
            
            ResultSet rs = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql);
            
            while (rs.next()) {
                clientlist.add(rs.getString("cl_cod"));
            }
            rs.beforeFirst();
            ArrayList<Ch_transaction_value> total = new ArrayList<>();
            
            removeDuplicatesAL(clientlist);
            for (int x = 0; x < clientlist.size(); x++) {
                String clcod = clientlist.get(x);
                double vcl = 0.00;
                double totcl = 0.00;
                ArrayList<Ch_transaction_value> temp = new ArrayList<>();
                while (rs.next()) {
                    if (clcod.equals(rs.getString("cl_cod"))) {
                        CustomerKind fi = Engine.get_customerKind(listck, rs.getString("tipocliente"));
                        double so = fd(fi.getIp_soglia_extraCEE_certification());
                        if (so > vcl) {
                            vcl = so;
                        }
                        if (rs.getString("tipotr").equals("S")) {
                            totcl += fd(rs.getString("pay"));
                        } else {
                            totcl += fd(rs.getString("total"));
                        }
                        
                        boolean add = false;
                        ArrayList<Ch_transaction_value> trv = query_transaction_value(rs.getString("cod"));
                        
                        if (rs.getString("tipotr").equals("S")) {
                            if (tipor.equals("01")) {
                                add = true;
                            } else if (rs.getString("localfigures").equals("06") || rs.getString("localfigures").equals("07")
                                    || rs.getString("localfigures").equals("08")) {
                                add = true;
                            }
                        } else {
                            add = true;
                        }
                        if (add) {
                            for (int i = 0; i < trv.size(); i++) {
                                Ch_transaction_value va  = trv.get(i);
                                if (tipor.equals("01")) {
                                    if (!va.getSupporto().equals("04")) {
                                        temp.add(va);
                                    }
                                } else if (va.getSupporto().equals("04") || va.getTrorig().getLocalfigures().equals("06") || va.getTrorig().getLocalfigures().equals("07") || va.getTrorig().getLocalfigures().equals("08")) {
                                    temp.add(va);
                                }
                            }
                        }
                    }
                }
                rs.beforeFirst();
                if (totcl > vcl) {
                    total.addAll(temp);
                }
            }
            
            sort(total);
            
            ArrayList<Figures> allfig = list_all_figures();
            
            for (int i = 0; i < total.size(); i++) {
                Client cl1 = query_Client_transaction(total.get(i).getTrorig().getCod(), total.get(i).getTrorig().getCl_cod());
                C_AnalysisDetailsTransactionCertificationExtraCEEforBranchAndPeriod_value cva
                        = new C_AnalysisDetailsTransactionCertificationExtraCEEforBranchAndPeriod_value();
                cva.setBranch(formatBankBranch(total.get(i).getTrorig().getFiliale(), "BR", null, allbr, null));
                cva.setType(formatType(total.get(i).getTrorig().getTipotr()));
                cva.setTransaction(total.get(i).getTrorig().getId());
                cva.setDate(formatStringtoStringDate(total.get(i).getTrorig().getData(), patternsqldate, patternnormdate));
                cva.setUser(total.get(i).getTrorig().getUser());
                cva.setCurrency(total.get(i).getValuta());
                cva.setKind(total.get(i).getSupporto() + " - " + Engine.get_figures(allfig, total.get(i).getSupporto()).getDe_supporto());
                cva.setQty(total.get(i).getQuantita());
                cva.setEquivalent(total.get(i).getNet());
                cva.setClient(cl1.getNome().toUpperCase() + " " + cl1.getCognome().toUpperCase());
                cva.setCommission(total.get(i).getTot_com());
                out.add(cva);
            }
            
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @param data1
     * @param data2
     * @param branch
     * @param tipor
     * @param allbr
     * @return
     */
    public ArrayList<C_AnalysisDetailsTransactionCertificationExtraCEEforBranchAndPeriod_value>
            list_C_AnalysisDetailsTransactionCertificationExtraCEEforBranchAndPeriod(String data1, String data2,
                    ArrayList<String> branch, String tipor, ArrayList<Branch> allbr) {
        
        ArrayList<C_AnalysisDetailsTransactionCertificationExtraCEEforBranchAndPeriod_value> out = new ArrayList<>();
        try {
            
            String sql = "SELECT * FROM ch_transaction where del_fg='0' ";
            String filwhere = "";
            for (int i = 0; i < branch.size(); i++) {
                filwhere = filwhere + "filiale='" + branch.get(i) + "' OR ";
            }
            
            if (filwhere.length() > 3) {
                sql = sql + " AND (" + filwhere.substring(0, filwhere.length() - 3).trim() + ") ";
            }
            
            if (data1 != null) {
                sql = sql + "AND data >= '" + data1 + " 00:00:00' ";
            }
            
            if (data2 != null) {
                sql = sql + "AND data <= '" + data2 + " 23:59:59' ";
            }
            
            sql = sql + " ORDER BY filiale,tipotr,data";
            
            ArrayList<Ch_transaction_value> val1 = new ArrayList<>();
            
            ArrayList<CustomerKind> listck = list_customerKind();
            
            ResultSet rs = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql);
            
            while (rs.next()) {
                CustomerKind fi = Engine.get_customerKind(listck, rs.getString("tipocliente"));
                double so = fd(fi.getIp_soglia_extraCEE_certification());
                boolean sogliasuperata;
                if (rs.getString("tipotr").equals("S")) {
                    sogliasuperata = fd(rs.getString("pay")) >= so;
                } else {
                    sogliasuperata = fd(rs.getString("total")) >= so;
                }
                if (sogliasuperata) {
                    
                    boolean add = false;
                    ArrayList<Ch_transaction_value> trv = query_transaction_value(rs.getString("cod"));
                    
                    if (rs.getString("tipotr").equals("S")) {
                        if (tipor.equals("01")) {
                            add = true;
                        } else if (rs.getString("localfigures").equals("06") || rs.getString("localfigures").equals("07")
                                || rs.getString("localfigures").equals("08")) {
                            add = true;
                        }
                    } else {
                        add = true;
                    }
                    
                    if (add) {
                        for (int i = 0; i < trv.size(); i++) {
                            Ch_transaction_value va  = trv.get(i);
                            
                            if (tipor.equals("01")) {
                                if (!va.getSupporto().equals("04")) {

//                                    if (fd(va.getTotal()) >= so) {
                                    val1.add(va);
//                                    }
                                }
                            } else if (va.getSupporto().equals("04") || va.getTrorig().getLocalfigures().equals("06") || va.getTrorig().getLocalfigures().equals("07") || va.getTrorig().getLocalfigures().equals("08")) {
//                                if (fd(va.getTotal()) >= so) {
                                val1.add(va);
//                                }
                            }
                        }
                    }
                }
                
            }
            
            sort(val1);
            
            ArrayList<Figures> allfig = list_all_figures();
            
            for (int i = 0; i < val1.size(); i++) {
                Client cl1 = query_Client_transaction(val1.get(i).getTrorig().getCod(), val1.get(i).getTrorig().getCl_cod());
                
                C_AnalysisDetailsTransactionCertificationExtraCEEforBranchAndPeriod_value cva
                        = new C_AnalysisDetailsTransactionCertificationExtraCEEforBranchAndPeriod_value();
                cva.setBranch(formatBankBranch(val1.get(i).getTrorig().getFiliale(), "BR", null, allbr, null));
                cva.setType(formatType(val1.get(i).getTrorig().getTipotr()));
                cva.setTransaction(val1.get(i).getTrorig().getId());
                cva.setDate(formatStringtoStringDate(val1.get(i).getTrorig().getData(), patternsqldate, patternnormdate));
                cva.setUser(val1.get(i).getTrorig().getUser());
                cva.setCurrency(val1.get(i).getValuta());
                cva.setKind(val1.get(i).getSupporto() + " - " + Engine.get_figures(allfig, val1.get(i).getSupporto()).getDe_supporto());
                cva.setQty(val1.get(i).getQuantita());
                cva.setEquivalent(val1.get(i).getNet());
                cva.setClient(cl1.getNome() + " " + cl1.getCognome());
                cva.setCommission(val1.get(i).getTot_com());
                out.add(cva);
                
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
            
        }
        return out;
        
    }

    /**
     *
     * @param data1
     * @param data2
     * @param branch
     * @param curr
     * @param state
     * @param diff
     * @return
     */
    public ArrayList<C_Interbranch_value> list_C_Interbranch_value(String data1, String data2, ArrayList<String> branch, String curr,
            ArrayList<String> state, String diff) {
        
        ArrayList<C_Interbranch_value> out = new ArrayList<>();
        String local = get_local_currency()[0];
        ArrayList<NC_category> nc_cat = query_nc_category_filial("000", null);
        try {
            String sql = "SELECT * FROM et_change where fg_brba='BR' AND fg_annullato='0' ";
            String filwhere = "";
            for (int i = 0; i < branch.size(); i++) {
                filwhere = filwhere + "(filiale='" + branch.get(i) + "' AND fg_tofrom='T') OR (cod_dest='" + branch.get(i) + "' AND fg_tofrom='F') OR ";
            }
            
            if (filwhere.length() > 3) {
                sql = sql + " AND (" + filwhere.substring(0, filwhere.length() - 3).trim() + ") ";
            }
            
            if (data1 != null) {
                sql = sql + "AND dt_it >= '" + data1 + " 00:00:00' ";
            }
            
            if (data2 != null) {
                sql = sql + "AND dt_it <= '" + data2 + " 23:59:59' ";
            }
            
            sql = sql + " order by fg_tofrom,dt_it";
            
            ResultSet rs = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql);
            ArrayList<String[]> elenco = new ArrayList<>();
            ArrayList<String> fromgestiti = new ArrayList<>();
            while (rs.next()) {
                String[] val = {rs.getString("cod"), rs.getString("fg_tofrom"),
                    rs.getString("cod_in"), rs.getString("filiale"), rs.getString("dt_it"),
                    rs.getString("id"), rs.getString("cod_dest")};
                elenco.add(val);
            }
            
            for (int i = 0; i < elenco.size(); i++) {
                String[] val = elenco.get(i);
                if (val[1].equals("T")) {
                    boolean found = false;
                    double am_to = 0.00;
                    double am_fr = 0.00;
                    boolean local_curr = false;
                    boolean foreign_curr = false;
                    String codfrom = "";
                    boolean ch = false;
                    ResultSet rs1 = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery("SELECT * FROM et_change_valori where cod = '" + val[0] + "'");
                    while (rs1.next()) {
                        ch = true;
                        am_to = am_to + fd(rs1.getString("ip_total"));
                        if (rs1.getString("currency").equals(local)) {
                            local_curr = true;
                        } else {
                            foreign_curr = true;
                        }
                    }
                    if (!ch) {
                        rs1 = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery("SELECT * FROM et_nochange_valori where cod = '" + val[0] + "'");
                        while (rs1.next()) {
                            NC_category nc1 = getNC_category(nc_cat, rs1.getString("causale_nc"));
                            double d = fd(rs1.getString("ip_quantity")) * fd(nc1.getIp_prezzo_nc());
                            am_to = am_to + d;
                            local_curr = true;
                        }
                    }
                    for (int j = 0; j < elenco.size() && !found; j++) {
                        String[] oth = elenco.get(j);
                        
                        if (val[0].equals(oth[2]) && oth[1].equals("F")) {
                            found = true;
                            codfrom = oth[0];
                            boolean ch2 = false;
                            ResultSet rs2 = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery("SELECT * FROM et_change_valori where cod = '" + oth[0] + "'");
                            while (rs2.next()) {
                                ch2 = true;
                                am_fr = am_fr + fd(rs2.getString("ip_total"));
                                if (rs2.getString("currency").equals(local)) {
                                    local_curr = true;
                                } else {
                                    foreign_curr = true;
                                }
                            }
                            if (!ch2) {
                                rs2 = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery("SELECT * FROM et_nochange_valori where cod = '" + val[0] + "'");
                                while (rs2.next()) {
                                    NC_category nc1 = getNC_category(nc_cat, rs2.getString("causale_nc"));
                                    double d = fd(rs2.getString("ip_quantity")) * fd(nc1.getIp_prezzo_nc());
                                    am_fr = am_fr + d;
                                    local_curr = true;
                                }
                            }
                            
                            break;
                        }
                    }
                    
                    C_Interbranch_value inter = new C_Interbranch_value();
                    inter.setCode(val[0]);
                    inter.setType(val[1]);
                    inter.setBranchTo(val[3]);
                    inter.setDateTo(formatStringtoStringDate(val[4], patternsqldate, patternnormdate));
                    inter.setTotransfno(val[3] + val[5]);
                    inter.setTotTo(roundDoubleandFormat(am_to, 2) + "");
                    inter.setBranchFrom(val[6]);
                    
                    if (found) {
                        String br_fr = "";
                        String dt_fr = "";
                        String id_fr = "";
                        for (int j = 0; j < elenco.size(); j++) {
                            if (elenco.get(j)[0].equals(codfrom)) {
                                br_fr = elenco.get(j)[3];
                                dt_fr = elenco.get(j)[4];
                                id_fr = elenco.get(j)[5];
                                fromgestiti.add(codfrom);
                                break;
                            }
                        }
                        
                        inter.setDateFrom(formatStringtoStringDate(dt_fr, patternsqldate, patternnormdate));
                        inter.setFromtransno(br_fr + id_fr);
                        inter.setTotFrom(roundDoubleandFormat(am_fr, 2) + "");
                        inter.setState("OK");
                        inter.setCodefrom(codfrom);
                        ///valori
                    } else {
                        //no - from
                        inter.setDateFrom("-");
                        inter.setFromtransno("-");
                        inter.setTotFrom("-");
                        inter.setState("KO FROM");
                        inter.setCodefrom("-");
                    }
                    boolean addcurr = false;
                    boolean addstat = false;
                    
                    if (curr.equals("...")) {
                        addcurr = true;
                    } else if (curr.equals("01")) {
                        if (local_curr) {
                            addcurr = true;
                        }
                    } else if (foreign_curr) {
                        addcurr = true;
                    }
                    
                    if (state.contains("OK")) {
                        if (inter.getState().equals("OK")) {
                            addstat = true;
                        }
                    }
                    if (state.contains("KOF")) {
                        if (inter.getState().equals("KO FROM")) {
                            addstat = true;
                        }
                    }
                    if (state.contains("KOT")) {
                        if (inter.getState().equals("KO TO")) {
                            addstat = true;
                        }
                    }
                    
                    if (addcurr && addstat) {
                        out.add(inter);
                    }
                    
                } else if (!fromgestiti.contains(val[0])) {
                    
                    double am_fr = 0.00;
                    boolean local_curr = false;
                    boolean foreign_curr = false;
                    
                    C_Interbranch_value inter = new C_Interbranch_value();
                    inter.setCodefrom(val[0]);
                    inter.setCode("-");
                    inter.setType(val[1]);
                    inter.setBranchTo(val[6]);
                    inter.setDateTo("-");
                    inter.setTotransfno("-");
                    inter.setTotTo("-");
                    boolean ch2 = false;
                    ResultSet rs2 = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery("SELECT * FROM et_change_valori where cod = '" + val[0] + "'");
                    while (rs2.next()) {
                        ch2 = true;
                        am_fr = am_fr + fd(rs2.getString("ip_total"));
                        if (rs2.getString("currency").equals(local)) {
                            local_curr = true;
                        } else {
                            foreign_curr = true;
                        }
                    }
                    
                    if (!ch2) {
                        rs2 = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery("SELECT * FROM et_nochange_valori where cod = '" + val[0] + "'");
                        while (rs2.next()) {
                            NC_category nc1 = getNC_category(nc_cat, rs2.getString("causale_nc"));
                            double d = fd(rs2.getString("ip_quantity")) * fd(nc1.getIp_prezzo_nc());
                            am_fr = am_fr + d;
                            local_curr = true;
                        }
                    }
                    
                    inter.setDateFrom(formatStringtoStringDate(val[4], patternsqldate, patternnormdate));
                    inter.setFromtransno(val[3] + val[5]);
                    inter.setBranchFrom(val[3]);
                    inter.setTotFrom(roundDoubleandFormat(am_fr, 2) + "");
                    inter.setState("KO TO");
                    
                    boolean addcurr = false;
                    boolean addstat = false;
                    
                    if (curr.equals("...")) {
                        addcurr = true;
                    } else if (curr.equals("01")) {
                        if (local_curr) {
                            addcurr = true;
                        }
                    } else if (foreign_curr) {
                        addcurr = true;
                    }
                    
                    if (state.contains("OK")) {
                        if (inter.getState().equals("OK")) {
                            addstat = true;
                        }
                    }
                    if (state.contains("KOF")) {
                        if (inter.getState().equals("KO FROM")) {
                            addstat = true;
                        }
                    }
                    if (state.contains("KOT")) {
                        if (inter.getState().equals("KO TO")) {
                            addstat = true;
                        }
                    }
                    
                    if (addcurr && addstat) {
                        out.add(inter);
                    }
                    
                }
            }
            
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @param tipo
     * @param filiale
     * @param kind
     * @param cur
     * @return
     */
    public ArrayList<Stock> list_stock(String tipo, String filiale, String kind, String cur) {
        ArrayList<Stock> li = new ArrayList<>();
        try {
            String sql = "SELECT * FROM stock WHERE tipo = ? AND filiale = ? AND kind = ? AND cod_value = ? ORDER BY date ASC";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, tipo);
            ps.setString(2, filiale);
            ps.setString(3, kind);
            ps.setString(4, cur);
            out.println("rc.so.db.Db_Master.list_stock() " + ps.toString());
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                Stock st = new Stock();
                st.setCodice(rs.getString("codice"));
                st.setTotal(rs.getString("total"));
                st.setRate(rs.getString("rate"));
                li.add(st);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return li;
    }

    /**
     *
     * @param filiale
     * @param kind
     * @param cur
     * @return
     */
    public ArrayList<Stock> list_stock(String filiale, String kind, String cur) {
        ArrayList<Stock> li = new ArrayList<>();
        try {
            String sql = "SELECT codice,total,rate,date,tipo,idoperation FROM stock WHERE filiale = ? AND kind = ? AND cod_value = ? and total <> ? ORDER BY date ASC";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, filiale);
            ps.setString(2, kind);
            ps.setString(3, cur);
            ps.setString(4, "0.00");
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                Stock st = new Stock();
                st.setIdoperation(rs.getString("idoperation"));
                st.setTipostock(rs.getString("tipo"));
                st.setCodice(rs.getString("codice"));
                st.setTotal(rs.getString("total"));
                st.setRate(rs.getString("rate"));
                st.setDate(rs.getString("date"));
                li.add(st);
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return li;
    }

    /**
     *
     * @param codtr
     * @param type
     * @param user
     * @return
     */
    public boolean insert_reprint(String codtr, String type, String user) {
        try {
            String ins = "INSERT INTO transaction_reprint (codtr,type,user) VALUES (?,?,?)";
            PreparedStatement ps = this.c.prepareStatement(ins, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, codtr);
            ps.setString(2, type);
            ps.setString(3, user);
            ps.execute();
            if (!filiale.equals("000")) {
                String dtoper = getNow();
                String dt_val = formatStringtoStringDate(dtoper, patternsqldate, patternnormdate);
                insert_aggiornamenti_mod(new Aggiornamenti_mod(
                        generaId(50), "000", dt_val, "0",
                        "PS", ps.toString(), "service", dtoper));
            }
            return true;
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return false;
    }

    /**
     *
     * @param data1
     * @param data2
     * @param cl_cog
     * @param cl_na
     * @param branch
     * @return
     */
    public ArrayList<Ch_transaction_doc> query_kyc_list(
            String data1, String data2,
            String cl_cog, String cl_na, String branch) {
        ArrayList<Ch_transaction_doc> out = new ArrayList<>();
        try {
            String sql = "SELECT * FROM ch_transaction_doc where tipodoc = '_macprofcl' and codtr in (select cod from ch_transaction WHERE del_fg='0') ";
            
            if (data1 != null) {
                sql = sql + "AND data_load >= '" + data1 + " 00:00:00' ";
            }
            
            if (data2 != null) {
                sql = sql + "AND data_load <= '" + data2 + " 23:59:59' ";
            }
            
            if (cl_cog.trim().length() > 0) {
                sql = sql + "AND client in (SELECT codcl FROM ch_transaction_client WHERE cognome = \"" + cl_cog + "\" ORDER BY timestamp DESC LIMIT 1) ";
            }
            if (cl_na.trim().length() > 0) {
                sql = sql + "AND client in (SELECT codcl FROM ch_transaction_client WHERE nome = = \"" + cl_na + "\" ORDER BY timestamp DESC LIMIT 1) ";
            }
            
            if (branch != null && !branch.equals("") && !branch.equals("...")) {
                sql = sql + "AND codtr like '" + branch + "%'";
            }
            
            sql = sql + "ORDER BY data_load DESC";
            ResultSet rs = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql);
            while (rs.next()) {
                Ch_transaction_doc ctd = new Ch_transaction_doc(rs.getString(1), rs.getString(2), rs.getString(3),
                        rs.getString(4), rs.getString(5), rs.getString(6), rs.getString(7), rs.getString(8));
                out.add(ctd);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @param filiale
     * @param codtill
     * @return
     */
    public Till get_single_Till(String filiale, String codtill) {
        try {
            String sql = "SELECT * FROM till WHERE filiale = ? AND cod = ?";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, filiale);
            ps.setString(2, codtill);
            ResultSet rs = ps.executeQuery();
            if (rs.next()) {
                return new Till(rs.getString("cod"), rs.getString("de_till"), false, false);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return null;
    }

    /**
     *
     * @param id
     * @param da
     * @param a
     * @param username
     * @return
     */
    public boolean upd_fasce_cashier_perf(String id, String da, String a, String username) {
        try {
            String upd = "UPDATE cash_perm SET da = ?, a = ? WHERE id = ?";
            PreparedStatement ps = this.c.prepareStatement(upd, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, da);
            ps.setString(2, a);
            ps.setString(3, id);
            int x = ps.executeUpdate();
            if (x > 0) {
                String dtoper = getNow();
                String dt_val = formatStringtoStringDate(dtoper, patternsqldate, patternnormdate);
                insertValue_agg_NOCENTRAL(ps, null, null, null, username);
            }
            return x > 0;
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return false;
    }

    /**
     *
     * @param tipo
     * @param status
     * @return
     */
    public ArrayList<String[]> list_fasce_cashier_perf(String tipo, String status) {
        ArrayList<String[]> li = new ArrayList<>();
        try {
            if (tipo == null) {
                tipo = "BS";
            }
            String sql = "SELECT * FROM cash_perm WHERE id <> '' ";
            if (!tipo.equals("BS")) {
                sql = sql + "AND tipo='" + tipo + "'";
            }
            if (status != null) {
                sql = sql + "AND fg_stato='" + status + "'";
            }
            sql = sql + " order by id";
            ResultSet rs = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql);
            while (rs.next()) {
                String[] ou = {rs.getString("id"),
                    formatMysqltoDisplay(rs.getString("da")),
                    formatMysqltoDisplay(rs.getString("a")),
                    rs.getString("fg_stato"), rs.getString("tipo")};
                li.add(ou);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return li;
    }

    /**
     *
     * @param branch
     * @param datad1
     * @param datad2
     * @param allbr
     * @param ftena
     * @return
     */
    public ArrayList<C_freeTaxPivotTotale_value> list_C_freeTaxPivotTotale_value(ArrayList<String> branch,
            String datad1,
            String datad2, ArrayList<Branch> allbr, ArrayList<NC_causal> ftena) {
        ArrayList<C_freeTaxPivotTotale_value> out = new ArrayList<>();
        try {
            
            String sql = "SELECT * FROM nc_transaction WHERE fg_tipo_transazione_nc='3' AND del_fg='0' ";
            
            String filwhere = "";
            for (int i = 0; i < branch.size(); i++) {
                filwhere = filwhere + "(filiale='" + branch.get(i) + "') OR ";
            }
            
            if (filwhere.length() > 3) {
                filwhere = " AND (" + filwhere.substring(0, filwhere.length() - 3).trim() + ") ";
            }
            
            sql = sql + filwhere;
            sql = sql + "AND data >= '" + datad1 + " 00:00:00' ";
            sql = sql + "AND data <= '" + datad2 + " 23:59:59' ";
            sql = sql + " ORDER BY filiale";
            
            ResultSet rs = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql);
            
            DateTimeFormatter formatter = forPattern(patternsql);
            
            String dateyear1 = formatter.parseDateTime(datad1).minusYears(1).toString(patternsql);
            String dateyear2 = formatter.parseDateTime(datad2).minusYears(1).toString(patternsql);

            //annoprec
            String sql2 = "SELECT * FROM freetax_pregresso WHERE filiale <>'000' ";
            sql2 = sql2 + filwhere;
            sql2 = sql2 + "AND dt_nc >= '" + dateyear1 + " 00:00:00' ";
            sql2 = sql2 + "AND dt_nc <= '" + dateyear2 + " 23:59:59' ";
            sql2 = sql2 + " ORDER BY filiale";
            
            ResultSet rs2 = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql2);
            
            for (int i = 0; i < branch.size(); i++) {
                String fil = branch.get(i);
                C_freeTaxPivotTotale_value res = new C_freeTaxPivotTotale_value();
                ArrayList<String> values = new ArrayList<>();
                values.add(fil);
                values.add(formatBankBranchReport(fil, "BR", null, allbr));
                for (int j = 0; j < ftena.size(); j++) {
                    NC_causal ca = ftena.get(j);
                    double setQtyYear = 0.00;
                    double setVolYear = 0.00;
                    double setVolPrevYear = 0.00;
                    double setQtyPrevYear = 0.00;
                    
                    while (rs.next()) {
                        if (rs.getString("filiale").equals(fil) && rs.getString("causale_nc").equals(ca.getCausale_nc())) {
                            setQtyYear = setQtyYear + parseDoubleR(rs.getString("quantita"));
                            setVolYear = setVolYear + parseDoubleR(rs.getString("total"));
                        }
                    }
                    
                    while (rs2.next()) {
                        if (rs2.getString("filiale").equals(fil) && rs2.getString("causale_nc").equals(ca.getCausale_nc())) {
                            setQtyPrevYear = setQtyPrevYear + parseDoubleR(rs2.getString("quantita"));
                            setVolPrevYear = setVolPrevYear + parseDoubleR(rs2.getString("totale"));
                        }
                    }
                    
                    values.add(valueOf(roundDoubleandFormat(setVolYear, 2)));
                    values.add(valueOf(roundDoubleandFormat(setQtyYear, 0)));
                    values.add(valueOf(roundDoubleandFormat(setVolPrevYear, 2)));
                    values.add(valueOf(roundDoubleandFormat(setQtyPrevYear, 0)));
                    
                    rs.beforeFirst();
                    rs2.beforeFirst();
                }
                
                res.setValues(values);
                out.add(res);
            }
            
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @param branch
     * @param datad1
     * @param datad2
     * @param allbr
     * @return
     */
    public ArrayList<C_FreeTax_BranchCausal_value> list_C_FreeTax_BranchCausal_value(String branch, String datad1, String datad2, ArrayList<Branch> allbr) {
        ArrayList<C_FreeTax_BranchCausal_value> out = new ArrayList<>();
        try {
            String sql = "SELECT * FROM nc_transaction WHERE fg_tipo_transazione_nc='3' AND del_fg='0' AND filiale = '" + branch + "' ";
            sql = sql + "AND data >= '" + datad1 + " 00:00:00' ";
            sql = sql + "AND data <= '" + datad2 + " 23:59:59' ";
            sql = sql + " ORDER BY causale_nc";
            
            ArrayList<String> listcausale_nc = new ArrayList<>();
            ArrayList<String> list_changetr = new ArrayList<>();
            ResultSet rs = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql);
            
            while (rs.next()) {
                listcausale_nc.add(rs.getString("causale_nc"));
                list_changetr.add(rs.getString("ch_transaction"));
            }
            rs.beforeFirst();
            
            DateTimeFormatter formatter = forPattern(patternsql);
            
            String dateyear1 = formatter.parseDateTime(datad1).minusYears(1).toString(patternsql);
            String dateyear2 = formatter.parseDateTime(datad2).minusYears(1).toString(patternsql);

            //annoprec
            String sql2 = "SELECT * FROM freetax_pregresso WHERE filiale='" + branch + "' ";
            sql2 = sql2 + "AND dt_nc >= '" + dateyear1 + " 00:00:00' ";
            sql2 = sql2 + "AND dt_nc <= '" + dateyear2 + " 23:59:59' ";
            sql2 = sql2 + " ORDER BY causale_nc";
            
            ResultSet rs2 = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql2);
            while (rs2.next()) {
                listcausale_nc.add(rs2.getString("causale_nc"));
            }
            rs2.beforeFirst();
            removeDuplicatesAL(listcausale_nc);
            removeDuplicatesAL(list_changetr);
            list_changetr.remove("-");
            ArrayList<NC_causal> lica = list_nc_causal_enabled();
            for (int i = 0; i < listcausale_nc.size(); i++) {
                String causal = listcausale_nc.get(i);
                NC_causal nc1 = getNC_causal(lica, causal, null);
                if (nc1 != null) {
                    
                    C_FreeTax_BranchCausal_value fta = new C_FreeTax_BranchCausal_value();
                    
                    fta.setId_filiale(branch);
                    fta.setDe_filiale(formatBankBranchReport(branch, "BR", null, allbr));
                    
                    fta.setDe_causal(nc1.getDe_causale_nc());
                    fta.setCausal(nc1.getCausale_nc() + " " + nc1.getDe_causale_nc());
                    fta.setValuta(nc1.getNc_de().equals("04"));
                    
                    double setQtyYear = 0;
                    double setVolYear = 0.00;
                    double setGMVolYear = 0.00;
                    
                    while (rs.next()) {
                        if (rs.getString("causale_nc").equals(causal)) {
                            setQtyYear = setQtyYear + parseDoubleR(rs.getString("ricevuta"));
                            setVolYear = setVolYear + parseDoubleR(rs.getString("total"));
                            
                            if (!rs.getString("ch_transaction").trim().equals("-")) {
                                Ch_transaction ct = Engine.query_transaction_ch(rs.getString("ch_transaction"));
                                setGMVolYear = setGMVolYear + fd(ct.getCommission()) + parseDoubleR(ct.getRound()) + fd(ct.getSpread_total());
                            }
                            
                        }
                    }
                    rs.beforeFirst();
                    double setVolPrevYear = 0.00;
                    double setVolGMPrevYear = 0.00;
                    double setQtyPrevYear = 0.00;
                    while (rs2.next()) {
                        if (rs2.getString("causale_nc").equals(causal)) {
                            setQtyPrevYear = setQtyPrevYear + parseDoubleR(rs2.getString("ricevuta"));
                            setVolPrevYear = setVolPrevYear + parseDoubleR(rs2.getString("totale"));
                        }
                    }
                    rs2.beforeFirst();
                    
                    double setQtyVal = setQtyYear - setQtyPrevYear;
                    double setVolVal = setVolYear - setVolPrevYear;
                    
                    double setVolPerc = 0.00;
                    if (setVolPrevYear > 0 && setVolVal > 0) {
                        setVolPerc = roundDouble(((setVolVal / setVolPrevYear) * 100), 2);
                    }
                    
                    double setVolGMPerc = 0.00;
                    if (setVolGMPrevYear > 0 && setGMVolYear > 0) {
                        setVolGMPerc = roundDouble(((setGMVolYear / setVolGMPrevYear) * 100), 2);
                    }
                    
                    double setQtyPerc = 0.00;
                    if (setQtyPrevYear > 0 && setQtyVal > 0) {
                        setQtyPerc = roundDouble(((setQtyVal / setQtyPrevYear) * 100), 2);
                    }
                    
                    fta.setVolGMPrevYear(roundDoubleandFormat(setVolGMPrevYear, 2));
                    fta.setVolGMYear(roundDoubleandFormat(setGMVolYear, 2));
                    fta.setVolGMVal(roundDoubleandFormat(setGMVolYear - setVolGMPrevYear, 2));
                    fta.setVolGMPerc(roundDoubleandFormat(setVolGMPerc, 2));
                    
                    fta.setVolPrevYear(roundDoubleandFormat(setVolPrevYear, 2));
                    fta.setVolYear(roundDoubleandFormat(setVolYear, 2));
                    fta.setVolVal(roundDoubleandFormat(setVolVal, 2));
                    fta.setVolPerc(roundDoubleandFormat(setVolPerc, 2));
                    
                    fta.setQtyPrevYear(roundDoubleandFormat(setQtyPrevYear, 0));
                    fta.setQtyYear(roundDoubleandFormat(setQtyYear, 0));
                    fta.setQtyVal(roundDoubleandFormat(setQtyVal, 0));
                    fta.setQtyPerc(roundDoubleandFormat(setQtyPerc, 2));
                    
                    out.add(fta);
                    
                }
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        sort(out);
        return out;
    }

    /**
     *
     * @param branch
     * @param datad1
     * @param datad2
     * @return
     */
    public ArrayList<C_FreeTax_NationAmount_value> list_C_FreeTax_NationAmount_value(ArrayList<String> branch, String datad1, String datad2) {
        ArrayList<C_FreeTax_NationAmount_value> out = new ArrayList<>();
        try {
            ArrayList<String[]> valuteNAZ = new ArrayList<>();
            String local_currency = get_local_currency()[0];
            String oper = get_national_office().getChangetype();
            String sql = "SELECT * FROM nc_transaction WHERE fg_tipo_transazione_nc='3' AND del_fg='0' "
                    + "AND ch_transaction not in (SELECT cod_tr FROM ch_transaction_valori) AND data >= '" + datad1 + " 00:00:00' "
                    + "AND data <= '" + datad2 + " 23:59:59' ORDER BY cl_nazione";
            
            ResultSet rs = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql);
            
            ArrayList<String[]> values_now = new ArrayList<>();
            
            while (rs.next()) {
                String[] v1 = {rs.getString("valuta"), rs.getString("quantita"), rs.getString("total"), "1.00", rs.getString("cl_nazione")};
                values_now.add(v1);
                String[] v2 = {rs.getString("valuta"), rs.getString("cl_nazione")};
                valuteNAZ.add(v2);
            }
            
            String sql2 = "SELECT * FROM nc_transaction nc1, ch_transaction_valori cv where nc1.ch_transaction=cv.cod_tr "
                    + "AND nc1.data >= '" + datad1 + " 00:00:00' AND nc1.data <= '" + datad2 + " 23:59:59'  ORDER BY nc1.cl_nazione";
            
            ResultSet rs2 = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql2);
            while (rs2.next()) {
                String[] v1 = {rs2.getString("cv.valuta"), rs2.getString("nc1.quantita"), rs2.getString("cv.total"), "1.00", rs2.getString("nc1.cl_nazione")};
                values_now.add(v1);
                String[] v2 = {rs2.getString("cv.valuta"), rs2.getString("nc1.cl_nazione")};
                valuteNAZ.add(v2);
            }
            
            DateTimeFormatter formatter = forPattern(patternsql);
            
            String dateyear1 = formatter.parseDateTime(datad1).minusYears(1).toString(patternsql);
            String dateyear2 = formatter.parseDateTime(datad2).minusYears(1).toString(patternsql);

            //annoprec
            String sqlmod = "SELECT * FROM freetax_pregresso fp, freetax_pregresso_change pc, freetax_pregresso_rel pr "
                    + "WHERE pr.filiale=pc.filiale AND pc.filiale=fp.filiale and pr.changeid = pc.pg1 AND pr.nochange=fp.pc_nc_tr "
                    + "AND fp.dt_nc >= '" + dateyear1 + " 00:00:00' AND fp.dt_nc <= '" + dateyear2 + " 23:59:59' ORDER BY fp.codnaz";
            
            ResultSet rsmod = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sqlmod);
            
            String sqlmod_eu = "SELECT * FROM freetax_pregresso WHERE pc_nc_tr not in "
                    + "(SELECT nochange FROM freetax_pregresso_rel) "
                    + " AND dt_nc >= '" + dateyear1 + " 00:00:00' AND dt_nc <= '" + dateyear2 + " 23:59:59' ORDER BY codnaz";
            
            ResultSet rsmod_eu = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sqlmod_eu);
            
            ArrayList<String[]> values_prec = new ArrayList<>();
            
            while (rsmod_eu.next()) {
                String[] v1 = {rsmod_eu.getString("valuta"), rsmod_eu.getString("quantita"), rsmod_eu.getString("totale"), "1.00", rsmod_eu.getString("codnaz")};
                values_prec.add(v1);
                String[] v2 = {rsmod_eu.getString("valuta"), rsmod_eu.getString("codnaz")};
                valuteNAZ.add(v2);
            }
            
            while (rsmod.next()) {
                
                String[] v1 = {rsmod.getString("pc.valuta"), rsmod.getString("fp.quantita"), rsmod.getString("pc.quantita"), rsmod.getString("pc.rate"), rsmod.getString("fp.codnaz")};
                values_prec.add(v1);
                String[] v2 = {rsmod.getString("pc.valuta"), rsmod.getString("fp.codnaz")};
                valuteNAZ.add(v2);
                
            }
            
            removeDuplicatesALAr(valuteNAZ);
            
            for (int i = 0; i < valuteNAZ.size(); i++) {
                String val1 = valuteNAZ.get(i)[0];
                String naz1 = valuteNAZ.get(i)[1].trim();
                
                if (naz1.equals("") || naz1.equals("-")) {
                    continue;
                }
                
                boolean valuta = false;
                if (!local_currency.equals(val1)) {
                    valuta = true;
                }
                
                C_FreeTax_NationAmount_value ftb = new C_FreeTax_NationAmount_value();
                
                ftb.setNation(naz1);
                ftb.setCurrency(val1 + " - " + getALCurrency(val1, list_figures()).getDescrizione());
                ftb.setValuta(valuta);
                
                double setVolPrevYear = 0.00;
                double setVolYear = 0.00;
                double setVolVal;
                double setVolPerc = 0.00;
                double setQtyPrevYear = 0.00;
                double setQtyYear = 0.00;
                double setQtyVal;
                double setQtyPerc = 0.00;
                
                for (int j = 0; j < values_now.size(); j++) {
                    String valori[] = values_now.get(j);
                    if (valori[0].equals(val1) && valori[4].equals(naz1)) {
                        setQtyYear = setQtyYear + parseDoubleR(valori[1]);
                        if (oper.equals("*")) {
                            setVolYear = setVolYear + roundDouble((parseDoubleR(valori[2]) * parseDoubleR(valori[3])), 2);
                        } else {
                            setVolYear = setVolYear + roundDouble((parseDoubleR(valori[2]) / parseDoubleR(valori[3])), 2);
                        }
                    }
                }
                
                for (int j = 0; j < values_prec.size(); j++) {
                    String valori[] = values_prec.get(j);
                    if (valori[0].equals(val1) && valori[4].equals(naz1)) {
                        setQtyPrevYear = setQtyPrevYear + parseDoubleR(valori[1]);
                        if (oper.equals("*")) {
                            setVolPrevYear = setVolPrevYear + roundDouble((parseDoubleR(valori[2]) * parseDoubleR(valori[3])), 2);
                        } else {
                            setVolPrevYear = setVolPrevYear + roundDouble((parseDoubleR(valori[2]) / parseDoubleR(valori[3])), 2);
                        }
                        
                    }
                }
                
                setQtyVal = setQtyYear - setQtyPrevYear;
                setVolVal = setVolYear - setVolPrevYear;
                
                if (setVolPrevYear > 0 && setVolVal > 0) {
                    setVolPerc = roundDouble(((setVolVal / setVolPrevYear) * 100), 2);
                }
                
                if (setQtyPrevYear > 0 && setQtyVal > 0) {
                    setQtyPerc = roundDouble(((setQtyVal / setQtyPrevYear) * 100), 2);
                }
                
                ftb.setVolPrevYear(roundDoubleandFormat(setVolPrevYear, 2));
                ftb.setVolYear(roundDoubleandFormat(setVolYear, 2));
                ftb.setVolVal(roundDoubleandFormat(setVolVal, 2));
                ftb.setVolPerc(roundDoubleandFormat(setVolPerc, 2));
                ftb.setQtyPrevYear(roundDoubleandFormat(setQtyPrevYear, 2));
                ftb.setQtyYear(roundDoubleandFormat(setQtyYear, 2));
                ftb.setQtyVal(roundDoubleandFormat(setQtyVal, 2));
                ftb.setQtyPerc(roundDoubleandFormat(setQtyPerc, 2));
                
                out.add(ftb);
                
            }
            
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @param branch
     * @param datad1
     * @param datad2
     * @param allnaz
     * @return
     */
    public ArrayList<C_FreeTax_AmountNation_value> list_C_FreeTax_AmountNation_value(ArrayList<String> branch, String datad1, String datad2, ArrayList<String[]> allnaz) {
        ArrayList<C_FreeTax_AmountNation_value> out = new ArrayList<>();
        try {
            ArrayList<String[]> valuteNAZ = new ArrayList<>();
            String local_currency = get_local_currency()[0];
            
            String oper = get_national_office().getChangetype();
            String sql = "SELECT * FROM nc_transaction WHERE fg_tipo_transazione_nc='3' AND del_fg='0' "
                    + "AND ch_transaction not in (SELECT cod_tr FROM ch_transaction_valori) AND data >= '" + datad1 + " 00:00:00' ";
            
            String filwhere = "";
            for (int i = 0; i < branch.size(); i++) {
                filwhere = filwhere + "filiale = '" + branch.get(i) + "' OR ";
            }
            
            if (filwhere.length() > 3) {
                sql = sql + " AND (" + filwhere.substring(0, filwhere.length() - 3).trim() + ") ";
            }
            
            sql = sql + "AND data <= '" + datad2 + " 23:59:59' ORDER BY cl_nazione";
            
            ResultSet rs = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql);
            
            ArrayList<String[]> values_now = new ArrayList<>();
            
            while (rs.next()) {
                String[] v1 = {rs.getString("valuta"), rs.getString("quantita"), rs.getString("total"), "1.00", rs.getString("cl_nazione")};
                values_now.add(v1);
                String[] v2 = {rs.getString("valuta"), rs.getString("cl_nazione")};
                valuteNAZ.add(v2);
            }
            
            String sql2 = "SELECT * FROM nc_transaction nc1, ch_transaction_valori cv where nc1.ch_transaction=cv.cod_tr "
                    + "AND nc1.data >= '" + datad1 + " 00:00:00' AND nc1.data <= '" + datad2 + " 23:59:59' ";
            
            sql2 = sql2 + " AND (" + filwhere.substring(0, filwhere.length() - 3).trim() + ") ";
            sql2 = sql2 + " ORDER BY nc1.cl_nazione";
            
            ResultSet rs2 = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql2);
            while (rs2.next()) {
                String[] v1 = {rs2.getString("cv.valuta"), rs2.getString("nc1.quantita"), rs2.getString("cv.total"), "1.00", rs2.getString("nc1.cl_nazione")};
                values_now.add(v1);
                String[] v2 = {rs2.getString("cv.valuta"), rs2.getString("nc1.cl_nazione")};
                valuteNAZ.add(v2);
            }
            
            DateTimeFormatter formatter = forPattern(patternsql);
            
            String dateyear1 = formatter.parseDateTime(datad1).minusYears(1).toString(patternsql);
            String dateyear2 = formatter.parseDateTime(datad2).minusYears(1).toString(patternsql);

            //annoprec
            String sqlmod = "SELECT * FROM freetax_pregresso fp, freetax_pregresso_change pc, freetax_pregresso_rel pr "
                    + "WHERE pr.filiale=pc.filiale AND pc.filiale=fp.filiale and pr.changeid = pc.pg1 AND pr.nochange=fp.pc_nc_tr "
                    + "AND fp.dt_nc >= '" + dateyear1 + " 00:00:00' AND fp.dt_nc <= '" + dateyear2 + " 23:59:59' ORDER BY fp.codnaz";
            
            ResultSet rsmod = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sqlmod);
            
            String sqlmod_eu = "SELECT * FROM freetax_pregresso WHERE pc_nc_tr not in "
                    + "(SELECT nochange FROM freetax_pregresso_rel) "
                    + " AND dt_nc >= '" + dateyear1 + " 00:00:00' AND dt_nc <= '" + dateyear2 + " 23:59:59' ";
            
            sqlmod_eu = sqlmod_eu + " AND (" + filwhere.substring(0, filwhere.length() - 3).trim() + ") ";
            sqlmod_eu = sqlmod_eu + " ORDER BY codnaz";
            
            ResultSet rsmod_eu = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sqlmod_eu);
            
            ArrayList<String[]> values_prec = new ArrayList<>();
            
            while (rsmod_eu.next()) {
                String[] v1 = {rsmod_eu.getString("valuta"), rsmod_eu.getString("quantita"), rsmod_eu.getString("totale"), "1.00", rsmod_eu.getString("codnaz")};
                values_prec.add(v1);
                String[] v2 = {rsmod_eu.getString("valuta"), rsmod_eu.getString("codnaz")};
                valuteNAZ.add(v2);
            }
            
            while (rsmod.next()) {
                
                String[] v1 = {rsmod.getString("pc.valuta"), rsmod.getString("fp.quantita"), rsmod.getString("pc.quantita"), rsmod.getString("pc.rate"), rsmod.getString("fp.codnaz")};
                values_prec.add(v1);
                String[] v2 = {rsmod.getString("pc.valuta"), rsmod.getString("fp.codnaz")};
                valuteNAZ.add(v2);
                
            }
            
            removeDuplicatesALAr(valuteNAZ);
            
            for (int i = 0; i < valuteNAZ.size(); i++) {
                String val1 = valuteNAZ.get(i)[0];
                String naz1 = valuteNAZ.get(i)[1].trim();
                if (naz1.equals("") || naz1.equals("-")) {
                    continue;
                }
                
                boolean valuta = false;
                if (!local_currency.equals(val1)) {
                    valuta = true;
                }
                
                C_FreeTax_AmountNation_value ftb = new C_FreeTax_AmountNation_value();
                
                ftb.setDe_nation(formatAL(naz1, allnaz, 1));
                ftb.setNation(naz1 + " " + ftb.getDe_nation());
                ftb.setCurrency(val1);
                ftb.setValuta(valuta);
                
                double setVolPrevYear = 0.00;
                double setVolYear = 0.00;
                double setVolVal;
                double setVolPerc = 0.00;
                double setQtyPrevYear = 0.00;
                double setQtyYear = 0.00;
                double setQtyVal;
                double setQtyPerc = 0.00;
                
                for (int j = 0; j < values_now.size(); j++) {
                    String valori[] = values_now.get(j);
                    if (valori[0].equals(val1) && valori[4].equals(naz1)) {
                        setQtyYear = setQtyYear + parseDoubleR(valori[1]);
                        if (oper.equals("*")) {
                            setVolYear = setVolYear + roundDouble((parseDoubleR(valori[2]) * parseDoubleR(valori[3])), 2);
                        } else {
                            setVolYear = setVolYear + roundDouble((parseDoubleR(valori[2]) / parseDoubleR(valori[3])), 2);
                        }
                    }
                }
                
                for (int j = 0; j < values_prec.size(); j++) {
                    String valori[] = values_prec.get(j);
                    if (valori[0].equals(val1) && valori[4].equals(naz1)) {
                        setQtyPrevYear = setQtyPrevYear + parseDoubleR(valori[1]);
                        if (oper.equals("*")) {
                            setVolPrevYear = setVolPrevYear + roundDouble((parseDoubleR(valori[2]) * parseDoubleR(valori[3])), 2);
                        } else {
                            setVolPrevYear = setVolPrevYear + roundDouble((parseDoubleR(valori[2]) / parseDoubleR(valori[3])), 2);
                        }
                        
                    }
                }
                
                setQtyVal = setQtyYear - setQtyPrevYear;
                setVolVal = setVolYear - setVolPrevYear;
                
                if (setVolPrevYear > 0 && setVolVal > 0) {
                    setVolPerc = roundDouble(((setVolVal / setVolPrevYear) * 100), 2);
                }
                
                if (setQtyPrevYear > 0 && setQtyVal > 0) {
                    setQtyPerc = roundDouble(((setQtyVal / setQtyPrevYear) * 100), 2);
                }
                
                ftb.setVolPrevYear(roundDoubleandFormat(setVolPrevYear, 2));
                ftb.setVolYear(roundDoubleandFormat(setVolYear, 2));
                ftb.setVolVal(roundDoubleandFormat(setVolVal, 2));
                ftb.setVolPerc(roundDoubleandFormat(setVolPerc, 2));
                ftb.setQtyPrevYear(roundDoubleandFormat(setQtyPrevYear, 2));
                ftb.setQtyYear(roundDoubleandFormat(setQtyYear, 2));
                ftb.setQtyVal(roundDoubleandFormat(setQtyVal, 2));
                ftb.setQtyPerc(roundDoubleandFormat(setQtyPerc, 2));
                
                out.add(ftb);
                
            }
            
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        sort(out);
        return out;
    }

    /**
     *
     * @param branch
     * @param datad1
     * @param datad2
     * @param allbr
     * @return
     */
    public ArrayList<C_FreeTax_AmountBranch_value> list_C_FreeTax_AmountBranch_value(ArrayList<String> branch, String datad1, String datad2, ArrayList<Branch> allbr) {
        ArrayList<C_FreeTax_AmountBranch_value> out = new ArrayList<>();
        String oper = get_national_office().getChangetype();
        try {
            ArrayList<String[]> valuteFIL = new ArrayList<>();
            String local_currency = get_local_currency()[0];
            
            String filwhere = "";
            for (int i = 0; i < branch.size(); i++) {
                filwhere = filwhere + "(filiale='" + branch.get(i) + "') OR ";
            }
            
            if (filwhere.length() > 3) {
                filwhere = " AND (" + filwhere.substring(0, filwhere.length() - 3).trim() + ") ";
            }
            
            String sql = "SELECT * FROM nc_transaction WHERE fg_tipo_transazione_nc='3' AND del_fg='0' "
                    + filwhere
                    + "AND ch_transaction not in (SELECT cod_tr FROM ch_transaction_valori) AND data >= '" + datad1 + " 00:00:00' "
                    + "AND data <= '" + datad2 + " 23:59:59' ";
            
            ResultSet rs = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql);
            
            ArrayList<String[]> values_now = new ArrayList<>();
            
            while (rs.next()) {
                String[] v1 = {rs.getString("valuta"), rs.getString("quantita"), rs.getString("total"), "1.00", rs.getString("filiale")};
                values_now.add(v1);
                String[] v2 = {rs.getString("valuta"), rs.getString("filiale")};
                valuteFIL.add(v2);
            }
            
            String sql2 = "SELECT * FROM nc_transaction nc1, ch_transaction_valori cv where nc1.ch_transaction=cv.cod_tr "
                    + replace_SU(filwhere, "filiale", "nc1.filiale")
                    + "AND nc1.data >= '" + datad1 + " 00:00:00' AND nc1.data <= '" + datad2 + " 23:59:59' ";
            
            ResultSet rs2 = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql2);
            while (rs2.next()) {
                String[] v1 = {rs2.getString("cv.valuta"), rs2.getString("nc1.quantita"), rs2.getString("cv.total"), "1.00", rs2.getString("nc1.filiale")};
                values_now.add(v1);
                String[] v2 = {rs2.getString("cv.valuta"), rs2.getString("nc1.filiale")};
                valuteFIL.add(v2);
            }
            
            DateTimeFormatter formatter = forPattern(patternsql);
            
            String dateyear1 = formatter.parseDateTime(datad1).minusYears(1).toString(patternsql);
            String dateyear2 = formatter.parseDateTime(datad2).minusYears(1).toString(patternsql);

            //annoprec
            String sqlmod = "SELECT * FROM freetax_pregresso fp, freetax_pregresso_change pc, freetax_pregresso_rel pr "
                    + "WHERE pr.filiale=pc.filiale AND pc.filiale=fp.filiale and pr.changeid = pc.pg1 AND pr.nochange=fp.pc_nc_tr "
                    + "AND fp.dt_nc >= '" + dateyear1 + " 00:00:00' AND fp.dt_nc <= '" + dateyear2 + " 23:59:59' "
                    + replace_SU(filwhere, "filiale", "fp.filiale");
            
            ResultSet rsmod = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sqlmod);
            
            String sqlmod_eu = "SELECT * FROM freetax_pregresso WHERE pc_nc_tr not in "
                    + "(SELECT nochange FROM freetax_pregresso_rel) "
                    + filwhere
                    + " AND dt_nc >= '" + dateyear1 + " 00:00:00' AND dt_nc <= '" + dateyear2 + " 23:59:59'";
            
            ResultSet rsmod_eu = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sqlmod_eu);
            
            ArrayList<String[]> values_prec = new ArrayList<>();
            
            while (rsmod_eu.next()) {
                String[] v1 = {rsmod_eu.getString("valuta"), rsmod_eu.getString("quantita"), rsmod_eu.getString("totale"), "1.00", rsmod_eu.getString("filiale")};
                values_prec.add(v1);
                String[] v2 = {rsmod_eu.getString("valuta"), rsmod_eu.getString("filiale")};
                valuteFIL.add(v2);
            }
            
            while (rsmod.next()) {
                
                String[] v1 = {rsmod.getString("pc.valuta"), rsmod.getString("fp.quantita"), rsmod.getString("pc.quantita"), rsmod.getString("pc.rate"), rsmod.getString("fp.filiale")};
                values_prec.add(v1);
                String[] v2 = {rsmod.getString("pc.valuta"), rsmod.getString("fp.filiale")};
                valuteFIL.add(v2);
                
            }
            
            removeDuplicatesALAr(valuteFIL);
            
            for (int i = 0; i < valuteFIL.size(); i++) {
                String val1 = valuteFIL.get(i)[0];
                String fil1 = valuteFIL.get(i)[1];
                
                boolean valuta = false;
                if (!local_currency.equals(val1)) {
                    valuta = true;
                }
                
                C_FreeTax_AmountBranch_value ftb = new C_FreeTax_AmountBranch_value();
                ftb.setBranch(fil1 + " - " + formatBankBranchReport(fil1, "BR", null, allbr));
                ftb.setCurrency(val1);
                ftb.setValuta(valuta);
                
                double setVolPrevYear = 0.00;
                double setVolYear = 0.00;
                double setVolVal;
                double setVolPerc = 0.00;
                double setQtyPrevYear = 0.00;
                double setQtyYear = 0.00;
                double setQtyVal;
                double setQtyPerc = 0.00;
                
                for (int j = 0; j < values_now.size(); j++) {
                    String valori[] = values_now.get(j);
                    if (valori[0].equals(val1) && valori[4].equals(fil1)) {
                        setQtyYear = setQtyYear + parseDoubleR(valori[1]);
                        if (oper.equals("*")) {
                            setVolYear = setVolYear + roundDouble((parseDoubleR(valori[2]) * parseDoubleR(valori[3])), 2);
                        } else {
                            setVolYear = setVolYear + roundDouble((parseDoubleR(valori[2]) / parseDoubleR(valori[3])), 2);
                        }
                    }
                }
                
                for (int j = 0; j < values_prec.size(); j++) {
                    String valori[] = values_prec.get(j);
                    if (valori[0].equals(val1) && valori[4].equals(fil1)) {
                        setQtyPrevYear = setQtyPrevYear + parseDoubleR(valori[1]);
                        if (oper.equals("*")) {
                            setVolPrevYear = setVolPrevYear + roundDouble((parseDoubleR(valori[2]) * parseDoubleR(valori[3])), 2);
                        } else {
                            setVolPrevYear = setVolPrevYear + roundDouble((parseDoubleR(valori[2]) / parseDoubleR(valori[3])), 2);
                        }
                        
                    }
                }
                
                setQtyVal = setQtyYear - setQtyPrevYear;
                setVolVal = setVolYear - setVolPrevYear;
                
                if (setVolPrevYear > 0 && setVolVal > 0) {
                    setVolPerc = roundDouble(((setVolVal / setVolPrevYear) * 100), 2);
                }
                
                if (setQtyPrevYear > 0 && setQtyVal > 0) {
                    setQtyPerc = roundDouble(((setQtyVal / setQtyPrevYear) * 100), 2);
                }
                
                ftb.setVolPrevYear(roundDoubleandFormat(setVolPrevYear, 2));
                ftb.setVolYear(roundDoubleandFormat(setVolYear, 2));
                ftb.setVolVal(roundDoubleandFormat(setVolVal, 2));
                ftb.setVolPerc(roundDoubleandFormat(setVolPerc, 2));
                ftb.setQtyPrevYear(roundDoubleandFormat(setQtyPrevYear, 2));
                ftb.setQtyYear(roundDoubleandFormat(setQtyYear, 2));
                ftb.setQtyVal(roundDoubleandFormat(setQtyVal, 2));
                ftb.setQtyPerc(roundDoubleandFormat(setQtyPerc, 2));
                
                out.add(ftb);
                
            }
            
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @param branch
     * @param datad1
     * @param datad2
     * @param allbr
     * @return
     */
    public ArrayList<C_FreeTax_BranchCurrency_value> list_C_FreeTax_BranchCurrency_value(String branch, String datad1, String datad2, ArrayList<Branch> allbr) {
        ArrayList<C_FreeTax_BranchCurrency_value> out = new ArrayList<>();
        String oper = get_national_office().getChangetype();
        try {
            ArrayList<String> valute = new ArrayList<>();
            String local_currency = get_local_currency()[0];
            
            String sql = "SELECT * FROM nc_transaction WHERE fg_tipo_transazione_nc='3' AND del_fg='0' AND filiale = '" + branch + "' "
                    + "AND ch_transaction not in (SELECT cod_tr FROM ch_transaction_valori) AND data >= '" + datad1 + " 00:00:00' "
                    + "AND data <= '" + datad2 + " 23:59:59'";
            
            ResultSet rs = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql);
            
            ArrayList<String[]> values_now = new ArrayList<>();
            
            while (rs.next()) {
                String[] v1 = {rs.getString("valuta"), rs.getString("quantita"), rs.getString("totale"), "1.00"};
                values_now.add(v1);
                valute.add(rs.getString("valuta"));
            }
            
            String sql2 = "SELECT * FROM nc_transaction nc1, ch_transaction_valori cv where nc1.ch_transaction=cv.cod_tr "
                    + "AND nc1.data >= '" + datad1 + " 00:00:00' AND nc1.data <= '" + datad2 + " 23:59:59' AND nc1.filiale = '" + branch + "' ";
            
            ResultSet rs2 = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql2);
            while (rs2.next()) {
                
                String[] v1 = {rs2.getString("cv.valuta"), rs2.getString("nc1.quantita"), rs2.getString("cv.total"), "1.00"};
                values_now.add(v1);
                valute.add(rs2.getString("cv.valuta"));
            }
            
            DateTimeFormatter formatter = forPattern(patternsql);
            
            String dateyear1 = formatter.parseDateTime(datad1).minusYears(1).toString(patternsql);
            String dateyear2 = formatter.parseDateTime(datad2).minusYears(1).toString(patternsql);

            //annoprec
            String sqlmod = "SELECT * FROM freetax_pregresso fp, freetax_pregresso_change pc, freetax_pregresso_rel pr "
                    + "WHERE pr.filiale=pc.filiale AND pc.filiale=fp.filiale and pr.changeid = pc.pg1 AND pr.nochange=fp.pc_nc_tr "
                    + "AND fp.dt_nc >= '" + dateyear1 + " 00:00:00' AND fp.dt_nc <= '" + dateyear2 + " 23:59:59' AND fp.filiale='" + branch + "'";
            
            ResultSet rsmod = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sqlmod);
            
            String sqlmod_eu = "SELECT * FROM freetax_pregresso WHERE pc_nc_tr not in "
                    + "(SELECT nochange FROM freetax_pregresso_rel WHERE filiale='" + branch + "') "
                    + "AND filiale='" + branch + "' AND dt_nc >= '" + dateyear1 + " 00:00:00' AND dt_nc <= '" + dateyear2 + " 23:59:59'";
            
            ResultSet rsmod_eu = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sqlmod_eu);
            
            ArrayList<String[]> values_prec = new ArrayList<>();
            
            while (rsmod_eu.next()) {
                String[] v1 = {rsmod_eu.getString("valuta"), rsmod_eu.getString("quantita"), rsmod_eu.getString("totale"), "1.00"};
                values_prec.add(v1);
                valute.add(rsmod_eu.getString("valuta"));
            }
            
            while (rsmod.next()) {
                
                String[] v1 = {rsmod.getString("pc.valuta"), rsmod.getString("fp.quantita"), rsmod.getString("pc.quantita"), rsmod.getString("pc.rate")};
                values_prec.add(v1);
                valute.add(rsmod.getString("pc.valuta"));
                
            }
            
            removeDuplicatesAL_localcurr(valute, local_currency);
            
            for (int i = 0; i < valute.size(); i++) {
                String val1 = valute.get(i);
                boolean valuta = false;
                if (!local_currency.equals(val1)) {
                    valuta = true;
                }
                
                C_FreeTax_BranchCurrency_value ftb = new C_FreeTax_BranchCurrency_value();
                ftb.setCurrency(val1);
                ftb.setValuta(valuta);
                
                double setVolPrevYear = 0.00;
                double setVolYear = 0.00;
                double setVolVal;
                double setVolPerc = 0.00;
                double setQtyPrevYear = 0.00;
                double setQtyYear = 0.00;
                double setQtyVal;
                double setQtyPerc = 0.00;
                
                for (int j = 0; j < values_now.size(); j++) {
                    String valori[] = values_now.get(j);
                    if (valori[0].equals(val1)) {
                        setQtyYear = setQtyYear + parseDoubleR(valori[1]);
                        if (oper.equals("*")) {
                            setVolYear = setVolYear + roundDouble((parseDoubleR(valori[2]) * parseDoubleR(valori[3])), 2);
                        } else {
                            setVolYear = setVolYear + roundDouble((parseDoubleR(valori[2]) / parseDoubleR(valori[3])), 2);
                        }
                        
                    }
                }
                
                for (int j = 0; j < values_prec.size(); j++) {
                    String valori[] = values_prec.get(j);
                    if (valori[0].equals(val1)) {
                        setQtyPrevYear = setQtyPrevYear + parseDoubleR(valori[1]);
                        
                        if (oper.equals("*")) {
                            setVolPrevYear = setVolPrevYear + roundDouble((parseDoubleR(valori[2]) * parseDoubleR(valori[3])), 2);
                        } else {
                            setVolPrevYear = setVolPrevYear + roundDouble((parseDoubleR(valori[2]) / parseDoubleR(valori[3])), 2);
                        }
                        
                    }
                }
                
                setQtyVal = setQtyYear - setQtyPrevYear;
                setVolVal = setVolYear - setVolPrevYear;
                
                if (setVolPrevYear > 0 && setVolVal > 0) {
                    setVolPerc = roundDouble(((setVolVal / setVolPrevYear) * 100), 2);
                }
                
                if (setQtyPrevYear > 0 && setQtyVal > 0) {
                    setQtyPerc = roundDouble(((setQtyVal / setQtyPrevYear) * 100), 2);
                }
                
                ftb.setVolPrevYear(roundDoubleandFormat(setVolPrevYear, 2));
                ftb.setVolYear(roundDoubleandFormat(setVolYear, 2));
                ftb.setVolVal(roundDoubleandFormat(setVolVal, 2));
                ftb.setVolPerc(roundDoubleandFormat(setVolPerc, 2));
                ftb.setQtyPrevYear(roundDoubleandFormat(setQtyPrevYear, 2));
                ftb.setQtyYear(roundDoubleandFormat(setQtyYear, 2));
                ftb.setQtyVal(roundDoubleandFormat(setQtyVal, 2));
                ftb.setQtyPerc(roundDoubleandFormat(setQtyPerc, 2));
                
                out.add(ftb);
                
            }
            
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @param branch
     * @param datad1
     * @param datad2
     * @param allbr
     * @param nccausalcode
     * @return
     */
    public ArrayList<C_FreeTax_CausalBranch_value> list_C_FreeTax_CausalBranch_value(ArrayList<String> branch, String datad1, String datad2, ArrayList<Branch> allbr,
            NC_causal nccausalcode) {
        ArrayList<C_FreeTax_CausalBranch_value> out = new ArrayList<>();
        try {
            String sql = "SELECT * FROM nc_transaction WHERE causale_nc='" + nccausalcode.getCausale_nc() + "' AND del_fg='0' ";
            
            String filwhere = "";
            for (int i = 0; i < branch.size(); i++) {
                filwhere = filwhere + "(filiale='" + branch.get(i) + "') OR ";
            }
            
            if (filwhere.length() > 3) {
                sql = sql + " AND (" + filwhere.substring(0, filwhere.length() - 3).trim() + ") ";
            }
            
            sql = sql + "AND data >= '" + datad1 + " 00:00:00' ";
            sql = sql + "AND data <= '" + datad2 + " 23:59:59' ";
            sql = sql + " ORDER BY filiale";
            
            ResultSet rs = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql);
            
            DateTimeFormatter formatter = forPattern(patternsql);
            
            String dateyear1 = formatter.parseDateTime(datad1).minusYears(1).toString(patternsql);
            String dateyear2 = formatter.parseDateTime(datad2).minusYears(1).toString(patternsql);

            //annoprec
            String sql2 = "SELECT * FROM freetax_pregresso WHERE (" + filwhere.substring(0, filwhere.length() - 3).trim() + ") AND causale_nc='" + nccausalcode.getCausale_nc() + "' ";
            sql2 = sql2 + "AND dt_nc >= '" + dateyear1 + " 00:00:00' ";
            sql2 = sql2 + "AND dt_nc <= '" + dateyear2 + " 23:59:59' ";
            sql2 = sql2 + " ORDER BY filiale,dt_nc";
            
            ResultSet rs2 = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql2);
            
            for (int i = 0; i < branch.size(); i++) {
                String br1 = branch.get(i);
                
                double setVolPrevYear = 0.00;
                double setVolYear = 0.00;
                double setVolVal;
                double setVolPerc = 0.00;
                double setQtyPrevYear = 0.00;
                double setQtyYear = 0.00;
                double setQtyVal;
                double setQtyPerc = 0.00;
                while (rs.next()) {
                    if (rs.getString("filiale").equals(br1)) {
                        
                        setQtyYear = setQtyYear + parseDoubleR(rs.getString("quantita"));
                        setVolYear = setVolYear + parseDoubleR(rs.getString("total"));
                        
                    }
                    
                }
                rs.beforeFirst();
                while (rs2.next()) {
                    if (rs2.getString("filiale").equals(br1)) {
                        
                        setQtyPrevYear = setQtyPrevYear + parseDoubleR(rs2.getString("quantita"));
                        setVolPrevYear = setVolPrevYear + parseDoubleR(rs2.getString("totale"));
                        
                    }
                }
                rs2.beforeFirst();
                
                setQtyVal = setQtyYear - setQtyPrevYear;
                setVolVal = setVolYear - setVolPrevYear;
                
                if (setVolPrevYear > 0 && setVolVal > 0) {
                    setVolPerc = roundDouble(((setVolVal / setVolPrevYear) * 100), 2);
                }
                
                if (setQtyPrevYear > 0 && setQtyVal > 0) {
                    setQtyPerc = roundDouble(((setQtyVal / setQtyPrevYear) * 100), 2);
                }
                
                C_FreeTax_CausalBranch_value ftb2 = new C_FreeTax_CausalBranch_value();
                ftb2.setBranch(formatBankBranch(br1, "BR", null, allbr, null));
                ftb2.setValuta(nccausalcode.getNc_de().trim().equals("04"));
                ftb2.setVolPrevYear(roundDoubleandFormat(setVolPrevYear, 2));
                ftb2.setVolYear(roundDoubleandFormat(setVolYear, 2));
                ftb2.setVolVal(roundDoubleandFormat(setVolVal, 2));
                ftb2.setVolPerc(roundDoubleandFormat(setVolPerc, 2));
                ftb2.setQtyPrevYear(roundDoubleandFormat(setQtyPrevYear, 2));
                ftb2.setQtyYear(roundDoubleandFormat(setQtyYear, 2));
                ftb2.setQtyVal(roundDoubleandFormat(setQtyVal, 2));
                ftb2.setQtyPerc(roundDoubleandFormat(setQtyPerc, 2));
                out.add(ftb2);
                
            }
            
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @param branch
     * @param datad1
     * @param datad2
     * @param allbr
     * @return
     */
    public ArrayList<C_FreeTax_Branch_value> list_C_FreeTax_Branch(ArrayList<String> branch, String datad1, String datad2, ArrayList<Branch> allbr) {
        ArrayList<C_FreeTax_Branch_value> out = new ArrayList<>();
        try {
            String sql = "SELECT * FROM nc_transaction WHERE fg_tipo_transazione_nc='3' AND del_fg='0' ";
            
            String filwhere = "";
            for (int i = 0; i < branch.size(); i++) {
                filwhere = filwhere + "(filiale='" + branch.get(i) + "') OR ";
            }
            
            if (filwhere.length() > 3) {
                sql = sql + " AND (" + filwhere.substring(0, filwhere.length() - 3).trim() + ") ";
            }
            
            sql = sql + "AND data >= '" + datad1 + " 00:00:00' ";
            sql = sql + "AND data <= '" + datad2 + " 23:59:59' ";
            sql = sql + " ORDER BY filiale,data";
            
            ResultSet rs = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql);
            
            DateTimeFormatter formatter = forPattern(patternsql);
            
            String dateyear1 = formatter.parseDateTime(datad1).minusYears(1).toString(patternsql);
            String dateyear2 = formatter.parseDateTime(datad2).minusYears(1).toString(patternsql);

            //annoprec
            String sql2 = "SELECT * FROM freetax_pregresso WHERE (" + filwhere.substring(0, filwhere.length() - 3).trim() + ") ";
            sql2 = sql2 + "AND dt_nc >= '" + dateyear1 + " 00:00:00' ";
            sql2 = sql2 + "AND dt_nc <= '" + dateyear2 + " 23:59:59' ";
            sql2 = sql2 + " ORDER BY filiale,dt_nc";
            
            ResultSet rs2 = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql2);
            
            ArrayList<NC_causal> lica = list_nc_causal_enabled();
            
            for (int i = 0; i < branch.size(); i++) {
                String br1 = branch.get(i);
                
                double setVolPrevYear = 0.00;
                double setVolYear = 0.00;
                double setVolVal;
                double setVolPerc = 0.00;
                double setQtyPrevYear = 0.00;
                double setQtyYear = 0.00;
                double setQtyVal;
                double setQtyPerc = 0.00;
                int setQtyTransPrevYear = 0;
                int setQtyTransYear = 0;
                double setQtyTransVal;
                double setQtyTransPerc = 0.00;
                
                double ValsetVolPrevYear = 0.00;
                double ValsetVolYear = 0.00;
                double ValsetVolVal;
                double ValsetVolPerc = 0.00;
                double ValsetQtyPrevYear = 0.00;
                double ValsetQtyYear = 0.00;
                double ValsetQtyVal;
                double ValsetQtyPerc = 0.00;
                
                int ValsetQtyTransPrevYear = 0;
                int ValsetQtyTransYear = 0;
                double ValsetQtyTransVal;
                double ValsetQtyTransPerc = 0.00;
                
                while (rs.next()) {
                    if (rs.getString("filiale").equals(br1)) {
                        NC_causal nc1 = getNC_causal(lica, rs.getString("causale_nc"), null);
                        if (nc1 != null) {
                            if (nc1.getNc_de().equals("04")) { //valuta
                                ValsetQtyYear = ValsetQtyYear + parseDoubleR(rs.getString("ricevuta"));
                                ValsetVolYear = ValsetVolYear + parseDoubleR(rs.getString("total"));
                                ValsetQtyTransYear++;
                            } else {
                                setQtyYear = setQtyYear + parseDoubleR(rs.getString("ricevuta"));
                                setVolYear = setVolYear + parseDoubleR(rs.getString("total"));
                                setQtyTransYear++;
                            }
                        }
                    }
                    
                }
                rs.beforeFirst();
                while (rs2.next()) {
                    if (rs2.getString("filiale").equals(br1)) {
                        NC_causal nc1 = getNC_causal(lica, rs2.getString("causale_nc"), null);
                        if (nc1 != null) {
                            if (nc1.getNc_de().equals("04")) { //valuta
                                ValsetQtyPrevYear = ValsetQtyPrevYear + parseDoubleR(rs2.getString("ricevuta"));
                                ValsetVolPrevYear = ValsetVolPrevYear + parseDoubleR(rs2.getString("totale"));
                                ValsetQtyTransPrevYear++;
                            } else {
                                setQtyPrevYear = setQtyPrevYear + parseDoubleR(rs2.getString("ricevuta"));
                                setVolPrevYear = setVolPrevYear + parseDoubleR(rs2.getString("totale"));
                                setQtyTransPrevYear++;
                            }
                        }
                    }
                }
                rs2.beforeFirst();
                
                setQtyVal = setQtyYear - setQtyPrevYear;
                setVolVal = setVolYear - setVolPrevYear;
                setQtyTransVal = setQtyTransYear - setQtyTransPrevYear;
                
                if (setVolPrevYear > 0 && setVolVal > 0) {
                    setVolPerc = roundDouble(((setVolVal / setVolPrevYear) * 100), 2);
                }
                
                if (setQtyPrevYear > 0 && setQtyVal > 0) {
                    setQtyPerc = roundDouble(((setQtyVal / setQtyPrevYear) * 100), 2);
                }
                
                if (setQtyTransPrevYear > 0 && setQtyTransYear > 0) {
                    setQtyTransPerc = roundDouble((((double) setQtyTransYear / (double) setQtyTransPrevYear) * 100), 2);
                }
                
                ValsetQtyVal = ValsetQtyYear - ValsetQtyPrevYear;
                ValsetVolVal = ValsetVolYear - ValsetVolPrevYear;
                ValsetQtyTransVal = ValsetQtyTransYear - ValsetQtyTransPrevYear;
                
                if (ValsetVolPrevYear > 0 && ValsetVolVal > 0) {
                    ValsetVolPerc = roundDouble(((ValsetVolVal / ValsetVolPrevYear) * 100), 2);
                }
                
                if (ValsetQtyPrevYear > 0 && ValsetQtyVal > 0) {
                    ValsetQtyPerc = roundDouble(((ValsetQtyVal / ValsetQtyPrevYear) * 100), 2);
                }
                if (ValsetQtyTransPrevYear > 0 && ValsetQtyTransYear > 0) {
                    ValsetQtyTransPerc = roundDouble((((double) ValsetQtyTransYear / (double) ValsetQtyTransPrevYear) * 100), 2);
                }
                
                C_FreeTax_Branch_value ftb1 = new C_FreeTax_Branch_value();
                ftb1.setBranch(formatBankBranch(br1, "BR", null, allbr, null));
                ftb1.setValuta(true);
                ftb1.setVolPrevYear(roundDoubleandFormat(ValsetVolPrevYear, 2));
                ftb1.setVolYear(roundDoubleandFormat(ValsetVolYear, 2));
                ftb1.setVolVal(roundDoubleandFormat(ValsetVolVal, 2));
                ftb1.setVolPerc(roundDoubleandFormat(ValsetVolPerc, 2));
                ftb1.setQtyPrevYear(roundDoubleandFormat(ValsetQtyPrevYear, 0));
                ftb1.setQtyYear(roundDoubleandFormat(ValsetQtyYear, 0));
                ftb1.setQtyVal(roundDoubleandFormat(ValsetQtyVal, 0));
                ftb1.setQtyPerc(roundDoubleandFormat(ValsetQtyPerc, 2));
                ftb1.setQtyTransPrevYear(roundDoubleandFormat(ValsetQtyTransPrevYear, 0));
                ftb1.setQtyTransYear(roundDoubleandFormat(ValsetQtyTransYear, 0));
                ftb1.setQtyTransVal(roundDoubleandFormat(ValsetQtyTransVal, 0));
                ftb1.setQtyTransPerc(roundDoubleandFormat(ValsetQtyTransPerc, 2));
                out.add(ftb1);
                
                C_FreeTax_Branch_value ftb2 = new C_FreeTax_Branch_value();
                ftb2.setBranch(formatBankBranch(br1, "BR", null, allbr, null));
                ftb2.setValuta(false);
                ftb2.setVolPrevYear(roundDoubleandFormat(setVolPrevYear, 2));
                ftb2.setVolYear(roundDoubleandFormat(setVolYear, 2));
                ftb2.setVolVal(roundDoubleandFormat(setVolVal, 2));
                ftb2.setVolPerc(roundDoubleandFormat(setVolPerc, 2));
                ftb2.setQtyPrevYear(roundDoubleandFormat(setQtyPrevYear, 0));
                ftb2.setQtyYear(roundDoubleandFormat(setQtyYear, 0));
                ftb2.setQtyVal(roundDoubleandFormat(setQtyVal, 0));
                ftb2.setQtyPerc(roundDoubleandFormat(setQtyPerc, 2));
                ftb2.setQtyTransPrevYear(roundDoubleandFormat(setQtyTransPrevYear, 0));
                ftb2.setQtyTransYear(roundDoubleandFormat(setQtyTransYear, 0));
                ftb2.setQtyTransVal(roundDoubleandFormat(setQtyTransVal, 0));
                ftb2.setQtyTransPerc(roundDoubleandFormat(setQtyTransPerc, 2));
                out.add(ftb2);
                
            }
            
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
        
    }

    /**
     *
     * @param branch
     * @param datad1
     * @param datad2
     * @return
     */
    public ArrayList<C_FreeTax_Analisys_value> list_C_FreeTax_Analisys_value(ArrayList<String> branch, String datad1, String datad2) {
        ArrayList<C_FreeTax_Analisys_value> out = new ArrayList<>();
        try {
            
            String sql = "SELECT * FROM nc_transaction WHERE fg_tipo_transazione_nc='3' AND del_fg='0' ";
            
            String filwhere = "";
            for (int i = 0; i < branch.size(); i++) {
                filwhere = filwhere + "(filiale='" + branch.get(i) + "') OR ";
            }
            
            if (filwhere.length() > 3) {
                sql = sql + " AND (" + filwhere.substring(0, filwhere.length() - 3).trim() + ") ";
            }
            
            sql = sql + "AND data >= '" + datad1 + " 00:00:00' ";
            sql = sql + "AND data <= '" + datad2 + " 23:59:59' ";
            
            sql = sql + " ORDER BY filiale,data";
            
            ArrayList<String> listcausale_nc = new ArrayList<>();
            
            ResultSet rs = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql);
            while (rs.next()) {
                listcausale_nc.add(rs.getString("causale_nc"));
            }
            rs.beforeFirst();
            removeDuplicatesAL(listcausale_nc);
            
            DateTimeFormatter formatter = forPattern(patternsql);
            
            String dateyear1 = formatter.parseDateTime(datad1).minusYears(1).toString(patternsql);
            String dateyear2 = formatter.parseDateTime(datad2).minusYears(1).toString(patternsql);

            //annoprec
            String sql2 = "SELECT * FROM freetax_pregresso WHERE (" + filwhere.substring(0, filwhere.length() - 3).trim() + ") ";
            sql2 = sql2 + "AND dt_nc >= '" + dateyear1 + " 00:00:00' ";
            sql2 = sql2 + "AND dt_nc <= '" + dateyear2 + " 23:59:59' ";
            sql2 = sql2 + " ORDER BY filiale,dt_nc";
            
            ResultSet rs2 = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql2);
            
            ArrayList<NC_causal> lica = list_nc_causal_enabled();
            
            for (int i = 0; i < listcausale_nc.size(); i++) {
                String causal = listcausale_nc.get(i);
                NC_causal nc1 = getNC_causal(lica, causal, null);
                if (nc1 != null) {
                    
                    C_FreeTax_Analisys_value fta = new C_FreeTax_Analisys_value();
                    fta.setDe_causal(nc1.getDe_causale_nc());
                    fta.setCausal(nc1.getCausale_nc() + " " + nc1.getDe_causale_nc());
                    fta.setValuta(nc1.getNc_de().equals("04"));
                    
                    double setQtyYear = 0;
                    double setVolYear = 0.00;
                    double setGMVolYear = 0.00;
                    
                    while (rs.next()) {
                        if (rs.getString("causale_nc").equals(causal)) {
                            setQtyYear = setQtyYear + parseDoubleR(rs.getString("ricevuta"));
                            setVolYear = setVolYear + parseDoubleR(rs.getString("total"));
                            
                            if (!rs.getString("ch_transaction").trim().equals("-")) {
                                Ch_transaction ct = Engine.query_transaction_ch(rs.getString("ch_transaction"));
                                setGMVolYear = setGMVolYear + fd(ct.getCommission()) + parseDoubleR(ct.getRound()) + fd(ct.getSpread_total());
                            }
                            
                        }
                    }
                    rs.beforeFirst();
                    double setVolPrevYear = 0.00;
                    double setQtyPrevYear = 0.00;
                    double setVolGMPrevYear = 0.00;
                    
                    while (rs2.next()) {
                        if (rs2.getString("causale_nc").equals(causal)) {
                            setQtyPrevYear = setQtyPrevYear + parseDoubleR(rs2.getString("ricevuta"));
                            setVolPrevYear = setVolPrevYear + parseDoubleR(rs2.getString("totale"));
                        }
                    }
                    rs2.beforeFirst();
                    
                    double setQtyVal = setQtyYear - setQtyPrevYear;
                    double setVolVal = setVolYear - setVolPrevYear;
                    
                    double setVolPerc = 0.00;
                    if (setVolPrevYear > 0 && setVolVal > 0) {
                        setVolPerc = roundDouble(((setVolVal / setVolPrevYear) * 100), 2);
                    }
                    
                    double setQtyPerc = 0.00;
                    if (setQtyPrevYear > 0 && setQtyVal > 0) {
                        setQtyPerc = roundDouble(((setQtyVal / setQtyPrevYear) * 100), 2);
                    }
                    
                    double setVolGMPerc = 0.00;
                    if (setVolGMPrevYear > 0 && setGMVolYear > 0) {
                        setVolGMPerc = roundDouble(((setGMVolYear / setVolGMPrevYear) * 100), 2);
                    }
                    
                    fta.setVolGMPrevYear(roundDoubleandFormat(setVolGMPrevYear, 2));
                    fta.setVolGMYear(roundDoubleandFormat(setGMVolYear, 2));
                    fta.setVolGMVal(roundDoubleandFormat(setGMVolYear - setVolGMPrevYear, 2));
                    fta.setVolGMPerc(roundDoubleandFormat(setVolGMPerc, 2));
                    
                    fta.setVolPrevYear(roundDoubleandFormat(setVolPrevYear, 2) + "");
                    fta.setVolYear(roundDoubleandFormat(setVolYear, 2) + "");
                    fta.setVolVal(roundDoubleandFormat(setVolVal, 2) + "");
                    fta.setVolPerc(roundDoubleandFormat(setVolPerc, 2) + "");
                    fta.setQtyPrevYear(roundDoubleandFormat(setQtyPrevYear, 0) + "");
                    fta.setQtyYear(roundDoubleandFormat(setQtyYear, 0) + "");
                    fta.setQtyVal(roundDoubleandFormat(setQtyVal, 2) + "");
                    fta.setQtyPerc(roundDoubleandFormat(setQtyPerc, 2) + "");
                    out.add(fta);
                    
                }
            }
            
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        
        sort(out);
        return out;
    }

    /**
     *
     * @param branch
     * @param datad1
     * @param datad2
     * @return
     */
    public ArrayList<Openclose> list_openclose_errors_report(ArrayList<String> branch, String datad1, String datad2) {
        ArrayList<Openclose> out = new ArrayList<>();
        try {
            String sql = "SELECT * FROM oc_lista where errors ='Y' ";
            
            String filwhere = "";
            for (int i = 0; i < branch.size(); i++) {
                filwhere = filwhere + "(filiale='" + branch.get(i) + "') OR ";
            }
            
            if (filwhere.length() > 3) {
                sql = sql + " AND (" + filwhere.substring(0, filwhere.length() - 3).trim() + ") ";
            }
            
            if (datad1 != null) {
                sql = sql + "AND data >= '" + datad1 + " 00:00:00' ";
            }
            if (datad2 != null) {
                sql = sql + "AND data <= '" + datad2 + " 23:59:59' ";
            }
            sql = sql + " ORDER BY data";
            
            ResultSet rs = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql);
            while (rs.next()) {
                Openclose oc = new Openclose(rs.getString(1), rs.getString(2), leftPad(rs.getString(3), 15, "0"),
                        rs.getString(4), rs.getString(5), rs.getString(6), rs.getString(7), rs.getString(8));
                oc.setCod_it(rs.getString("cod_it"));
                oc.setCod_itnc(rs.getString("cod_itnc"));
                oc.setForeign_tr(rs.getString("foreign_tr"));
                oc.setLocal_tr(rs.getString("local_tr"));
                oc.setStock_tr(rs.getString("stock_tr"));
                out.add(oc);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @return
     */
    public ArrayList<NC_causal> list_nc_causal_enabled_freetax() {
        ArrayList<NC_causal> out = new ArrayList<>();
        try {
            String sql = "SELECT * FROM nc_causali WHERE annullato = ? AND fg_tipo_transazione_nc = ? order by causale_nc";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, "0");
            ps.setString(2, "3");
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                NC_causal nc1 = new NC_causal();
                nc1.setFiliale(rs.getString("filiale"));
                nc1.setGruppo_nc(rs.getString("gruppo_nc"));
                nc1.setCausale_nc(rs.getString("causale_nc"));
                nc1.setDe_causale_nc(rs.getString("de_causale_nc"));
                nc1.setFg_in_out(rs.getString("fg_in_out"));
                nc1.setIp_prezzo_nc(rs.getString("ip_prezzo_nc"));
                nc1.setFg_tipo_transazione_nc(rs.getString("fg_tipo_transazione_nc"));
                nc1.setAnnullato(rs.getString("annullato"));
                nc1.setNc_de(rs.getString("nc_de"));
                nc1.setFg_batch(rs.getString("fg_batch"));
                nc1.setFg_gruppo_stampa(rs.getString("fg_gruppo_stampa"));
                nc1.setFg_scontrino(rs.getString("fg_scontrino"));
                nc1.setTicket_fee_type(rs.getString("ticket_fee_type"));
                nc1.setTicket_fee(rs.getString("ticket_fee"));
                nc1.setMax_ticket(rs.getString("max_ticket"));
                nc1.setData(rs.getString("data"));
                nc1.setBonus(rs.getString("bonus"));
                nc1.setCodice_integr(rs.getString("codice_integr"));
                nc1.setPaymat(rs.getString("paymat"));
                nc1.setDocric(rs.getString("docric"));
                out.add(nc1);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        sort(out);
        return out;
    }

    /**
     *
     * @param anno
     * @param mese
     * @return
     */
    public ArrayList<Ch_transaction> list_transaction_oam(String anno, String mese) {
        ArrayList<Ch_transaction> out = new ArrayList<>();
        try {
            String sel = "SELECT * FROM ch_transaction ch WHERE data like '" + anno + "-" + mese + "%' AND del_fg='0' order by cl_cod";
            ResultSet rs = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sel);
            while (rs.next()) {
                Ch_transaction ch = new Ch_transaction();
                ch.setCod(rs.getString("cod"));
                ch.setId(leftPad(rs.getString("id"), 15, "0"));
                ch.setFiliale(rs.getString("filiale"));
                ch.setTipotr(rs.getString("tipotr"));
                ch.setUser(rs.getString("user"));
                ch.setTill(rs.getString("till"));
                ch.setData(rs.getString("data"));
                ch.setTipocliente(rs.getString("tipocliente"));
                ch.setId_open_till(rs.getString("id_open_till"));
                ch.setPay(rs.getString("pay"));
                ch.setTotal(rs.getString("total"));
                ch.setFix(rs.getString("fix"));
                ch.setCom(rs.getString("com"));
                ch.setRound(rs.getString("round"));
                ch.setCommission(rs.getString("commission"));
                ch.setSpread_total(rs.getString("spread_total"));
                ch.setNote(rs.getString("note"));
                ch.setAgency(rs.getString("agency"));
                ch.setAgency_cod(rs.getString("agency_cod"));
                ch.setLocalfigures(rs.getString("localfigures"));
                ch.setPos(rs.getString("pos"));
                ch.setIntbook(rs.getString("intbook"));
                ch.setIntbook_type(rs.getString("intbook_type"));
                ch.setIntbook_1_tf(rs.getString("intbook_1_tf"));
                ch.setIntbook_1_mod(rs.getString("intbook_1_mod"));
                ch.setIntbook_1_val(rs.getString("intbook_1_val"));
                ch.setIntbook_2_tf(rs.getString("intbook_2_tf"));
                ch.setIntbook_2_mod(rs.getString("intbook_2_mod"));
                ch.setIntbook_2_val(rs.getString("intbook_2_val"));
                ch.setIntbook_3_tf(rs.getString("intbook_3_tf"));
                ch.setIntbook_3_mod(rs.getString("intbook_3_mod"));
                ch.setIntbook_3_val(rs.getString("intbook_3_val"));
                ch.setIntbook_mac(rs.getString("intbook_mac"));
                ch.setIntbook_cli(rs.getString("intbook_cli"));
                ch.setCl_cf(rs.getString("cl_cf"));
                ch.setCl_cod(rs.getString("cl_cod"));
                ch.setDel_fg(rs.getString("del_fg"));
                ch.setDel_dt(rs.getString("del_dt"));
                ch.setDel_user(rs.getString("del_user"));
                ch.setDel_motiv(rs.getString("del_motiv"));
                ch.setRefund(rs.getString("refund"));
                ch.setFa_number(rs.getString("fa_number"));
                ch.setCn_number(rs.getString("cn_number"));
                out.add(ch);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @param data
     * @param branch
     * @param branching
     * @return
     */
    public ArrayList<NC_transaction> list_esolver_nc(String data, ArrayList<Branch> branch, String branching) {
        ArrayList<NC_transaction> out = new ArrayList<>();
        try {
            String sql = "SELECT * FROM nc_transaction where del_fg ='0' ";
            sql = sql + "AND data >= '" + data + " 00:00:00' ";
            sql = sql + "AND data <= '" + data + " 23:59:59' ";
            
            if (branching == null) {
                String filwhere = "";
                for (int i = 0; i < branch.size(); i++) {
                    filwhere = filwhere + "(filiale='" + branch.get(i).getCod() + "') OR ";
                }
                
                if (filwhere.length() > 3) {
                    sql = sql + " AND (" + filwhere.substring(0, filwhere.length() - 3).trim() + ") ";
                }
            } else {
                sql = sql + " AND filiale='" + branching + "'";
            }
            
            sql = sql + " ORDER BY data";
            
            ResultSet rs = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql);
            while (rs.next()) {
                NC_transaction nc = new NC_transaction(
                        rs.getString(1), leftPad(rs.getString(2), 15, "0"),
                        rs.getString(3), rs.getString(4), rs.getString(5), rs.getString(6), rs.getString(7), rs.getString(8),
                        rs.getString(9), rs.getString(10), rs.getString(11), rs.getString(12), rs.getString(13), rs.getString(14),
                        rs.getString(15), rs.getString(16), rs.getString(17), rs.getString(18), rs.getString(19), rs.getString(20),
                        rs.getString(21), rs.getString(22), rs.getString(23), rs.getString(24), rs.getString(25), rs.getString(26),
                        rs.getString(27), rs.getString(28), rs.getString(29), rs.getString(30), rs.getString(31), rs.getString(32),
                        rs.getString(33), rs.getString(34), rs.getString(35), rs.getString(36), rs.getString(37), rs.getString(38),
                        rs.getString(39), rs.getString(40), rs.getString(41), rs.getString(42), rs.getString(43), rs.getString(44),
                        rs.getString(45), rs.getString(46)
                );
                out.add(nc);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @param data
     * @param branch
     * @param branching
     * @return
     */
    public ArrayList<Ch_transaction_refund> list_esolver_refund(String data, ArrayList<Branch> branch, String branching) {
        ArrayList<Ch_transaction_refund> out = new ArrayList<>();
        
        try {
            String sql = "SELECT * FROM ch_transaction_refund WHERE status='1' AND method='BR' ";
            sql = sql + "AND dt_refund >= '" + data + " 00:00:00' ";
            sql = sql + "AND dt_refund <= '" + data + " 23:59:59' ";
            if (branching == null) {
                String filwhere = "";
                for (int i = 0; i < branch.size(); i++) {
                    filwhere = filwhere + "(branch_cod='" + branch.get(i).getCod() + "') OR ";
                }
                
                if (filwhere.length() > 3) {
                    sql = sql + " AND (" + filwhere.substring(0, filwhere.length() - 3).trim() + ") ";
                }
            } else {
                sql = sql + " AND branch_cod='" + branching + "'";
            }
            sql = sql + " ORDER BY dt_refund";
            ResultSet rs = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql);
            while (rs.next()) {
                Ch_transaction_refund ref = new Ch_transaction_refund();
                ref.setCod(rs.getString(1));
                ref.setCod_tr(rs.getString(2));
                ref.setFrom(rs.getString(3));
                ref.setMethod(rs.getString(4));
                ref.setBranch_cod(rs.getString(5));
                ref.setType(rs.getString(6));
                ref.setValue(rs.getString(7));
                ref.setCod_usaegetta(rs.getString(8));
                ref.setStatus(rs.getString(9));
                ref.setUser_refund(rs.getString(10));
                ref.setDt_refund(rs.getString(11));
                ref.setIdopentill_refund(rs.getString(12));
                ref.setTimestamp(rs.getString(13));
                out.add(ref);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @param data
     * @param branch
     * @param branching
     * @return
     */
    public ArrayList<Ch_transaction> list_esolver_ch(String data, ArrayList<Branch> branch, String branching) {
        ArrayList<Ch_transaction> out = new ArrayList<>();
        try {
            String sql = "SELECT * FROM ch_transaction where del_fg ='0' AND cod NOT IN (SELECT transaction FROM inv_list) ";
            sql = sql + "AND data >= '" + data + " 00:00:00' ";
            sql = sql + "AND data <= '" + data + " 23:59:59' ";
            
            if (branching == null) {
                String filwhere = "";
                for (int i = 0; i < branch.size(); i++) {
                    filwhere = filwhere + "(filiale='" + branch.get(i).getCod() + "') OR ";
                }
                
                if (filwhere.length() > 3) {
                    sql = sql + " AND (" + filwhere.substring(0, filwhere.length() - 3).trim() + ") ";
                }
            } else {
                sql = sql + " AND filiale = '" + branching + "'";
            }
            
            sql = sql + " ORDER BY data";
            
            ResultSet rs = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql);
            while (rs.next()) {
                Ch_transaction ch = new Ch_transaction();
                ch.setCod(rs.getString("cod"));
                ch.setId(leftPad(rs.getString("id"), 15, "0"));
                ch.setFiliale(rs.getString("filiale"));
                ch.setTipotr(rs.getString("tipotr"));
                ch.setUser(rs.getString("user"));
                ch.setTill(rs.getString("till"));
                ch.setData(rs.getString("data"));
                ch.setTipocliente(rs.getString("tipocliente"));
                ch.setId_open_till(rs.getString("id_open_till"));
                ch.setPay(rs.getString("pay"));
                ch.setTotal(rs.getString("total"));
                ch.setFix(rs.getString("fix"));
                ch.setCom(rs.getString("com"));
                ch.setRound(rs.getString("round"));
                ch.setCommission(rs.getString("commission"));
                ch.setSpread_total(rs.getString("spread_total"));
                ch.setNote(rs.getString("note"));
                ch.setAgency(rs.getString("agency"));
                ch.setAgency_cod(rs.getString("agency_cod"));
                ch.setLocalfigures(rs.getString("localfigures"));
                ch.setPos(rs.getString("pos"));
                ch.setIntbook(rs.getString("intbook"));
                ch.setIntbook_type(rs.getString("intbook_type"));
                ch.setIntbook_1_tf(rs.getString("intbook_1_tf"));
                ch.setIntbook_1_mod(rs.getString("intbook_1_mod"));
                ch.setIntbook_1_val(rs.getString("intbook_1_val"));
                ch.setIntbook_2_tf(rs.getString("intbook_2_tf"));
                ch.setIntbook_2_mod(rs.getString("intbook_2_mod"));
                ch.setIntbook_2_val(rs.getString("intbook_2_val"));
                ch.setIntbook_3_tf(rs.getString("intbook_3_tf"));
                ch.setIntbook_3_mod(rs.getString("intbook_3_mod"));
                ch.setIntbook_3_val(rs.getString("intbook_3_val"));
                ch.setIntbook_mac(rs.getString("intbook_mac"));
                ch.setIntbook_cli(rs.getString("intbook_cli"));
                ch.setCl_cf(rs.getString("cl_cf"));
                ch.setCl_cod(rs.getString("cl_cod"));
                ch.setDel_fg(rs.getString("del_fg"));
                ch.setDel_dt(rs.getString("del_dt"));
                ch.setDel_user(rs.getString("del_user"));
                ch.setDel_motiv(rs.getString("del_motiv"));
                ch.setRefund(rs.getString("refund"));
                ch.setFa_number(rs.getString("fa_number"));
                ch.setCn_number(rs.getString("cn_number"));
                out.add(ch);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @param data
     * @param branch
     * @param branching
     * @return
     */
    public ArrayList<ET_change> list_esolver_et(String data, ArrayList<Branch> branch, String branching) {
        
        ArrayList<ET_change> out = new ArrayList<>();
        try {
            String sql3 = "SELECT * FROM et_change where fg_annullato='0' ";
            sql3 = sql3 + "AND dt_it >= '" + data + " 00:00:00' ";
            sql3 = sql3 + "AND dt_it <= '" + data + " 23:59:59' ";
            
            if (branching == null) {
                String filwhere = "";
                for (int i = 0; i < branch.size(); i++) {
                    filwhere = filwhere + "(filiale='" + branch.get(i).getCod() + "') OR ";
                }
                if (filwhere.length() > 3) {
                    sql3 = sql3 + " AND (" + filwhere.substring(0, filwhere.length() - 3).trim() + ") ";
                }
            } else {
                sql3 = sql3 + " AND filiale ='" + branching + "'";
            }
            sql3 = sql3 + " AND cod_dest NOT IN (SELECT cod FROM bank WHERE fg_annullato = '0' AND (bank_account = 'Y' OR cod in (select distinct(carta_credito) from carte_credito))) ";
            sql3 = sql3 + " ORDER BY dt_it";
            
            ResultSet rs = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql3);
            while (rs.next()) {
                ET_change et = new ET_change();
                et.setCod(rs.getString(1));
                et.setId(leftPad(rs.getString(2), 10, "0"));
                et.setFiliale(rs.getString(3));
                et.setUser(rs.getString(4));
                et.setTill_from(rs.getString(5));
                et.setFg_tofrom(rs.getString(6));
                et.setFg_brba(rs.getString(7));
                et.setCod_dest(rs.getString(8));
                et.setIdopen_from(rs.getString(9));
                et.setDt_it(rs.getString(10));
                et.setFg_annullato(rs.getString(11));
                et.setDel_dt(rs.getString(12));
                et.setDel_user(rs.getString(13));
                et.setDel_motiv(rs.getString(14));
                et.setNote(rs.getString(15));
                et.setIp_oneri(rs.getString(16));
                et.setFiliale_in(rs.getString(17));
                et.setId_in(rs.getString(18));
                et.setCod_in(rs.getString(19));
                out.add(et);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @param data
     * @param branch
     * @param branching
     * @return
     */
    public ArrayList<Openclose> list_esolver_ocerr(String data, ArrayList<Branch> branch, String branching) {
        
        ArrayList<Openclose> out = new ArrayList<>();
        try {
            
            String sql = "SELECT * FROM oc_lista WHERE errors = 'Y' ";
            sql = sql + "AND data >= '" + data + " 00:00:00' ";
            sql = sql + "AND data <= '" + data + " 23:59:59' ";
            
            if (branching == null) {
                String filwhere = "";
                for (int i = 0; i < branch.size(); i++) {
                    filwhere = filwhere + "(filiale='" + branch.get(i).getCod() + "') OR ";
                }
                if (filwhere.length() > 3) {
                    sql = sql + " AND (" + filwhere.substring(0, filwhere.length() - 3).trim() + ") ";
                }
            } else {
                sql = sql + " AND filiale ='" + branching + "'";
            }
            sql = sql + " ORDER BY data";
            
            ResultSet rs = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql);
            while (rs.next()) {
                Openclose oc = new Openclose(rs.getString(1), rs.getString(2), leftPad(rs.getString(3), 15, "0"),
                        rs.getString(4), rs.getString(5), rs.getString(6), rs.getString(7), rs.getString(8));
                oc.setCod_it(rs.getString("cod_it"));
                oc.setCod_itnc(rs.getString("cod_itnc"));
                oc.setForeign_tr(rs.getString("foreign_tr"));
                oc.setLocal_tr(rs.getString("local_tr"));
                oc.setStock_tr(rs.getString("stock_tr"));
                out.add(oc);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @param codCliente
     * @return
     */
    public String[] getCliente(String codCliente) {
        String query = "SELECT * FROM ch_transaction_client WHERE codcl = ? ORDER BY timestamp DESC LIMIT 1";
        try {
            ArrayList<String[]> coddoc = identificationCard();
            ArrayList<String[]> city = city_Italy_APM();
            PreparedStatement ps = this.c.prepareStatement(query, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, codCliente);
            ResultSet rs = ps.executeQuery();
            
            if (rs.next()) {
                String cliente[] = new String[15];
                cliente[0] = rs.getString("codfisc").replaceAll("---", "");
                cliente[1] = rs.getString("cognome");
                cliente[2] = rs.getString("nome");
                cliente[3] = rs.getString("indirizzo");
                cliente[4] = rs.getString("cap");
                String cit = formatAL(rs.getString("citta"), city, 1);
                cliente[5] = cit;
                cliente[6] = rs.getString("provincia");
                cliente[7] = rs.getString("nazione");
                cliente[8] = rs.getString("sesso");
                cliente[9] = rs.getString("dt_nascita");
                cliente[10] = rs.getString("citta_nascita");
                cliente[11] = formatAL(rs.getString("tipo_documento"), coddoc, 2);
                cliente[12] = rs.getString("numero_documento");
                cliente[13] = rs.getString("dt_rilascio_documento");
                cliente[14] = rs.getString("rilasciato_da_documento");
                return cliente;
            } else {
                String sql = "SELECT * FROM anagrafica_ru where ndg = ?";
                PreparedStatement ps1 = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
                ps1.setString(1, codCliente.replaceAll("---", ""));
                ResultSet rs1 = ps1.executeQuery();
                if (rs1.next()) {
                    String cliente[] = new String[15];
                    cliente[0] = rs1.getString("codice_fiscale");
                    cliente[1] = rs1.getString("cognome");
                    cliente[2] = rs1.getString("nome");
                    cliente[3] = rs1.getString("indirizzo");
                    cliente[4] = rs1.getString("cap");
                    String cit = formatAL(rs1.getString("citta"), city, 1);
                    cliente[5] = cit;
                    cliente[6] = rs1.getString("provincia");
                    cliente[7] = rs1.getString("paese_estero_residenza");
                    cliente[8] = rs1.getString("sesso");
                    cliente[9] = formatStringtoStringDate(rs1.getString("dt_nascita"), patternsql, patternnormdate_filter);
                    cliente[10] = rs1.getString("citta_nascita");
                    cliente[11] = formatAL(rs1.getString("tipo_documento"), coddoc, 2);
                    cliente[12] = rs1.getString("numero_documento");
                    cliente[13] = rs1.getString("dt_rilascio_documento");
                    cliente[14] = rs1.getString("rilasciato_da_documento");
                    return cliente;
                }
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return null;
    }

    /**
     *
     * @param data
     * @param f1
     * @param f2
     * @return
     */
    public ArrayList<Client> getTransazioni(String data, String f1, String f2) {
        ArrayList<Client> out = new ArrayList<>();
        ArrayList<Client> cl = new ArrayList<>();
        try {
            String query = "SELECT cod,cl_cod,data FROM ch_transaction WHERE del_fg='0' and data like '" + data + "%' ";
            if (f1 != null && f2 != null) {
                query = query + "AND cl_cod NOT IN (SELECT cl_cod FROM ch_transaction c where del_fg='0' AND data >= '" + f1 + " 00:00:00' and data <= '" + f2 + " 23:59:59')";
            }
            
            ResultSet rs = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(query);
            while (rs.next()) {
                Client c0 = query_Client_transaction(rs.getString("cod"), rs.getString("cl_cod"));
                boolean add = true;
                for (int i = 0; i < cl.size(); i++) {
                    Client dacontrollare = cl.get(i);
                    if (dacontrollare.getCode().equalsIgnoreCase(c0.getCode())) {
                        add = false;
                        break;
                    } else if (dacontrollare.getCodfisc().equals("---")) {
                        if (dacontrollare.getNome().trim().equalsIgnoreCase(c0.getNome().trim())
                                && dacontrollare.getCognome().trim().equalsIgnoreCase(c0.getCognome().trim())
                                && dacontrollare.getNazione_nascita().trim().equalsIgnoreCase(c0.getNazione_nascita().trim())
                                && dacontrollare.getDt_nascita().trim().equalsIgnoreCase(c0.getDt_nascita().trim())) {
                            add = false;
                            break;
                        }
                    } else {
                        if (dacontrollare.getCodfisc().equalsIgnoreCase(c0.getCodfisc().trim())) {
                            add = false;
                            break;
                        }
                    }
                    
                }
                
                if (add) {
                    cl.add(c0);
                    c0.setDatatr(formatStringtoStringDate(rs.getString("data"), patternsqldate, patternnormdate_filter));
                    out.add(c0);
                }
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @param filiale
     * @return
     */
    public ArrayList<String[]> getValuteForMonitor(String filiale) {
        ArrayList<String[]> al = new ArrayList<>();
        try {
            
            String query = "SELECT valuta, de_valuta, cambio_bce, buy_std_type, buy_std_value, buy_std, sell_std_value, sell_std_type, sell_std, filiale, enable_buy, enable_sell "
                    + "FROM valute where fg_valuta_corrente='0' AND filiale ='" + filiale + "' ";
            
            if (filiale.equals("---")) {
                query = "SELECT valuta, de_valuta, cambio_bce, buy_std_type, buy_std_value, buy_std, sell_std_value, sell_std_type, sell_std, filiale, enable_buy, enable_sell "
                        + "FROM valute where fg_valuta_corrente='0' AND filiale <>'000' ";
            }
            
            query = query + "ORDER BY filiale,valuta";
            ResultSet rs = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(query);
            while (rs.next()) {
                String var[] = {rs.getString("valuta"), rs.getString("de_valuta"), rs.getString("cambio_bce"), rs.getString("buy_std_value"),
                    rs.getString("buy_std_type"), rs.getString("buy_std"), rs.getString("sell_std_value"), rs.getString("sell_std_type"),
                    rs.getString("sell_std"), rs.getString("filiale"), rs.getString("enable_buy"), rs.getString("enable_sell")
                };
                al.add(var);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return al;
    }

    /**
     *
     * @param data
     * @return
     */
    public ArrayList<String> list_openclose_day(String data) {
        ArrayList<String> al = new ArrayList<>();
        try {
            String sql = "SELECT filiale FROM oc_lista where data like'" + data + "%' and till = '000' AND fg_tipo='C' ORDER BY filiale";
            ResultSet rs = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql);
            while (rs.next()) {
                al.add(rs.getString(1));
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return al;
    }

    /**
     *
     * @param codice
     * @return
     */
    public String getRespCod(String codice) {
        try {
            String sql = "SELECT dest FROM codici_sblocco_file WHERE listcod like '%" + codice + ";%'";
            ResultSet rs = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql);
            if (rs.next()) {
                return rs.getString(1);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return "";
    }

    /**
     *
     * @param cod_tr
     * @param tipoutil
     * @return
     */
    public Codici_sblocco getCod_tr(String cod_tr, String tipoutil) {
        try {
            String sql = "SELECT * FROM codici_sblocco where cod_tr = '" + cod_tr + "' AND ty_util='" + tipoutil + "'";
            ResultSet rs = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql);
            if (rs.next()) {
                return new Codici_sblocco(
                        rs.getString(1),
                        rs.getString(2),
                        rs.getString(3), rs.getString(4), rs.getString(5), rs.getString(6), rs.getString(7));
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return null;
    }

    /**
     *
     * @return
     */
    public ArrayList<String[]> contabilita() {
        ArrayList<String[]> out = new ArrayList<>();
        try {
            String sql = "SELECT * FROM contabilita ORDER BY descrizione";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                String[] o1 = {rs.getString(1), rs.getString(2), rs.getString(3)};
                out.add(o1);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @param cod
     * @return
     */
    public String contabilita(String cod) {
        try {
            String sql = "SELECT conto FROM contabilita WHERE id = '" + cod + "'";
            
            ResultSet rs = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql);
            if (rs.next()) {
                return rs.getString(1);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return "-";
    }

    /**
     *
     * @param branch
     * @param brlist
     * @return
     */
    public ArrayList<OfficeStockPriceBranch_value> list_OfficeStockPrice_value_branch(ArrayList<String> branch, ArrayList<Branch> brlist) {
        ArrayList<OfficeStockPriceBranch_value> out = new ArrayList<>();
        ArrayList<Currency> licur = list_figures_query_edit("000");
        ArrayList<Figures> lifg = list_figures("000");
        String valutalocale = get_local_currency()[0];
        
        try {
            
            String sql = "SELECT cod_value,filiale,total,kind,controval FROM stock WHERE tipostock = 'CH' AND (kind ='01' or kind ='02') ";
            boolean dividi = get_national_office().getChangetype().equals("/");
            String filwhere = "";
            for (int i = 0; i < branch.size(); i++) {
                filwhere = filwhere + "filiale = '" + branch.get(i) + "' OR ";
            }
            
            if (filwhere.length() > 3) {
                sql = sql + " AND (" + filwhere.substring(0, filwhere.length() - 3).trim() + ") ";
            }
            
            sql = sql + " AND total <>'0.00' ORDER BY cod_value,kind,filiale";
            ResultSet rs = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql);
            ArrayList<String> listval = new ArrayList<>();
            
            ArrayList<String[]> listval_new = new ArrayList<>();

            //cod_value,filiale,total,kind,controval
            while (rs.next()) {
                String[] v_new = {rs.getString("cod_value"), rs.getString("filiale"), rs.getString("total"), rs.getString("kind"), rs.getString("controval")};
                listval_new.add(v_new);
                listval.add(rs.getString("cod_value"));
            }
            removeDuplicatesAL(listval);
            
            listval.forEach(val -> {
//            for (int i = 0; i < listval.size(); i++) {
//                String val = listval.get(i);
                OfficeStockPriceBranch_value osp01 = new OfficeStockPriceBranch_value();
                osp01.setCurrency(val);
                osp01.setDecurrency(formatALCurrency(val, licur));
                osp01.setSupporto("01 " + Engine.get_figures(lifg, "01").getDe_supporto());
                
                OfficeStockPriceBranch_value osp02 = new OfficeStockPriceBranch_value();
                osp02.setCurrency(val);
                osp02.setDecurrency(formatALCurrency(val, licur));
                osp02.setSupporto("02 " + Engine.get_figures(lifg, "02").getDe_supporto());
                
                OfficeStockPriceBranch_value osp03 = new OfficeStockPriceBranch_value();
                osp03.setCurrency(val);
                osp03.setDecurrency(formatALCurrency(val, licur));
                osp03.setSupporto("03 " + Engine.get_figures(lifg, "03").getDe_supporto());
                
                ArrayList<String[]> valorifiliali01 = new ArrayList<>();
                ArrayList<String[]> valorifiliali02 = new ArrayList<>();
                ArrayList<String[]> valorifiliali03 = new ArrayList<>();
                
                branch.forEach(filiale0 -> {

//                for (int x = 0; x < branch.size(); x++) {
//                    
//                    String filiale0 = branch.get(x);
                    AtomicDouble setQtaosp01 = new AtomicDouble(0.0);
                    AtomicDouble controv01 = new AtomicDouble(0.0);
//                    double setQtaosp01 = 0.00;
//                    double controv01 = 0.00;
                    AtomicDouble setQtaosp02 = new AtomicDouble(0.0);
                    AtomicDouble controv02 = new AtomicDouble(0.0);
//                    double setQtaosp02 = 0.00;
//                    double controv02 = 0.00;
                    AtomicDouble setQtaosp03 = new AtomicDouble(0.0);
                    AtomicDouble controv03 = new AtomicDouble(0.0);
//                    double setQtaosp03 = 0.00;
//                    double controv03 = 0.00;
//                        YTDbuy.addAndGet(

//                    for (int y = 0; y < listval_new.size(); y++) {
                    listval_new.forEach(v_new -> {
//                        String[] v_new = listval_new.get(y);
//                        cod_value,filiale,total,kind,controval
//                    while (rs.next()) {
                        if (v_new[0].equals(val)) {
                            double total = fd(v_new[2]);
                            double controval = fd(v_new[4]);
                            if (v_new[0].equals(val) && v_new[1].equals(filiale0)) {
                                setQtaosp01.addAndGet(total);
                                if (v_new[0].equals(valutalocale)) {
                                    controv01.addAndGet(total);
                                } else {
                                    controv01.addAndGet(controval);
                                }
                            } else if (v_new[3].equals("02") && v_new[1].equals(filiale0)) {
                                setQtaosp02.addAndGet(total);
                                controv02.addAndGet(controval);
                            } else if (v_new[3].equals("03") && v_new[1].equals(filiale0)) {
                                setQtaosp03.addAndGet(total);
                                controv03.addAndGet(controval);
                            }
                        }
//                    }
                    });
                    
                    setQtaosp01.set(roundDouble(setQtaosp01.get(), 2));
                    controv01.set(roundDouble(controv01.get(), 2));
                    
                    setQtaosp02.set(roundDouble(setQtaosp02.get(), 2));
                    controv02.set(roundDouble(controv02.get(), 2));
                    
                    setQtaosp03.set(roundDouble(setQtaosp03.get(), 2));
                    controv03.set(roundDouble(controv03.get(), 2));
                    
                    if (setQtaosp01.get() > 0) {
                        double mediarate = getControvaloreOFFSET(setQtaosp01.get(), controv01.get(), dividi);
                        String[] va  = {formatBankBranch(filiale0, "BR", null, brlist, null),
                            roundDoubleandFormat(setQtaosp01.get(), 2),
                            roundDoubleandFormat(mediarate, 8),
                            roundDoubleandFormat(controv01.get(), 2)};
                        
                        if (newpread) {
                            if (licur.stream().filter(c1 -> c1.getCode().equals(val)).findAny().get() != null) {
                                mediarate = fd(licur.stream().filter(c1 -> c1.getCode().equals(val)).findAny().get().getCambio_bce());
                                va[2] = roundDoubleandFormat(mediarate, 8);
                                va[3] = roundDoubleandFormat(getControvalore(setQtaosp01.get(), mediarate, dividi), 2);
                            }
                        }
                        
                        valorifiliali01.add(va);
                    }
                    
                    if (setQtaosp02.get() > 0) {
                        double mediarate = getControvaloreOFFSET(setQtaosp02.get(), controv02.get(), dividi);
                        String[] va  = {formatBankBranch(filiale0, "BR", null, brlist, null),
                            ((roundDoubleandFormat(setQtaosp02.get(), 2))),
                            (roundDoubleandFormat(mediarate, 8)),
                            (roundDoubleandFormat(controv02.get(), 2))};
                        
                        if (newpread) {
                            if (licur.stream().filter(c1 -> c1.getCode().equals(val)).findAny().get() != null) {
                                mediarate = fd(licur.stream().filter(c1 -> c1.getCode().equals(val)).findAny().get().getCambio_bce());
                                va[2] = roundDoubleandFormat(mediarate, 8);
                                va[3] = roundDoubleandFormat(getControvalore(controv02.get(), mediarate, dividi), 2);
                            }
                        }
                        
                        valorifiliali02.add(va);
                    }
                    
                    if (setQtaosp03.get() > 0) {
                        double mediarate = getControvaloreOFFSET(setQtaosp03.get(), controv03.get(), dividi);
                        String[] va  = {formatBankBranch(filiale0, "BR", null, brlist, null),
                            roundDoubleandFormat(setQtaosp03.get(), 2), roundDoubleandFormat(mediarate, 8),
                            roundDoubleandFormat(controv03.get(), 2)};
                        
                        if (newpread) {
                            if (licur.stream().filter(c1 -> c1.getCode().equals(val)).findAny().get() != null) {
                                mediarate = fd(licur.stream().filter(c1 -> c1.getCode().equals(val)).findAny().get().getCambio_bce());
                                va[2] = roundDoubleandFormat(mediarate, 8);
                                va[3] = roundDoubleandFormat(getControvalore(setQtaosp03.get(), mediarate, dividi), 2);
                            }
                        }
                        
                        valorifiliali03.add(va);
                    }
                });
                if (!valorifiliali01.isEmpty()) {
                    osp01.setDati(valorifiliali01);
                    out.add(osp01);
                }
                if (!valorifiliali02.isEmpty()) {
                    osp02.setDati(valorifiliali02);
                    out.add(osp02);
                }
                if (!valorifiliali03.isEmpty()) {
                    osp03.setDati(valorifiliali03);
                    out.add(osp03);
                }
//            }
            });
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @param data1
     * @param data2
     * @param filiale
     * @return
     */
    public ArrayList<C_TrimestraleCZK_value> getC_TrimestraleCZK(String data1, String data2, String filiale) {
        
        String loc = get_local_currency()[0];
        
        ArrayList<C_TrimestraleCZK_value> out = new ArrayList<>();
        try {
            String sql = "SELECT cod,tipotr FROM ch_transaction WHERE del_fg = '0' AND filiale = '" + filiale + "' ";
            
            if (data1 != null) {
                sql = sql + "AND data >= '" + data1 + " 00:00:00' ";
            }
            if (data2 != null) {
                sql = sql + "AND data <= '" + data2 + " 23:59:59' ";
            }
            
            sql = sql + "AND cod NOT IN (SELECT cod_tr FROM ch_transaction_refund WHERE type = 'CO' AND status = '1') ORDER BY data";
            
            ArrayList<Currency> licur = list_figures_query_edit(filiale);
            
            ResultSet rs = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql);
            
            ArrayList<String> vallist = new ArrayList<>();
            ArrayList<String[]> valori = new ArrayList<>();
            while (rs.next()) {
                ArrayList<Ch_transaction_value> list = query_transaction_value(rs.getString("cod"));
                for (int j = 0; j < list.size(); j++) {
                    vallist.add(list.get(j).getValuta());
                    
                    String[] v1 = {list.get(j).getValuta(),
                        list.get(j).getSupporto(),
                        list.get(j).getQuantita(),
                        rs.getString("tipotr")};
                    valori.add(v1);
                }
            }
            rs.beforeFirst();
            removeDuplicatesAL(vallist);
            
            for (int i = 0; i < vallist.size(); i++) {
                String valuta = vallist.get(i);
                C_TrimestraleCZK_value tczk = new C_TrimestraleCZK_value();
                tczk.setValuta(valuta + " - " + formatALCurrency(valuta, licur));
                
                double acq = 0.00;
                double vend = 0.00;
                
                for (int x = 0; x < valori.size(); x++) {
                    String[] v1 = valori.get(x);
                    if (valuta.equals(v1[0])) {
                        if (valuta.equals(loc)) {
                            if (v1[3].equals("B") && v1[1].equals("04")) {
                                acq = acq + fd(v1[2]);
                            }
                        } else if (v1[3].equals("B")) {
                            acq = acq + fd(v1[2]);
                        } else {
                            vend = vend + fd(v1[2]);
                        }
                    }
                }
                tczk.setAcquisti(roundDoubleandFormat(acq, 2));
                tczk.setVendita(roundDoubleandFormat(vend, 2));
                out.add(tczk);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        
        return out;
        
    }

    /**
     *
     * @param data
     * @param branch
     * @param branching
     * @return
     */
    public ArrayList<String[]> get_fatt_note(String data, ArrayList<Branch> branch, String branching) {
        ArrayList<String[]> out = new ArrayList<>();
        try {
            
            String sql = "SELECT * FROM inv_list i, ch_transaction c WHERE i.stato='1' AND i.transaction = c.cod ";
            
            sql = sql + "AND i.dt >= '" + data + " 00:00:00' ";
            sql = sql + "AND i.dt <= '" + data + " 23:59:59' ";
            
            if (branching == null) {
                
                String filwhere = "";
                for (int i = 0; i < branch.size(); i++) {
                    filwhere = filwhere + "(c.filiale='" + branch.get(i).getCod() + "') OR ";
                }
                if (filwhere.length() > 3) {
                    sql = sql + " AND (" + filwhere.substring(0, filwhere.length() - 3).trim() + ") ";
                }
            } else {
                sql = sql + " AND c.filiale ='" + branching + "'";
            }
            
            ResultSet rs = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql);
            while (rs.next()) {
                String valori[] = {
                    rs.getString("c.filiale"), rs.getString("c.cod"), rs.getString("c.cl_cod"), rs.getString("c.pay"),
                    rs.getString("c.total"), rs.getString("c.commission"), rs.getString("i.tipo"), rs.getString("c.tipotr"),
                    rs.getString("c.round"), rs.getString("i.numero"), rs.getString("c.localfigures"), rs.getString("c.pos"),
                    rs.getString("c.del_fg"), rs.getString("c.spread_total")};
                out.add(valori);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @param numero
     * @param trans
     * @param tipo
     * @param stato
     * @param date
     * @return
     */
    public boolean insert_inv_list(String numero, String trans, String tipo, String stato, String date) {
        try {
            String ins = "INSERT INTO inv_list VALUES (?,?,?,?,?,?)";
            PreparedStatement ps = this.c.prepareStatement(ins, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, numero);
            ps.setString(2, trans);
            ps.setString(3, tipo);
            ps.setString(4, stato);
            ps.setString(5, date);
            ps.setString(6, getCodLocal(true)[0]);
            ps.execute();
            String dtoper = getNow();
            String dt_val = formatStringtoStringDate(dtoper, patternsqldate, patternnormdate);
            insert_aggiornamenti_mod(new Aggiornamenti_mod(
                    generaId(50), "000", dt_val, "0",
                    "PS", ps.toString(), "service", dtoper));
            return true;
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return false;
    }

    /**
     *
     * @param cod
     * @param table
     * @param field
     * @param numero
     * @return
     */
    public boolean update_invoice_transaction(String cod, String table, String field, String numero) {
        try {
            String upd = "UPDATE " + table + " SET " + field + " = ? WHERE cod = ?";
            PreparedStatement ps = this.c.prepareStatement(upd, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, numero);
            ps.setString(2, cod);
            int x = ps.executeUpdate();
            if (x > 0) {
                String dtoper = getNow();
                String dt_val = formatStringtoStringDate(dtoper, patternsqldate, patternnormdate);
                insert_aggiornamenti_mod(new Aggiornamenti_mod(
                        generaId(50), "000", dt_val, "0",
                        "PS", ps.toString(), "service", dtoper));
            }
            return x > 0;
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return false;
    }

    /**
     *
     * @param branch
     * @param datad1
     * @param datad2
     * @param allbr
     * @param frequency
     * @return
     */
    public ArrayList<CustomerTransactionList_value> list_CustomerTransactionList_NEW(
            ArrayList<String> branch, String datad1, String datad2, ArrayList<Branch> allbr, String frequency) {
        
        ArrayList<CustomerTransactionList_value> out = new ArrayList<>();
        try {
            String sql = "(SELECT codtr FROM ch_transaction_doc where tipodoc = '_macprofcl' "
                    + "AND data_load >= '" + datad1 + " 00:00:00' AND data_load <= '" + datad2 + " 23:59:59' ";
            String filwhere = "";
            for (int i = 0; i < branch.size(); i++) {
                filwhere = filwhere + "codtr LIKE '" + branch.get(i) + "%' OR ";
            }
            if (filwhere.length() > 3) {
                sql = sql + " AND (" + filwhere.substring(0, filwhere.length() - 3).trim() + ") ";
            }
            sql = sql + ")";
            String finalsql = "SELECT tr1.cl_cod,tr1.cod FROM ch_transaction tr1 WHERE tr1.del_fg='0' AND tr1.cod IN " + sql;
            List<String> cl = new ArrayList<>();
            List<String> transaction = new ArrayList<>();
            ResultSet rs0 = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(finalsql);
            while (rs0.next()) {
                String motivation = getMotivation(rs0.getString("tr1.cod"));
                if (frequency.equals("D") && motivation.equalsIgnoreCase("Abnormal Frequency Daily")) {
                    cl.add(rs0.getString("tr1.cl_cod"));
                } else if (frequency.equals("W") && motivation.equalsIgnoreCase("Abnormal Frequency Weekly")) {
                    cl.add(rs0.getString("tr1.cl_cod"));
                } else if (frequency.equals("M") && motivation.equalsIgnoreCase("Abnormal Frequency Monthly")) {
                    cl.add(rs0.getString("tr1.cl_cod"));
                } else if (frequency.equals("M1") && motivation.equalsIgnoreCase("Abnormal Volume Monthly")) {
                    cl.add(rs0.getString("tr1.cl_cod"));
                } else if (frequency.equals("Q") && motivation.equalsIgnoreCase("Abnormal Volume Quarterly")) {
                    cl.add(rs0.getString("tr1.cl_cod"));
                } else if (frequency.equals("RC") && motivation.equalsIgnoreCase("Volume 'Rogue Country' Weekly")) {
                    cl.add(rs0.getString("tr1.cl_cod"));
                } else if (frequency.equals("TH") && motivation.equalsIgnoreCase("Threshold")) {
                    cl.add(rs0.getString("tr1.cl_cod"));
                } else if (frequency.equals("B") && motivation.equalsIgnoreCase("Big Notes")) {
                    cl.add(rs0.getString("tr1.cl_cod"));
                    transaction.add(rs0.getString("tr1.cod"));
                }
            }
            
            cl = cl.stream()
                    .distinct()
                    .collect(toList());
            
            DateTimeFormatter formatter = forPattern(patternsql);
            ArrayList<Figures> fig = list_all_figures();
            ArrayList<CustomerKind> list_customerKind = list_customerKind();
            
            cl.forEach(cliente -> {
                Client cli = query_Client(cliente);
                if (cli != null) {
                    
                    CustomerTransactionList_value c1 = new CustomerTransactionList_value();
                    ArrayList<CustomerTransactionList_value> dati = new ArrayList<>();
                    c1.setCustomer(cli.getCognome() + " " + cli.getNome());
                    AtomicDouble totalCUS = new AtomicDouble(0.0);
                    
                    String sql1 = "SELECT tr1.*,tr2.*,cl.nome,cl.cognome FROM ch_transaction tr1, ch_transaction_valori tr2,ch_transaction_client cl"
                            + " WHERE tr1.cod=tr2.cod_tr AND tr1.cod = cl.codtr AND tr1.cl_cod = '" + cliente + "' ORDER BY tr1.data DESC";
                    try {
                        ResultSet rs = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql1);
                        DateTime datarif = null;
                        while (rs.next()) {
                            CustomerTransactionList_value rm = new CustomerTransactionList_value();
                            rm.setBranch((rs.getString("tr1.filiale")));
                            rm.setType(formatBB(rs.getString("tr1.bb")));
                            rm.setTill(rs.getString("tr1.till"));
                            rm.setUser(rs.getString("tr1.user"));
                            rm.setNotr(rs.getString("tr1.id"));
                            rm.setTime(rs.getString("tr1.data"));
                            rm.setCur(rs.getString("tr2.valuta"));
                            rm.setKind(formatType(rs.getString("tr1.tipotr")) + " " + Engine.get_figures(fig, rs.getString("tr2.supporto")).getDe_supporto());
                            rm.setAmount(rs.getString("tr2.quantita"));
                            rm.setRate(rs.getString("tr2.rate"));
                            rm.setTotal(rs.getString("tr2.total"));
                            rm.setPerc(rs.getString("tr2.com_perc_tot"));
                            rm.setComfree(rs.getString("tr2.fx_com"));
                            rm.setPayinpayout(rs.getString("tr2.net"));
                            rm.setCustomer(rs.getString("cl.cognome") + " " + rs.getString("cl.nome"));
                            rm.setSpread(rs.getString("tr2.spread"));
                            String lfig = rs.getString("tr1.localfigures");
                            if (rs.getString("tr1.localfigures").equals("-")) {
                                lfig = "01";
                            }
                            rm.setFig(lfig);
                            rm.setPos(rs.getString("tr1.pos"));
                            rm.setRound(rs.getString("tr1.round"));
                            if (Engine.get_customerKind(list_customerKind, rs.getString("tr1.tipocliente")).getFg_nazionalita().equals("1")) {
                                rm.setResidentnonresident("Resident");
                            } else {
                                rm.setResidentnonresident("Non Resident");
                            }
                            rm.setInternetbooking(rs.getString("tr1.intbook"));
                            
                            double t1 = fd(rm.getPayinpayout());
                            if (rs.getString("tr1.tipotr").equals("B")) {
                                t1 = fd(rm.getTotal());
                            }
                            
                            DateTime datatr = formatter.parseDateTime(rs.getString("tr1.data").substring(0, 10));
                            if (datarif == null) {
                                datarif = formatter.parseDateTime(rs.getString("tr1.data").substring(0, 10));
                            }
                            
                            switch (frequency) {
                                case "D":
                                    if (datatr.isEqual(datarif)) {
                                        dati.add(rm);
                                        totalCUS.addAndGet(t1);
                                    }
                                    break;
                                case "W":
                                case "RC":
                                case "TH":
                                    if (datarif.minusDays(7).isBefore(datatr) || datarif.minusDays(7).isEqual(datatr)) {
                                        dati.add(rm);
                                        totalCUS.addAndGet(t1);
                                    }
                                    break;
                                case "M":
                                case "M1":
                                    if (datarif.minusDays(30).isBefore(datatr) || datarif.minusDays(30).isEqual(datatr)) {
                                        dati.add(rm);
                                        totalCUS.addAndGet(t1);
                                    }
                                    break;
                                case "Q":
                                    if (datarif.minusDays(90).isBefore(datatr) || datarif.minusDays(90).isEqual(datatr)) {
                                        dati.add(rm);
                                        totalCUS.addAndGet(t1);
                                    }
                                    break;
                                case "B":
                                    if (transaction.contains(rs.getString("tr1.cod"))) {
                                        dati.add(rm);
                                        totalCUS.addAndGet(t1);
                                    }
                                    break;
                                default:
                                    break;
                            }
                        }
                        
                        if (!dati.isEmpty()) {
                            c1.setTotal(roundDoubleandFormat(totalCUS.get(), 2));
                            c1.setDati(dati);
                            out.add(c1);
                        }
                    } catch (SQLException ex) {
                        ex.printStackTrace();
                        insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
                    }
                }
            });
            
        } catch (SQLException ex) {
            ex.printStackTrace();
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @param branch
     * @param datad1
     * @param datad2
     * @param allbr
     * @param numtrans
     * @param threshold
     * @return
     */
    public ArrayList<CustomerTransactionList_value> list_CustomerTransactionList_value(
            ArrayList<String> branch, String datad1, String datad2, ArrayList<Branch> allbr,
            String numtrans, String threshold) {
        ArrayList<CustomerTransactionList_value> out = new ArrayList<>();
        try {
            String sql = "SELECT tr1.*,tr2.*,cl.nome,cl.cognome FROM ch_transaction tr1, ch_transaction_valori tr2,ch_transaction_client cl"
                    + " WHERE tr1.cod=tr2.cod_tr AND tr1.cod = cl.codtr AND tr1.del_fg='0' ";
            String filwhere = "";
            for (int i = 0; i < branch.size(); i++) {
                filwhere = filwhere + "tr1.filiale='" + branch.get(i) + "' OR ";
            }
            if (filwhere.length() > 3) {
                sql = sql + " AND (" + filwhere.substring(0, filwhere.length() - 3).trim() + ") ";
            }
            if (datad1 != null) {
                sql = sql + "AND tr1.data >= '" + datad1 + " 00:00:00' ";
            }
            if (datad2 != null) {
                sql = sql + "AND tr1.data <= '" + datad2 + " 23:59:59' ";
            }
            sql = sql + " ORDER BY tr1.cl_cod,tr1.filiale,tr1.data";
            
            ResultSet rs = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql);
            
            ArrayList<String> cl = new ArrayList<>();
            
            while (rs.next()) {
                cl.add(rs.getString("tr1.cl_cod"));
            }
            removeDuplicatesAL(cl);
            
            ArrayList<Figures> fig = list_all_figures();
            ArrayList<CustomerKind> list_customerKind = list_customerKind();
            
            for (int i = 0; i < cl.size(); i++) {
                String client = cl.get(i);
                Client cli = query_Client(client);
                if (cli != null) {
                    CustomerTransactionList_value c1 = new CustomerTransactionList_value();
                    ArrayList<CustomerTransactionList_value> dati = new ArrayList<>();
                    c1.setCustomer(cli.getCognome() + " " + cli.getNome());
                    if (threshold != null) {
                        c1.setTreshold(threshold);
                    } else {
                        c1.setTreshold("");
                    }
                    ArrayList<String> cl_numtr = new ArrayList<>();
                    
                    double tot = 0.00;
                    
                    while (rs.next()) {
                        if (rs.getString("tr1.cl_cod").equals(client)) {
                            cl_numtr.add(rs.getString("tr1.cod"));
                            CustomerTransactionList_value rm = new CustomerTransactionList_value();
                            rm.setBranch((rs.getString("tr1.filiale")));
                            rm.setType(formatBB(rs.getString("tr1.bb")));
                            rm.setTill(rs.getString("tr1.till"));
                            rm.setUser(rs.getString("tr1.user"));
                            rm.setNotr(rs.getString("tr1.id"));
                            rm.setTime(rs.getString("tr1.data"));
                            rm.setCur(rs.getString("tr2.valuta"));
                            rm.setKind(formatType(rs.getString("tr1.tipotr")) + " " + Engine.get_figures(fig, rs.getString("tr2.supporto")).getDe_supporto());
                            rm.setAmount(rs.getString("tr2.quantita"));
                            rm.setRate(rs.getString("tr2.rate"));
                            rm.setTotal(rs.getString("tr2.total"));
                            rm.setPerc(rs.getString("tr2.com_perc_tot"));
                            rm.setComfree(rs.getString("tr2.fx_com"));
                            rm.setPayinpayout(rs.getString("tr2.net"));
                            rm.setCustomer(rs.getString("cl.cognome") + " " + rs.getString("cl.nome"));
                            rm.setSpread(rs.getString("tr2.spread"));
                            String lfig = rs.getString("tr1.localfigures");
                            if (rs.getString("tr1.localfigures").equals("-")) {
                                lfig = "01";
                            }
                            rm.setFig(lfig);
                            rm.setPos(rs.getString("tr1.pos"));
                            rm.setRound(rs.getString("tr1.round"));
                            if (Engine.get_customerKind(list_customerKind, rs.getString("tr1.tipocliente")).getFg_nazionalita().equals("1")) {
                                rm.setResidentnonresident("Resident");
                            } else {
                                rm.setResidentnonresident("Non Resident");
                            }
                            rm.setInternetbooking(rs.getString("tr1.intbook"));
                            
                            tot = tot + fd(rm.getTotal());
                            dati.add(rm);
                        }
                    }
                    
                    c1.setDati(dati);
                    
                    removeDuplicatesAL(cl_numtr);
                    if (numtrans != null) {
                        if (cl_numtr.size() >= parseInt(numtrans)) {
                            out.add(c1);
                        }
                    } else if (threshold != null) {
                        if (tot >= fd(formatDoubleforMysql(threshold))) {
                            out.add(c1);
                        }
                    }
                }
                rs.beforeFirst();
            }
            
        } catch (SQLException | NumberFormatException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @return
     */
    public ArrayList<String[]> indice_rischio() {
        ArrayList<String[]> out = new ArrayList<>();
        try {
            String sql = "SELECT * FROM indice_rischio WHERE stato = '0' ORDER BY message";
            ResultSet rs = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql);
            while (rs.next()) {
                String[] v = {rs.getString("message"),
                    formatStringtoStringDate(rs.getString("dt"), patternsqldate, patternnormdate_filter)};
                out.add(v);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @return
     */
    public ArrayList<String[]> indice_rischio_new() {
        ArrayList<String[]> out = new ArrayList<>();
        try {
            String sql = "SELECT * FROM indice_rischio WHERE stato='2' ORDER BY message";
            ResultSet rs = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql);
            while (rs.next()) {
                String[] v = {rs.getString("message"),
                    formatStringtoStringDate(rs.getString("dt"), patternsqldate, patternnormdate_filter)};
                out.add(v);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @param cod_tr
     * @param table
     * @return
     */
    public ArrayList<Stock> list_stock(String cod_tr, String table) {
        ArrayList<Stock> li = new ArrayList<>();
        try {
            String sql = "SELECT * FROM " + table + " WHERE idoperation = ? ORDER BY date ASC";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, cod_tr);
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                Stock st = new Stock();
                st.setDate(formatStringtoStringDate(rs.getString("date"), patternsqldate, patternnormdate));
                st.setCodice(rs.getString("codice"));
                st.setTotal(rs.getString("total"));
                st.setRate(rs.getString("rate"));
                st.setKind(rs.getString("kind"));
                st.setCod_value(rs.getString("cod_value"));
                li.add(st);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return li;
    }

    /**
     *
     * @param id_oper
     * @param kind
     * @param valuta
     * @return
     */
    public ArrayList<String[]> rate_history_mod(String id_oper, String kind, String valuta) {
        ArrayList<String[]> out = new ArrayList<>();
        try {
            String sql = "SELECT * FROM rate_history_mod where cod_tr = ? AND kind = ? AND valuta = ? ORDER BY dt DESC";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, id_oper);
            ps.setString(2, kind);
            ps.setString(3, valuta);
            
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                String[] v = {
                    rs.getString("old_rate"),
                    rs.getString("new_rate"),
                    rs.getString("user"),
                    formatStringtoStringDate(rs.getString("dt"), patternsqldate, patternnormdate)
                };
                out.add(v);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @param id_oper
     * @param tipo
     * @param kind
     * @param valuta
     * @param table
     * @return
     */
    public ArrayList<String[]> stock_quantity(String id_oper, String tipo, String kind, String valuta, String table) {
        ArrayList<String[]> out = new ArrayList<>();
        try {
            String sql = "SELECT * FROM stock_quantity where codice_stock in (SELECT codice FROM " + table + " where idoperation = ? AND kind = ? AND cod_value = ?) AND tipo = ?";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, id_oper);
            ps.setString(2, kind);
            ps.setString(3, valuta);
            ps.setString(4, tipo);
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                String[] v = {
                    rs.getString("cod"),
                    rs.getString("cod_transazione"),
                    rs.getString("tipo"),
                    rs.getString("codice_stock"),
                    rs.getString("quantity"),
                    rs.getString("rate"),
                    formatStringtoStringDate(rs.getString("date"), patternsqldate, patternnormdate)
                };
                out.add(v);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @param damod
     * @param add
     * @return
     */
    public boolean updateStock(ArrayList<String[]> damod, boolean add) {
        try {
            String dtoper = getNow();
            String dt_val = formatStringtoStringDate(dtoper, patternsqldate, patternnormdate);
            String oper = get_national_office().getChangetype();
            
            for (int i = 0; i < damod.size(); i++) {
                String[] v = damod.get(i);
                switch (v[6]) {
                    case "U": {
                        String controv = roundDoubleandFormat(fd(v[7]) / fd(v[5]), 2);
                        if (oper.equals("*")) {
                            controv = roundDoubleandFormat(fd(v[7]) * fd(v[5]), 2);
                        }
                        String upd = "UPDATE stock SET total = ?, controval = ? WHERE codice = ?";
                        PreparedStatement ps = this.c.prepareStatement(upd, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
                        ps.setString(1, v[7]);
                        ps.setString(2, controv);
                        ps.setString(3, v[3]);
                        int x = ps.executeUpdate();
                        if (x > 0) {
                            insert_aggiornamenti_mod(new Aggiornamenti_mod(generaId(50), "000", dt_val, "0", "PS", ps.toString(), "service", dtoper));
                        }
                        break;
                    }
                    case "D": {
                        String del = "DELETE FROM stock WHERE codice = ?";
                        PreparedStatement ps = this.c.prepareStatement(del, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
                        ps.setString(1, v[3]);
                        int y = ps.executeUpdate();
                        if (y > 0) {
                            insert_aggiornamenti_mod(new Aggiornamenti_mod(generaId(50), "000", dt_val, "0", "PS", ps.toString(), "service", dtoper));
                        }
                        break;
                    }
                    default:
                        return false;
                }
                if (add) {
                    String ins = "INSERT INTO stock_quantity VALUES (?,?,?,?,?,?,?)";
                    PreparedStatement ps = this.c.prepareStatement(ins, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
                    ps.setString(1, v[0]);
                    ps.setString(2, v[1]);
                    ps.setString(3, v[2]);
                    ps.setString(4, v[3]);
                    ps.setString(5, v[4]);
                    ps.setString(6, v[5]);
                    ps.setString(7, new DateTime().toString(patternsqldate));
                    ps.execute();
                    insert_aggiornamenti_mod(new Aggiornamenti_mod(
                            generaId(50), "000", dt_val, "0",
                            "PS", ps.toString(), "service", dtoper));
                }
            }
            return true;
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return false;
    }

    /**
     *
     * @param et
     * @param newrate
     * @param total
     * @param newspread
     * @return
     */
    public boolean update_ET_changerate_Partenza(ET_change et, String newrate,
            String total, String newspread) {
        try {
            String upd = "UPDATE et_change_valori SET ip_rate = ?, ip_total = ? , ip_spread = ? WHERE filiale = ? AND cod = ? AND currency = ? AND kind = ? ";
            PreparedStatement ps = this.c.prepareStatement(upd, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, newrate);
            ps.setString(2, total);
            ps.setString(3, newspread);
            ps.setString(4, et.getFiliale());
            ps.setString(5, et.getCod());
            ps.setString(6, et.getValuta());
            ps.setString(7, et.getSupporto());
            int x = ps.executeUpdate();
            String dtoper = getNow();
            String dt_val = formatStringtoStringDate(dtoper, patternsqldate, patternnormdate);
            insert_aggiornamenti_mod(new Aggiornamenti_mod(
                    generaId(50), "000", dt_val, "0",
                    "PS", ps.toString(), "service", dtoper));
            insert_aggiornamenti_mod(new Aggiornamenti_mod(
                    generaId(50), et.getFiliale(), dt_val, "0",
                    "PS", ps.toString(), "service", dtoper));
            return x > 0;
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return false;
    }

    /**
     *
     * @param et
     * @param newrate
     * @param total
     * @param newspread
     * @return
     */
    public boolean update_ET_changerate_Originale(ET_change et, String newrate,
            String total, String newspread) {
        try {
            String upd = "UPDATE et_change_valori SET ip_rate = ?, ip_total = ? , ip_spread = ? WHERE filiale = ? AND cod = ? AND currency = ? AND kind = ? ";
            PreparedStatement ps = this.c.prepareStatement(upd, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, newrate);
            ps.setString(2, total);
            ps.setString(3, newspread);
            ps.setString(4, et.getFiliale());
            ps.setString(5, et.getCod());
            ps.setString(6, et.getValuta());
            ps.setString(7, et.getSupporto());
            int x = ps.executeUpdate();
            if (x > 0) {
                String dtoper = getNow();
                String dt_val = formatStringtoStringDate(dtoper, patternsqldate, patternnormdate);
                insert_aggiornamenti_mod(new Aggiornamenti_mod(
                        generaId(50), "000", dt_val, "0",
                        "PS", ps.toString(), "service", dtoper));
            }
            return x > 0;
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return false;
    }

    /**
     *
     * @param et
     * @param buy_value
     * @param total
     * @param newspread
     * @return
     */
    public boolean update_ET_changerate(ET_change et, String buy_value,
            String total, String newspread) {
        try {
            String upd = "UPDATE et_change_valori SET ip_buyvalue = ?, ip_spread = ? WHERE filiale = ? AND cod = ? AND currency = ? AND kind = ? ";
            PreparedStatement ps = this.c.prepareStatement(upd, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, buy_value);
            ps.setString(2, newspread);
            ps.setString(3, et.getFiliale());
            ps.setString(4, et.getCod());
            ps.setString(5, et.getValuta());
            ps.setString(6, et.getSupporto());
            int x = ps.executeUpdate();
            if (x > 0) {
                String dtoper = getNow();
                String dt_val = formatStringtoStringDate(dtoper, patternsqldate, patternnormdate);
                insert_aggiornamenti_mod(new Aggiornamenti_mod(
                        generaId(50), "000", dt_val, "0",
                        "PS", ps.toString(), "service", dtoper));
            }
            return x > 0;
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return false;
    }

    /**
     *
     * @param id
     * @param newspread
     * @return
     */
    public boolean update_SE_changerate_valori(String id, String newspread) {
        try {
            String upd = "UPDATE ch_transaction_valori SET spread = ? WHERE id = ? ";
            PreparedStatement ps = this.c.prepareStatement(upd, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, newspread);
            ps.setString(2, id);
            int x = ps.executeUpdate();
            if (x > 0) {
                String dtoper = getNow();
                String dt_val = formatStringtoStringDate(dtoper, patternsqldate, patternnormdate);
                insert_aggiornamenti_mod(new Aggiornamenti_mod(
                        generaId(50), "000", dt_val, "0",
                        "PS", ps.toString(), "service", dtoper));
            }
            return x > 0;
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return false;
    }

    /**
     *
     * @param cod
     * @param newspread
     * @return
     */
    public boolean update_SE_changerate(String cod, String newspread) {
        try {
            String upd = "UPDATE ch_transaction SET spread_total = ? WHERE cod = ?";
            PreparedStatement ps = this.c.prepareStatement(upd, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, newspread);
            ps.setString(2, cod);
            int x = ps.executeUpdate();
            if (x > 0) {
                String dtoper = getNow();
                String dt_val = formatStringtoStringDate(dtoper, patternsqldate, patternnormdate);
                insert_aggiornamenti_mod(new Aggiornamenti_mod(
                        generaId(50), "000", dt_val, "0",
                        "PS", ps.toString(), "service", dtoper));
            }
            return x > 0;
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return false;
    }

    /**
     *
     * @param codice
     * @param controval
     * @param rate
     * @param table
     * @return
     */
    public boolean update_stock_changerate(String codice, String controval, String rate, String table) {
        try {
            String upd = "UPDATE " + table + " SET controval = ?, rate = ? WHERE codice = ?";
            PreparedStatement ps = this.c.prepareStatement(upd, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, controval);
            ps.setString(2, rate);
            ps.setString(3, codice);
            int x = ps.executeUpdate();
            if (x > 0) {
                String dtoper = getNow();
                String dt_val = formatStringtoStringDate(dtoper, patternsqldate, patternnormdate);
                insert_aggiornamenti_mod(new Aggiornamenti_mod(
                        generaId(50), "000", dt_val, "0",
                        "PS", ps.toString(), "service", dtoper));
            }
            return x > 0;
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return false;
    }

    /**
     *
     * @param value
     * @return
     */
    public boolean insert_history_changerate(String[] value) {
        try {
            String ins = "INSERT INTO rate_history_mod values (?,?,?,?,?,?,?,?,?)";
            PreparedStatement ps = this.c.prepareStatement(ins, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, value[0]);
            ps.setString(2, value[1]);
            ps.setString(3, value[2]);
            ps.setString(4, value[3]);
            ps.setString(5, value[4]);
            ps.setString(6, value[5]);
            ps.setString(7, value[6]);
            ps.setString(8, value[7]);
            ps.setString(9, value[8]);
            ps.execute();
            String dtoper = getNow();
            String dt_val = formatStringtoStringDate(dtoper, patternsqldate, patternnormdate);
            insert_aggiornamenti_mod(new Aggiornamenti_mod(
                    generaId(50), "000", dt_val, "0",
                    "PS", ps.toString(), "service", dtoper));
            return true;
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return false;
    }

    /**
     *
     * @param cod
     * @param rate
     * @return
     */
    public boolean update_stockquantity_changerate(String cod, String rate) {
        try {
            String upd = "UPDATE stock_quantity SET rate = ? WHERE cod = ?";
            PreparedStatement ps = this.c.prepareStatement(upd, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, rate);
            ps.setString(2, cod);
            int x = ps.executeUpdate();
            if (x > 0) {
                String dtoper = getNow();
                String dt_val = formatStringtoStringDate(dtoper, patternsqldate, patternnormdate);
                insert_aggiornamenti_mod(new Aggiornamenti_mod(
                        generaId(50), "000", dt_val, "0",
                        "PS", ps.toString(), "service", dtoper));
            }
            return x > 0;
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return false;
    }

    /**
     *
     * @param pages
     * @param tipouser
     * @return
     */
    public boolean is_authorized(String pages, String tipouser) {
        try {
            String sql = "SELECT * FROM pages WHERE pages = ? AND useraccepted like ?";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, pages);
            ps.setString(2, "%" + tipouser + "%");
            return ps.executeQuery().next();
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return false;
    }

    /**
     *
     * @return
     */
    public ArrayList<String[]> select_level_rate() {
        ArrayList<String[]> out = new ArrayList<>();
        try {
            String sql = "SELECT * FROM selectlevelrate";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                String[] o1 = {rs.getString(1), rs.getString(2), rs.getString(3)};
                out.add(o1);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @param filiale
     * @return
     */
    public ArrayList<Currency> list_currency_cartellocambi(String filiale) {
        ArrayList<Currency> out = new ArrayList<>();
        try {
            String sql = "SELECT * FROM valute WHERE (enable_buy = ? OR enable_sell = ?) AND filiale = ? ORDER BY valuta";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, "1");
            ps.setString(2, "1");
            ps.setString(3, filiale);
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                Currency cu = new Currency();
                cu.setCode(rs.getString("valuta"));
                cu.setDescrizione(rs.getString("de_valuta"));
                double d_rifbce = fd(rs.getString("cambio_bce"));
                if (rs.getString("enable_buy").equals("1")) {
                    if (rs.getString("buy_std_type").equals("0")) { //calcolo percentuale
                        double d_standard = fd(rs.getString("buy_std"));
                        double tot_st = d_rifbce * (100.0D + d_standard) / 100.0D;
                        cu.setBuy_std_value(formatMysqltoDisplay(roundDoubleandFormat(tot_st, 8)));
                    } else {
                        cu.setBuy_std_value(formatMysqltoDisplay(rs.getString("buy_std_value")));
                    }
                } else {
                    cu.setBuy_std_value("-");
                }
                if (rs.getString("enable_sell").equals("1")) {
                    if (rs.getString("sell_std_type").equals("0")) { //calcolo percentuale
                        double d_standard = fd(rs.getString("sell_std"));
                        double tot_st = d_rifbce * (100.0D + d_standard) / 100.0D;
                        cu.setSell_std_value(formatMysqltoDisplay(roundDoubleandFormat(tot_st, 8)));
                    } else {
                        cu.setSell_std_value(formatMysqltoDisplay(rs.getString("sell_std_value")));
                    }
                } else {
                    cu.setSell_std_value("-");
                }
                
                cu.setInternal_cur(rs.getString("fg_valuta_corrente"));
                
                out.add(cu);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    //ANTIRIC
    /**
     *
     * @param idCodTransazione
     * @return
     */
    public ResultSet getCommissione(String idCodTransazione) {
        String query = "SELECT * FROM ch_transaction_valori where cod_tr = ?";
        ResultSet rs = null;
        try {
            PreparedStatement ps = this.c.prepareStatement(query, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, idCodTransazione);
            rs = ps.executeQuery();
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return rs;
    }

    /**
     *
     * @return
     */
    public ResultSet getSogliaTipologiaCLRegistrazione() {
        String query = "SELECT tipologia_clienti,ip_soglia_antiriciclaggio FROM tipologiaclienti where fg_annullato='0' and filiale='000'";
        try {
            PreparedStatement ps = this.c.prepareStatement(query, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            return ps.executeQuery();
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return null;
    }

    /**
     *
     * @param soglia
     * @param cod
     * @param data_da
     * @param data_a
     * @return
     */
    public ResultSet getTransazioni(double soglia, String cod, String data_da, String data_a) {
        ResultSet rs = null;
        String query = "Select * from ch_transaction where tipocliente = ? and CAST(pay AS DECIMAL(10,2)) >= ? and data > '" + data_da + "' and data < '" + data_a + "'"; //MANCA WHERE
        try {
            PreparedStatement ps = this.c.prepareStatement(query, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, cod);
            ps.setDouble(2, soglia);
            rs = ps.executeQuery();
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return rs;
    }

    /**
     *
     * @param valuta
     * @return
     */
    public String getCodiceValuta(String valuta) {
        String cod_valuta = "";
        String query = "select codice_uic_divisa FROM valute where valuta = ?";
        try {
            PreparedStatement ps = this.c.prepareStatement(query, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, valuta);
            ResultSet rs = ps.executeQuery();
            if (rs.next()) {
                cod_valuta = rs.getString(1);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return cod_valuta;
    }

    /**
     *
     * @param cl_cod
     * @return
     */
    public String getNDGSocieta(String cl_cod) {
        String query = "select ndg_rappresentante FROM anagrafica_ru where ndg = ?";
        String ndg = "";
        try {
            PreparedStatement ps = this.c.prepareStatement(query, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, cl_cod);
            ResultSet rs = ps.executeQuery();
            if (rs.next()) {
                ndg = rs.getString(1);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return ndg;
    }

    /**
     *
     * @return
     */
    public ResultSet getSogliaTipologiaCL() {
        String query = "SELECT tipologia_clienti,ip_soglia_antiriciclaggio FROM tipologiaclienti "
                + "where fg_annullato='0' and tipologia_clienti<>'003' and filiale='000'";
        try {
            PreparedStatement ps = this.c.prepareStatement(query, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            return ps.executeQuery();
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return null;
    }

    /**
     *
     * @param id
     * @param descr
     * @param accode
     * @param username
     * @return
     */
    public boolean edit_accode(String id, String descr, String accode, String username) {
        try {
            String upd = "UPDATE contabilita SET descrizione = ?, conto = ? WHERE id = ?";
            PreparedStatement ps = this.c.prepareStatement(upd, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, descr);
            ps.setString(2, accode);
            ps.setString(3, id);
            int x = ps.executeUpdate();
            if (x > 0) {
                insertValue_agg_NOCENTRAL(ps, null, null, null, username);
            }
            return x > 0;
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return false;
    }

    /**
     *
     * @param codice
     * @return
     */
    public Office_sp query_officesp(String codice) {
        try {
            String sql = "SELECT * FROM office_sp where codice = '" + codice + "'";
            ResultSet rs = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql);
            if (rs.next()) {
                return new Office_sp(rs.getString(1), rs.getString(2), rs.getString(3), rs.getString(4),
                        rs.getString(5), rs.getString(6), rs.getString(7), rs.getString(8), rs.getString(9), rs.getString(10));
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return null;
    }

    /**
     *
     * @param filiale
     * @param data
     * @return
     */
    public ArrayList<Office_sp> list_query_officesp(String filiale, String data) {
        ArrayList<Office_sp> out = new ArrayList<>();
        try {
            String sql = "SELECT * FROM office_sp where filiale = '" + filiale + "' AND data <= '" + data + " 23:59:59' ORDER BY data DESC";
            ResultSet rs = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql);
            while (rs.next()) {
                
                out.add(new Office_sp(rs.getString(1), rs.getString(2), rs.getString(3), rs.getString(4),
                        rs.getString(5), rs.getString(6), rs.getString(7), rs.getString(8), rs.getString(9), rs.getString(10)));
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @param filiale
     * @param data
     * @return
     */
    public ArrayList<Office_sp> list_query_officesp2(String filiale, String data) {
        ArrayList<Office_sp> out = new ArrayList<>();
        try {
            String sql = "SELECT * FROM office_sp where filiale = '" + filiale + "' AND data <= '" + data + " 23:59:59' ORDER BY data DESC";
            ResultSet rs = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql);
            if (rs.next()) {
                out.add(new Office_sp(rs.getString(1), rs.getString(2), rs.getString(3), rs.getString(4),
                        rs.getString(5), rs.getString(6), rs.getString(7), rs.getString(8), rs.getString(9), rs.getString(10)));
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @param filiale
     * @param data
     * @return
     */
    public Office_sp list_query_last_officesp(String filiale, String data) {
        try {
            String sql = "SELECT * FROM office_sp where filiale = '" + filiale
                    + "' AND data < '" + data + "' ORDER BY data DESC LIMIT 1";
            ResultSet rs = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql);
            if (rs.next()) {
                return new Office_sp(rs.getString(1), rs.getString(2), rs.getString(3), rs.getString(4),
                        rs.getString(5), rs.getString(6), rs.getString(7), rs.getString(8), rs.getString(9), rs.getString(10));
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return null;
    }

    /**
     *
     * @param oc
     * @param dtoper
     * @return
     */
    public boolean generateandinsertStockPrice(Openclose oc, String dtoper) {
        try {
            
            String oper = get_national_office().getChangetype();
            boolean dividi = oper.equals("/");
            
            String valutalocale = get_local_currency()[0];
            ArrayList<OfficeStockPrice_value> out = new ArrayList<>();
            ArrayList<Currency> licur = list_figures_query_edit(oc.getFiliale());
            ArrayList<Figures> lifg = list_figures(oc.getFiliale());
            String sql = "SELECT * FROM stock WHERE filiale = '" + oc.getFiliale()
                    + "' AND tipostock = 'CH' AND (kind ='01' or kind ='02') ORDER BY cod_value,kind,date";
            
            if (is_CZ) {
                sql = "SELECT * FROM stock WHERE filiale = '" + oc.getFiliale()
                        + "' AND tipostock = 'CH' AND kind IN ('01','02','03') ORDER BY cod_value,kind,date";
            }
            
            ResultSet rs = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql);
            ArrayList<String> listval = new ArrayList<>();
            while (rs.next()) {
                listval.add(rs.getString("cod_value"));
            }
            rs.beforeFirst();
            removeDuplicatesAL(listval);
            double totalecop = 0.0;
            double totalefx = 0.0;
            double totalegenerale = 0.0;
            if (dtoper == null) {
                dtoper = getNow();
            }
            String dt_val = formatStringtoStringDate(dtoper, patternsqldate, patternnormdate);
            if (listval.isEmpty()) {
                
                String val = get_local_currency()[0];
                OfficeStockPrice_value osp01 = new OfficeStockPrice_value();
                osp01.setCurrency(val);
                osp01.setDecurrency(formatALCurrency(val, licur));
                osp01.setSupporto("01 " + Engine.get_figures(lifg, "01").getDe_supporto());
                osp01.setQta("0.00");
                osp01.setMedioacq("1.0000000");
                osp01.setControvalore("0.00");
                out.add(osp01);
                
            } else {
                for (int i = 0; i < listval.size(); i++) {
                    String val = listval.get(i);
                    OfficeStockPrice_value osp01 = new OfficeStockPrice_value();
                    osp01.setCurrency(val);
                    osp01.setDecurrency(formatALCurrency(val, licur));
                    osp01.setSupporto("01 " + Engine.get_figures(lifg, "01").getDe_supporto());
                    
                    OfficeStockPrice_value osp02 = new OfficeStockPrice_value();
                    osp02.setCurrency(val);
                    osp02.setDecurrency(formatALCurrency(val, licur));
                    osp02.setSupporto("02 " + Engine.get_figures(lifg, "02").getDe_supporto());
                    
                    OfficeStockPrice_value osp03 = new OfficeStockPrice_value();
                    osp03.setCurrency(val);
                    osp03.setDecurrency(formatALCurrency(val, licur));
                    osp03.setSupporto("03 " + Engine.get_figures(lifg, "03").getDe_supporto());
                    
                    double setQtaosp01 = 0.00;
                    double controv01 = 0.00;
                    
                    double setQtaosp02 = 0.00;
                    double controv02 = 0.00;
                    
                    double setQtaosp03 = 0.00;
                    double controv03 = 0.00;
                    
                    while (rs.next()) {
                        if (rs.getString("cod_value").equals(val)) {
                            switch (rs.getString("kind")) {
                                case "01":
                                    setQtaosp01 = setQtaosp01 + fd(rs.getString("total"));
                                    if (rs.getString("cod_value").equals(valutalocale)) {
                                        controv01 = controv01 + fd(rs.getString("total"));
                                    } else {
                                        controv01 = controv01 + fd(rs.getString("controval"));
                                    }
                                    break;
                                case "02":
                                    setQtaosp02 = setQtaosp02 + fd(rs.getString("total"));
                                    controv02 = controv02 + fd(rs.getString("controval"));
                                    break;
                                case "03":
                                    setQtaosp03 = setQtaosp03 + fd(rs.getString("total"));
                                    controv03 = controv03 + fd(rs.getString("controval"));
                                    break;
                                default:
                                    break;
                            }
                        }
                    }
                    setQtaosp01 = roundDouble(setQtaosp01, 2);
                    
                    setQtaosp02 = roundDouble(setQtaosp02, 2);
                    
                    setQtaosp03 = roundDouble(setQtaosp03, 2);
                    
                    if (setQtaosp01 > 0) {
                        osp01.setQta(roundDoubleandFormat(setQtaosp01, 2));
                        double mediarate = getControvaloreOFFSET(setQtaosp01, controv01, dividi);
                        if (newpread) {
                            if (licur.stream().filter(c1 -> c1.getCode().equals(val)).findAny().get() != null) {
                                mediarate = fd(licur.stream().filter(c1 -> c1.getCode().equals(val)).findAny().get().getCambio_bce());
                                controv01 = getControvalore(setQtaosp01, mediarate, dividi);
                            }
                        }
                        controv01 = roundDouble(controv01, 2);
                        osp01.setMedioacq(roundDoubleandFormat(mediarate, 8));
                        if (val.equals(valutalocale)) {
                            totalecop += controv01;
                        } else {
                            totalefx += controv01;
                        }
                        totalegenerale += controv01;
                        osp01.setControvalore(roundDoubleandFormat(controv01, 2));
                        out.add(osp01);
                    }
                    if (setQtaosp02 > 0) {
                        osp02.setQta(roundDoubleandFormat(setQtaosp02, 2));
                        double mediarate = getControvaloreOFFSET(setQtaosp02, controv02, dividi);
                        
                        if (newpread) {
                            if (licur.stream().filter(c1 -> c1.getCode().equals(val)).findAny().get() != null) {
                                mediarate = fd(licur.stream().filter(c1 -> c1.getCode().equals(val)).findAny().get().getCambio_bce());
                                controv02 = getControvalore(setQtaosp02, mediarate, dividi);
                            }
                        }
                        
                        controv02 = roundDouble(controv02, 2);
                        
                        osp02.setMedioacq(roundDoubleandFormat(mediarate, 8));
                        totalefx += controv02;
                        totalegenerale += controv02;
                        osp02.setControvalore(roundDoubleandFormat(controv02, 2));
                        out.add(osp02);
                    }
                    if (setQtaosp03 > 0) {
                        osp03.setQta(roundDoubleandFormat(setQtaosp03, 2));
                        double mediarate = getControvaloreOFFSET(setQtaosp03, controv03, dividi);
                        if (newpread) {
                            if (licur.stream().filter(c1 -> c1.getCode().equals(val)).findAny().get() != null) {
                                mediarate = fd(licur.stream().filter(c1 -> c1.getCode().equals(val)).findAny().get().getCambio_bce());
                                controv03 = getControvalore(setQtaosp03, mediarate, dividi);
                            }
                        }
                        
                        osp03.setMedioacq(roundDoubleandFormat(mediarate, 8));
                        controv03 = roundDouble(controv03, 2);
                        
                        totalefx += controv03;
                        totalegenerale += controv03;
                        osp03.setControvalore(roundDoubleandFormat(controv03, 2));
                        out.add(osp03);
                    }
                    rs.beforeFirst();
                }
            }
            if (!out.isEmpty()) {
                String codofsp = "OFSP" + generaId(46);
                String ins = "INSERT INTO office_sp VALUES (?,?,?,?,?,?,?,?,?,?)";
                PreparedStatement ps = this.c.prepareStatement(ins, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
                ps.setString(1, codofsp);
                ps.setString(2, oc.getFiliale());
                ps.setString(3, oc.getTill());
                ps.setString(4, oc.getFg_tipo());
                ps.setString(5, oc.getCod());
                ps.setString(6, oc.getId());
                ps.setString(7, roundDoubleandFormat(totalefx, 2));
                ps.setString(8, roundDoubleandFormat(totalecop, 2));
                ps.setString(9, roundDoubleandFormat(totalegenerale, 2));
                ps.setString(10, dtoper);
                ps.execute();
                
                insert_aggiornamenti_mod(new Aggiornamenti_mod(
                        generaId(50), "000", dt_val, "0",
                        "PS", ps.toString(), "service", dtoper));
                for (int i = 0; i < out.size(); i++) {
                    OfficeStockPrice_value osp = out.get(i);
//                    if (osp.getCurrency().equals(valutalocale) && osp.getSupporto().split(" ")[0].trim().equals("01")) {
//
//                    } else {
                    String ins2 = "INSERT INTO office_sp_valori VALUES (?,?,?,?,?,?,?)";
                    PreparedStatement ps2 = this.c.prepareStatement(ins2, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
                    ps2.setString(1, codofsp);
                    ps2.setString(2, osp.getCurrency());
                    ps2.setString(3, osp.getSupporto().split(" ")[0].trim());
                    ps2.setString(4, osp.getQta());
                    ps2.setString(5, osp.getMedioacq());
                    ps2.setString(6, osp.getControvalore());
                    ps2.setString(7, dtoper);
                    ps2.execute();
                    insert_aggiornamenti_mod(new Aggiornamenti_mod(
                            generaId(50), "000", dt_val, "0",
                            "PS", ps2.toString(), "service", dtoper));
                }
//                }
            } else {
                String codofsp = "OFSP" + generaId(46);
                String ins = "INSERT INTO office_sp VALUES (?,?,?,?,?,?,?,?,?,?)";
                PreparedStatement ps = this.c.prepareStatement(ins, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
                ps.setString(1, codofsp);
                ps.setString(2, oc.getFiliale());
                ps.setString(3, oc.getTill());
                ps.setString(4, oc.getFg_tipo());
                ps.setString(5, oc.getCod());
                ps.setString(6, oc.getId());
                ps.setString(7, "0.00");
                ps.setString(8, "0.00");
                ps.setString(9, "0.00");
                ps.setString(10, dtoper);
                ps.execute();
                
                insert_aggiornamenti_mod(new Aggiornamenti_mod(
                        generaId(50), "000", dt_val, "0",
                        "PS", ps.toString(), "service", dtoper));
                
            }
            
            return true;
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return false;
    }

    /**
     *
     * @return
     */
    public ArrayList<String[]> list_oc_change_real_et() {
        ArrayList<String[]> out = new ArrayList<>();
        try {
            String sql = "SELECT cod_oc,kind,valuta,value_op,num_kind_op "
                    + "FROM real_oc_change where data >= DATE(NOW()) - INTERVAL 15 DAY ORDER BY cod_oc desc,valuta,data";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                String[] o1 = {rs.getString(1).trim(), rs.getString(2).trim(), rs.getString(3).trim(),
                    roundDoubleandFormat(fd(rs.getString(4).trim()), 2), rs.getString(5).trim()};
                if (fd(rs.getString(4).trim()) > 0) {
                    out.add(o1);
                }
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @param cod_oc
     * @return
     */
    public ArrayList<String[]> list_oc_change_cuts_real_et(String cod_oc) {
        ArrayList<String[]> out = new ArrayList<>();
        try {
            String sql = "SELECT cod_oc,valuta,kind,ip_taglio,ip_quantity,ip_value FROM real_oc_change_tg "
                    + "WHERE cod_oc = ? ORDER BY cod_oc ASC,valuta ASC,CAST(ip_taglio AS DECIMAL(12,2)) DESC;";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, cod_oc);
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                String[] o1 = {rs.getString(1), rs.getString(2), rs.getString(3), rs.getString(4), rs.getString(5), rs.getString(6)};
                if (fd(rs.getString(6)) > 0) {
                    out.add(o1);
                }
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @param filiale
     * @return
     */
    public ArrayList<OfficeStockPrice_value> list_OfficeStockPrice_value(String filiale) {
        ArrayList<OfficeStockPrice_value> out = new ArrayList<>();
        ArrayList<Currency> licur = list_figures_query_edit(filiale);
        ArrayList<Figures> lifg = list_figures(filiale);
        String valutalocale = get_local_currency()[0];
        try {
            String oper = get_national_office().getChangetype();
            boolean dividi = oper.equals("/");
            String sql = "SELECT cod_value,kind,total,controval FROM stock WHERE filiale = '" + filiale + "' AND tipostock = 'CH' AND total <> '0.00' "
                    //            String sql = "SELECT cod_value,kind,total,controval FROM stock WHERE filiale = '" + filiale + "' AND tipostock = 'CH' AND (kind ='01' or kind ='02' or kind ='03') "
                    + "ORDER BY cod_value,kind,date";
            ResultSet rs = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql);
            List<String> listval = new ArrayList<>();
            List<Stock> content = new ArrayList<>();

//            String 
//            cod_value,kind,total,controval
            while (rs.next()) {
                if (!rs.getString("kind").equals("04")) {
                    String codicevaluta = rs.getString("cod_value");
                    
                    content.add(new Stock(codicevaluta, rs.getString("kind"), rs.getString("total"), rs.getString("controval")));
                    listval.add(codicevaluta);
                    
                }
            }

//            rs.beforeFirst();
//            removeDuplicatesAL(listval);
            listval = listval.stream().distinct().collect(toList());
            
            for (int i = 0; i < listval.size(); i++) {
                String val = listval.get(i);
                
                OfficeStockPrice_value osp01 = new OfficeStockPrice_value();
                osp01.setCurrency(val);
                osp01.setDecurrency(formatALCurrency(val, licur));
                osp01.setSupporto("01 " + Engine.get_figures(lifg, "01").getDe_supporto());
                OfficeStockPrice_value osp02 = new OfficeStockPrice_value();
                osp02.setCurrency(val);
                osp02.setDecurrency(formatALCurrency(val, licur));
                osp02.setSupporto("02 " + Engine.get_figures(lifg, "02").getDe_supporto());
                
                OfficeStockPrice_value osp03 = new OfficeStockPrice_value();
                osp03.setCurrency(val);
                osp03.setDecurrency(formatALCurrency(val, licur));
                osp03.setSupporto("03 " + Engine.get_figures(lifg, "03").getDe_supporto());

//                double setQtaosp01 = 0.00;
//                double controv01 = 0.00;
//
//                double setQtaosp02 = 0.00;
//                double controv02 = 0.00;
//
//                double setQtaosp03 = 0.00;
//                double controv03 = 0.00;
                AtomicDouble ad_setQtaosp01 = new AtomicDouble(0.0);
                AtomicDouble ad_controv01 = new AtomicDouble(0.0);
                AtomicDouble ad_setQtaosp02 = new AtomicDouble(0.0);
                AtomicDouble ad_controv02 = new AtomicDouble(0.0);
                AtomicDouble ad_setQtaosp03 = new AtomicDouble(0.0);
                AtomicDouble ad_controv03 = new AtomicDouble(0.0);
                
                List<Stock> content_def = content.stream().filter(result2 -> result2.getCod_value().equalsIgnoreCase(val)).collect(toList());
                content_def.forEach(c1 -> {
                    switch (c1.getKind()) {
                        case "01":
                            ad_setQtaosp01.addAndGet(fd(c1.getTotal()));
                            if (c1.getCod_value().equalsIgnoreCase(valutalocale)) {
                                ad_controv01.addAndGet(fd(c1.getTotal()));
                            } else {
                                ad_controv01.addAndGet(fd(c1.getControval()));
                            }
                            break;
                        case "02":
                            ad_setQtaosp02.addAndGet(fd(c1.getTotal()));
                            ad_controv02.addAndGet(fd(c1.getControval()));
                            break;
                        case "03":
                            ad_setQtaosp03.addAndGet(fd(c1.getTotal()));
                            ad_controv03.addAndGet(fd(c1.getControval()));
                            break;
                        default:
                            break;
                    }
                });

//                while (rs.next()) {
//                    if (rs.getString("cod_value").equals(val)) {
//                        if (rs.getString("kind").equals("01")) {
//                            setQtaosp01 = setQtaosp01 + fd(rs.getString("total"));
//                            
//                            if (rs.getString("cod_value").equals(valutalocale)) {
//                                controv01 = controv01 + fd(rs.getString("total"));
//                            } else {
//                                controv01 = controv01 + fd(rs.getString("controval"));
//                            }
//                        } else if (rs.getString("kind").equals("02")) {
//                            setQtaosp02 = setQtaosp02 + fd(rs.getString("total"));
//                            controv02 = controv02 + fd(rs.getString("controval"));
//                        } else if (rs.getString("kind").equals("03")) {
//                            setQtaosp03 = setQtaosp03 + fd(rs.getString("total"));
//                            controv03 = controv03 + fd(rs.getString("controval"));
//                        }
//                    }
//                }
                double setQtaosp01 = roundDouble(ad_setQtaosp01.get(), 2);
                double controv01 = roundDouble(ad_controv01.get(), 2);
                
                double setQtaosp02 = roundDouble(ad_setQtaosp02.get(), 2);
                double controv02 = roundDouble(ad_controv02.get(), 2);
                
                double setQtaosp03 = roundDouble(ad_setQtaosp03.get(), 2);
                double controv03 = roundDouble(ad_controv03.get(), 2);
                
                if (setQtaosp01 > 0) {
                    osp01.setQta(roundDoubleandFormat(setQtaosp01, 2));
                    if (newpread) {
                        
                        if (licur.stream().filter(c1 -> c1.getCode().equals(val)).findAny().get() != null) {
                            double mediarate = fd(licur.stream().filter(c1 -> c1.getCode().equals(val)).findAny().get().getCambio_bce());
                            osp01.setMedioacq(roundDoubleandFormat(mediarate, 8));
                            osp01.setControvalore(roundDoubleandFormat(getControvalore(setQtaosp01, mediarate, dividi), 2));
                        }
                    } else {
                        double mediarate = getControvaloreOFFSET(setQtaosp01, controv01, dividi);
                        osp01.setMedioacq(roundDoubleandFormat(mediarate, 8));
                        osp01.setControvalore(roundDoubleandFormat(controv01, 2));
                    }
                    
                    out.add(osp01);
                }
                if (setQtaosp02 > 0) {
                    osp02.setQta(roundDoubleandFormat(setQtaosp02, 2));
                    if (newpread) {
                        if (licur.stream().filter(c1 -> c1.getCode().equals(val)).findAny().get() != null) {
                            double mediarate = fd(licur.stream().filter(c1 -> c1.getCode().equals(val)).findAny().get().getCambio_bce());
                            osp02.setMedioacq(roundDoubleandFormat(mediarate, 8));
                            osp02.setControvalore(roundDoubleandFormat(getControvalore(setQtaosp02, mediarate, dividi), 2));
                        }
                    } else {
                        double mediarate = getControvaloreOFFSET(setQtaosp02, controv02, dividi);
                        osp02.setMedioacq(roundDoubleandFormat(mediarate, 8));
                        osp02.setControvalore(roundDoubleandFormat(controv02, 2));
                    }
                    out.add(osp02);
                }
                if (setQtaosp03 > 0) {
                    osp03.setQta(roundDoubleandFormat(setQtaosp03, 2));
                    if (newpread) {
                        if (licur.stream().filter(c1 -> c1.getCode().equals(val)).findAny().get() != null) {
                            double mediarate = fd(licur.stream().filter(c1 -> c1.getCode().equals(val)).findAny().get().getCambio_bce());
                            osp03.setMedioacq(roundDoubleandFormat(mediarate, 8));
                            osp03.setControvalore(roundDoubleandFormat(getControvalore(setQtaosp03, mediarate, dividi), 2));
                        }
                    } else {
                        double mediarate = getControvalore(setQtaosp03, controv03, dividi);
                        osp03.setMedioacq(roundDoubleandFormat(mediarate, 8));
                        osp03.setControvalore(roundDoubleandFormat(controv03, 2));
                    }
                    out.add(osp03);
                }
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @param filiale
     * @return
     */
    public String get_last_modify_rate(String filiale) {
        try {

//            String sql = "SELECT dt_mod FROM rate_history WHERE filiale = '" + filiale + "' AND valuta <> '-' AND dt_mod <= now() order by dt_mod desc LIMIT 1";
//            PreparedStatement ps = this.c.prepareStatement(sql, ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE);
//            ResultSet rs = ps.executeQuery();
//            if (rs.next()) {
//                return Utility.formatStringtoStringDate(rs.getString(1), patternsqldate, patternnormdate);
//            }
            String sql1 = "SELECT modify,dt_mod FROM rate_history WHERE modify like '%Date validity%' AND filiale = '" + filiale + "' AND valuta <> '-' ORDER BY dt_mod DESC";
            String sql2 = "SELECT dt_mod FROM rate_history WHERE modify not like '%Date validity%' AND filiale = '" + filiale + "' AND valuta <> '-' ORDER BY dt_mod DESC";
            ResultSet rs1 = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql1);
            ResultSet rs2 = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql2);
            DateTime t1 = null;
            String datadavisualizzare1 = "";
            while (rs1.next()) {
                String datainizio = rs1.getString(1).split("Date validity: ")[1].trim();
//                DateTimeFormatter formatter = DateTimeFormat.forPattern(patternnormdate);
//                t1 = formatter.parseDateTime(datainizio);
//                DateTimeFormatter formatter = DateTimeFormat.forPattern(patternnormdate);
                t1 = fDate_get_last_modify_rate(datainizio, patternnormdate);
                if (t1.isBeforeNow()) {
                    datadavisualizzare1 = rs1.getString(2);
                    break;
                }
            }
            while (rs2.next()) {
                DateTimeFormatter formatter = forPattern(patternsqldate);
                if (t1 == null) {
                    t1 = formatter.parseDateTime(rs2.getString(1).substring(0, 19));
                    if (t1.isBeforeNow()) {
                        datadavisualizzare1 = rs2.getString(1);
                        break;
                    }
                } else {
                    DateTime t2 = formatter.parseDateTime(rs2.getString(1).substring(0, 19));
                    if (t2.isAfter(t1)) {
                        t1 = formatter.parseDateTime(rs2.getString(1).substring(0, 19));
                        if (t1.isBeforeNow()) {
                            datadavisualizzare1 = rs2.getString(1);
                            break;
                        }
                    }
                }
            }
            if (t1 != null) {
                return formatStringtoStringDate(datadavisualizzare1, patternsqldate, patternnormdate);
                //return t1.toString(patternnormdate);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return "";
    }

    /**
     *
     * @param user
     * @return
     */
    public String insertLogin(String user) {
        try {
            String ins = "INSERT INTO login VALUES (CURDATE(),?,NOW())";
            PreparedStatement ps = this.c.prepareStatement(ins, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, user);
            ps.execute();
            return "0";
        } catch (SQLException ex) {
            if (ex.getMessage().contains("Duplicate")) {
                return "1";
            }
        }
        return "-1";
    }

    /**
     *
     * @param cod
     * @return
     */
    public boolean isActiveToBranch(String cod) {
        try {
            String sql = "SELECT * FROM et_frombranch where cod = ? AND fg_stato = ?";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, cod);
            ps.setString(2, "0");
            return ps.executeQuery().next();
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return false;
    }

    /**
     *
     * @param codtr
     * @return
     */
    public String query_LOY_transaction(String codtr) {
        try {
            String sql = "SELECT RIGHT(loy,8) FROM loyalty_ch WHERE codtr = ?";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, codtr);
            ResultSet rs = ps.executeQuery();
            if (rs.next()) {
                return rs.getString(1);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return null;
    }

    /**
     *
     * @param loy
     * @param surname
     * @param name
     * @param taxcode
     * @return
     */
    public ArrayList<String[]> query_LOY(String loy, String surname, String name, String taxcode) {
        ArrayList<String[]> output = new ArrayList<>();
        try {
            ArrayList<String> q1 = new ArrayList<>();
            if (loy != null && !loy.equals("")) {
                String sql = "SELECT codcl FROM loyalty_ch WHERE RIGHT(loy,8) = ?";
                PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
                ps.setString(1, loy);
                ResultSet rs = ps.executeQuery();
                while (rs.next()) {
                    q1.add(rs.getString(1));
                }
                if (q1.isEmpty()) {
                    Db_Loy dbl = new Db_Loy();
                    String que = dbl.getCodiceCliente_pub(loy);
                    dbl.closeDB();
                    if (que != null) {
                        q1.add(que);
                    }
                }
            } else if ((surname != null && !surname.equals("") && !surname.equals("..."))
                    || (name != null && !name.equals("") && !name.equals("..."))
                    || (taxcode != null && !taxcode.equals("") && !taxcode.equals("---"))) {
                
                String newsql = "SELECT codcl FROM ch_transaction_client WHERE codtr in (SELECT codtr FROM loyalty_ch) ";
                
                if ((surname != null && !surname.equals("") && !surname.equals("..."))) {
                    newsql = newsql + " AND cognome = \"" + surname.trim() + "\"";
                }
                if ((name != null && !name.equals("") && !name.equals("..."))) {
                    newsql = newsql + " AND nome = \"" + name.trim() + "\"";
                }
                if ((taxcode != null && !taxcode.equals("") && !taxcode.equals("---"))) {
                    newsql = newsql + " AND codfisc = \"" + taxcode.trim() + "\"";
                }
                
                ResultSet rs = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(newsql);
                while (rs.next()) {
                    q1.add(rs.getString(1));
                }
            }
            
            removeDuplicatesAL(q1);
            
            for (int x = 0; x < q1.size(); x++) {
                String codcl = q1.get(x);
                Client c0 = query_Client_transaction(null, codcl);
                if (c0 != null) {
                    Db_Loy dbl = new Db_Loy();
                    ArrayList<String[]> loylist = dbl.getListCodiciCliente(codcl);
//                    String loycode = dbl.getCodiceClienteAttivo(codcl);
                    dbl.closeDB();
                    String newout = "";
                    for (int d = 0; d < loylist.size(); d++) {
                        if (loylist.get(d)[1].equals("0")) {
                            newout = newout + "<s>" + loylist.get(d)[0] + "</s><br>";
                        } else {
                            newout = newout + "<b>" + loylist.get(d)[0] + "</b><br>";
                        }
                    }
                    String[] out = new String[5];
                    out[0] = newout;
                    out[1] = c0.getCognome().toUpperCase();
                    out[2] = c0.getNome().toUpperCase();
                    out[3] = c0.getCodfisc().toUpperCase();
                    out[4] = codcl;
                    output.add(out);
                }
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return output;
    }

    /**
     *
     * @param cod_transazione
     * @param tipo
     * @return
     */
    public ArrayList<String[]> get_stock_quantity(String cod_transazione, String tipo) {
        ArrayList<String[]> va  = new ArrayList<>();
        try {
            String sql = "SELECT codice_stock,quantity,rate FROM stock_quantity where cod_transazione = ? AND tipo = ? ORDER BY date DESC";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, cod_transazione);
            ps.setString(2, tipo);
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                String[] val = {rs.getString(1), rs.getString(2), rs.getString(3)};
                va.add(val);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return va;
    }

    /**
     *
     * @param code
     * @param table
     * @return
     */
    public Stock get_stock(String code, String table) {
        try {
            String sql = "SELECT * FROM " + table + " WHERE codice = ? ORDER BY date ASC LIMIT 1";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, code);
            ResultSet rs = ps.executeQuery();
            if (rs.next()) {
                return new Stock(rs.getString(1), rs.getString(2), rs.getString(3), rs.getString(4), rs.getString(5),
                        rs.getString(6), rs.getString(7), rs.getString(8), rs.getString(9), rs.getString(10),
                        rs.getString(11), rs.getString(12), rs.getString(13), rs.getString(14), rs.getString(15));
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return null;
    }

    /**
     *
     * @param code
     * @param cod_tr
     * @param iss
     * @param cust
     * @param cust_det
     * @param ann
     * @param main1
     * @param main1_val
     * @param main2
     * @param main2_val
     * @param main3
     * @param main3_val
     * @param timestamp
     */
    public void insert_mod_profcl(String code, String cod_tr, String iss, String cust, String cust_det,
            String ann, String main1, String main1_val, String main2, String main2_val,
            String main3, String main3_val, String timestamp) {
        try {
            String ins = "INSERT INTO anagrafica_client_modprof VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?)";
            PreparedStatement ps = this.c.prepareStatement(ins, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, code);
            ps.setString(2, cod_tr);
            ps.setString(3, iss);
            ps.setString(4, cust);
            ps.setString(5, cust_det);
            ps.setString(6, ann);
            ps.setString(7, main1);
            ps.setString(8, main1_val);
            ps.setString(9, main2);
            ps.setString(10, main2_val);
            ps.setString(11, main3);
            ps.setString(12, main3_val);
            ps.setString(13, timestamp);
            ps.execute();
            insertValue_agg(ps, null, "000", null, "service");
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
    }

    /**
     *
     * @param code
     * @param cod_tr
     * @return
     */
    public String[] get_mod_profcl(String code, String cod_tr) {
        try {
            String sql = "SELECT iss,cust,cust_det,ann,main1,main1_val,main2,main2_val,main3,main3_val FROM anagrafica_client_modprof WHERE code = ? AND cod_tr = ?";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, code);
            ps.setString(2, cod_tr);
            ResultSet rs = ps.executeQuery();
            if (rs.next()) {
                String[] v = {rs.getString(1), rs.getString(2), rs.getString(3), rs.getString(4), rs.getString(5),
                    rs.getString(6), rs.getString(7), rs.getString(8), rs.getString(9), rs.getString(10)};
                return v;
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return null;
    }

    /**
     *
     * @param tra
     * @return
     */
    public ArrayList<NC_transaction> list_nctransaction_wc_ti(Ch_transaction tra) {
        ArrayList<NC_transaction> out = new ArrayList<>();
        try {
            String sql = "SELECT * FROM nc_transaction where filiale='" + tra.getFiliale() + "' AND id_open_till='" + tra.getId_open_till() + "' "
                    + "AND note LIKE '%" + tra.getFiliale() + tra.getId() + "'";
            
            ResultSet rs = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql);
            while (rs.next()) {
                NC_transaction nc = new NC_transaction(
                        rs.getString(1), leftPad(rs.getString(2), 15, "0"),
                        rs.getString(3), rs.getString(4), rs.getString(5), rs.getString(6), rs.getString(7), rs.getString(8),
                        rs.getString(9), rs.getString(10), rs.getString(11), rs.getString(12), rs.getString(13), rs.getString(14),
                        rs.getString(15), rs.getString(16), rs.getString(17), rs.getString(18), rs.getString(19), rs.getString(20),
                        rs.getString(21), rs.getString(22), rs.getString(23), rs.getString(24), rs.getString(25), rs.getString(26),
                        rs.getString(27), rs.getString(28), rs.getString(29), rs.getString(30), rs.getString(31), rs.getString(32),
                        rs.getString(33), rs.getString(34), rs.getString(35), rs.getString(36), rs.getString(37), rs.getString(38),
                        rs.getString(39), rs.getString(40), rs.getString(41), rs.getString(42), rs.getString(43), rs.getString(44), rs.getString(45), rs.getString(46)
                );
                out.add(nc);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
        
    }

    /**
     *
     * @param cod
     * @return
     */
    public ArrayList<NC_transaction> list_nctransactionfromchange(String cod) {
        ArrayList<NC_transaction> out = new ArrayList<>();
        try {
            String sql = "SELECT * FROM nc_transaction where ch_transaction = '" + cod + "' ";
            ResultSet rs = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql);
            while (rs.next()) {
                NC_transaction nc = new NC_transaction(
                        rs.getString(1), leftPad(rs.getString(2), 15, "0"),
                        rs.getString(3), rs.getString(4), rs.getString(5), rs.getString(6), rs.getString(7), rs.getString(8),
                        rs.getString(9), rs.getString(10), rs.getString(11), rs.getString(12), rs.getString(13), rs.getString(14),
                        rs.getString(15), rs.getString(16), rs.getString(17), rs.getString(18), rs.getString(19), rs.getString(20),
                        rs.getString(21), rs.getString(22), rs.getString(23), rs.getString(24), rs.getString(25), rs.getString(26),
                        rs.getString(27), rs.getString(28), rs.getString(29), rs.getString(30), rs.getString(31), rs.getString(32),
                        rs.getString(33), rs.getString(34), rs.getString(35), rs.getString(36), rs.getString(37), rs.getString(38),
                        rs.getString(39), rs.getString(40), rs.getString(41), rs.getString(42), rs.getString(43), rs.getString(44), rs.getString(45), rs.getString(46)
                );
                out.add(nc);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @return
     */
    public ArrayList<String[]> getIpFiliale() {
        ArrayList<String[]> out = new ArrayList<>();
        try {
            String sql = "SELECT filiale,ip FROM dbfiliali";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                String[] ip = {rs.getString(1), rs.getString(2)};
                out.add(ip);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @param cod
     * @return
     */
    public Codici_sblocco getCods(String cod) {
        try {
            String sql = "SELECT * FROM codici_sblocco where codice = '" + cod + "'";
            ResultSet rs = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql);
            if (rs.next()) {
                return new Codici_sblocco(leftPad(rs.getString(1), 10, "0"), rs.getString(2),
                        rs.getString(3), rs.getString(4), rs.getString(5), rs.getString(6), rs.getString(7));
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return null;
    }

    /**
     *
     * @param cod
     * @param stato
     * @return
     */
    public ArrayList<String[]> query_cs(String cod, String stato) {
        ArrayList<String[]> out = new ArrayList<>();
        try {
            
            ArrayList<Codici_sblocco_file> files = list_codici_sblocco_file();
            
            String sql = "SELECT * FROM codici_sblocco WHERE fg_stato <>'' ";
            if (!cod.equals("")) {
                sql = sql + " AND codice like'%" + cod + "%'";
            }
            
            if (!stato.equals("...")) {
                sql = sql + " AND fg_stato = '" + stato + "'";
            }
            
            sql = sql + " ORDER BY dt_gen";
            
            ResultSet rs = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql);
            
            while (rs.next()) {
                
                for (int x = 0; x < files.size(); x++) {
                    if (files.get(x).getListcod().toUpperCase().contains(rs.getString(1).toUpperCase())) {
                        String[] v1 = {
                            rs.getString(1), files.get(x).getDest(),
                            formatStringtoStringDate(files.get(x).getDt_oper(), patternsqldate, patternnormdate),
                            formatStatusCodiceSblocco(rs.getString("fg_stato"))
                        };
                        out.add(v1);
                    }
                }
                
            }
            
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @param codtr
     * @param username
     * @return
     */
    public boolean liberaCodiciSblocco(String codtr, String username) {
        String upd = "UPDATE codici_sblocco SET fg_stato = 'E', user_gen = '-', dt_utilizzo = '1901-01-01 00:00:00', ty_util = '--', cod_tr = '--' WHERE cod_tr ='" + codtr + "'";
        try {
            this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeUpdate(upd);
            insertValue_agg(null, upd, null, null, username);
            return true;
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return false;
    }

    /**
     *
     * @param cod
     * @param filiale1
     * @param filiale2
     * @param user
     * @param dt
     * @return
     */
    public boolean update_et_tobranch_ok(String cod, String filiale1, String filiale2, String user, String dt) {
        try {
            String upd = "UPDATE et_frombranch SET fg_stato = ?, tr_dt = ?, tr_user = ?, tr_motiv = ? WHERE cod = ?";
            PreparedStatement ps = this.c.prepareStatement(upd, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, "2");
            ps.setString(2, dt);
            ps.setString(3, user);
            ps.setString(4, "IMPOSTATO DA UFFICIO CENTRALE");
            ps.setString(5, cod);
            ps.execute();
            insertValue_agg(ps, null, filiale1, null, user);
            insertValue_agg(ps, null, filiale2, null, user);
            return true;
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return false;
    }

    /**
     *
     * @param et_old
     * @param et_new
     * @param user
     * @param dt
     * @param cod_dest
     * @return
     */
    public boolean update_et_tobranch(String et_old, String et_new, String user, String dt, String cod_dest) {
        try {
            String upd = "UPDATE et_frombranch SET fg_stato = ?, tr_dt = ?, tr_user = ?, tr_motiv = ? WHERE cod = ?";
            PreparedStatement ps = this.c.prepareStatement(upd, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, "1");
            ps.setString(2, dt);
            ps.setString(3, user);
            ps.setString(4, et_new);
            ps.setString(5, et_old);
            ps.execute();
            
            insertValue_agg(ps, null, "000", null, user);
            insertValue_agg(ps, null, cod_dest, null, user);
            return true;
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return false;
    }

    /**
     *
     * @param filiale
     * @param valuta
     * @return
     */
    public String[] get_currency_filiale(String filiale, String valuta) {
        try {
            String sql = "SELECT * FROM valute WHERE filiale = ? AND valuta = ? ORDER BY valuta";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, filiale);
            ps.setString(2, valuta);
            ResultSet rs = ps.executeQuery();
            if (rs.next()) {
                String[] va  = {rs.getString("valuta"), rs.getString("buy_std_type"), rs.getString("buy_std"), rs.getString("sell_std_type"), rs.getString("sell_std")};
                return va;
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return null;
    }

    /**
     *
     * @param codtr
     * @param user
     * @param statodest
     * @return
     */
    public boolean libera_bb_transaction(String codtr, String user, String statodest) {
        try {
            String sel1 = "SELECT bb_fidcode FROM ch_transaction_valori WHERE cod_tr = '" + codtr + "' AND bb='Y' AND bb_fidcode <> '-'";
            ResultSet rs = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sel1);
            while (rs.next()) {
                String fidcode = rs.getString(1);
                if (fidcode.length() == 18) {
                    String id_fil = fidcode.substring(0, 3);
                    String id_tra = fidcode.substring(3);
                    update_status_bb_transaction(id_fil, id_tra, statodest, user);
                }
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return false;
    }

    /**
     *
     * @param filiale
     * @param idtr
     * @param statodest
     * @param user
     * @return
     */
    public boolean update_status_bb_transaction(String filiale, String idtr, String statodest, String user) {
        
        try {
            String upd = "UPDATE ch_transaction set bb = ? WHERE filiale = ? AND id = ?";
            PreparedStatement ps = this.c.prepareStatement(upd, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, statodest);
            ps.setString(2, filiale);
            ps.setString(3, idtr);
            ps.executeUpdate();
            if (!filiale.equals(filiale)) {
                insertValue_agg(ps, null, filiale, null, user);
            }
            insertValue_agg(ps, null, "000", null, user);
            return true;
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        
        return false;
    }

    /**
     *
     * @return
     */
    public ArrayList<Branchbudget> list_Branchbudget() {
        ArrayList<Branchbudget> li = new ArrayList<>();
        try {
            String sql = "SELECT * FROM branchbudget ORDER BY meseanno DESC,branch ASC";
            ResultSet rs = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql);
            while (rs.next()) {
                Branchbudget bb = new Branchbudget(rs.getString(1), rs.getString(2), rs.getString(3), rs.getString(4), rs.getString(5),
                        rs.getString(6), rs.getString(7), rs.getString(8), rs.getString(9), rs.getString(10), rs.getString(11));
                li.add(bb);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return li;
    }

    /**
     *
     * @param cod
     * @return
     */
    public Branchbudget list_Branchbudget(String cod) {
        try {
            String sql = "SELECT * FROM branchbudget WHERE codice = '" + cod + "' ORDER BY meseanno DESC,branch ASC";
            ResultSet rs = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql);
            if (rs.next()) {
                return new Branchbudget(rs.getString(1), rs.getString(2), rs.getString(3), rs.getString(4), rs.getString(5),
                        rs.getString(6), rs.getString(7), rs.getString(8), rs.getString(9), rs.getString(10), rs.getString(11));
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return null;
    }

    /**
     *
     * @param bb
     * @param user
     * @return
     */
    public boolean update_Branchbudget(Branchbudget bb, String user) {
        try {
            String upd = "UPDATE branchbudget SET meseanno = ?, branch = ?, budg1 = ?, budg2 = ? WHERE codice = ? ";
            PreparedStatement ps = this.c.prepareStatement(upd, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, bb.getMeseanno());
            ps.setString(2, bb.getBranch());
            ps.setString(3, bb.getBudg1());
            ps.setString(4, bb.getBudg2());
            ps.setString(5, bb.getCodice());
            int x = ps.executeUpdate();
            insertValue_agg_NOCENTRAL(ps, null, null, null, user);
            return x > 0;
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return false;
    }

    /**
     *
     * @param bb
     * @param user
     * @return
     */
    public boolean ins_Branchbudget(Branchbudget bb, String user) {
        try {
            String upd = "INSERT INTO branchbudget (codice,meseanno,branch,budg1,budg2) VALUES (?,?,?,?,?) ";
            PreparedStatement ps = this.c.prepareStatement(upd, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, bb.getCodice());
            ps.setString(2, bb.getMeseanno());
            ps.setString(3, bb.getBranch());
            ps.setString(4, bb.getBudg1());
            ps.setString(5, bb.getBudg2());
            ps.execute();
            //insertValue_agg_NOCENTRAL(ps, null, null, null, user);
            return true;
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return false;
    }

    /**
     *
     * @return
     */
    public ArrayList<String> list_frombranch_used() {
        ArrayList<String> complete = new ArrayList<>();
        try {
            String sql = "SELECT cod FROM et_frombranch where fg_stato='1'";
            ResultSet rs = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql);
            while (rs.next()) {
                complete.add(rs.getString(1));
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return complete;
    }

    /**
     *
     * @param table
     * @param cod
     * @param filiale
     * @return
     */
    public boolean esiste_successivo_con_fattura(String table, String cod, String filiale) {
        try {
            String que = "SELECT cod FROM ch_transaction_temp WHERE id > (SELECT id FROM " + table
                    + " WHERE cod = ?) AND filiale = ? AND fa_number <> ?";
            PreparedStatement ps = this.c.prepareStatement(que, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, cod);
            ps.setString(2, filiale);
            ps.setString(3, "-");
            ResultSet rs = ps.executeQuery();
            return rs.next();
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return false;
    }

    /**
     *
     * @param codtr
     * @return
     */
    public boolean delete_trans_invoice(String codtr) {
        try {
            String del1 = "DELETE FROM inv_incremental WHERE tr_num = '" + codtr + "'";
            String del2 = "DELETE FROM inv_list WHERE transaction = '" + codtr + "'";
            this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).execute(del1);
            this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).execute(del2);
            String dtoper = getNow();
            String dt_val = formatStringtoStringDate(dtoper, patternsqldate, patternnormdate);
            insert_aggiornamenti_mod(new Aggiornamenti_mod(generaId(50), "000", dt_val, "0", "ST", del1, "service", dtoper));
            insert_aggiornamenti_mod(new Aggiornamenti_mod(generaId(50), "000", dt_val, "0", "ST", del2, "service", dtoper));
            return true;
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
            return false;
        }
    }

    /**
     *
     * @param codcl
     */
    public void delete_Client(String codcl) {
        try {
            String del1 = "DELETE FROM anagrafica_client where code = '" + codcl + "' "
                    + "AND code not in (select distinct(cl_cod) from ch_transaction) "
                    + "AND code not in (select distinct(cl_cod) from ch_transaction_temp)";
            this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).execute(del1);
            String dtoper = getNow();
            String dt_val = formatStringtoStringDate(dtoper, patternsqldate, patternnormdate);
            insert_aggiornamenti_mod(new Aggiornamenti_mod(generaId(50), "000", dt_val, "0", "ST", del1, "service", dtoper));
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
    }

    /**
     *
     * @param g01
     * @param g02
     * @return
     */
    public ArrayList<String> estraiFIlialidaGruppi(String g01, ArrayList<String> g02) {
        ArrayList<String> br = new ArrayList<>();
        try {
//            String sql = "SELECT cod FROM branch WHERE fg_annullato = '0' ";
            String sql = "SELECT cod FROM branch WHERE (fg_annullato = '0' OR (fg_annullato='1' AND STR_TO_DATE(da_annull, '%Y-%m-%d')>'2017-12-31')) ";
            String filwhere = "";
            for (int i = 0; i < g02.size(); i++) {
                filwhere = filwhere + " brgr_" + g01 + "='" + g02.get(i) + "' OR ";
            }
            if (filwhere.length() > 3) {
                sql = sql + " AND (" + filwhere.substring(0, filwhere.length() - 3).trim() + ") ";
            }
            sql = sql + "ORDER BY cod";
            ResultSet rs = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql);
            
            while (rs.next()) {
                br.add(rs.getString(1));
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return br;
        
    }

    /**
     *
     * @param filiale
     * @param meseanno
     * @return
     */
    public Branchbudget get_branch_budget(String filiale, String meseanno) {
        try {
            String sql = "SELECT * FROM branchbudget WHERE branch = ? AND meseanno = ? ORDER BY timestamp DESC LIMIT 1";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, filiale);
            ps.setString(2, meseanno);
            ResultSet rs = ps.executeQuery();
            if (rs.next()) {
                return new Branchbudget(rs.getString(1), rs.getString(2), rs.getString(3), rs.getString(4), rs.getString(5), rs.getString(6), rs.getString(7), rs.getString(8), rs.getString(9), rs.getString(10), rs.getString(11));
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return null;
    }

    /**
     *
     * @param filiale
     * @param anno
     * @return
     */
    public ArrayList<Branchbudget> get_branch_budget_YTD(String filiale, String anno) {
        ArrayList<Branchbudget> lb = new ArrayList<>();
        try {
            String sql = "SELECT * FROM branchbudget WHERE branch = ? AND meseanno like ? ORDER BY timestamp DESC";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, filiale);
            ps.setString(2, anno + "%");
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                Branchbudget bb = new Branchbudget(rs.getString(1), rs.getString(2), rs.getString(3), rs.getString(4), rs.getString(5), rs.getString(6), rs.getString(7), rs.getString(8), rs.getString(9), rs.getString(10), rs.getString(11));
                lb.add(bb);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return lb;
    }

    /**
     *
     * @param giorno
     * @param valuta
     * @return
     */
    public String get_BCE_CZ(DateTime giorno, String valuta) {
        try {
            String sql1 = "SELECT modify FROM rate_history where filiale = '000' "
                    + "AND valuta = '" + valuta + "' AND modify LIKE '%bce value%' "
                    + "AND dt_mod < '" + giorno.toString(patternsql) + "' "
                    + "ORDER BY dt_mod DESC LIMIT 1";
            ResultSet rs0 = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql1);
            if (rs0.next()) {
                String modify = rs0.getString(1);
                String bce = modify.split("BCE value ")[1].trim().split("<")[0];
                if (bce.contains(",")) {
                    bce = formatDoubleforMysql(bce);
                }
                return bce;
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return "0";
    }

    /**
     *
     * @param filiale
     * @param giorno
     * @return
     */
    public List<Currency> get_BCE(String filiale, DateTime giorno) {
        try {
            String sql1 = "SELECT modify,valuta FROM rate_history where filiale = '" + filiale + "' "
                    + "AND modify LIKE '%bce value%%" + giorno.toString(patternnormdate_filter) + "%%'";
            ResultSet rs0 = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql1);
            if (rs0.next()) {
                rs0.beforeFirst();
                List<Currency> out = new ArrayList<>();
                while (rs0.next()) {
                    String modify = rs0.getString(1);
                    String bce = modify.split("BCE value ")[1].trim().split("<")[0];
                    if (bce.contains(",")) {
                        bce = formatDoubleforMysql(bce);
                    }
                    Currency c1 = new Currency();
                    c1.setCode(rs0.getString(2));
                    c1.setCambio_bce(bce);
                    out.add(c1);
                }
                return out;
            }
            
            String sql2 = "SELECT SUBSTRING(MAX(dt_mod),1,10) FROM rate_history WHERE filiale ='" + filiale
                    + "' AND modify LIKE '%bce value%' AND dt_mod < '" + giorno.toString(patternsql) + "' ";
            ResultSet rs2 = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql2);
            if (rs2.next()) {
                String sql3 = "SELECT modify,valuta FROM rate_history where filiale = '" + filiale + "' "
                        + "AND modify LIKE '%bce value%' AND dt_mod LIKE '" + rs2.getString(1) + "'";
                ResultSet rs = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql3);
                if (rs.next()) {
                    rs.beforeFirst();
                    List<Currency> out = new ArrayList<>();
                    while (rs.next()) {
                        String modify = rs.getString(1);
                        String bce = modify.split("BCE value ")[1].trim().split("<")[0];
                        if (bce.contains(",")) {
                            bce = formatDoubleforMysql(bce);
                        }
                        Currency c1 = new Currency();
                        c1.setCode(rs.getString(2));
                        c1.setCambio_bce(bce);
                        out.add(c1);
                    }
                    return out;
                }
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return new ArrayList<>();
    }

    /**
     *
     * @param giorno
     * @return
     */
    public List<Currency> get_BCE(DateTime giorno) {
        
        try {
            if (giorno.withMillisOfDay(0).isEqual(new DateTime().withMillisOfDay(0))) {
                return list_currency(filiale);
            }
            
            String sql1 = "SELECT valuta,rif_bce FROM rate where filiale = '000' AND data = '" + giorno.toString(patternsql) + "'";
            ResultSet rs0 = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql1);
            if (rs0.next()) {
                rs0.beforeFirst();
                List<Currency> out = new ArrayList<>();
                while (rs0.next()) {
                    Currency c1 = new Currency();
                    c1.setCode(rs0.getString(1));
                    c1.setCambio_bce(rs0.getString(2));
                    out.add(c1);
                }
                return out;
            }
            
            String sql00 = "SELECT MAX(DATA) FROM rate where filiale = '000' AND data < '" + giorno.toString(patternsql) + "'";
            ResultSet rs00 = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql00);
            if (rs00.next()) {
                String sql0 = "SELECT valuta,rif_bce FROM rate where filiale = '000' AND data = '" + rs00.getString(1) + "'";
                ResultSet rs1 = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql0);
                if (rs1.next()) {
                    rs1.beforeFirst();
                    List<Currency> out = new ArrayList<>();
                    while (rs1.next()) {
                        Currency c1 = new Currency();
                        c1.setCode(rs1.getString(1));
                        c1.setCambio_bce(rs1.getString(2));
                        out.add(c1);
                    }
                    return out;
                }
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        
        return null;
    }
    
    public String get_BCE(DateTime giorno, String valuta) {
        try {
            String sql1 = "SELECT rif_bce FROM rate where filiale = '000' AND valuta = '" + valuta + "' AND data = '" + giorno.toString(patternsql) + "'";
            ResultSet rs0 = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql1);
            if (rs0.next()) {
                return rs0.getString(1);
            }
            String sql0 = "SELECT rif_bce FROM rate where filiale = '000' AND valuta = '" + valuta + "' AND data < '" + giorno.toString(patternsql) + "' ORDER BY data DESC LIMIT 1";
            ResultSet rs1 = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql0);
            if (rs1.next()) {
                return rs1.getString(1);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return get_BCE(filiale, giorno, valuta);
    }
    
    public String get_BCE(
            String filiale,
            DateTime giorno,
            String valuta
    ) {
        try {
            DateTimeFormatter sqldate = forPattern(patternsql);
            String sql1 = "SELECT modify FROM rate_history where filiale = '" + filiale + "' "
                    + "AND valuta = '" + valuta + "' "
                    + "AND modify LIKE '%bce value%%" + giorno.toString(patternnormdate_filter) + "%%' "
                    + "ORDER BY dt_mod DESC LIMIT 1";
            
            ResultSet rs0 = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql1);
            if (rs0.next()) {
                String modify = rs0.getString(1);
                String bce = modify.split("BCE value ")[1].trim().split("<")[0];
                if (bce.contains(",")) {
                    bce = formatDoubleforMysql(bce);
                }
                return bce;
            }
            
            String gg2 = giorno.minusDays(1).toString(patternsql);
            
            String sql2 = "SELECT modify FROM rate_history WHERE filiale = '" + filiale + "' "
                    + "AND valuta = '" + valuta + "' AND modify like '%bce value%' "
                    + "AND dt_mod < '" + gg2 + " 23:59:59' ORDER BY dt_mod DESC";
            ResultSet rs = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql2);
            
            while (rs.next()) {
                String modify = rs.getString(1);
                String datainizio = modify.split("Date validity: ")[1].trim().split(" ")[0];
                String datasql = formatStringtoStringDate(datainizio, patternnormdate_filter, patternsql);
                if (gg2.equals(datasql)) {
                    String bce = modify.split("BCE value ")[1].trim().split("<")[0];
                    if (bce.contains(",")) {
                        bce = formatDoubleforMysql(bce);
                    }
                    return bce;
                } else {
                    if (sqldate.parseDateTime(gg2).isBefore(sqldate.parseDateTime(datasql))) {
                    } else {
                        gg2 = sqldate.parseDateTime(gg2).minusDays(1).toString(patternsql);
                        rs.previous();
                    }
                }
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return "0";
    }
    
    public String get_BCE_central(DateTime giorno, String valuta) {
        try {
            DateTimeFormatter sqldate = forPattern(patternsql);
            String sql1 = "SELECT modify FROM rate_history where filiale = '000' "
                    + "AND valuta = '" + valuta + "' AND modify LIKE '%bce value%' "
                    + "AND modify LIKE '%%" + giorno.toString(patternnormdate_filter) + "%%' ORDER BY dt_mod DESC LIMIT 1";
            
            ResultSet rs0 = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql1);
            if (rs0.next()) {
                String modify = rs0.getString(1);
                String bce = modify.split("BCE value ")[1].trim().split("<")[0];
                if (bce.contains(",")) {
                    bce = formatDoubleforMysql(bce);
                }
                return bce;
            }
            
            String gg2 = giorno.minusDays(1).toString(patternsql);
            
            String sql2 = "SELECT modify FROM rate_history WHERE filiale = '000' "
                    + "AND valuta = '" + valuta + "' AND modify like '%bce value%' "
                    + "AND dt_mod < '" + gg2 + " 23:59:59' ORDER BY dt_mod DESC";
            
            ResultSet rs = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql2);
            
            while (rs.next()) {
                String modify = rs.getString(1);
                String datainizio = modify.split("Date validity: ")[1].trim().split(" ")[0];
                String datasql = formatStringtoStringDate(datainizio, patternnormdate_filter, patternsql);
                if (gg2.equals(datasql)) {
                    String bce = modify.split("BCE value ")[1].trim().split("<")[0];
                    if (bce.contains(",")) {
                        bce = formatDoubleforMysql(bce);
                    }
                    return bce;
                } else {
                    if (sqldate.parseDateTime(gg2).isBefore(sqldate.parseDateTime(datasql))) {
                    } else {
                        gg2 = sqldate.parseDateTime(gg2).minusDays(1).toString(patternsql);
                        rs.previous();
                    }
                }
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return "0";
    }

    /**
     *
     * @param giorno
     * @return
     */
    public String get_BCE_USD(String giorno) {
        try {
            DateTimeFormatter sqldate = forPattern(patternsql);
            String sql = "SELECT modify FROM rate_history where filiale = '000' AND valuta = 'USD' "
                    + "AND modify like '%bce value%' AND dt_mod < '" + giorno + " 23:59:59' order by dt_mod DESC";
            ResultSet rs = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql);
            while (rs.next()) {
                String modify = rs.getString(1);
                String datainizio = modify.split("Date validity: ")[1].trim().split(" ")[0];
                String datasql = formatStringtoStringDate(datainizio, patternnormdate_filter, patternsql);
                if (giorno.equals(datasql)) {
                    String bce = modify.split("BCE value ")[1].trim().split("<")[0];
                    if (bce.contains(",")) {
                        bce = formatDoubleforMysql(bce);
                    }
                    return bce;
                } else {
                    if (sqldate.parseDateTime(giorno).isBefore(sqldate.parseDateTime(datasql))) {
                    } else {
                        giorno = sqldate.parseDateTime(giorno).minusDays(1).toString(patternsql);
                        rs.previous();
                    }
                }
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return "0";
    }

    /**
     *
     * @param fil
     * @return
     */
    public String alert_sogliaCOPFX(String fil) {
        try {
            Branch br = get_branch(fil);
            double massimale = fd(br.getMax_ass());
            if (massimale > 0) {
                String sql = "SELECT * FROM office_sp WHERE filiale='" + fil + "' AND data > date_sub(curdate(),interval 5 day) ORDER BY data DESC";
                ResultSet rs = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql);
                while (rs.next()) {
                    String total = rs.getString("total_grand");
                    if (fd(total) > massimale) {
                        return "Grand Total " + formatMysqltoDisplay(total)
                                + " (O.S.P. of " + formatStringtoStringDate(rs.getString("data"), patternsqldate, patternnormdate) + ") exceeds Limit Insurance "
                                + "(" + formatMysqltoDisplay(br.getMax_ass()) + ").";
                    }
                }
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return null;
    }

    /**
     *
     * @param codcl
     * @return
     */
    public String[] getClientCommission(String codcl) {
        String[] out = {"-", "-"};
        try {
            String sql = "SELECT perc_buy,perc_sell FROM ch_transaction_client WHERE codcl='" + codcl + "'";
            ResultSet rs = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql);
            ArrayList<Double> b = new ArrayList<>();
            ArrayList<Double> s = new ArrayList<>();
            while (rs.next()) {
                String b1 = rs.getString(1);
                String s1 = rs.getString(2);
                double newbuy = fd(b1);
                double newsell = fd(s1);
                if (!b1.equals("-") && newbuy > 0) {
                    b.add(new Double(b1));
                }
                if (!s1.equals("-") && newsell > 0) {
                    s.add(new Double(s1));
                }
            }
            sort(b);
            sort(s);
            if (!b.isEmpty()) {
                out[0] = roundDoubleandFormat(b.get(0), 2);
            }
            if (!s.isEmpty()) {
                out[1] = roundDoubleandFormat(s.get(0), 2);
            }
            
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @param filiale
     * @return
     */
    public int getAggdaScaricare(String filiale) {
        try {
            
            String sql = "SELECT count(*) FROM aggiornamenti_mod WHERE filiale = '" + filiale + "' AND fg_stato='0'";
            ResultSet rs = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql);
            if (rs.next()) {
                return rs.getInt(1);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return -1;
    }

    /**
     *
     * @param filiale
     * @return
     */
    public int getAggdaScaricare_SUFILIALE(String filiale) {
        try {
            
            String sql = "SELECT count(*) FROM aggiornamenti_mod WHERE filiale <> '" + filiale + "' AND fg_stato='0'";
            ResultSet rs = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql);
            if (rs.next()) {
                return rs.getInt(1);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return -1;
    }

    /**
     *
     * @param code
     * @param dest
     * @param user
     * @return
     */
    public boolean cambia_dest_POS(String code, String dest, String user) {
        try {
            String upd = "UPDATE et_change SET cod_dest = ? WHERE cod = ?";
            PreparedStatement ps = this.c.prepareStatement(upd, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, dest);
            ps.setString(2, code);
            int x = ps.executeUpdate();
            insertValue_agg(ps, null, "000", null, user);
            return x > 0;
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return false;
    }

    /**
     *
     * @param d1
     * @param d2
     * @param filiale
     * @param surname
     * @param name
     * @param taxcode
     * @return
     */
    public ArrayList<Ch_transaction> query_transaction_ch_new(
            String d1, String d2, String filiale,
            String surname, String name, String taxcode) {
        ArrayList<Ch_transaction> out = new ArrayList<>();
        try {
            
            if (d1 == null || d1.equals("...")) {
                d1 = "";
            }
            d1 = d1.trim() + " 00:00:00";
            
            if (d2 == null || d2.equals("...")) {
                d2 = "";
            }
            d2 = d2.trim() + " 23:59:59";
            
            d1 = formatStringtoStringDate(d1, patternnormdate, patternsqldate);
            d2 = formatStringtoStringDate(d2, patternnormdate, patternsqldate);
            
            String sql = "SELECT * FROM ch_transaction ch WHERE data >= '" + d1 + "' AND data <= '" + d2 + "' ";
            
            if (filiale != null && !filiale.equals("") && !filiale.equals("...")) {
                sql = sql + "AND filiale = '" + filiale + "'";
            }

            //cliente
            if ((surname != null && !surname.equals("") && !surname.equals("...")) || (name != null && !name.equals("") && !name.equals("...")) || (taxcode != null && !taxcode.equals("") && !taxcode.equals("---"))) {
                String newsql = "SELECT codtr FROM ch_transaction_client WHERE codtr <> '' ";
                
                if ((surname != null && !surname.equals("") && !surname.equals("..."))) {
                    newsql = newsql + "AND cognome = \"" + surname.trim() + "\"";
                }
                if ((name != null && !name.equals("") && !name.equals("..."))) {
                    newsql = newsql + "AND nome = \"" + name.trim() + "\"";
                }
                if ((taxcode != null && !taxcode.equals("") && !taxcode.equals("---"))) {
                    newsql = newsql + "AND codfisc = \"" + taxcode.trim() + "\"";
                }
                
                sql = sql + "AND cod in (" + newsql + ")";
                
            }
            
            sql = sql + " ORDER BY data";
            
            ResultSet rs = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql);
//            ResultSet rs = ps.executeQuery();

            while (rs.next()) {
                Ch_transaction ch = new Ch_transaction();
                ch.setCod(rs.getString("cod"));
                ch.setId(leftPad(rs.getString("id"), 15, "0"));
                ch.setFiliale(rs.getString("filiale"));
                ch.setTipotr(rs.getString("tipotr"));
                ch.setUser(rs.getString("user"));
                ch.setTill(rs.getString("till"));
                ch.setData(rs.getString("data"));
                ch.setTipocliente(rs.getString("tipocliente"));
                ch.setId_open_till(rs.getString("id_open_till"));
                ch.setPay(rs.getString("pay"));
                ch.setTotal(rs.getString("total"));
                ch.setFix(rs.getString("fix"));
                ch.setCom(rs.getString("com"));
                ch.setRound(rs.getString("round"));
                ch.setCommission(rs.getString("commission"));
                ch.setSpread_total(rs.getString("spread_total"));
                ch.setNote(rs.getString("note"));
                ch.setAgency(rs.getString("agency"));
                ch.setAgency_cod(rs.getString("agency_cod"));
                ch.setLocalfigures(rs.getString("localfigures"));
                ch.setPos(rs.getString("pos"));
                ch.setIntbook(rs.getString("intbook"));
                ch.setIntbook_type(rs.getString("intbook_type"));
                ch.setIntbook_1_tf(rs.getString("intbook_1_tf"));
                ch.setIntbook_1_mod(rs.getString("intbook_1_mod"));
                ch.setIntbook_1_val(rs.getString("intbook_1_val"));
                ch.setIntbook_2_tf(rs.getString("intbook_2_tf"));
                ch.setIntbook_2_mod(rs.getString("intbook_2_mod"));
                ch.setIntbook_2_val(rs.getString("intbook_2_val"));
                ch.setIntbook_3_tf(rs.getString("intbook_3_tf"));
                ch.setIntbook_3_mod(rs.getString("intbook_3_mod"));
                ch.setIntbook_3_val(rs.getString("intbook_3_val"));
                ch.setIntbook_mac(rs.getString("intbook_mac"));
                ch.setIntbook_cli(rs.getString("intbook_cli"));
                ch.setCl_cf(rs.getString("cl_cf"));
                ch.setCl_cod(rs.getString("cl_cod"));
                ch.setDel_fg(rs.getString("del_fg"));
                ch.setDel_dt(rs.getString("del_dt"));
                ch.setDel_user(rs.getString("del_user"));
                ch.setDel_motiv(rs.getString("del_motiv"));
                ch.setBb(rs.getString("bb"));
                ch.setRefund(rs.getString("refund"));
                ch.setFa_number(rs.getString("fa_number"));
                ch.setCn_number(rs.getString("cn_number"));
                ch.setCredccard_number(rs.getString("credccard_number"));
                out.add(ch);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @param d1
     * @param d2
     * @param branch
     * @return
     */
    public ArrayList<Ch_transaction> query_transaction_ch_new(String d1, String d2, ArrayList<String> branch) {
        ArrayList<Ch_transaction> out = new ArrayList<>();
        try {
            
            if (d1 == null || d1.equals("...")) {
                d1 = "";
            }
            d1 = d1.trim() + " 00:00:00";
            
            if (d2 == null || d2.equals("...")) {
                d2 = "";
            }
            d2 = d2.trim() + " 23:59:59";
            
            String sql = "SELECT * FROM ch_transaction ch WHERE data >= '" + d1 + "' AND data <= '" + d2 + "' ";
            
            String filwhere = "";
            for (int i = 0; i < branch.size(); i++) {
                filwhere = filwhere + "filiale = '" + branch.get(i) + "' OR ";
            }
            
            if (filwhere.length() > 3) {
                sql = sql + " AND (" + filwhere.substring(0, filwhere.length() - 3).trim() + ") ";
            }
            
            ResultSet rs = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql);
//            ResultSet rs = ps.executeQuery();

            while (rs.next()) {
                Ch_transaction ch = new Ch_transaction();
                ch.setCod(rs.getString("cod"));
                ch.setId(leftPad(rs.getString("id"), 15, "0"));
                ch.setFiliale(rs.getString("filiale"));
                ch.setTipotr(rs.getString("tipotr"));
                ch.setUser(rs.getString("user"));
                ch.setTill(rs.getString("till"));
                ch.setData(rs.getString("data"));
                ch.setTipocliente(rs.getString("tipocliente"));
                ch.setId_open_till(rs.getString("id_open_till"));
                ch.setPay(rs.getString("pay"));
                ch.setTotal(rs.getString("total"));
                ch.setFix(rs.getString("fix"));
                ch.setCom(rs.getString("com"));
                ch.setRound(rs.getString("round"));
                ch.setCommission(rs.getString("commission"));
                ch.setSpread_total(rs.getString("spread_total"));
                ch.setNote(rs.getString("note"));
                ch.setAgency(rs.getString("agency"));
                ch.setAgency_cod(rs.getString("agency_cod"));
                ch.setLocalfigures(rs.getString("localfigures"));
                ch.setPos(rs.getString("pos"));
                ch.setIntbook(rs.getString("intbook"));
                ch.setIntbook_type(rs.getString("intbook_type"));
                ch.setIntbook_1_tf(rs.getString("intbook_1_tf"));
                ch.setIntbook_1_mod(rs.getString("intbook_1_mod"));
                ch.setIntbook_1_val(rs.getString("intbook_1_val"));
                ch.setIntbook_2_tf(rs.getString("intbook_2_tf"));
                ch.setIntbook_2_mod(rs.getString("intbook_2_mod"));
                ch.setIntbook_2_val(rs.getString("intbook_2_val"));
                ch.setIntbook_3_tf(rs.getString("intbook_3_tf"));
                ch.setIntbook_3_mod(rs.getString("intbook_3_mod"));
                ch.setIntbook_3_val(rs.getString("intbook_3_val"));
                ch.setIntbook_mac(rs.getString("intbook_mac"));
                ch.setIntbook_cli(rs.getString("intbook_cli"));
                ch.setCl_cf(rs.getString("cl_cf"));
                ch.setCl_cod(rs.getString("cl_cod"));
                ch.setDel_fg(rs.getString("del_fg"));
                ch.setDel_dt(rs.getString("del_dt"));
                ch.setDel_user(rs.getString("del_user"));
                ch.setDel_motiv(rs.getString("del_motiv"));
                ch.setBb(rs.getString("bb"));
                ch.setRefund(rs.getString("refund"));
                ch.setFa_number(rs.getString("fa_number"));
                ch.setCn_number(rs.getString("cn_number"));
                ch.setCredccard_number(rs.getString("credccard_number"));
                out.add(ch);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @param cod
     * @return
     */
    public String codnaz_esolv(String cod) {
        try {
            String sql = "SELECT cod FROM nazionies where idnaz = '" + cod + "'";
            ResultSet rs = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql);
            if (rs.next()) {
                return rs.getString(1);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }

//        return cod;
        return "US";
    }

    /**
     *
     * @param type
     * @param user
     * @param descr
     */
    public void insertTR(String type, String user, String descr) {
        try {
            String id = generaId(100);
            String timestamp = getNow();
            PreparedStatement ps = this.c.prepareStatement("INSERT INTO tr VALUES (?,?,?,?,?)");
            ps.setString(1, id);
            ps.setString(2, type);
            ps.setString(3, user);
            ps.setString(4, descr);
            ps.setString(5, timestamp);
            ps.execute();
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }

    /**
     *
     * @param d1
     * @param d2
     * @param branch
     * @param vatref
     * @return
     */
    public ArrayList<NC_transaction> query_NC_transaction_NEW(String d1, String d2, ArrayList<String> branch, String vatref) {
        ArrayList<NC_transaction> out = new ArrayList<>();
        try {
            if (d1 == null || d1.equals("...")) {
                d1 = "";
            }
            d1 = d1.trim() + " 00:00:00";
            
            if (d2 == null || d2.equals("...")) {
                d2 = "";
            }
            d2 = d2.trim() + " 23:59:59";
            
            String sql = "SELECT cod,id,filiale,gruppo_nc,causale_nc,valuta,supporto,pos,user,till,data,total,commissione,netto,prezzo,quantita,fg_inout,ricevuta,mtcn,del_fg,del_dt,del_user,del_motiv,fg_tipo_transazione_nc,fg_dogana,ass_idcode,ass_startdate,ass_enddate,cl_cognome,cl_nome,cl_indirizzo,cl_citta,cl_nazione,cl_cap,cl_provincia,cl_email,cl_telefono,note,ti_diritti,ti_ticket_fee,id_open_till,posnum,percentiva,bonus,ch_transaction FROM nc_transaction WHERE data >= '" + d1 + "' AND data <= '" + d2 + "' ";
            
            String filwhere = "";
            for (int i = 0; i < branch.size(); i++) {
                filwhere = filwhere + "filiale = '" + branch.get(i) + "' OR ";
            }
            
            if (filwhere.length() > 3) {
                sql = sql + " AND (" + filwhere.substring(0, filwhere.length() - 3).trim() + ") ";
            }
            
            if (vatref.equals("SI")) {
                //sql = sql + " AND ch_transaction<>'-'";
                String nccatwhere = "";
                ArrayList<NC_category> array_nc_cat = list_ALL_nc_category();
                for (int i = 0; i < array_nc_cat.size(); i++) {
                    if (array_nc_cat.get(i).getFg_tipo_transazione_nc().equals("3")) {
                        nccatwhere = nccatwhere + " gruppo_nc ='" + array_nc_cat.get(i).getGruppo_nc().trim() + "' OR ";
                    }
                }
                if (nccatwhere.length() > 3) {
                    sql = sql + " AND (" + nccatwhere.substring(0, nccatwhere.length() - 3).trim() + ")";
                }
                
            }
            
            sql = sql + " ORDER BY filiale,data";
            
            ResultSet rs = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql);
            while (rs.next()) {
                NC_transaction nc = new NC_transaction(
                        rs.getString(1), leftPad(rs.getString(2), 15, "0"),
                        rs.getString(3), rs.getString(4), rs.getString(5), rs.getString(6), rs.getString(7), rs.getString(8),
                        rs.getString(9), rs.getString(10), rs.getString(11), rs.getString(12), rs.getString(13), rs.getString(14),
                        rs.getString(15), rs.getString(16), rs.getString(17), rs.getString(18), rs.getString(19), rs.getString(20),
                        rs.getString(21), rs.getString(22), rs.getString(23), rs.getString(24), rs.getString(25), rs.getString(26),
                        rs.getString(27), rs.getString(28), rs.getString(29), rs.getString(30), rs.getString(31), rs.getString(32),
                        rs.getString(33), rs.getString(34), rs.getString(35), rs.getString(36), rs.getString(37), rs.getString(38),
                        rs.getString(39), rs.getString(40), rs.getString(41), rs.getString(42), rs.getString(43), rs.getString(44),
                        rs.getString(45), ""
                );
                out.add(nc);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @param d1
     * @param d2
     * @param branch
     * @return
     */
    public ArrayList<NC_transaction> query_NC_transaction(String d1, String d2, ArrayList<String> branch) {
        ArrayList<NC_transaction> out = new ArrayList<>();
        try {
            if (d1 == null || d1.equals("...")) {
                d1 = "";
            }
            d1 = d1.trim() + " 00:00:00";
            
            if (d2 == null || d2.equals("...")) {
                d2 = "";
            }
            d2 = d2.trim() + " 23:59:59";
            
            String sql = "SELECT cod,id,filiale,gruppo_nc,causale_nc,valuta,supporto,pos,user,till,data,total,commissione,netto,prezzo,quantita,fg_inout,ricevuta,mtcn,del_fg,del_dt,del_user,del_motiv,fg_tipo_transazione_nc,fg_dogana,ass_idcode,ass_startdate,ass_enddate,cl_cognome,cl_nome,cl_indirizzo,cl_citta,cl_nazione,cl_cap,cl_provincia,cl_email,cl_telefono,note,ti_diritti,ti_ticket_fee,id_open_till,posnum,percentiva,bonus,ch_transaction FROM nc_transaction WHERE data >= '" + d1 + "' AND data <= '" + d2 + "' ";
            
            String filwhere = "";
            for (int i = 0; i < branch.size(); i++) {
                filwhere = filwhere + "filiale = '" + branch.get(i) + "' OR ";
            }
            
            if (filwhere.length() > 3) {
                sql = sql + " AND (" + filwhere.substring(0, filwhere.length() - 3).trim() + ") ";
            }
            
            sql = sql + " ORDER BY filiale,data";
            ResultSet rs = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql);
            while (rs.next()) {
                NC_transaction nc = new NC_transaction(
                        rs.getString(1), leftPad(rs.getString(2), 15, "0"),
                        rs.getString(3), rs.getString(4), rs.getString(5), rs.getString(6), rs.getString(7), rs.getString(8),
                        rs.getString(9), rs.getString(10), rs.getString(11), rs.getString(12), rs.getString(13), rs.getString(14),
                        rs.getString(15), rs.getString(16), rs.getString(17), rs.getString(18), rs.getString(19), rs.getString(20),
                        rs.getString(21), rs.getString(22), rs.getString(23), rs.getString(24), rs.getString(25), rs.getString(26),
                        rs.getString(27), rs.getString(28), rs.getString(29), rs.getString(30), rs.getString(31), rs.getString(32),
                        rs.getString(33), rs.getString(34), rs.getString(35), rs.getString(36), rs.getString(37), rs.getString(38),
                        rs.getString(39), rs.getString(40), rs.getString(41), rs.getString(42), rs.getString(43), rs.getString(44),
                        rs.getString(45), ""
                );
                out.add(nc);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @param cod
     * @param username
     * @return
     */
    public boolean delete_newsletters(String cod, String username) {
        try {
            String newcod = "DEL" + generaId(17);
            String upd = "UPDATE newsletter SET cod = '" + newcod + "' WHERE cod = '" + cod + "'";
            int x = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeUpdate(upd);
            insertValue_agg_NOCENTRAL(null, upd, null, null, username);
            return x > 0;
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return false;
    }

    /**
     *
     * @param annomese
     * @param tipo
     * @return
     */
    public String getOAM(String annomese, String tipo) {
        try {
            String sql = "SELECT content FROM oam WHERE data like '" + annomese + "%' AND tipo='" + tipo + "' ORDER by data desc LIMIT 1";
            ResultSet rs = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql);
            if (rs.next()) {
                return rs.getString(1);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return null;
    }

    /**
     *
     * @param annomese
     * @param tipo
     * @return
     */
    public String getCORA(String annomese, String tipo) {
        try {
            String sql = "SELECT content FROM cora WHERE data like '" + annomese + "%' AND tipo='" + tipo + "' ORDER by data desc LIMIT 1";
            
            ResultSet rs = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql);
            if (rs.next()) {
                return rs.getString(1);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return null;
    }

    /**
     *
     * @param num
     * @return
     */
    public String getDataF_NC(String num) {
        try {
            String sql = "SELECT dt FROM inv_list WHERE numero = '" + num + "'";
            ResultSet rs = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql);
            if (rs.next()) {
                return rs.getString(1);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return null;
    }

    /**
     *
     * @param codtr
     * @param canale
     * @param prenotazione
     * @param username
     * @return
     */
    public boolean insert_InternetBookingCH(String codtr, String canale, String prenotazione, String username) {
        try {
            String ins = "INSERT INTO internetbooking_ch VALUES(?,?,?)";
            PreparedStatement ps = this.c.prepareStatement(ins, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, codtr);
            ps.setString(2, canale);
            ps.setString(3, prenotazione);
            ps.execute();
            insertValue_agg(ps, null, "000", null, username);
            return true;
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return false;
    }

    /**
     *
     * @param codice
     * @param cop
     * @return
     */
    public boolean updateCOP(String codice, String cop) {
        try {
            String valutalocale = get_local_currency()[0];
            String upd1 = "UPDATE office_sp SET total_cod = '" + cop + "' WHERE codice='" + codice + "';";
            String upd2 = "UPDATE office_sp_valori SET quantity = '" + cop + "' , controv = '" + cop
                    + "' WHERE cod='" + codice + "' AND currency='" + valutalocale + "' and kind='01'";
            this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeUpdate(upd1);
            this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeUpdate(upd2);
            return true;
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return false;
    }

    /**
     *
     * @return
     */
    public ArrayList<String> list_kyc_enabled() {
        ArrayList<String> li = new ArrayList<>();
        try {
            String sql = "SELECT username FROM user_sito WHERE stato = '1'";
            ResultSet rs = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql);
            while (rs.next()) {
                li.add(rs.getString(1));
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return li;
    }

    /**
     *
     * @param cod_tr
     * @return
     */
    public String[] internetbooking_ch(String cod_tr) {
        try {
            String sql = "SELECT canale,codiceprenotazione FROM internetbooking_ch WHERE cod = '" + cod_tr + "'";
            ResultSet rs = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql);
            if (rs.next()) {
                String[] out = {rs.getString(1), rs.getString(2)};
                return out;
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return null;
    }

    /**
     *
     * @param tr_cod
     * @return
     */
    public boolean have_kyc_modified(String tr_cod) {
        try {
            String sql = "SELECT codicemodifica FROM kyc_modify_client WHERE codtr = '" + tr_cod + "' LIMIT 1";
            return this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql).next();
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return false;
    }

    /**
     *
     * @param cod
     * @return
     */
    public Client kyc_modified_cod(String cod) {
        
        try {
            String sqlORI = "SELECT * FROM kyc_modify_client WHERE codicemodifica = '" + cod + "' AND tipomodifica = 'O'";
            String sqlMOD = "SELECT * FROM kyc_modify_client WHERE codicemodifica = '" + cod + "' AND tipomodifica = 'M'";
            ResultSet rsORI = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sqlORI);
            ResultSet rsMOD = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sqlMOD);
            ResultSetMetaData rsmd = rsORI.getMetaData();
            int columnCount = rsmd.getColumnCount();
            HashMap<String, String[]> modifiche = new HashMap<>();
            Client out = new Client();
            if (rsORI.next() && rsMOD.next()) {
                out.setDatemodifica(rsORI.getString("dt_modifica"));
                out.setUsermodifica(rsORI.getString("usermodifica"));
                for (int i = 1; i <= columnCount; i++) {
                    String name = rsmd.getColumnName(i);
                    if (!rsORI.getString(name).trim().equals(rsMOD.getString(name).trim()) && !name.equals("tipomodifica")) {
                        String[] mod = {rsORI.getString(name), rsMOD.getString(name)};
                        modifiche.put(name, mod);
                    }
                }
            }
            out.setModifiche(modifiche);
            return out;
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return null;
    }

    /**
     *
     * @param tr_cod
     * @return
     */
    public ArrayList<Client> list_kyc_modified(String tr_cod) {
        ArrayList<Client> out = new ArrayList<>();
        ArrayList<String> codici = new ArrayList<>();
        try {
            String sql = "SELECT * FROM kyc_modify_client WHERE codtr = '" + tr_cod + "' ORDER BY dt_modifica DESC";
            ResultSet rs = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql);
            while (rs.next()) {
                codici.add(rs.getString(1));
            }
            rs.beforeFirst();
            removeDuplicatesAL(codici);
            for (int x = 0; x < codici.size(); x++) {
                String cod = codici.get(x);
                String sqlORI = "SELECT * FROM kyc_modify_client WHERE codicemodifica = '" + cod + "' AND tipomodifica = 'O'";
                String sqlMOD = "SELECT * FROM kyc_modify_client WHERE codicemodifica = '" + cod + "' AND tipomodifica = 'M'";
                ResultSet rsORI = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sqlORI);
                ResultSet rsMOD = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sqlMOD);
                ResultSetMetaData rsmd = rsORI.getMetaData();
                int columnCount = rsmd.getColumnCount();
                HashMap<String, String[]> modifiche = new HashMap<>();
                Client cl = new Client();
                if (rsORI.next() && rsMOD.next()) {
                    cl.setDatemodifica(rsORI.getString("dt_modifica"));
                    cl.setUsermodifica(rsORI.getString("usermodifica"));
                    for (int i = 1; i <= columnCount; i++) {
                        String name = rsmd.getColumnName(i);
                        if (!rsORI.getString(name).trim().equals(rsMOD.getString(name).trim()) && !name.equals("tipomodifica")) {
                            String[] mod = {rsORI.getString(name), rsMOD.getString(name)};
                            modifiche.put(name, mod);
                        }
                    }
                } else {
                    String sqlDOC = "SELECT * FROM kyc_modify_client WHERE codicemodifica = '" + cod + "' AND tipomodifica = 'D'";
                    ResultSet rsDOC = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sqlDOC);
                    if (rsDOC.next()) {
                        cl.setDatemodifica(rsDOC.getString("dt_modifica"));
                        cl.setUsermodifica(rsDOC.getString("usermodifica"));
                        String[] mod = {"-", "-"};
                        modifiche.put("Identity Document", mod);
                    }
                }
                cl.setModifiche(modifiche);
                out.add(cl);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @param clOR
     * @param clMO
     * @param tr_cod
     * @return
     */
    public boolean insert_kyc_modify_client(Client clOR, Client clMO, String tr_cod) {
        try {
            String ins = "INSERT INTO kyc_modify_client VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
            PreparedStatement ps = this.c.prepareStatement(ins, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, clOR.getCodicemodifica());
            ps.setString(2, clOR.getTipomodifica());
            ps.setString(3, clOR.getUsermodifica());
            ps.setString(4, clOR.getDatemodifica());
            ps.setString(5, tr_cod);
            ps.setString(6, clOR.getCognome());
            ps.setString(7, clOR.getNome());
            ps.setString(8, clOR.getSesso());
            ps.setString(9, clOR.getCodfisc());
            ps.setString(10, clOR.getNazione());
            ps.setString(11, clOR.getCitta());
            ps.setString(12, clOR.getIndirizzo());
            ps.setString(13, clOR.getCap());
            ps.setString(14, clOR.getProvincia());
            ps.setString(15, clOR.getCitta_nascita());
            ps.setString(16, clOR.getProvincia_nascita());
            ps.setString(17, clOR.getNazione_nascita());
            ps.setString(18, clOR.getDt_nascita());
            ps.setString(19, clOR.getTipo_documento());
            ps.setString(20, clOR.getNumero_documento());
            ps.setString(21, clOR.getDt_rilascio_documento());
            ps.setString(22, clOR.getDt_scadenza_documento());
            ps.setString(23, clOR.getRilasciato_da_documento());
            ps.setString(24, clOR.getLuogo_rilascio_documento());
            ps.setString(25, clOR.getEmail());
            ps.setString(26, clOR.getTelefono());
            ps.setString(27, clOR.getPep());
            ps.setString(28, clOR.getCode());
            ps.execute();
            if (clMO != null) {
                PreparedStatement ps1 = this.c.prepareStatement(ins, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
                ps1.setString(1, clMO.getCodicemodifica());
                ps1.setString(2, clMO.getTipomodifica());
                ps1.setString(3, clMO.getUsermodifica());
                ps1.setString(4, clMO.getDatemodifica());
                ps1.setString(5, tr_cod);
                ps1.setString(6, clMO.getCognome());
                ps1.setString(7, clMO.getNome());
                ps1.setString(8, clMO.getSesso());
                ps1.setString(9, clMO.getCodfisc());
                ps1.setString(10, clMO.getNazione());
                ps1.setString(11, clMO.getCitta());
                ps1.setString(12, clMO.getIndirizzo());
                ps1.setString(13, clMO.getCap());
                ps1.setString(14, clMO.getProvincia());
                ps1.setString(15, clMO.getCitta_nascita());
                ps1.setString(16, clMO.getProvincia_nascita());
                ps1.setString(17, clMO.getNazione_nascita());
                ps1.setString(18, clMO.getDt_nascita());
                ps1.setString(19, clMO.getTipo_documento());
                ps1.setString(20, clMO.getNumero_documento());
                ps1.setString(21, clMO.getDt_rilascio_documento());
                ps1.setString(22, clMO.getDt_scadenza_documento());
                ps1.setString(23, clMO.getRilasciato_da_documento());
                ps1.setString(24, clMO.getLuogo_rilascio_documento());
                ps1.setString(25, clMO.getEmail());
                ps1.setString(26, clMO.getTelefono());
                ps1.setString(27, clMO.getPep());
                ps1.setString(28, clMO.getCode());
                ps1.execute();
            }
            return true;
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return false;
    }

    /**
     *
     * @param cod
     * @param type
     * @param filename
     * @param fileout
     * @param user
     * @param dt_start
     * @return
     */
    public boolean insert_excel_upl_SP(String cod, String type, String filename, String fileout, String user, String dt_start) {
        try {
            String ins = "INSERT INTO excel_upload (cod,type,filename,fileout,user,dt_start,stato) VALUES (?,?,?,?,?,?,?)";
            PreparedStatement ps = this.c.prepareStatement(ins, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, cod);
            ps.setString(2, type);
            ps.setString(3, filename);
            ps.setString(4, fileout);
            ps.setString(5, user);
            ps.setString(6, dt_start);
            ps.setString(7, "3");
            ps.execute();
            return true;
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return false;
    }

    /**
     *
     * @param data
     * @return
     */
    public ArrayList<String[]> agevolazioni_varie(String data) {
        ArrayList<String[]> out = new ArrayList<>();
        try {
            if (data.length() > 10) {
                data = substring(data, 0, 10);
            }
            String sql = "SELECT * FROM sito_agevolazioni_varie WHERE attivo = 'Y' "
                    + "AND STR_TO_DATE(data_start,'%Y-%m-%d') <= STR_TO_DATE('" + data + "','%Y-%m-%d') "
                    + "AND STR_TO_DATE(data_end,'%Y-%m-%d') >= STR_TO_DATE('" + data + "','%Y-%m-%d') "
                    + "ORDER BY descrizione";
            ResultSet rs = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql);
            while (rs.next()) {
                String[] s1 = {rs.getString(1), rs.getString(2), rs.getString(3), rs.getString(4), rs.getString(5), rs.getString(6)};
                out.add(s1);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @return
     */
    public ArrayList<String[]> agevolazioni_varie() {
        ArrayList<String[]> out = new ArrayList<>();
        try {
            String sql = "SELECT * FROM sito_agevolazioni_varie WHERE attivo = 'Y'";
            ResultSet rs = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql);
            while (rs.next()) {
                String[] s1 = {rs.getString(1), rs.getString(2), rs.getString(3), rs.getString(4), rs.getString(5), rs.getString(6)};
                out.add(s1);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @param data
     * @return
     */
    public ArrayList<String[]> servizi_agg(String data) {
        ArrayList<String[]> out = new ArrayList<>();
        try {
            if (data.length() > 10) {
                data = substring(data, 0, 10);
            }
            String sql = "SELECT * FROM sito_servizi_agg WHERE attivo = 'Y'"
                    + "AND STR_TO_DATE(data_start,'%Y-%m-%d') <= STR_TO_DATE('" + data + "','%Y-%m-%d') "
                    + "AND STR_TO_DATE(data_end,'%Y-%m-%d') >= STR_TO_DATE('" + data + "','%Y-%m-%d') "
                    + "ORDER BY descrizione";
            ResultSet rs = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql);
            while (rs.next()) {
                String[] s1 = {rs.getString(1), rs.getString(2), rs.getString(3), rs.getString(4), rs.getString(5), rs.getString(6)};
                out.add(s1);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @return
     */
    public ArrayList<String[]> servizi_agg() {
        ArrayList<String[]> out = new ArrayList<>();
        try {
            String sql = "SELECT * FROM sito_servizi_agg WHERE attivo = 'Y'";
            ResultSet rs = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql);
            while (rs.next()) {
                String[] s1 = {rs.getString(1), rs.getString(2), rs.getString(3), rs.getString(4), rs.getString(5), rs.getString(6)};
                out.add(s1);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @return
     */
    public ArrayList<String[]> history_BB() {
        ArrayList<String[]> out = new ArrayList<>();
        try {
            String sql = "SELECT * FROM bb_story";
            ResultSet rs = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql);
            while (rs.next()) {
                String[] s1 = {rs.getString(2), rs.getString(3), rs.getString(4)};
                out.add(s1);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @return
     */
    public ArrayList<String[]> sito_stati() {
        ArrayList<String[]> out = new ArrayList<>();
        try {
            String sql = "SELECT * FROM sito_stato WHERE visible = 'Y' ORDER BY ordine";
            ResultSet rs = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql);
            while (rs.next()) {
                String[] s1 = {rs.getString(1), rs.getString(2), rs.getString(3)};
                out.add(s1);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @param branch
     * @param datad1
     * @param datad2
     * @param posquery
     * @param allenabledbr
     * @return
     */
    public TillTransactionList_value list_newreport_value_pos(ArrayList<String> branch, String datad1,
            String datad2, String posquery, ArrayList<Branch> allenabledbr) {
        
        try {
            
            String sql = "SELECT * FROM ch_transaction tr1, ch_transaction_valori tr2 WHERE tr1.cod= tr2.cod_tr "
                    + "AND tr1.data >= '" + datad1 + " 00:00:00' AND tr1.data <= '" + datad2 + " 23:59:59' AND tr1.del_fg='0' ";
            
            String filwhere = "";
            for (int i = 0; i < branch.size(); i++) {
                filwhere = filwhere + "tr1.filiale = '" + branch.get(i) + "' OR ";
            }
            
            if (filwhere.length() > 3) {
                sql = sql + " AND (" + filwhere.substring(0, filwhere.length() - 3).trim() + ") ";
            }
            
            String posq = " AND ((tr2.pos<>'-' AND tr2.pos<>'N') OR tr1.pos<>'-') ";
            
            if (!posquery.equals("---")) {
                posq = " AND (tr2.pos = '" + posquery + "' OR tr1.pos = '" + posquery + "') ";
            }
            
            sql = sql + posq;
            
            sql = sql + " ORDER BY tr1.filiale,tr1.data";
            ResultSet rs = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql);
            
            ArrayList<Figures> fig = list_all_figures();
            ArrayList<CustomerKind> list_customerKind = list_customerKind();
            ArrayList<TillTransactionList_value> dati = new ArrayList<>();
            List<String> listmodify = list_transaction_modify_ch();
            while (rs.next()) {
                TillTransactionList_value rm = new TillTransactionList_value();
                
                rm.setId_filiale(rs.getString("tr1.filiale"));
                rm.setDe_filiale(formatBankBranchReport(rs.getString("tr1.filiale"), "BR", null, allenabledbr));
                
                rm.setType(formatTilltr(rs.getString("tr1.del_fg"),
                        rs.getString("tr1.bb"),
                        rs.getString("tr1.fa_number"),
                        rs.getString("tr2.supporto"), rs.getString("tr2.bb"),
                        listmodify.contains(rs.getString("tr1.cod")),
                        this,
                        rs.getString("tr1.refund"), rs.getString("tr1.cod"))
                );
                
                rm.setTill(rs.getString("tr1.till"));
                rm.setUser(rs.getString("tr1.user"));
                rm.setNotr(rs.getString("tr1.id"));
                rm.setTime(rs.getString("tr1.data"));
                rm.setCur(rs.getString("tr2.valuta"));
                rm.setKind(formatType(rs.getString("tr1.tipotr")) + " " + Engine.get_figures(fig, rs.getString("tr2.supporto")).getDe_supporto());
                rm.setAmount(rs.getString("tr2.quantita"));
                rm.setRate(rs.getString("tr2.rate"));
                rm.setTotal(rs.getString("tr2.total"));
                rm.setPerc(rs.getString("tr2.com_perc"));
                rm.setComfree(rs.getString("tr2.tot_com"));
                rm.setPayinpayout(rs.getString("tr2.net"));
                rm.setCustomer(query_Client_transactionCN(rs.getString("tr1.cod"), rs.getString("tr1.cl_cod")));
                rm.setSpread(rs.getString("tr2.spread"));
                String lfig = rs.getString("tr1.localfigures");
                if (rs.getString("tr1.localfigures").equals("-")) {
                    lfig = "01";
                }
                rm.setFig(lfig);
                
                if (rs.getString("tr2.supporto").equals("04")) {
                    rm.setPos(rs.getString("tr2.pos"));
                } else {
                    rm.setPos(rs.getString("tr1.pos"));
                }
                
                rm.setRound(rs.getString("tr2.roundvalue").replaceAll("-", ""));
                if (is_CZ) {
                    rm.setRound(rs.getString("tr2.roundvalue"));
                }
                if (Engine.get_customerKind(list_customerKind, rs.getString("tr1.tipocliente")).getFg_nazionalita().equals("1")) {
                    rm.setResidentnonresident("Resident");
                } else {
                    rm.setResidentnonresident("Non Resident");
                }
                rm.setInternetbooking(rs.getString("tr1.intbook"));
                
                dati.add(rm);
                
            }
            
            String sql1 = "SELECT cod,id,filiale,gruppo_nc,causale_nc,valuta,supporto,pos,user,till,data,total,"
                    + "commissione,netto,prezzo,quantita,fg_inout,ricevuta,mtcn,del_fg,del_dt,del_user,del_motiv,"
                    + "fg_tipo_transazione_nc,fg_dogana,ass_idcode,ass_startdate,ass_enddate,cl_cognome,cl_nome,cl_indirizzo,"
                    + "cl_citta,cl_nazione,cl_cap,cl_provincia,cl_email,cl_telefono,note,ti_diritti,ti_ticket_fee,id_open_till,"
                    + "posnum,percentiva,bonus,ch_transaction FROM nc_transaction tr1 WHERE data >= '" + datad1 + " 00:00:00' "
                    + "AND data <= '" + datad2 + " 23:59:59' AND del_fg='0' ";
            
            if (filwhere.length() > 3) {
                sql1 = sql1 + " AND (" + filwhere.substring(0, filwhere.length() - 3).trim() + ") ";
            }
            
            String posqnc = " AND pos<>''";
            
            if (!posquery.equals("---")) {
                posqnc = " AND pos = '" + posquery + "'";
            }
            
            sql1 = sql1 + posqnc + " ORDER BY filiale,data";
            
            ArrayList<NC_category> array_nc_cat = list_nc_category_enabled();
            ArrayList<NC_causal> array_nc_caus = list_nc_causal_enabled();
            String valutalocale = get_local_currency()[0];
            ResultSet rs1 = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql1);
            
            while (rs1.next()) {
                
                String q1 = (roundDoubleandFormat(fd(rs1.getString("quantita")), 0));
                String p1 = rs1.getString("prezzo");
                String f1 = ("0.00");
                String pos = rs1.getString("pos");
                
                switch (rs1.getString("fg_tipo_transazione_nc")) {
                    case "1":
                        q1 = "1";
                        p1 = rs1.getString("netto");
                        f1 = rs1.getString("commissione");
                        break;
                    case "3":
                        q1 = (roundDoubleandFormat(fd(rs1.getString("ricevuta")), 0));
                        p1 = rs1.getString("quantita");
                        break;
                    case "21":
                        if (fd(rs1.getString("commissione")) > 0) {
                            f1 = rs1.getString("commissione");
                        } else {
                            f1 = rs1.getString("ti_ticket_fee");
                        }
                        break;
                    default:
                        break;
                }
                
                TillTransactionList_value rm = new TillTransactionList_value();
                
                rm.setId_filiale(rs1.getString("tr1.filiale"));
                rm.setDe_filiale(rs1.getString("tr1.filiale"));
                rm.setType("NO CH");
                rm.setTill(rs1.getString("tr1.till"));
                rm.setUser(rs1.getString("tr1.user"));
                rm.setNotr(rs1.getString("tr1.id"));
                rm.setTime(rs1.getString("tr1.data"));
                rm.setCur(valutalocale);
                rm.setKind(rs1.getString("tr1.gruppo_nc") + " - " + formatALNC_category(rs1.getString("tr1.gruppo_nc"), array_nc_cat) + " - "
                        + rs1.getString("tr1.causale_nc") + " - " + formatALNC_causal(rs1.getString("tr1.causale_nc"), array_nc_caus)
                );
                rm.setAmount(q1);
                rm.setRate("0.00");
                rm.setTotal(rs1.getString("total"));
                rm.setPerc("");
                rm.setComfree(f1);
                rm.setPayinpayout(p1);
                rm.setCustomer(rs1.getString("tr1.cl_cognome") + " " + rs1.getString("tr1.cl_nome"));
                rm.setSpread("");
                rm.setFig(rs1.getString("tr1.supporto"));
                rm.setPos(pos);
                rm.setRound("");
                rm.setResidentnonresident("");
                rm.setInternetbooking("");
                dati.add(rm);
            }
            if (dati.size() > 0) {
                TillTransactionList_value pdf = new TillTransactionList_value();
                pdf.setDati(dati);
                return pdf;
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return null;
    }

    /**
     *
     * @param filiali
     * @param status
     * @param d1
     * @param d2
     * @return
     */
    public ArrayList<Booking> query_prenot_list_new(String[] filiali, String status, String d1, String d2) {
        
        ArrayList<Booking> out = new ArrayList<>();
        try {
            String sql = "SELECT * FROM sito_prenotazioni WHERE stato = '" + status + "'";
            if (!filiali[0].equals("")) {
                String add;
                if (filiali.length == 1) {
                    add = " AND filiale = '" + filiali[0] + "'";
                } else {
                    add = " AND (";
                    for (String filiali1 : filiali) {
                        add = add + " filiale = '" + filiali1 + "' OR";
                    }
                    add = add.substring(0, add.length() - 2).trim();
                    add = add + ")";
                }
                sql = sql + add;
            }
            
            if (d1 == null || d1.equals("...")) {
                d1 = "";
            }
            if (!d1.equals("")) {
                d1 = d1.trim() + " 00:00:00";
                d1 = formatStringtoStringDate(d1, patternnormdate, patternsqldate);
                sql = sql + " AND dt_ritiro >= '" + d1 + "'";
            }
            if (d2 == null || d2.equals("...")) {
                d2 = "";
            }
            if (!d2.equals("")) {
                d2 = d2.trim() + " 00:00:00";
                d2 = formatStringtoStringDate(d2, patternnormdate, patternsqldate);
                sql = sql + " AND dt_ritiro <= '" + d2 + "'";
            }
            sql = sql + " ORDER BY dt_ritiro";
            ResultSet rs = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql);
            while (rs.next()) {
                Booking bo = new Booking();
                bo.setCod(rs.getString(1));
                bo.setCurrency(rs.getString(2));
                bo.setTotal(roundDoubleandFormat(fd(rs.getString(3)), 2));
                bo.setRate(rs.getString(4));
                bo.setFx_comm(rs.getString(5));
                bo.setFiliale(rs.getString(7));
                bo.setDt_ritiro(rs.getString(8));
                bo.setNote(rs.getString(13));
                bo.setCl_nome(rs.getString(11));
                bo.setCl_cognome(rs.getString(12));
                bo.setStato(rs.getString(18));
                out.add(bo);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
        
    }

    /**
     *
     * @param cod
     * @return
     */
    public Booking get_prenot(String cod) {
        
        ArrayList<String[]> district = district();
        
        try {
            String sql = "SELECT * FROM sito_prenotazioni WHERE cod = '" + cod + "'";
            
            ResultSet rs = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql);
            if (rs.next()) {
                Booking bo = new Booking();
                bo.setCod(rs.getString(1));
                bo.setCurrency(rs.getString(2).toUpperCase());
                bo.setTotal(roundDoubleandFormat(fd(rs.getString(3)), 2));
                bo.setRate(rs.getString(4));
                bo.setFx_comm(roundDoubleandFormat(fd(rs.getString(5)), 2));
                bo.setFiliale(rs.getString(7));
                bo.setDt_ritiro(rs.getString(8));
                bo.setDt(rs.getString(21));
                
                bo.setNote(formatperOAM(rs.getString(9)));
                bo.setCl_nome(formatperOAM(rs.getString(11)));
                bo.setCl_cognome(formatperOAM(rs.getString(12)));
                bo.setCl_email(rs.getString(10));
                bo.setCl_telefono(rs.getString(13));
                bo.setCanale(rs.getString(15));
                
                bo.setStato(rs.getString(18));
                bo.setEuro(roundDoubleandFormat(fd(rs.getString(6)), 2));
                bo.setSconti(rs.getString(16));
                bo.setProdotti(rs.getString(17));
                
                bo.setCod_tr(rs.getString(19));
                bo.setDt_tr(rs.getString(20));
                
                bo.setCrm_note(rs.getString(30));
                bo.setPan(rs.getString(36));
                
                bo.setCl_sesso(rs.getString(24));
                bo.setCl_dtnascita(rs.getString(25));
                bo.setCl_nazione(rs.getString(26));
                bo.setCl_city(formatperOAM(rs.getString(27)).toUpperCase());
                bo.setCl_prov(rs.getString(28));
                bo.setCl_codfisc(rs.getString(29));
                bo.setCl_indirizzo(formatperOAM(rs.getString(31)));
                bo.setCl_indirizzocity(formatperOAM(rs.getString(32)));
                bo.setCl_indirizzoprov(rs.getString(33));
                bo.setCl_indirizzocap(rs.getString(34));
                bo.setCl_indirizzinazione(rs.getString(35));
                //
                bo.setCl_indirizzoprov_D(formatAL(bo.getCl_indirizzoprov(), district, 1));
                bo.setCl_prov_D(formatAL(bo.getCl_prov(), district, 1));
                //
                return bo;
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return null;
    }

    /**
     *
     * @param cod
     * @param quantity
     * @param branch
     * @param branch_or
     * @param status
     * @return
     */
    public boolean edit_prenotazione(String cod, String quantity, String branch, String branch_or, String status) {
        try {
            String edit = "UPDATE sito_prenotazioni SET quantity = ?, filiale = ?, stato = ? WHERE cod = ?";
            PreparedStatement ps = this.c.prepareStatement(edit, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, quantity);
            ps.setString(2, branch);
            ps.setString(3, status);
            ps.setString(4, cod);
            int x = ps.executeUpdate();
            if (x > 0) {
                insertValue_agg(ps, null, branch, null, "service");
                ArrayList<String> listcrm = list_CRV_CRM();
                for (int i = 0; i < listcrm.size(); i++) {
                    if (!listcrm.get(i).equals(filiale)) {
                        insertValue_agg(ps, null, listcrm.get(i), null, "service");
                    }
                }
//                if (!branch_or.equals(branch)) {
//                    insertValue_agg(ps, null, oldpr.getFiliale(), null, "service");
//                }
            }
            return x > 0;
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return false;
    }

    /**
     *
     * @param branch
     * @return
     */
    public String get_mail_branch(String branch) {
        try {
            ResultSet rs = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery("SELECT mail FROM sito_mailfiliali WHERE cod='" + branch + "'");
            if (rs.next()) {
                return rs.getString(1);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return null;
    }

    /**
     *
     * @return
     */
    public ArrayList<String> list_CRV_CRM() {
        ArrayList<String> li = new ArrayList<>();
        try {
            ResultSet rs = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery("SELECT distinct(cod) FROM branch "
                    + "WHERE (fg_crm='1' OR fg_persgiur='1') AND fg_annullato='0' ORDER BY cast(cod AS decimal (10,0))");
            while (rs.next()) {
                li.add(rs.getString(1));
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return li;
    }

    /**
     *
     * @param codice
     * @param agevolazioni
     * @param servizi
     * @return
     */
    public boolean edit_prenotazione_agse(String codice, String agevolazioni, String servizi) {
        try {
            String edit = "UPDATE sito_prenotazioni SET agevolazioni = ?, serviziagg = ? WHERE cod = ?";
            PreparedStatement ps = this.c.prepareStatement(edit, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, agevolazioni);
            ps.setString(2, servizi);
            ps.setString(3, codice);
            int x = ps.executeUpdate();
            if (x > 0) {
                insertValue_agg(ps, null, "000", null, "service");
            }
            return x > 0;
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return false;
    }

    /**
     *
     * @param codice
     * @param codtr
     * @return
     */
    public boolean finalizza_prenotazione(String codice, String codtr) {
        try {
            String edit = "UPDATE sito_prenotazioni SET cod_tr = ?, dt_tr = ? WHERE cod = ?";
            PreparedStatement ps = this.c.prepareStatement(edit, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, codtr);
            ps.setString(2, getNow());
            ps.setString(3, codice);
            int x = ps.executeUpdate();
            insertValue_agg(ps, null, "000", null, "service");
            return x > 0;
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return false;
    }

    /**
     *
     * @param codice
     * @param commission
     * @param total
     * @param quantita
     * @param rate
     * @return
     */
    public boolean edit_prenotazione_final(String codice, String commission, String total, String quantita, String rate) {
        try {
            String edit = "UPDATE sito_prenotazioni SET quantity = ?, rate = ?, comm = ?, euro = ? WHERE cod = ?";
            PreparedStatement ps = this.c.prepareStatement(edit, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, quantita);
            ps.setString(2, rate);
            ps.setString(3, commission);
            ps.setString(4, total);
            ps.setString(5, codice);
            int x = ps.executeUpdate();
            insertValue_agg(ps, null, "000", null, "service");
            return x > 0;
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return false;
    }

    /**
     *
     * @param codice
     * @param statodest
     * @return
     */
    public boolean edit_stato_prenotazione_dafiliale(String codice, String statodest) {
        
        try {
            String edit = "UPDATE sito_prenotazioni SET stato = ? , stato_crm = ? WHERE cod = ?";
            PreparedStatement ps = this.c.prepareStatement(edit, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, statodest);
            ps.setString(2, statodest);
            ps.setString(3, codice);
            int x = ps.executeUpdate();
            if (x > 0) {
                insertValue_agg(ps, null, "000", null, "service");
            }
            return x > 0;
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return false;
    }

    /**
     *
     * @return
     */
    public ArrayList<String[]> list_spread() {
        ArrayList<String[]> out = new ArrayList<>();
        try {
            String sql = "SELECT * FROM sito_spread";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                String[] o1 = {
                    visualizzaStringaMySQL(rs.getString(1)),
                    visualizzaStringaMySQL(rs.getString(2)),
                    visualizzaStringaMySQL(rs.getString(3)),
                    visualizzaStringaMySQL(rs.getString(4)),
                    visualizzaStringaMySQL(rs.getString(5)),
                    visualizzaStringaMySQL(rs.getString(6)),
                    visualizzaStringaMySQL(rs.getString(7)),
                    visualizzaStringaMySQL(rs.getString(8)),
                    visualizzaStringaMySQL(rs.getString(9)),
                    visualizzaStringaMySQL(rs.getString(10)),
                    visualizzaStringaMySQL(rs.getString(11)),
                    visualizzaStringaMySQL(rs.getString(12)),
                    visualizzaStringaMySQL(rs.getString(13)),
                    visualizzaStringaMySQL(rs.getString(14))
                };
                out.add(o1);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @param valori
     * @param dt_val
     * @param datenow
     * @param username
     * @return
     */
    public boolean update_site_spread(String[] valori, String dt_val, String datenow, String username) {
        try {
            
            String upd = "UPDATE sito_spread SET buy_std = ?,buy_l1 = ?,buy_l2 = ?,buy_l3 = ?,buy_best = ?,"
                    + "sell_std = ?,sell_l1 = ?,sell_l2 = ?,sell_l3 = ?,sell_best = ?, codice_uic_divisa = ? WHERE valuta = ?";
            PreparedStatement ps = this.c.prepareStatement(upd, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            
            ps.setString(1, valori[1]);
            ps.setString(2, valori[2]);
            ps.setString(3, valori[3]);
            ps.setString(4, valori[4]);
            ps.setString(5, valori[5]);
            ps.setString(6, valori[6]);
            ps.setString(7, valori[7]);
            ps.setString(8, valori[8]);
            ps.setString(9, valori[9]);
            ps.setString(10, valori[10]);
            ps.setString(11, valori[11]);
            ps.setString(12, valori[0]);
            
            insertValue_agg(ps, null, null, dt_val, username);
            
            return true;
            
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return false;
    }

    /**
     *
     * @param valuta
     * @return
     */
    public String[] get_site_spread(String valuta) {
        try {
            String sql = "SELECT * FROM sito_spread WHERE valuta = ?";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, valuta);
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                String[] o1 = {
                    visualizzaStringaMySQL(rs.getString(1)),
                    visualizzaStringaMySQL(rs.getString(2)),
                    visualizzaStringaMySQL(rs.getString(3)),
                    visualizzaStringaMySQL(rs.getString(4)),
                    visualizzaStringaMySQL(rs.getString(5)),
                    visualizzaStringaMySQL(rs.getString(6)),
                    visualizzaStringaMySQL(rs.getString(7)),
                    visualizzaStringaMySQL(rs.getString(8)),
                    visualizzaStringaMySQL(rs.getString(9)),
                    visualizzaStringaMySQL(rs.getString(10)),
                    visualizzaStringaMySQL(rs.getString(11)),
                    visualizzaStringaMySQL(rs.getString(12)),
                    visualizzaStringaMySQL(rs.getString(13)),
                    visualizzaStringaMySQL(rs.getString(14))
                };
                return o1;
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return null;
    }

    /**
     *
     * @return
     */
    public ArrayList<String[]> list_commissione_fissa() {
        ArrayList<String[]> out = new ArrayList<>();
        try {
//            String sql = "SELECT * FROM sito_commissione_fissa WHERE fg_blocco = ? "
            String sql = "SELECT * FROM sito_commissione_fissa "
                    + "ORDER BY cast(minimo AS decimal (10,0))";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
//            ps.setString(1, "0");
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                String[] o1 = {
                    visualizzaStringaMySQL(rs.getString(1)),
                    visualizzaStringaMySQL(rs.getString(2)),
                    visualizzaStringaMySQL(rs.getString(3)),
                    visualizzaStringaMySQL(rs.getString(4)),
                    visualizzaStringaMySQL(rs.getString(5))
                };
                out.add(o1);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @param min
     * @return
     */
    public String[] get_site_commissione_fissa(String min) {
        try {
            String sql = "SELECT * FROM sito_commissione_fissa WHERE supporto = ? AND minimo = ?";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, "01");
            ps.setString(2, min);
            ResultSet rs = ps.executeQuery();
            if (rs.next()) {
                String[] o1 = {
                    visualizzaStringaMySQL(rs.getString(1)),
                    visualizzaStringaMySQL(rs.getString(2)),
                    visualizzaStringaMySQL(rs.getString(3)),
                    visualizzaStringaMySQL(rs.getString(4)),
                    visualizzaStringaMySQL(rs.getString(5))
                };
                return o1;
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return null;
    }

    /**
     *
     * @param kind
     * @param min
     * @param max
     * @param sell
     * @param status
     * @param min_old
     * @param username
     * @param dtval
     * @param dt
     * @return
     */
    public boolean update_site_commissione_fissa(String kind, String min, String max,
            String sell, String status, String min_old, String username, String dtval, String dt) {
        try {
            String ins = "UPDATE sito_commissione_fissa SET minimo = ?, massimo = ?, commissione_sell = ?, fg_blocco = ? "
                    + "WHERE supporto = ? AND minimo = ?";
            
            PreparedStatement ps = this.c.prepareStatement(ins, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, min);
            ps.setString(2, max);
            ps.setString(3, sell);
            ps.setString(4, status);
            ps.setString(5, kind);
            ps.setString(6, min_old);
            
            insertValue_agg(ps, null, null, dtval, username);
            
            return true;
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return false;
    }

    /**
     *
     * @return
     */
    public ArrayList<String[]> list_supporti() {
        ArrayList<String[]> out = new ArrayList<>();
        try {
            String sql = "SELECT * FROM sito_supporti ORDER BY supporto ";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                String[] o1 = {visualizzaStringaMySQL(rs.getString(1)), visualizzaStringaMySQL(rs.getString(2))};
                out.add(o1);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @param cod
     * @return
     */
    public String[] get_site_supporti(String cod) {
        try {
            String sql = "SELECT * FROM sito_supporti WHERE supporto = ?";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, cod);
            ResultSet rs = ps.executeQuery();
            if (rs.next()) {
                String[] o1 = {visualizzaStringaMySQL(rs.getString(1)), visualizzaStringaMySQL(rs.getString(2))};
                return o1;
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return null;
    }

    /**
     *
     * @param cod
     * @param value
     * @param username
     * @param dtval
     * @param dt
     * @return
     */
    public boolean update_site_supporti(String cod, String value, String username, String dtval, String dt) {
        try {
            String sql = "UPDATE sito_supporti SET commissione_vendita = ? WHERE supporto = ?";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, value);
            ps.setString(2, cod);
            
            insertValue_agg(ps, null, null, dtval, username);
            
            return true;
            
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return false;
    }

    /**
     *
     * @return
     */
    public ArrayList<String[]> list_causali_variazioni() {
        ArrayList<String[]> out = new ArrayList<>();
        try {
            String sql = "SELECT * FROM sito_causali_variazioni ORDER BY codice";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                String[] o1 = {
                    visualizzaStringaMySQL(rs.getString(1)).toUpperCase(),
                    visualizzaStringaMySQL(rs.getString(2)).toUpperCase(),
                    visualizzaStringaMySQL(rs.getString(3)).toUpperCase()
                };
                out.add(o1);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @param codice
     * @return
     */
    public String[] get_causali_variazioni(String codice) {
        try {
            String sql = "SELECT * FROM sito_causali_variazioni WHERE codice = ?";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, codice);
            ResultSet rs = ps.executeQuery();
            if (rs.next()) {
                String[] o1 = {
                    visualizzaStringaMySQL(rs.getString(1)).toUpperCase(),
                    visualizzaStringaMySQL(rs.getString(2)).toUpperCase(),
                    visualizzaStringaMySQL(rs.getString(3)).toUpperCase()
                };
                return o1;
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return null;
    }

    /**
     *
     * @param valori
     * @param username
     * @param dtval
     * @param dt
     * @return
     */
    public boolean update_site_causali_variazioni(String[] valori, String username, String dtval, String dt) {
        try {
            String sql = "UPDATE sito_causali_variazioni SET descrizione = ? , note = ? WHERE codice = ?";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, valori[1]);
            ps.setString(2, valori[2]);
            ps.setString(3, valori[0]);
            insertValue_agg(ps, null, null, dtval, username);
            return true;
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return false;
    }

    /**
     *
     * @param valori
     * @param old_min
     * @param username
     * @param dtval
     * @param dt
     * @return
     */
    public boolean update_site_level_rate(String[] valori, String old_min, String username, String dtval, String dt) {
        try {
            String sql = "UPDATE sito_rate_range SET minimo = ? , massimo = ?, sell_value = ? WHERE supporto = ? AND minimo = ?";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, valori[1]);
            ps.setString(2, valori[2]);
            ps.setString(3, valori[3]);
            ps.setString(4, valori[0]);
            ps.setString(5, old_min);
            insertValue_agg(ps, null, null, dtval, username);
            return true;
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return false;
    }

    /**
     *
     * @return
     */
    public ArrayList<String[]> list_agevolazioni_varie() {
        ArrayList<String[]> out = new ArrayList<>();
        try {
            String sql = "SELECT * FROM sito_agevolazioni_varie WHERE attivo = ? ORDER BY descrizione";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, "Y");
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                String[] o1 = {
                    visualizzaStringaMySQL(rs.getString(1)),
                    visualizzaStringaMySQL(rs.getString(2)),
                    visualizzaStringaMySQL(rs.getString(3)),
                    visualizzaStringaMySQL(rs.getString(4)),
                    visualizzaStringaMySQL(rs.getString(5)),
                    visualizzaStringaMySQL(rs.getString(6)),
                    visualizzaStringaMySQL(rs.getString(7)),
                    visualizzaStringaMySQL(rs.getString(8)),
                    visualizzaStringaMySQL(rs.getString(9)),
                    visualizzaStringaMySQL(rs.getString(10)),
                    visualizzaStringaMySQL(rs.getString(11)),
                    visualizzaStringaMySQL(rs.getString(12)),
                    visualizzaStringaMySQL(rs.getString(13))
                };
                out.add(o1);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @return
     */
    public ArrayList<String[]> list_site_levelrate() {
        ArrayList<String[]> out = new ArrayList<>();
        try {
            String sql = "SELECT * FROM sito_rate_range WHERE attivo = ? ORDER BY supporto,cast(minimo AS decimal (10,0))";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, "Y");
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                String[] o1 = {
                    visualizzaStringaMySQL(rs.getString(1)),
                    visualizzaStringaMySQL(rs.getString(2)),
                    visualizzaStringaMySQL(rs.getString(3)),
                    visualizzaStringaMySQL(rs.getString(4)),
                    visualizzaStringaMySQL(rs.getString(5))
                };
                out.add(o1);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @param minimo
     * @return
     */
    public String[] get_site_levelrate(String minimo) {
        try {
            String sql = "SELECT * FROM sito_rate_range WHERE attivo = ? AND supporto = ? AND minimo = ?";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, "Y");
            ps.setString(2, "01");
            ps.setString(3, minimo);
            ResultSet rs = ps.executeQuery();
            if (rs.next()) {
                String[] o1 = {
                    visualizzaStringaMySQL(rs.getString(1)),
                    visualizzaStringaMySQL(rs.getString(2)),
                    visualizzaStringaMySQL(rs.getString(3)),
                    visualizzaStringaMySQL(rs.getString(4)),
                    visualizzaStringaMySQL(rs.getString(5))
                };
                return o1;
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return null;
    }

    /**
     *
     * @param codice
     * @return
     */
    public String[] get_site_agevolazioni_varie(String codice) {
        try {
            String sql = "SELECT * FROM sito_agevolazioni_varie WHERE codice = ? ORDER BY descrizione";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, codice);
            ResultSet rs = ps.executeQuery();
            if (rs.next()) {
                String[] o1 = {
                    visualizzaStringaMySQL(rs.getString(1)),
                    visualizzaStringaMySQL(rs.getString(2)),
                    visualizzaStringaMySQL(rs.getString(3)),
                    visualizzaStringaMySQL(rs.getString(4)),
                    visualizzaStringaMySQL(rs.getString(5)),
                    visualizzaStringaMySQL(rs.getString(6)),
                    visualizzaStringaMySQL(rs.getString(7)),
                    visualizzaStringaMySQL(rs.getString(8)),
                    visualizzaStringaMySQL(rs.getString(9)),
                    visualizzaStringaMySQL(rs.getString(10)),
                    visualizzaStringaMySQL(rs.getString(11)),
                    visualizzaStringaMySQL(rs.getString(12)),
                    visualizzaStringaMySQL(rs.getString(13))
                };
                return o1;
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return null;
    }

    /**
     *
     * @param value
     * @param username
     * @param dtval
     * @param dt
     * @return
     */
    public boolean update_site_agevolazioni_varie(String[] value, String username, String dtval, String dt) {
        try {
            String sql = "UPDATE sito_agevolazioni_varie SET descrizione = ? , tipologia = ? , perc_value = ? , euro_value = ? , sogliaminima = ? , "
                    + "data_start = ? , data_end = ? , valuta = ? , branch = ? , cumulabile_con = ?, codice = ?, coupon = ? WHERE codice = ?";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, value[1]);
            ps.setString(2, value[2]);
            ps.setString(3, value[3]);
            ps.setString(4, value[4]);
            ps.setString(5, value[5]);
            ps.setString(6, value[6]);
            ps.setString(7, value[7]);
            ps.setString(8, value[8]);
            ps.setString(9, value[9]);
            ps.setString(10, value[10]);
            ps.setString(11, value[0]);
            ps.setString(12, value[12]);
            ps.setString(13, value[11]);
            insertValue_agg(ps, null, null, dtval, username);
            return true;
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return false;
    }

    /**
     *
     * @param value
     * @param username
     * @param dtval
     * @param dt
     * @return
     */
    public boolean update_site_servizi_agg(String[] value, String username, String dtval, String dt) {
        try {
            String sql = "UPDATE sito_servizi_agg SET descrizione = ? , tipologia = ? , perc_value = ? , euro_value = ? , sogliaminima = ? , "
                    + "data_start = ? , data_end = ? , valuta = ? , branch = ? WHERE codice = ?";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, value[1]);
            ps.setString(2, value[2]);
            ps.setString(3, value[3]);
            ps.setString(4, value[4]);
            ps.setString(5, value[5]);
            ps.setString(6, value[6]);
            ps.setString(7, value[7]);
            ps.setString(8, value[8]);
            ps.setString(9, value[9]);
            ps.setString(10, value[0]);
            insertValue_agg(ps, null, null, dtval, username);
            return true;
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return false;
    }

    /**
     *
     * @param value
     * @param username
     * @param dtval
     * @param dt
     * @return
     */
    public boolean insert_site_agevolazioni_varie(String[] value, String username, String dtval, String dt) {
        try {
            String sql = "INSERT INTO sito_agevolazioni_varie VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?)";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, value[0]);
            ps.setString(2, value[1]);
            ps.setString(3, value[2]);
            ps.setString(4, value[3]);
            ps.setString(5, value[4]);
            ps.setString(6, value[5]);
            ps.setString(7, value[6]);
            ps.setString(8, value[7]);
            ps.setString(9, value[8]);
            ps.setString(10, value[9]);
            ps.setString(11, value[10]);
            ps.setString(12, "Y");
            ps.setString(13, value[11]);
            ps.execute();
            insertValue_agg(ps, null, null, dtval, username);
            return true;
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return false;
    }

    /**
     *
     * @param value
     * @param username
     * @param dtval
     * @param dt
     * @return
     */
    public boolean insert_site_servizi_agg(String[] value, String username, String dtval, String dt) {
        try {
            String sql = "INSERT INTO sito_servizi_agg VALUES (?,?,?,?,?,?,?,?,?,?,?)";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, value[0]);
            ps.setString(2, value[1]);
            ps.setString(3, value[2]);
            ps.setString(4, value[3]);
            ps.setString(5, value[4]);
            ps.setString(6, value[5]);
            ps.setString(7, value[6]);
            ps.setString(8, value[7]);
            ps.setString(9, value[8]);
            ps.setString(10, value[9]);
            ps.setString(11, "Y");
            ps.execute();
            insertValue_agg(ps, null, null, dtval, username);
            return true;
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return false;
    }

    /**
     *
     * @return
     */
    public ArrayList<String[]> list_servizi_agg() {
        ArrayList<String[]> out = new ArrayList<>();
        try {
            String sql = "SELECT * FROM sito_servizi_agg WHERE attivo = ? ORDER BY descrizione";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, "Y");
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                String[] o1 = {
                    visualizzaStringaMySQL(rs.getString(1)),
                    visualizzaStringaMySQL(rs.getString(2)),
                    visualizzaStringaMySQL(rs.getString(3)),
                    visualizzaStringaMySQL(rs.getString(4)),
                    visualizzaStringaMySQL(rs.getString(5)),
                    visualizzaStringaMySQL(rs.getString(6)),
                    visualizzaStringaMySQL(rs.getString(7)),
                    visualizzaStringaMySQL(rs.getString(8)),
                    visualizzaStringaMySQL(rs.getString(9)),
                    visualizzaStringaMySQL(rs.getString(10)),
                    visualizzaStringaMySQL(rs.getString(11))
                };
                out.add(o1);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @param codice
     * @return
     */
    public String[] get_site_servizi_agg(String codice) {
        try {
            String sql = "SELECT * FROM sito_servizi_agg WHERE codice = ?";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, codice);
            ResultSet rs = ps.executeQuery();
            if (rs.next()) {
                String[] o1 = {
                    visualizzaStringaMySQL(rs.getString(1)),
                    visualizzaStringaMySQL(rs.getString(2)),
                    visualizzaStringaMySQL(rs.getString(3)),
                    visualizzaStringaMySQL(rs.getString(4)),
                    visualizzaStringaMySQL(rs.getString(5)),
                    visualizzaStringaMySQL(rs.getString(6)),
                    visualizzaStringaMySQL(rs.getString(7)),
                    visualizzaStringaMySQL(rs.getString(8)),
                    visualizzaStringaMySQL(rs.getString(9)),
                    visualizzaStringaMySQL(rs.getString(10)),
                    visualizzaStringaMySQL(rs.getString(11))
                };
                return o1;
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return null;
    }

    /**
     *
     * @param cod_tr
     * @param cod_cl
     * @param loy
     * @param username
     * @return
     */
    public boolean insertLoy_TR(String cod_tr, String cod_cl, String loy, String username) {
        try {
            String insert = "INSERT INTO loyalty_ch (codtr,codcl,loy) VALUES (?,?,?)";
            PreparedStatement ps = this.c.prepareStatement(insert, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, cod_tr);
            ps.setString(2, cod_cl);
            ps.setString(3, loy);
            ps.execute();
            insertValue_agg(ps, null, "000", null, username);
            return true;
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return false;
    }

    /**
     *
     * @param clientcode
     * @return
     */
    public ArrayList<Ch_transaction> query_transaction_ch_CLIENT(String clientcode) {
        ArrayList<Ch_transaction> out = new ArrayList<>();
        try {
            String sel = "SELECT * FROM ch_transaction ch WHERE cl_cod = ? AND del_fg = ? ORDER BY data";
            PreparedStatement ps = this.c.prepareStatement(sel, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, clientcode);
            ps.setString(2, "0");
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                Ch_transaction ch = new Ch_transaction();
                ch.setCod(rs.getString("cod"));
                ch.setId(leftPad(rs.getString("id"), 15, "0"));
                ch.setFiliale(rs.getString("filiale"));
                ch.setTipotr(rs.getString("tipotr"));
                ch.setUser(rs.getString("user"));
                ch.setTill(rs.getString("till"));
                ch.setData(rs.getString("data"));
                ch.setTipocliente(rs.getString("tipocliente"));
                ch.setId_open_till(rs.getString("id_open_till"));
                ch.setPay(rs.getString("pay"));
                ch.setTotal(rs.getString("total"));
                ch.setFix(rs.getString("fix"));
                ch.setCom(rs.getString("com"));
                ch.setRound(rs.getString("round"));
                ch.setCommission(rs.getString("commission"));
                ch.setSpread_total(rs.getString("spread_total"));
                ch.setNote(rs.getString("note"));
                ch.setAgency(rs.getString("agency"));
                ch.setAgency_cod(rs.getString("agency_cod"));
                ch.setLocalfigures(rs.getString("localfigures"));
                ch.setPos(rs.getString("pos"));
                ch.setIntbook(rs.getString("intbook"));
                ch.setIntbook_type(rs.getString("intbook_type"));
                ch.setIntbook_1_tf(rs.getString("intbook_1_tf"));
                ch.setIntbook_1_mod(rs.getString("intbook_1_mod"));
                ch.setIntbook_1_val(rs.getString("intbook_1_val"));
                ch.setIntbook_2_tf(rs.getString("intbook_2_tf"));
                ch.setIntbook_2_mod(rs.getString("intbook_2_mod"));
                ch.setIntbook_2_val(rs.getString("intbook_2_val"));
                ch.setIntbook_3_tf(rs.getString("intbook_3_tf"));
                ch.setIntbook_3_mod(rs.getString("intbook_3_mod"));
                ch.setIntbook_3_val(rs.getString("intbook_3_val"));
                ch.setIntbook_mac(rs.getString("intbook_mac"));
                ch.setIntbook_cli(rs.getString("intbook_cli"));
                ch.setCl_cf(rs.getString("cl_cf"));
                ch.setCl_cod(rs.getString("cl_cod"));
                ch.setDel_fg(rs.getString("del_fg"));
                ch.setDel_dt(rs.getString("del_dt"));
                ch.setDel_user(rs.getString("del_user"));
                ch.setDel_motiv(rs.getString("del_motiv"));
                ch.setBb(rs.getString("bb"));
                ch.setRefund(rs.getString("refund"));
                ch.setFa_number(rs.getString("fa_number"));
                ch.setCn_number(rs.getString("cn_number"));
                ch.setCredccard_number(rs.getString("credccard_number"));
                out.add(ch);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @param codcl
     * @return
     */
    public ArrayList<NC_transaction> query_NC_transaction_codcl(String codcl) {
        ArrayList<NC_transaction> out = new ArrayList<>();
        try {
            String sql = "SELECT cod,id,filiale,gruppo_nc,causale_nc,valuta,supporto,pos,user,till,data,total,commissione,netto,prezzo,"
                    + "quantita,fg_inout,ricevuta,mtcn,del_fg,del_dt,del_user,del_motiv,fg_tipo_transazione_nc,fg_dogana,ass_idcode,"
                    + "ass_startdate,ass_enddate,cl_cognome,cl_nome,cl_indirizzo,cl_citta,cl_nazione,cl_cap,cl_provincia,cl_email,cl_telefono,"
                    + "note,ti_diritti,ti_ticket_fee,id_open_till,posnum,percentiva,bonus,ch_transaction "
                    + "FROM nc_transaction WHERE del_fg = '0' AND cod in (SELECT codtr FROM loyalty_ch WHERE codcl = '" + codcl + "') ORDER BY data";
            
            ResultSet rs = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql);
            
            while (rs.next()) {
                NC_transaction nc = new NC_transaction(
                        rs.getString(1), leftPad(rs.getString(2), 15, "0"),
                        rs.getString(3), rs.getString(4), rs.getString(5), rs.getString(6), rs.getString(7), rs.getString(8),
                        rs.getString(9), rs.getString(10), rs.getString(11), rs.getString(12), rs.getString(13), rs.getString(14),
                        rs.getString(15), rs.getString(16), rs.getString(17), rs.getString(18), rs.getString(19), rs.getString(20),
                        rs.getString(21), rs.getString(22), rs.getString(23), rs.getString(24), rs.getString(25), rs.getString(26),
                        rs.getString(27), rs.getString(28), rs.getString(29), rs.getString(30), rs.getString(31), rs.getString(32),
                        rs.getString(33), rs.getString(34), rs.getString(35), rs.getString(36), rs.getString(37), rs.getString(38),
                        rs.getString(39), rs.getString(40), rs.getString(41), rs.getString(42), rs.getString(43), rs.getString(44),
                        rs.getString(45), ""
                );
                out.add(nc);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @param branch
     * @param datad1
     * @param datad2
     * @param allb
     * @return
     */
    public TillTransactionListBB_value list_SBTransactionList(ArrayList<String> branch, String datad1, String datad2, ArrayList<Branch> allb) {
        String sqlSell_incassati = "SELECT * FROM ch_transaction tr1, ch_transaction_valori tr2 WHERE tr1.del_fg='0' AND tr1.cod=tr2.cod_tr"
                + " AND tr1.tipotr = 'S' AND LENGTH(tr2.bb_fidcode) = '18' ";
        
        try {
            String sql = "SELECT * FROM ch_transaction tr1, ch_transaction_valori tr2 "
                    + " WHERE tr1.del_fg='0' AND tr1.cod=tr2.cod_tr AND tr1.tipotr"
                    + " AND (tr1.bb = '3' OR tr1.bb = '4') ";
            
            String filwhere = "";
            for (int i = 0; i < branch.size(); i++) {
                filwhere = filwhere + "tr1.filiale = '" + branch.get(i) + "' OR ";
            }
            
            if (filwhere.length() > 3) {
                sql = sql + " AND (" + filwhere.substring(0, filwhere.length() - 3).trim() + ") ";
            }
            
            if (datad1 != null) {
                sql = sql + "AND tr1.data >= '" + datad1 + " 00:00:00' ";
            }
            if (datad2 != null) {
                sql = sql + "AND tr1.data <= '" + datad2 + " 23:59:59' ";
            }
            sql = sql + " ORDER BY tr1.tipotr ASC,tr1.data ASC";
            
            ArrayList<String> giàinseriti = new ArrayList<>();
            
            ArrayList<TillTransactionListBB_value> dati = new ArrayList<>();
            ArrayList<CustomerKind> list_customerKind = list_customerKind();
            ArrayList<Figures> fig = list_all_figures();
            
            ResultSet rs = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql);
            ResultSet rsALL = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sqlSell_incassati);
            
            LinkedList<String> fidcode = new LinkedList<>();
            LinkedList<Ch_transaction> codSe = new LinkedList<>();
            while (rsALL.next()) {
                fidcode.add(rsALL.getString("tr2.bb_fidcode"));
                Ch_transaction ch = new Ch_transaction();
                ch.setCod(rsALL.getString("tr1.cod"));
                ch.setId(leftPad(rsALL.getString("tr1.id"), 15, "0"));
                ch.setFiliale(rsALL.getString("tr1.filiale"));
                ch.setTipotr(rsALL.getString("tr1.tipotr"));
                ch.setUser(rsALL.getString("tr1.user"));
                ch.setTill(rsALL.getString("tr1.till"));
                ch.setData(rsALL.getString("tr1.data"));
                ch.setTipocliente(rsALL.getString("tr1.tipocliente"));
                ch.setId_open_till(rsALL.getString("tr1.id_open_till"));
                ch.setPay(rsALL.getString("tr1.pay"));
                ch.setTotal(rsALL.getString("tr1.total"));
                ch.setFix(rsALL.getString("tr1.fix"));
                ch.setCom(rsALL.getString("tr1.com"));
                ch.setRound(rsALL.getString("tr1.round"));
                ch.setCommission(rsALL.getString("tr1.commission"));
                ch.setSpread_total(rsALL.getString("tr1.spread_total"));
                ch.setNote(rsALL.getString("tr1.note"));
                ch.setAgency(rsALL.getString("tr1.agency"));
                ch.setAgency_cod(rsALL.getString("tr1.agency_cod"));
                ch.setLocalfigures(rsALL.getString("tr1.localfigures"));
                ch.setPos(rsALL.getString("tr1.pos"));
                ch.setIntbook(rsALL.getString("tr1.intbook"));
                ch.setIntbook_type(rsALL.getString("tr1.intbook_type"));
                ch.setIntbook_1_tf(rsALL.getString("tr1.intbook_1_tf"));
                ch.setIntbook_1_mod(rsALL.getString("tr1.intbook_1_mod"));
                ch.setIntbook_1_val(rsALL.getString("tr1.intbook_1_val"));
                ch.setIntbook_2_tf(rsALL.getString("tr1.intbook_2_tf"));
                ch.setIntbook_2_mod(rsALL.getString("tr1.intbook_2_mod"));
                ch.setIntbook_2_val(rsALL.getString("tr1.intbook_2_val"));
                ch.setIntbook_3_tf(rsALL.getString("tr1.intbook_3_tf"));
                ch.setIntbook_3_mod(rsALL.getString("tr1.intbook_3_mod"));
                ch.setIntbook_3_val(rsALL.getString("tr1.intbook_3_val"));
                ch.setIntbook_mac(rsALL.getString("tr1.intbook_mac"));
                ch.setIntbook_cli(rsALL.getString("tr1.intbook_cli"));
                ch.setCl_cf(rsALL.getString("tr1.cl_cf"));
                ch.setCl_cod(rsALL.getString("tr1.cl_cod"));
                ch.setDel_fg(rsALL.getString("tr1.del_fg"));
                ch.setDel_dt(rsALL.getString("tr1.del_dt"));
                ch.setDel_user(rsALL.getString("tr1.del_user"));
                ch.setDel_motiv(rsALL.getString("tr1.del_motiv"));
                ch.setRefund(rsALL.getString("tr1.refund"));
                ch.setFa_number(rsALL.getString("tr1.fa_number"));
                ch.setCn_number(rsALL.getString("tr1.cn_number"));
                codSe.add(ch);
            }
            
            while (rs.next()) {
                String cod = rs.getString("tr1.cod");
                if (giàinseriti.contains(cod)) {
                    continue;
                }
                giàinseriti.add(cod);
                Ch_transaction codsell = null;
                boolean havesell = false;
                if (fidcode.contains(rs.getString("tr1.filiale") + rs.getString("tr1.id"))) {
                    codsell = codSe.get(fidcode.indexOf(rs.getString("tr1.filiale") + rs.getString("tr1.id")));
                    havesell = true;
                }
                //LISTA SELL
                ArrayList<Ch_transaction_value> list_value = query_transaction_value(rs.getString("tr1.cod"));
                for (int x = 0; x < list_value.size(); x++) {
                    Ch_transaction_value v1 = list_value.get(x);
                    if (v1.getBb().equals("Y") || v1.getBb().equals("F")) {
                        TillTransactionListBB_value rm = new TillTransactionListBB_value();
                        rm.setId_filiale(rs.getString("tr1.filiale"));
                        rm.setDe_filiale(formatBankBranchReport(rs.getString("tr1.filiale"), "BR", null, allb));
                        if (havesell) {
                            rm.setType("OK");
                        } else {
                            rm.setType("  ");
                        }
                        rm.setTill(rs.getString("tr1.till"));
                        rm.setUser(rs.getString("tr1.user"));
                        rm.setNotr(rs.getString("tr1.id"));
                        rm.setTime(rs.getString("tr1.data"));
                        rm.setCur(v1.getValuta());
                        rm.setKind(formatType(rs.getString("tr1.tipotr")) + " " + Engine.get_figures(fig, v1.getSupporto()).getDe_supporto());
                        rm.setAmount(v1.getQuantita());
                        rm.setRate(v1.getRate());
                        rm.setTotal(v1.getTotal());
                        rm.setPerc(v1.getCom_perc());
                        rm.setComfree(v1.getFx_com());
                        rm.setPayinpayout(v1.getNet());
                        rm.setCustomer(query_Client_transactionCN(rs.getString("tr1.cod"), rs.getString("tr1.cl_cod")));
                        rm.setSpread(v1.getSpread());
                        rm.setRound(rs.getString("tr2.roundvalue").replaceAll("-", ""));
                        if (rs.getString("tr2.supporto").equals("04")) {
                            rm.setPos(rs.getString("tr2.pos"));
                        } else {
                            rm.setPos(rs.getString("tr1.pos"));
                        }
                        rm.setInternetbooking(rs.getString("tr1.intbook"));
                        if (Engine.get_customerKind(list_customerKind, rs.getString("tr1.tipocliente")).getFg_nazionalita().equals("1")) {
                            rm.setResidentnonresident("Resident");
                        } else {
                            rm.setResidentnonresident("Non Resident");
                        }
                        String lfig = rs.getString("tr1.localfigures");
                        if (rs.getString("tr1.localfigures").equals("-")) {
                            lfig = "01";
                        }
                        rm.setFig(lfig);
                        dati.add(rm);
                    }
                }
                
                if (havesell) {
                    
                    if (codsell != null) {
                        ArrayList<Ch_transaction_value> sell_value = query_transaction_value(codsell.getCod());
                        for (int y = 0; y < sell_value.size(); y++) {
                            giàinseriti.add(codsell.getCod());
                            TillTransactionListBB_value rm = new TillTransactionListBB_value();
                            rm.setId_filiale(codsell.getFiliale());
                            rm.setDe_filiale(formatBankBranchReport(codsell.getFiliale(), "BR", null, allb));
                            rm.setType(" ");
                            rm.setTill(codsell.getTill());
                            rm.setUser(codsell.getUser());
                            rm.setNotr(codsell.getId());
                            rm.setTime(codsell.getData());
                            rm.setCur(sell_value.get(y).getValuta());
                            rm.setKind(formatType(codsell.getTipotr()) + " " + Engine.get_figures(fig, sell_value.get(y).getSupporto()).getDe_supporto());
                            rm.setAmount(sell_value.get(y).getQuantita());
                            rm.setRate(sell_value.get(y).getRate());
                            rm.setTotal(sell_value.get(y).getTotal());
                            rm.setPerc(sell_value.get(y).getCom_perc());
                            rm.setComfree(sell_value.get(y).getTot_com());
                            rm.setPayinpayout(sell_value.get(y).getNet());
                            rm.setCustomer(" ");
                            rm.setSpread(sell_value.get(y).getSpread());
                            rm.setRound(sell_value.get(y).getRoundvalue().replaceAll("-", ""));
                            if (sell_value.get(y).getSupporto().equals("04")) {
                                rm.setPos(sell_value.get(y).getPos());
                            } else {
                                rm.setPos(codsell.getPos());
                            }
                            rm.setInternetbooking(codsell.getIntbook());
                            if (Engine.get_customerKind(list_customerKind, codsell.getTipocliente()).getFg_nazionalita().equals("1")) {
                                rm.setResidentnonresident("Resident");
                            } else {
                                rm.setResidentnonresident("Non Resident");
                            }
                            String lfig = rs.getString("tr1.localfigures");
                            if (rs.getString("tr1.localfigures").equals("-")) {
                                lfig = "01";
                            }
                            rm.setFig(lfig);
                            dati.add(rm);
                        }
                    }
                }
                
                TillTransactionListBB_value rm = new TillTransactionListBB_value();
                rm.setId_filiale("");
                rm.setDe_filiale("");
                rm.setType("");
                rm.setTill("");
                rm.setUser("");
                rm.setNotr("");
                rm.setTime("");
                rm.setCur("");
                rm.setKind("");
                rm.setAmount("");
                rm.setRate("");
                rm.setTotal("");
                rm.setPerc("");
                rm.setComfree("");
                rm.setPayinpayout("");
                rm.setCustomer("");
                rm.setSpread("");
                rm.setRound("");
                rm.setPos("");
                rm.setInternetbooking("");
                rm.setResidentnonresident("");
                rm.setFig("");
                dati.add(rm);
                
            }
            
            if (dati.size() > 0) {
                TillTransactionListBB_value pdf = new TillTransactionListBB_value();
                pdf.setId_filiale(branch.get(0));
                pdf.setDe_filiale(formatBankBranchReport(branch.get(0), "BR", null, Engine.list_branch_enabled()));
                pdf.setDati(dati);
                double setTransvalueresidentbuy = 0.0;
                double setTransvaluenonresidentbuy = 0.0;
                double setTransvalueresidentsell = 0.0;
                double setTransvaluenonresidentsell = 0.0;
                double setCommisionvaluetresidentbuy = 0.0;
                double setCommisionvaluenonresidentbuy = 0.0;
                double setCommisionvaluetresidentsell = 0.0;
                double setCommisionvaluenonresidentsell = 0.0;
                int setTransactionnumberresidentbuy = 0;
                int setTransactionnumbernonresidentbuy = 0;
                int setTransactionnumberresidentsell = 0;
                int setTransactionnumbernonresidentsell = 0;
                double setInternetbookingamountyes = 0.0;
                int setInternetbookingnumberyes = 0;
                double setInternetbookingamountno = 0.0;
                int setInternetbookingnumberno = 0;
                double setPosbuyamount = 0.0;
                int setPosbuynumber = 0;
                double setPossellamount = 0.0;
                int setPossellnumber = 0;
                double setBanksellamount = 0.0;
                int setBanksellnumber = 0;
                for (int i = 0; i < dati.size(); i++) {
                    TillTransactionListBB_value rm = dati.get(i);
                    if (rm.getResidentnonresident().equals("Resident") && rm.getKind().toUpperCase().startsWith("BUY")) {
                        setTransvalueresidentbuy = setTransvalueresidentbuy + fd(rm.getTotal());
                        setCommisionvaluetresidentbuy = setCommisionvaluetresidentbuy + fd(rm.getComfree());
                        setTransactionnumberresidentbuy++;
                    }
                    if (rm.getResidentnonresident().equals("Non Resident") && rm.getKind().toUpperCase().startsWith("BUY")) {
                        setTransvaluenonresidentbuy = setTransvaluenonresidentbuy + fd(rm.getTotal());
                        setCommisionvaluenonresidentbuy = setCommisionvaluenonresidentbuy + fd(rm.getComfree());
                        setTransactionnumbernonresidentbuy++;
                    }
                    
                    if (rm.getResidentnonresident().equals("Resident") && rm.getKind().toUpperCase().startsWith("SELL")) {
                        setTransvalueresidentsell = setTransvalueresidentsell + fd(rm.getAmount());
                        setCommisionvaluetresidentsell = setCommisionvaluetresidentsell + fd(rm.getComfree());
                        setTransactionnumberresidentsell++;
                    }
                    if (rm.getResidentnonresident().equals("Non Resident") && rm.getKind().toUpperCase().startsWith("SELL")) {
                        setTransvaluenonresidentsell = setTransvaluenonresidentsell + fd(rm.getAmount());
                        setCommisionvaluenonresidentsell = setCommisionvaluenonresidentsell + fd(rm.getComfree());
                        setTransactionnumbernonresidentsell++;
                    }
                    boolean ca = false;
                    if (rm.getKind().toUpperCase().startsWith("SELL") && !rm.getType().contains("D")) {
                        if (!rm.getInternetbooking().equals("0")) {
                            setInternetbookingamountyes = setInternetbookingamountyes + fd(rm.getPayinpayout());
                            setInternetbookingnumberyes++;
                        } else {
                            setInternetbookingamountno = setInternetbookingamountno + fd(rm.getPayinpayout());
                            setInternetbookingnumberno++;
                        }
                    } else if (rm.getKind().toUpperCase().contains("CASH ADVANCE") && !rm.getType().contains("D")) {
                        setPosbuyamount = setPosbuyamount + fd(rm.getAmount());
                        setPosbuynumber++;
                        ca = true;
                    }
                    if (!rm.getPos().equals("-") && !rm.getType().contains("D")) {
                        if (rm.getKind().toUpperCase().startsWith("SELL")) {
                            if (rm.getFig().equals("06") || rm.getFig().equals("07")) {
                                setPossellamount = setPossellamount + fd(rm.getPayinpayout());
                                setPossellnumber++;
                            } else {
                                setBanksellamount = setBanksellamount + fd(rm.getPayinpayout());
                                setBanksellnumber++;
                            }
                        } else {
                            if (!ca) {
                                setPosbuyamount = setPosbuyamount + fd(rm.getTotal());
                                setPosbuynumber++;
                            }
                        }
                    }
                }
                pdf.setTransvalueresidentbuy(roundDoubleandFormat(setTransvalueresidentbuy, 2));
                pdf.setTransvaluenonresidentbuy(roundDoubleandFormat(setTransvaluenonresidentbuy, 2));
                pdf.setTransvalueresidentsell(roundDoubleandFormat(setTransvalueresidentsell, 2));
                pdf.setTransvaluenonresidentsell(roundDoubleandFormat(setTransvaluenonresidentsell, 2));
                pdf.setCommisionvaluetresidentbuy(roundDoubleandFormat(setCommisionvaluetresidentbuy, 2));
                pdf.setCommisionvaluenonresidentbuy(roundDoubleandFormat(setCommisionvaluenonresidentbuy, 2));
                pdf.setCommisionvaluetresidentsell(roundDoubleandFormat(setCommisionvaluetresidentsell, 2));
                pdf.setCommisionvaluenonresidentsell(roundDoubleandFormat(setCommisionvaluenonresidentsell, 2));
                pdf.setTransactionnumberresidentbuy(roundDoubleandFormat(setTransactionnumberresidentbuy, 0));
                pdf.setTransactionnumbernonresidentbuy(roundDoubleandFormat(setTransactionnumbernonresidentbuy, 0) + "");
                pdf.setTransactionnumberresidentsell(roundDoubleandFormat(setTransactionnumberresidentsell, 0) + "");
                pdf.setTransactionnumbernonresidentsell(roundDoubleandFormat(setTransactionnumbernonresidentsell, 0) + "");
                pdf.setInternetbookingamountyes(roundDoubleandFormat(setInternetbookingamountyes, 2));
                pdf.setInternetbookingnumberyes(roundDoubleandFormat(setInternetbookingnumberyes, 0));
                pdf.setInternetbookingamountno(roundDoubleandFormat(setInternetbookingamountno, 2) + "");
                pdf.setInternetbookingnumberno(roundDoubleandFormat(setInternetbookingnumberno, 0) + "");
                pdf.setPosbuyamount(roundDoubleandFormat(setPosbuyamount, 2));
                pdf.setPosbuynumber(roundDoubleandFormat(setPosbuynumber, 0) + "");
                pdf.setPossellamount(roundDoubleandFormat(setPossellamount, 2));
                pdf.setPossellnumber(roundDoubleandFormat(setPossellnumber, 0) + "");
                pdf.setBankbuyamount("0.00");
                pdf.setBankbuynumber("0");
                pdf.setBanksellamount(roundDoubleandFormat(setBanksellamount, 2));
                pdf.setBanksellnumber(roundDoubleandFormat(setBanksellnumber, 0) + "");
                return pdf;
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return null;
    }

    /**
     *
     * @param cod
     * @return
     */
    public Ch_transaction query_transaction_ch_reportNC(String cod) {
        try {
            String sql = "SELECT pay,total,fix,com,round,commission,spread_total FROM ch_transaction WHERE cod = ? ";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, cod);
            ResultSet rs = ps.executeQuery();
            if (rs.next()) {
                Ch_transaction ch = new Ch_transaction();
                ch.setPay(rs.getString("pay"));
                ch.setTotal(rs.getString("total"));
                ch.setFix(rs.getString("fix"));
                ch.setCom(rs.getString("com"));
                ch.setRound(rs.getString("round"));
                ch.setCommission(rs.getString("commission"));
                ch.setSpread_total(rs.getString("spread_total"));
                return ch;
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return null;
    }

    /**
     *
     * @return
     */
    public ArrayList<String> causal_paymat_enabled() {
        ArrayList<String> out = new ArrayList<>();
        try {
            String sql = "select distinct(causal) from temppaymat where stato='1'";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                out.add(rs.getString(1));
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @param list
     * @return
     */
    public ArrayList<String[]> rate_currency_best_SB(ArrayList<Currency> list) {
        ArrayList<String[]> out = new ArrayList<>();
        
        for (int i = 0; i < list.size(); i++) {
            Currency cu = list.get(i);
            String cur = cu.getCode();
            String uic = cu.getUic();
            double d_rifbce = fd(cu.getCambio_bce());
            double d_best = fd(cu.getSell_best());
            double tot_best = d_rifbce * (100.0D + d_best) / 100.0D;
            String[] out5 = {roundDoubleandFormat(tot_best, 8), "Best: " + formatMysqltoDisplay(roundDoubleandFormat(tot_best, 8)), cur, uic};
            out.add(out5);
        }
        
        return out;
    }

    /**
     *
     * @param filiale
     * @param gruppo_nc
     * @param causale_nc
     * @return
     */
    public ArrayList<String[]> nc_causal_payment_support(String filiale, String gruppo_nc, String causale_nc) {
        ArrayList<String[]> li = new ArrayList<>();
        try {
            String sql = "SELECT supporto,de_supporto FROM supporti WHERE supporto IN (SELECT supporto FROM nc_causali_pay WHERE filiale = ? AND gruppo_nc = ? "
                    + "AND causale_nc = ? AND fg_annullato = ? order by cast(supporto AS decimal (10,0)))";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, filiale);
            ps.setString(2, gruppo_nc);
            ps.setString(3, causale_nc);
            ps.setString(4, "0");
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                String[] ou = {rs.getString(1), rs.getString(2)};
                li.add(ou);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return li;
    }

    /**
     *
     * @param table
     * @return
     */
    public ArrayList<String[]> list_codici_ATL(String table) {
        ArrayList<String[]> out = new ArrayList<>();
        try {
            String sql = "SELECT * FROM " + table;
            ResultSet rs = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql);
            while (rs.next()) {
                String[] o1 = {rs.getString(1), rs.getString(2)};
                out.add(o1);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @param cod
     * @param table
     * @return
     */
    public String get_codice_ATL(String cod, String table) {
        try {
            String sql = "SELECT cod_atl FROM " + table + " WHERE cod_mac = '" + cod + "'";
            ResultSet rs = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql);
            if (rs.next()) {
                return rs.getString(1);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return "";
    }

    /**
     *
     * @return
     */
    public ArrayList<String[]> get_list_codice_ATL() {
        ArrayList<String[]> out1 = new ArrayList<>();
        try {
            String sql = "SELECT cod_mac,cod_atl FROM user_atl";
            ResultSet rs = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql);
            while (rs.next()) {
                String[] v = {rs.getString(1), rs.getString(2)};
                out1.add(v);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out1;
    }

    /**
     *
     * @param cod_user
     * @param cod_atl
     * @param table
     * @return
     */
    public boolean mod_codice_ATL(String cod_user, String cod_atl, String table) {
        try {
            String sql = "SELECT cod_atl FROM " + table + " WHERE cod_mac = ?";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, cod_user);
            ResultSet rs = ps.executeQuery();
            if (rs.next()) {
                String upd = "UPDATE " + table + " SET cod_atl = ? WHERE cod_mac = ?";
                PreparedStatement ps1 = this.c.prepareStatement(upd, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
                ps1.setString(1, cod_atl);
                ps1.setString(2, cod_user);
                return ps1.executeUpdate() > 0;
            } else {
                String ins = "INSERT INTO " + table + " VALUES (?,?)";
                PreparedStatement ps1 = this.c.prepareStatement(ins, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
                ps1.setString(1, cod_atl);
                ps1.setString(2, cod_user);
                ps1.execute();
                return true;
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return false;
    }

    /**
     *
     * @param loya
     * @param username
     * @return
     */
    public boolean libera_loyalty_FIRST(String loya, String username) {
        try {
            String sql = "DELETE FROM loyalty_ch WHERE loy = ?";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, loya);
            ps.execute();
            
            insertValue_agg(ps, null, "000", null, username);
            
            return true;
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return false;
    }

    /**
     *
     * @param code
     * @param desc
     * @param username
     * @return
     */
    public boolean update_department(String code, String desc, String username) {
        try {
            String sql = "UPDATE department SET descrizione = ? WHERE codice = ?";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, desc);
            ps.setString(2, code);
            boolean es = ps.executeUpdate() > 0;
            if (es) {
                insertValue_agg_NOCENTRAL(ps, null, null, null, username);
            }
            return es;
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return false;
    }

    /**
     *
     * @param code
     * @param nochange
     * @param username
     * @return
     */
    public boolean inser_department_NC(String code, String nochange, String username) {
        try {
            String sql = "INSERT INTO department_nc VALUES (?,?)";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, code);
            ps.setString(2, nochange);
            boolean es = ps.execute();
            insertValue_agg_NOCENTRAL(ps, null, null, null, username);
            return true;
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return false;
    }

    /**
     *
     * @param nochange
     * @param username
     * @return
     */
    public boolean delete_department_NC(String nochange, String username) {
        try {
            String sql = "DELETE FROM department_nc WHERE gruppo_nc = ?";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, nochange);
            boolean es = ps.executeUpdate() > 0;
            if (es) {
                insertValue_agg_NOCENTRAL(ps, null, null, null, username);
            }
            return es;
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return false;
    }

    /**
     *
     * @param nochange
     * @return
     */
    public String get_department_NC(String nochange) {
        try {
            String sql = "SELECT codice FROM department_nc WHERE gruppo_nc = ?";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, nochange);
            ResultSet rs = ps.executeQuery();
            if (rs.next()) {
                return rs.getString(1);
            }
        } catch (SQLException ex) {
//            insertTR("E", "System", Thread.currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return "01";
    }

    /**
     *
     * @param till
     * @return
     */
    public String getCodLastOpenclose(String till) {
        try {
            String sql = "SELECT cod FROM oc_lista WHERE till = '" + till + "' and fg_tipo='O' order by data DESC LIMIT 1";
            ResultSet rs = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql);
            if (rs.next()) {
                return rs.getString(1);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return null;
    }

    /**
     *
     * @param cod_cl
     * @return
     */
    public ArrayList<Ch_transaction_value> query_transaction_value_1558(String cod_cl) {
        ArrayList<Ch_transaction_value> li = new ArrayList<>();
        try {
            String sql = "SELECT c2.*,c1.filiale,c1.tipotr,c1.user,c1.note FROM ch_transaction c1, ch_transaction_valori c2 WHERE c1.del_fg='0' "
                    + "AND c1.cl_cod = ? AND c1.cod = c2.cod_tr ORDER BY c1.cod,c2.numeroriga";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, cod_cl);
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                Ch_transaction_value chv = new Ch_transaction_value();
                chv.setId(rs.getString(1));
                chv.setCod_tr(rs.getString(2));
                chv.setNumeroriga(rs.getString(3));
                chv.setSupporto(rs.getString(4));
                chv.setPos(rs.getString(5));
                chv.setValuta(rs.getString(6));
                chv.setQuantita(rs.getString(7));
                chv.setRate(rs.getString(8));
                chv.setCom_perc(rs.getString(9));
                chv.setCom_perc_tot(rs.getString(10));
                chv.setFx_com(rs.getString(11));
                chv.setTot_com(rs.getString(12));
                chv.setNet(rs.getString(13));
                chv.setSpread(rs.getString(14));
                chv.setTotal(rs.getString(15));
                chv.setKind_fix_comm(rs.getString(16));
                chv.setLow_com_ju(rs.getString(17));
                chv.setBb(rs.getString(18));
                chv.setBb_fidcode(rs.getString(19));
                chv.setDt_tr(rs.getString(20));
                chv.setContr_valuta(rs.getString(21));
                chv.setContr_supporto(rs.getString(22));
                chv.setContr_quantita(rs.getString(23));
                chv.setDel_fg(rs.getString(24));
                chv.setDel_dt(rs.getString(25));
                chv.setPosnum(rs.getString(26));
                chv.setRoundvalue(rs.getString(27));
                
                chv.setBranch(rs.getString("c1.filiale"));
                chv.setType(rs.getString("c1.tipotr"));
                chv.setOperator(rs.getString("c1.user"));
                chv.setNote(rs.getString("c1.note"));
                
                li.add(chv);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return li;
    }

    /**
     *
     * @param transaction_cod
     * @return
     */
    public boolean isNotesBig(String transaction_cod) {
        try {
            String sql = "SELECT id FROM ch_transaction_file WHERE cod_tr = ? AND directory = ?";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, transaction_cod);
            ps.setString(2, "NOTESBIG");
            return ps.executeQuery().next();
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return false;
    }

    /**
     *
     * @param transaction_cod
     * @return
     */
    public boolean is_selectAll_OC(String transaction_cod) {
        try {
            String sql = "SELECT id FROM ch_transaction_file WHERE cod_tr = ? AND directory = ?";
            PreparedStatement ps0 = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps0.setString(1, transaction_cod);
            ps0.setString(2, "SELECTALL");
            return ps0.executeQuery().next();
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return false;
    }

    /**
     *
     * @param transaction_cod
     * @return
     */
    public String getMotivation(String transaction_cod) {
        try {
            String sql = "SELECT directory FROM ch_transaction_file WHERE cod_tr = ? AND directory NOT LIKE ? AND directory <> ?  AND directory <> ? ORDER BY data DESC LIMIT 1";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, transaction_cod);
            ps.setString(2, "MODPAY%");
            ps.setString(3, "SELECTALL");
            ps.setString(4, "MARKETING");
            ResultSet rs = ps.executeQuery();
            if (rs.next()) {
                String complete = rs.getString(1);
                LinkedList<String> ll = newLinkedList(on(";").split(complete));
                int index = ll.indexOf("true");
                return format_Type_KYC(index);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return "-";
    }

    /**
     *
     * @param token
     * @return
     */
    public String[] get_value_ADDRESS(String token) {
        try {
            String sql = "SELECT filename,size,user FROM ch_transaction_file WHERE cod_tr = ? AND directory = ? ORDER BY data DESC LIMIT 1";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, "ADDRESS");
            ps.setString(2, token);
            ResultSet rs = ps.executeQuery();
            if (rs.next()) {
                String[] out = {rs.getString(1), rs.getString(2), rs.getString(3)};
                return out;
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return null;
    }

    /**
     *
     * @param token
     * @param address
     * @param numero
     * @param mail
     * @return
     */
    public boolean insert_value_ADDRESS(String token, String address, String numero, String mail) {
        try {
            String ins = "INSERT INTO ch_transaction_file (cod_tr,directory,filename,size,user) VALUES (?,?,?,?,?)";
            PreparedStatement ps = this.c.prepareStatement(ins, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, "ADDRESS");
            ps.setString(2, token);
            ps.setString(3, address);
            ps.setString(4, numero);
            ps.setString(5, mail);
            ps.execute();
            return true;
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return false;
    }

    /**
     *
     * @param transaction_cod
     * @param username
     * @return
     */
    public boolean insert_valueNotesBig(String transaction_cod, String username) {
        try {
            String ins = "INSERT INTO ch_transaction_file (cod_tr,directory,data) VALUES (?,?,?)";
            PreparedStatement ps = this.c.prepareStatement(ins, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, transaction_cod);
            ps.setString(2, "NOTESBIG");
            ps.setString(3, getNow());
            ps.execute();
            return true;
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return false;
    }

    /**
     *
     * @param clientcode
     * @return
     */
    public boolean is_marketing_OK(String clientcode) {
        try {
            String sql = "SELECT id FROM ch_transaction_file WHERE filename = ? AND directory = ? LIMIT 1";
            PreparedStatement ps0 = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps0.setString(1, clientcode);
            ps0.setString(2, "MARKETING");
            if (ps0.executeQuery().next()) {
                return true;
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return false;
    }

    /**
     *
     * @param transaction_cod
     * @param clientcode
     * @param username
     * @return
     */
    public boolean insert_marketing_OK(String transaction_cod, String clientcode, String username) {
        try {
            String sql = "SELECT id FROM ch_transaction_file WHERE cod_tr = ? AND directory = ?";
            PreparedStatement ps0 = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps0.setString(1, transaction_cod);
            ps0.setString(2, "MARKETING");
            if (ps0.executeQuery().next()) {
                return true;
            }
            
            String ins = "INSERT INTO ch_transaction_file (cod_tr,directory,filename) VALUES (?,?,?)";
            PreparedStatement ps = this.c.prepareStatement(ins, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, transaction_cod);
            ps.setString(2, "MARKETING");
            ps.setString(3, clientcode);
            ps.execute();
            insertValue_agg(ps, null, "000", null, username);
            return true;
        } catch (Exception ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return false;
    }
    
    public void delete_marketing(String transaction_cod, String username) {
        try {
            String del = "DELETE FROM ch_transaction_file WHERE cod_tr = ? AND directory = ?";
            PreparedStatement ps = this.c.prepareStatement(del, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, transaction_cod);
            ps.setString(2, "MARKETING");
            ps.execute();
            insertValue_agg(ps, null, "000", null, username);
        } catch (Exception ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
    }

    /**
     *
     * @param transaction_cod
     * @param username
     * @param d1
     * @return
     */
    public boolean insert_valuekyc_Module(String transaction_cod, String username, String d1) {
        try {
            
            String sql = "SELECT id FROM ch_transaction_file WHERE cod_tr = ? AND directory = ?";
            PreparedStatement ps0 = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps0.setString(1, transaction_cod);
            ps0.setString(2, d1);
            if (ps0.executeQuery().next()) {
                return true;
            }
            
            String ins = "INSERT INTO ch_transaction_file (cod_tr,directory,data) VALUES (?,?,?)";
            PreparedStatement ps = this.c.prepareStatement(ins, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, transaction_cod);
            ps.setString(2, d1);
            ps.setString(3, getNow());
            ps.execute();
            insertValue_agg(ps, null, "000", null, username);
            return true;
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return false;
    }

    /**
     *
     * @param cod_tr
     * @param supporto
     * @param pos
     * @param numerocarta
     * @param username
     * @return
     */
    public boolean update_modpay_NC(String cod_tr, String supporto, String pos, String numerocarta, String username) {
        try {
            String update = "UPDATE nc_transaction SET supporto = ?, pos = ?, posnum = ? WHERE cod = ?";
            PreparedStatement ps0 = this.c.prepareStatement(update, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps0.setString(1, supporto);
            ps0.setString(2, pos);
            ps0.setString(3, numerocarta);
            ps0.setString(4, cod_tr);
            ps0.execute();
            insertValue_agg(ps0, null, "000", null, username);
            return true;
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return false;
    }

    /**
     *
     * @param cod_tr
     * @param localfigures
     * @param pos
     * @param numerocarta
     * @param username
     * @return
     */
    public boolean update_modpay_CH_S(String cod_tr, String localfigures, String pos, String numerocarta, String username) {
        try {
            String update = "UPDATE ch_transaction SET localfigures = ?, pos = ?, credccard_number = ? WHERE cod = ?";
            PreparedStatement ps0 = this.c.prepareStatement(update, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps0.setString(1, localfigures);
            ps0.setString(2, pos);
            ps0.setString(3, numerocarta);
            ps0.setString(4, cod_tr);
            ps0.execute();
            insertValue_agg(ps0, null, "000", null, username);
            return true;
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return false;
    }

    /**
     *
     * @param cod_tr
     * @param pos
     * @param numeroriga
     * @param numerocarta
     * @param username
     * @return
     */
    public boolean update_modpay_CH_B(String cod_tr, String pos, String numeroriga, String numerocarta, String username) {
        try {
            String update = "UPDATE ch_transaction_valori SET pos = ?, pos_num = ? WHERE cod_tr = ? AND numeroriga = ?";
            PreparedStatement ps0 = this.c.prepareStatement(update, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps0.setString(1, pos);
            ps0.setString(2, numerocarta);
            ps0.setString(3, cod_tr);
            ps0.setString(4, numeroriga);
            ps0.execute();
            insertValue_agg(ps0, null, "000", null, username);
            return true;
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return false;
    }

    /**
     *
     * @param cod
     * @param notes
     * @param old_kind
     * @param new_kind
     * @param old_pos
     * @param new_pos
     * @param user
     * @return
     */
    public boolean insert_modpay(String cod, String notes, String old_kind, String new_kind, String old_pos, String new_pos, String user) {
        try {
            String ins = "INSERT INTO ch_transaction_file (cod_tr,directory,filename,size,user) VALUES (?,?,?,?,?)";
            PreparedStatement ps0 = this.c.prepareStatement(ins, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps0.setString(1, cod);
            ps0.setString(2, "MODPAY#" + notes);
            ps0.setString(3, old_kind + ";" + new_kind);
            ps0.setString(4, old_pos + ";" + new_pos);
            ps0.setString(5, user);
            ps0.execute();
            insertValue_agg(ps0, null, "000", null, user);
            return true;
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return false;
    }

    /**
     *
     * @return
     */
    public List<String> list_transaction_modify_ch() {
        List<String> list = new ArrayList<>();
        try {
            String sql = "SELECT distinct(cod_tr) FROM ch_transaction_file WHERE directory LIKE 'MODPAY#%' AND cod_tr NOT LIKE 'NC%'";
            ResultSet rs = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql);
            while (rs.next()) {
                list.add(rs.getString(1));
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return list;
    }

    /**
     *
     * @return
     */
    public List<String> list_transaction_modify_nc() {
        List<String> list = new ArrayList<>();
        try {
            String sql = "SELECT distinct(cod_tr) FROM ch_transaction_file WHERE directory LIKE 'MODPAY#%' AND cod_tr LIKE 'NC%' ";
            ResultSet rs = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql);
            while (rs.next()) {
                list.add(rs.getString(1));
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return list;
    }

    /**
     *
     * @param cod
     * @return
     */
    public ArrayList<Ch_transaction_file> list_transaction_modify(String cod) {
        ArrayList<Ch_transaction_file> list = new ArrayList<>();
        try {
            String sql = "SELECT directory,filename,size,user,data FROM ch_transaction_file WHERE cod_tr = ? AND directory LIKE ? ORDER BY data";
            PreparedStatement ps0 = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps0.setString(1, cod);
            ps0.setString(2, "MODPAY#%");
            ResultSet rs = ps0.executeQuery();
            while (rs.next()) {
                
                Ch_transaction_file chf = new Ch_transaction_file(cod,
                        replace(rs.getString(1), "MODPAY#%", ""),
                        rs.getString(2).split(";")[0], rs.getString(2).split(";")[1],
                        rs.getString(3).split(";")[0], rs.getString(3).split(";")[1],
                        rs.getString(4), rs.getString(5));
                list.add(chf);
            }
//            MODPAY#
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return list;
    }

    /**
     *
     * @param filiale
     * @param cod
     * @return
     */
    public NC_causal get_causale_vendita(String filiale, String cod) {
        try {
            String sql = "SELECT * FROM nc_causali WHERE filiale = ? AND gruppo_nc = ? AND de_causale_nc LIKE ? AND annullato = ? ORDER BY causale_nc";
            PreparedStatement ps0 = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps0.setString(1, filiale);
            ps0.setString(2, cod);
            ps0.setString(3, "VENDITA%");
            ps0.setString(4, "0");
            ResultSet rs = ps0.executeQuery();
            if (rs.next()) {
                NC_causal nc1 = new NC_causal();
                nc1.setFiliale(rs.getString("filiale"));
                nc1.setGruppo_nc(rs.getString("gruppo_nc"));
                nc1.setCausale_nc(rs.getString("causale_nc"));
                nc1.setDe_causale_nc(visualizzaStringaMySQL(rs.getString("de_causale_nc")));
                nc1.setFg_in_out(rs.getString("fg_in_out"));
                nc1.setIp_prezzo_nc(rs.getString("ip_prezzo_nc"));
                nc1.setFg_tipo_transazione_nc(rs.getString("fg_tipo_transazione_nc"));
                nc1.setAnnullato(rs.getString("annullato"));
                nc1.setNc_de(rs.getString("nc_de"));
                nc1.setFg_batch(rs.getString("fg_batch"));
                nc1.setFg_gruppo_stampa(rs.getString("fg_gruppo_stampa"));
                nc1.setFg_scontrino(rs.getString("fg_scontrino"));
                nc1.setTicket_fee_type(rs.getString("ticket_fee_type"));
                nc1.setTicket_fee(rs.getString("ticket_fee"));
                nc1.setMax_ticket(rs.getString("max_ticket"));
                nc1.setData(rs.getString("data"));
                nc1.setBonus(rs.getString("bonus"));
                nc1.setCodice_integr(rs.getString("codice_integr"));
                nc1.setPaymat(rs.getString("paymat"));
                nc1.setDocric(rs.getString("docric"));
                return nc1;
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return null;
    }

    /**
     *
     * @param d1
     * @param d2
     * @param branch
     * @param operatori
     * @return
     */
    public ArrayList<String[]> list_pending(String d1, String d2, ArrayList<String> branch, List<String> operatori) {
        
        ArrayList<String[]> out = new ArrayList<>();
        
        String sql = "SELECT * FROM tr_sblocco WHERE descr LIKE '%SBLOCCO OPERAZIONI PENDING%' ";
        
        if (d1 != null && !d1.equals("")) {
            sql = sql + "AND timestamp >= '" + d1 + " 00:00:00' ";
        }
        if (d2 != null && !d2.equals("")) {
            sql = sql + "AND timestamp <= '" + d2 + " 23:59:59' ";
        }
        
        String filwhere = "";
        for (int i = 0; i < branch.size(); i++) {
            filwhere = filwhere + "filiale = '" + branch.get(i) + "' OR ";
        }
        
        if (filwhere.length() > 3) {
            sql = sql + " AND (" + filwhere.substring(0, filwhere.length() - 3).trim() + ") ";
        }
        
        String opwhere = "";
        for (int i = 0; i < operatori.size(); i++) {
            opwhere = opwhere + "user = '" + operatori.get(i) + "' OR ";
        }
        
        if (opwhere.length() > 3) {
            sql = sql + " AND (" + opwhere.substring(0, opwhere.length() - 3).trim() + ") ";
        }
        
        sql = sql + " ORDER BY filiale,user,timestamp";
        
        try {
            ResultSet rs = this.c.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE).executeQuery(sql);
            while (rs.next()) {
                String[] res1 = {rs.getString("filiale"), rs.getString("user"), formatStringtoStringDate(rs.getString("timestamp"), patternsqldate, patternnormdate)};
                out.add(res1);
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @param cod_cl
     * @return
     */
    public double quarterly_transaction(List<String> cod_cl) {
        double tot = 0.0;
        
        if (cod_cl == null) {
            return tot;
        }
        try {
            String sql = "SELECT * FROM ch_transaction WHERE data > date_sub(curdate(), interval 90 day) AND del_fg='0'";
            
            String opwhere = "";
            for (int i = 0; i < cod_cl.size(); i++) {
                opwhere = opwhere + "cl_cod = '" + cod_cl.get(i) + "' OR ";
            }
            
            if (opwhere.length() > 3) {
                sql = sql + " AND (" + opwhere.substring(0, opwhere.length() - 3).trim() + ") ";
            }
            
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                if (rs.getString("tipotr").equals("B")) {
                    tot = tot + fd(rs.getString("total"));
                } else if (rs.getString("tipotr").equals("S")) {
                    tot = tot + fd(rs.getString("pay"));
                }
            }
            
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return tot;
    }

    /**
     *
     * @param cod_cl
     * @param filiale
     * @return
     */
    public double quarterly_transaction_nofiliale(List<String> cod_cl, String filiale) {
        double tot = 0.0;
        if (cod_cl == null) {
            return tot;
        }
        try {
            String sql = "SELECT * FROM ch_transaction WHERE data > date_sub(curdate(), interval 90 day) AND del_fg = '0' AND filiale <> '" + filiale + "'";
            
            String opwhere = "";
            for (int i = 0; i < cod_cl.size(); i++) {
                opwhere = opwhere + "cl_cod = '" + cod_cl.get(i) + "' OR ";
            }
            if (opwhere.length() > 3) {
                sql = sql + " AND (" + opwhere.substring(0, opwhere.length() - 3).trim() + ") ";
            }
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                if (rs.getString("tipotr").equals("B")) {
                    tot = tot + fd(rs.getString("total"));
                } else if (rs.getString("tipotr").equals("S")) {
                    tot = tot + fd(rs.getString("pay"));
                }
            }
            
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return tot;
    }

    /**
     *
     * @param tr
     * @return
     */
    public List<String> get_WK_TI(Ch_transaction tr) {
        List<String> out = new ArrayList<>();
        try {
            
            String sqldel = "SELECT cod FROM nc_transaction WHERE del_fg = ? AND (note = ? OR note = ?)";
            PreparedStatement ps = this.c.prepareStatement(sqldel, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, "0");
            ps.setString(2, "Welcome Kit Transaction From: " + tr.getFiliale() + tr.getId());
            ps.setString(3, "Top Italy Card Transaction From: " + tr.getFiliale() + tr.getId());
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                out.add(rs.getString(1));
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @param codtr
     * @return
     */
    public String getLink_last(String codtr) {
        String out = "transaction_ok_mod_new.jsp";
        
        try {
            String sql = "SELECT link FROM link WHERE codtr = ? ORDER BY data DESC LIMIT 1";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, codtr);
            ResultSet rs = ps.executeQuery();
            if (rs.next()) {
                String vo = substringAfterLast(rs.getString(1), "/");
                return vo;
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }

    /**
     *
     * @param es
     * @return
     */
//    public boolean insert_EET(EET_send es) {
//        try {
//            String ins = "INSERT INTO eet VALUES (?,?,?,?,?,?,?,?)";
//            PreparedStatement ps = this.c.prepareStatement(ins, ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE);
//            ps.setString(1, es.getCodtr());
//            ps.setString(2, es.getFik());
//            ps.setString(3, es.getBkp());
//            ps.setString(4, es.getPkp());
//            ps.setString(5, es.getData_tr());
//            ps.setString(6, es.getNumeroinvii());
//            ps.setString(7, es.getDate_invio());
//            ps.setString(8, es.getErrori());
//            ps.execute();
//            insertValue_agg(ps, null, "000", null, "eetservice");
//            return true;
//        } catch (SQLException ex) {
//            ex.printStackTrace();
//            insertTR("E", "System", Thread.currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
//        }
//        return false;
//    }
//
//    /**
//     *
//     * @param es
//     * @return
//     */
//    public boolean update_EET(EET_send es) {
//        try {
//            String ins = "UPDATE eet SET fik = ?, bkp = ?, pkp = ?,data_tr = ?,numeroinvii = ?,date_invio = ?,errori = ? WHERE codtr = ?";
//            PreparedStatement ps = this.c.prepareStatement(ins, ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE);
//            ps.setString(1, es.getFik());
//            ps.setString(2, es.getBkp());
//            ps.setString(3, es.getPkp());
//            ps.setString(4, es.getData_tr());
//            ps.setString(5, es.getNumeroinvii());
//            ps.setString(6, es.getDate_invio());
//            ps.setString(7, es.getErrori());
//            ps.setString(8, es.getCodtr());
//            ps.executeUpdate();
//            insertValue_agg(ps, null, "000", null, "eetservice");
//            return true;
//        } catch (SQLException ex) {
//            ex.printStackTrace();
//            insertTR("E", "System", Thread.currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
//        }
//        return false;
//    }
    /**
     *
     * @param codtr
     * @return //
     */
//    public EET_send get_EET(String codtr) {
//        try {
//            String sql = "SELECT * FROM eet WHERE codtr = ?";
//            PreparedStatement ps = this.c.prepareStatement(sql, ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE);
//            ps.setString(1, codtr);
//            ResultSet rs = ps.executeQuery();
//            if (rs.next()) {
//                EET_send es = new EET_send(rs.getString(1), rs.getString(2), rs.getString(3), rs.getString(4),
//                        rs.getString(5), rs.getString(6), rs.getString(7), rs.getString(8));
//                return es;
//            }
//        } catch (SQLException ex) {
//            ex.printStackTrace();
//            insertTR("E", "System", Thread.currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
//        }
//        return null;
//    }
    /**
     *
     * @param codtr
     * @return
     */
    public boolean EET_primoinvio(String codtr) {
        try {
            String sql = "SELECT codtr FROM eet WHERE codtr = ?";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, codtr);
            ResultSet rs = ps.executeQuery();
            if (rs.next()) {
                return false;
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return true;
    }

    /**
     *
     * @param nc_code
     * @return
     */
    public NC_vatcode get_NC_vatcode(String nc_code) {
        try {
            String sql = "SELECT * FROM nc_vatcode WHERE nc_gruppo = ?";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, nc_code);
            ResultSet rs = ps.executeQuery();
            if (rs.next()) {
                return new NC_vatcode(nc_code, rs.getString(2), rs.getString(3), rs.getString(4), rs.getString(5),
                        rs.getString(6), rs.getString(7), rs.getString(8), rs.getString(9), rs.getString(10));
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return new NC_vatcode(nc_code);
    }

    /**
     *
     * @param nc1
     * @param branchdest
     * @param username
     * @param dt_val
     * @param dt
     * @return
     */
    public boolean update_NC_vatcode(NC_vatcode nc1, String branchdest, String username, String dt_val, String dt) {
        try {
            String sql = "SELECT * FROM nc_vatcode WHERE nc_gruppo = ?";
            PreparedStatement ps = this.c.prepareStatement(sql, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, nc1.getNc_gruppo());
            ResultSet rs = ps.executeQuery();
            if (rs.next()) {
                //UPDATE
                String update = "UPDATE nc_vatcode SET totalprice = ?,accountingcode1 = ?,vatcode1 = ?,price1 = ?,department1 = ?,"
                        + "accountingcode2 = ?,vatcode2 = ?,price2 = ?,department2 = ? WHERE nc_gruppo = ?";
                PreparedStatement ps1 = this.c.prepareStatement(update, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
                ps1.setString(1, nc1.getTotalprice());
                ps1.setString(2, nc1.getAccountingcode1());
                ps1.setString(3, nc1.getVatcode1());
                ps1.setString(4, nc1.getPrice1());
                ps1.setString(5, nc1.getDepartment1());
                ps1.setString(6, nc1.getAccountingcode2());
                ps1.setString(7, nc1.getVatcode2());
                ps1.setString(8, nc1.getPrice2());
                ps1.setString(9, nc1.getDepartment2());
                ps1.setString(10, nc1.getNc_gruppo());
                ps1.executeUpdate();
                insertValue_agg(ps1, null, null, dt_val, username);
                return true;
            } else {
                //INSERT
                String insert = "INSERT INTO nc_vatcode VALUES (?,?,?,?,?,?,?,?,?,?)";
                PreparedStatement ps1 = this.c.prepareStatement(insert, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
                ps1.setString(1, nc1.getNc_gruppo());
                ps1.setString(2, nc1.getTotalprice());
                ps1.setString(3, nc1.getAccountingcode1());
                ps1.setString(4, nc1.getVatcode1());
                ps1.setString(5, nc1.getPrice1());
                ps1.setString(6, nc1.getDepartment1());
                ps1.setString(7, nc1.getAccountingcode2());
                ps1.setString(8, nc1.getVatcode2());
                ps1.setString(9, nc1.getPrice2());
                ps1.setString(10, nc1.getDepartment2());
                ps1.execute();
                insertValue_agg(ps1, null, null, dt_val, username);
                return true;
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return false;
    }
    
    public List<Marketing> list_consensi_attivi() {
        List<Marketing> out = new ArrayList<>();
        try {
            String sql = "SELECT SUBSTRING(c.cod_tr, 1, 3) AS filiale,c.data,c.cod_tr,cl.* "
                    + "FROM ch_transaction_file c, ch_transaction_client cl "
                    + "WHERE c.directory = 'MARKETING' AND c.data >= DATE_SUB(CURDATE(),INTERVAL 2 YEAR) "
                    + "AND c.filename=cl.codcl AND c.cod_tr=cl.codtr GROUP BY cl.codcl ORDER BY cl.cognome";
            try ( Statement st = this.c.createStatement();  ResultSet rs = st.executeQuery(sql)) {
                while (rs.next()) {
                    Marketing ma = new Marketing();
                    ma.setCodcl(rs.getString("cl.codcl"));
                    ma.setFiliale(rs.getString("filiale"));
                    ma.setData(df_ita.format(rs.getDate("c.data")));
                    ma.setDt( parseStringDate(rs.getString("c.data"), patternsqldate));
                    ma.setCodtr(rs.getString("c.cod_tr"));
                    Client bl = new Client();
                    bl.setCode(rs.getString("cl.codcl"));
                    bl.setCognome(rs.getString("cl.cognome"));
                    bl.setNome(rs.getString("cl.nome"));
                    bl.setSesso(rs.getString("cl.sesso"));
                    bl.setCodfisc(rs.getString("cl.codfisc"));
                    bl.setNazione(rs.getString("cl.nazione"));
                    bl.setCitta(rs.getString("cl.citta"));
                    bl.setIndirizzo(visualizzaStringaMySQL(rs.getString("cl.indirizzo")));
                    bl.setCap(rs.getString("cl.cap"));
                    bl.setProvincia(rs.getString("cl.provincia"));
                    bl.setCitta_nascita(rs.getString("cl.citta_nascita"));
                    bl.setProvincia_nascita(rs.getString("cl.provincia_nascita"));
                    bl.setNazione_nascita(rs.getString("cl.nazione_nascita"));
                    bl.setDt_nascita(rs.getString("cl.dt_nascita"));
                    bl.setTipo_documento(rs.getString("cl.tipo_documento"));
                    bl.setNumero_documento(rs.getString("cl.numero_documento"));
                    bl.setDt_rilascio_documento(rs.getString("cl.dt_rilascio_documento"));
                    bl.setDt_scadenza_documento(rs.getString("cl.dt_scadenza_documento"));
                    bl.setRilasciato_da_documento(rs.getString("cl.rilasciato_da_documento"));
                    bl.setLuogo_rilascio_documento(rs.getString("cl.luogo_rilascio_documento"));
                    bl.setEmail(rs.getString("cl.email"));
                    bl.setTelefono(rs.getString("cl.telefono"));
                    bl.setPerc_buy(rs.getString("cl.perc_buy"));
                    bl.setPerc_sell(rs.getString("cl.perc_sell"));
                    bl.setTimestamp(rs.getString("cl.timestamp"));
                    bl.setPep(rs.getString("cl.pep"));
                    ma.setCl(bl);
                    
                    out.add(ma);
                    
                }
            }
            
        } catch (Exception ex) {
            ex.printStackTrace();
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }
    
    public boolean edit_selectlevelrate(String id, String percent, String username) {
        try {
            String upd = "UPDATE selectlevelrate SET percent = ? WHERE id = ?";
            PreparedStatement ps = this.c.prepareStatement(upd, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE);
            ps.setString(1, percent);
            ps.setString(2, id);
            int x = ps.executeUpdate();
            if (x > 0) {
                insertValue_agg_NOCENTRAL(ps, null, null, null, username);
            }
            return x > 0;
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return false;
    }
    
    public double getPercent_levelrate(int id) {
        double out = 0.00;
        try {
            String upd = "SELECT percent FROM selectlevelrate WHERE id = ?";
            try ( PreparedStatement ps = this.c.prepareStatement(upd, TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE)) {
                ps.setInt(1, id);
                ResultSet rs = ps.executeQuery();
                if (rs.next()) {
                    out = fd(rs.getString(1));
                }
                rs.close();
            }
        } catch (SQLException ex) {
            insertTR("E", "System", currentThread().getStackTrace()[1].getMethodName() + ": " + ex.getMessage());
        }
        return out;
    }
    
}
